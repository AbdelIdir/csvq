//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const FUNCTION = 57447
const BEGIN = 57448
const RETURN = 57449
const IGNORE = 57450
const WITHIN = 57451
const VAR = 57452
const TIES = 57453
const NULLS = 57454
const COUNT = 57455
const LISTAGG = 57456
const AGGREGATE_FUNCTION = 57457
const FUNCTION_WITH_ADDITIONALS = 57458
const COMPARISON_OP = 57459
const STRING_OP = 57460
const SUBSTITUTION_OP = 57461
const UMINUS = 57462
const UPLUS = 57463

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"TIES",
	"NULLS",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_ADDITIONALS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1787

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 119,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	75, 1,
	79, 1,
	81, 1,
	-2, 119,
	-1, 100,
	57, 99,
	58, 99,
	59, 99,
	-2, 110,
	-1, 133,
	63, 313,
	67, 313,
	68, 313,
	-2, 329,
	-1, 141,
	75, 1,
	79, 1,
	81, 1,
	-2, 119,
	-1, 167,
	77, 247,
	-2, 313,
	-1, 177,
	81, 3,
	-2, 119,
	-1, 200,
	63, 313,
	67, 313,
	68, 313,
	-2, 254,
	-1, 214,
	63, 313,
	67, 313,
	68, 313,
	-2, 85,
	-1, 215,
	63, 313,
	67, 313,
	68, 313,
	-2, 86,
	-1, 226,
	69, 0,
	117, 0,
	124, 0,
	-2, 168,
	-1, 227,
	69, 0,
	117, 0,
	124, 0,
	-2, 170,
	-1, 264,
	75, 3,
	79, 3,
	81, 3,
	-2, 119,
	-1, 281,
	47, 315,
	49, 319,
	-2, 256,
	-1, 300,
	63, 313,
	67, 313,
	68, 313,
	-2, 240,
	-1, 314,
	63, 313,
	67, 313,
	68, 313,
	-2, 308,
	-1, 329,
	81, 1,
	-2, 119,
	-1, 335,
	69, 0,
	117, 0,
	124, 0,
	-2, 179,
	-1, 360,
	81, 3,
	-2, 119,
	-1, 363,
	63, 313,
	67, 313,
	68, 313,
	-2, 115,
	-1, 367,
	63, 313,
	67, 313,
	68, 313,
	-2, 159,
	-1, 379,
	49, 319,
	-2, 315,
	-1, 394,
	63, 313,
	67, 313,
	68, 313,
	-2, 105,
	-1, 434,
	81, 251,
	-2, 313,
	-1, 446,
	75, 1,
	79, 1,
	81, 1,
	-2, 119,
	-1, 448,
	63, 313,
	67, 313,
	68, 313,
	-2, 118,
	-1, 505,
	75, 1,
	79, 1,
	81, 1,
	-2, 119,
	-1, 507,
	77, 248,
	79, 248,
	81, 248,
	-2, 313,
	-1, 518,
	75, 1,
	79, 1,
	81, 1,
	-2, 25,
	-1, 528,
	63, 313,
	67, 313,
	68, 313,
	-2, 269,
	-1, 534,
	63, 313,
	67, 313,
	68, 313,
	-2, 109,
	-1, 549,
	63, 313,
	67, 313,
	68, 313,
	-2, 61,
	-1, 554,
	81, 5,
	-2, 119,
	-1, 566,
	81, 3,
	-2, 119,
	-1, 594,
	75, 5,
	79, 5,
	81, 5,
	-2, 119,
	-1, 600,
	81, 5,
	-2, 119,
	-1, 612,
	63, 313,
	67, 313,
	68, 313,
	-2, 238,
	-1, 634,
	63, 313,
	67, 313,
	68, 313,
	-2, 329,
	-1, 641,
	75, 3,
	79, 3,
	81, 3,
	-2, 119,
	-1, 655,
	75, 5,
	79, 5,
	81, 5,
	-2, 119,
	-1, 656,
	81, 7,
	-2, 119,
	-1, 678,
	75, 7,
	79, 7,
	81, 7,
	-2, 119,
	-1, 695,
	81, 5,
	-2, 119,
	-1, 701,
	81, 7,
	-2, 119,
	-1, 711,
	75, 5,
	79, 5,
	81, 5,
	-2, 119,
	-1, 716,
	75, 1,
	79, 5,
	81, 5,
	-2, 119,
	-1, 719,
	75, 5,
	79, 5,
	81, 5,
	-2, 27,
	-1, 724,
	107, 23,
	-2, 21,
	-1, 729,
	81, 7,
	-2, 119,
	-1, 742,
	75, 1,
	79, 1,
	81, 1,
	-2, 119,
	-1, 743,
	81, 3,
	-2, 119,
	-1, 747,
	75, 7,
	79, 7,
	81, 7,
	-2, 119,
	-1, 749,
	107, 47,
	-2, 44,
	-1, 755,
	81, 3,
	-2, 119,
	-1, 757,
	75, 1,
	79, 1,
	81, 1,
	-2, 119,
}

const yyPrivate = 57344

const yyLast = 2627

var yyAct = [...]int{

	70, 23, 727, 23, 738, 426, 97, 268, 224, 1,
	693, 47, 406, 180, 485, 676, 575, 564, 607, 157,
	72, 457, 490, 299, 301, 373, 116, 289, 465, 121,
	122, 380, 280, 2, 378, 281, 296, 449, 364, 491,
	327, 194, 77, 286, 75, 183, 189, 105, 136, 57,
	112, 146, 292, 343, 73, 263, 383, 396, 384, 385,
	386, 381, 142, 401, 379, 160, 111, 150, 160, 149,
	148, 160, 288, 279, 151, 152, 115, 150, 100, 450,
	150, 49, 149, 148, 151, 152, 161, 151, 152, 175,
	548, 219, 525, 140, 510, 484, 460, 154, 153, 155,
	437, 278, 145, 185, 185, 451, 179, 452, 399, 179,
	196, 185, 221, 202, 543, 46, 713, 704, 369, 702,
	209, 210, 690, 689, 213, 688, 84, 677, 687, 674,
	668, 199, 666, 594, 661, 542, 170, 37, 660, 222,
	382, 651, 23, 643, 626, 585, 184, 184, 563, 188,
	143, 142, 3, 556, 197, 550, 150, 144, 149, 148,
	547, 245, 247, 151, 152, 537, 106, 524, 102, 37,
	103, 512, 101, 511, 509, 154, 153, 155, 23, 271,
	145, 502, 499, 185, 496, 483, 272, 106, 185, 278,
	278, 185, 432, 254, 325, 303, 312, 228, 244, 243,
	691, 675, 662, 317, 650, 649, 249, 250, 648, 647,
	625, 265, 619, 613, 254, 246, 248, 100, 262, 603,
	251, 601, 581, 291, 38, 370, 277, 422, 143, 142,
	328, 405, 155, 417, 150, 144, 149, 148, 404, 323,
	586, 151, 152, 587, 71, 294, 295, 316, 67, 26,
	403, 26, 402, 313, 351, 349, 347, 318, 308, 176,
	108, 165, 338, 164, 111, 23, 322, 461, 216, 49,
	324, 332, 616, 331, 341, 203, 553, 303, 140, 185,
	376, 108, 589, 168, 387, 523, 521, 389, 200, 185,
	169, 673, 623, 604, 514, 253, 256, 38, 265, 206,
	326, 368, 108, 600, 604, 514, 55, 96, 377, 407,
	410, 376, 376, 353, 49, 390, 554, 407, 653, 622,
	356, 391, 184, 133, 372, 418, 621, 407, 419, 415,
	23, 39, 40, 41, 42, 43, 44, 620, 427, 423,
	395, 588, 397, 398, 582, 536, 618, 513, 412, 408,
	442, 46, 205, 746, 315, 736, 720, 334, 156, 336,
	337, 23, 715, 147, 705, 698, 659, 162, 163, 425,
	120, 376, 167, 441, 207, 173, 174, 640, 628, 605,
	519, 504, 433, 185, 346, 424, 355, 755, 730, 469,
	26, 470, 729, 696, 265, 701, 360, 695, 567, 330,
	303, 476, 566, 329, 39, 40, 41, 42, 43, 44,
	410, 464, 695, 376, 463, 468, 447, 214, 215, 471,
	459, 478, 252, 119, 344, 482, 26, 252, 731, 223,
	710, 225, 226, 227, 493, 568, 475, 234, 235, 236,
	237, 238, 239, 240, 479, 480, 481, 23, 171, 445,
	439, 730, 440, 303, 330, 567, 66, 45, 752, 45,
	745, 376, 154, 185, 155, 515, 722, 145, 185, 714,
	456, 664, 37, 639, 438, 98, 438, 368, 438, 559,
	518, 114, 114, 300, 118, 407, 527, 526, 520, 376,
	376, 522, 314, 531, 535, 551, 438, 544, 529, 126,
	127, 503, 517, 533, 540, 451, 23, 90, 91, 92,
	572, 93, 94, 26, 560, 143, 142, 195, 333, 23,
	335, 150, 144, 149, 148, 261, 376, 47, 151, 152,
	230, 185, 93, 185, 229, 231, 565, 155, 339, 340,
	258, 345, 436, 744, 257, 657, 178, 574, 293, 410,
	466, 354, 260, 259, 192, 23, 357, 124, 125, 128,
	129, 37, 590, 508, 363, 367, 578, 23, 580, 362,
	593, 591, 95, 233, 232, 191, 192, 193, 26, 394,
	185, 579, 532, 606, 530, 467, 61, 10, 155, 10,
	462, 145, 275, 95, 645, 23, 474, 615, 45, 276,
	265, 23, 454, 455, 473, 632, 638, 562, 624, 26,
	629, 561, 494, 393, 407, 614, 635, 637, 181, 428,
	492, 383, 608, 384, 385, 386, 642, 570, 571, 56,
	110, 644, 109, 434, 45, 139, 273, 438, 557, 143,
	142, 555, 23, 498, 400, 150, 144, 149, 148, 321,
	182, 448, 151, 152, 309, 310, 23, 23, 683, 114,
	48, 290, 190, 311, 682, 667, 132, 50, 51, 52,
	53, 54, 46, 611, 90, 265, 685, 135, 134, 23,
	99, 138, 697, 113, 76, 74, 682, 117, 300, 694,
	8, 20, 130, 131, 374, 26, 23, 665, 7, 438,
	6, 342, 23, 709, 166, 706, 63, 595, 297, 682,
	298, 707, 23, 38, 284, 283, 282, 23, 506, 682,
	23, 45, 617, 728, 507, 560, 82, 62, 10, 65,
	23, 737, 723, 735, 58, 629, 64, 682, 59, 569,
	453, 367, 366, 23, 23, 750, 365, 595, 23, 137,
	528, 749, 361, 595, 26, 682, 23, 274, 23, 472,
	392, 159, 534, 749, 10, 749, 104, 26, 538, 539,
	541, 16, 68, 201, 123, 273, 204, 265, 273, 208,
	14, 549, 211, 212, 13, 12, 45, 9, 15, 265,
	679, 518, 5, 11, 217, 218, 220, 680, 266, 596,
	159, 4, 678, 26, 264, 0, 699, 0, 595, 595,
	0, 447, 679, 517, 0, 26, 0, 45, 0, 0,
	39, 40, 41, 42, 43, 44, 0, 38, 0, 712,
	0, 595, 0, 0, 0, 679, 0, 409, 0, 718,
	0, 0, 0, 26, 0, 719, 285, 186, 595, 26,
	0, 10, 0, 0, 595, 0, 609, 739, 486, 487,
	488, 489, 158, 679, 595, 612, 0, 0, 0, 724,
	319, 320, 595, 0, 0, 753, 0, 679, 0, 0,
	0, 679, 595, 712, 0, 718, 630, 631, 634, 679,
	26, 719, 646, 0, 0, 724, 724, 0, 652, 0,
	595, 158, 0, 45, 26, 26, 0, 0, 724, 375,
	724, 0, 0, 0, 0, 0, 10, 38, 0, 91,
	669, 670, 671, 672, 0, 0, 0, 26, 0, 0,
	358, 359, 0, 0, 39, 40, 41, 42, 43, 44,
	411, 413, 0, 0, 26, 0, 159, 10, 692, 0,
	26, 108, 0, 383, 0, 384, 385, 386, 381, 0,
	26, 379, 45, 0, 703, 26, 0, 0, 26, 159,
	700, 0, 0, 0, 0, 45, 0, 38, 26, 0,
	0, 0, 0, 420, 421, 708, 0, 187, 0, 0,
	0, 26, 26, 0, 0, 0, 26, 186, 0, 0,
	458, 0, 0, 0, 26, 0, 26, 159, 0, 159,
	0, 45, 0, 0, 733, 734, 0, 0, 0, 740,
	0, 0, 0, 45, 39, 40, 41, 42, 43, 44,
	0, 0, 0, 10, 0, 0, 0, 754, 0, 159,
	0, 159, 458, 159, 0, 0, 0, 158, 0, 0,
	0, 45, 0, 0, 0, 98, 0, 45, 0, 0,
	0, 0, 0, 154, 153, 155, 0, 0, 145, 0,
	371, 0, 0, 0, 0, 495, 0, 497, 0, 0,
	500, 38, 0, 0, 39, 40, 41, 42, 43, 44,
	375, 0, 10, 0, 0, 0, 0, 0, 45, 38,
	0, 71, 0, 0, 0, 10, 516, 0, 414, 0,
	416, 0, 45, 45, 159, 0, 143, 142, 545, 546,
	0, 0, 150, 144, 149, 148, 0, 60, 443, 151,
	152, 444, 0, 0, 0, 45, 0, 0, 0, 0,
	158, 10, 158, 0, 158, 0, 0, 0, 107, 0,
	0, 0, 45, 10, 0, 458, 0, 552, 45, 38,
	0, 0, 0, 0, 558, 154, 153, 155, 45, 0,
	145, 0, 0, 45, 0, 0, 45, 388, 0, 0,
	0, 10, 0, 98, 0, 0, 45, 10, 39, 40,
	41, 42, 43, 44, 0, 0, 154, 153, 155, 45,
	45, 145, 38, 0, 45, 0, 39, 40, 41, 42,
	43, 44, 45, 172, 45, 501, 159, 0, 143, 142,
	602, 0, 186, 0, 150, 144, 149, 148, 10, 610,
	241, 151, 152, 242, 0, 0, 0, 0, 0, 0,
	0, 0, 10, 10, 0, 159, 0, 0, 0, 143,
	142, 0, 0, 627, 0, 150, 144, 149, 148, 0,
	633, 0, 151, 152, 242, 10, 39, 40, 41, 42,
	43, 44, 383, 0, 384, 385, 386, 381, 576, 577,
	379, 0, 10, 0, 0, 0, 0, 107, 10, 654,
	0, 0, 0, 159, 0, 658, 255, 255, 10, 0,
	663, 0, 0, 10, 0, 0, 10, 0, 0, 39,
	40, 41, 42, 43, 44, 287, 10, 573, 287, 0,
	684, 0, 0, 0, 0, 686, 0, 0, 0, 10,
	10, 0, 0, 0, 10, 0, 154, 153, 155, 0,
	0, 145, 10, 0, 10, 0, 592, 0, 0, 38,
	90, 91, 92, 0, 93, 94, 46, 0, 255, 0,
	255, 255, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 717, 0, 0, 0, 721, 0, 0, 0, 154,
	153, 155, 0, 732, 145, 255, 348, 350, 352, 143,
	142, 0, 741, 757, 636, 150, 144, 149, 148, 0,
	0, 584, 151, 152, 0, 0, 751, 85, 0, 0,
	0, 86, 0, 756, 0, 95, 287, 0, 83, 0,
	107, 0, 107, 107, 38, 90, 91, 92, 88, 93,
	94, 46, 143, 142, 0, 0, 0, 0, 150, 144,
	149, 148, 0, 0, 71, 151, 152, 38, 90, 91,
	92, 0, 93, 94, 46, 0, 39, 40, 81, 89,
	80, 44, 0, 0, 0, 0, 0, 71, 0, 0,
	78, 79, 87, 69, 477, 255, 0, 255, 0, 255,
	0, 0, 85, 0, 0, 0, 86, 0, 0, 0,
	95, 0, 0, 83, 0, 0, 0, 255, 0, 0,
	0, 0, 0, 88, 38, 85, 0, 0, 0, 86,
	287, 46, 0, 95, 0, 0, 83, 0, 38, 90,
	91, 92, 0, 93, 94, 46, 88, 0, 0, 0,
	0, 39, 40, 81, 89, 80, 44, 0, 71, 0,
	0, 0, 0, 0, 0, 78, 79, 87, 69, 198,
	0, 0, 0, 0, 39, 40, 81, 89, 80, 44,
	0, 0, 0, 0, 255, 49, 0, 0, 78, 79,
	87, 69, 0, 0, 0, 0, 85, 0, 0, 0,
	86, 0, 0, 0, 95, 0, 0, 83, 0, 0,
	287, 0, 0, 0, 0, 287, 0, 88, 0, 0,
	0, 38, 90, 91, 92, 0, 93, 94, 46, 0,
	0, 39, 40, 41, 42, 43, 44, 0, 0, 0,
	0, 71, 0, 0, 0, 39, 40, 81, 89, 80,
	44, 0, 0, 0, 0, 0, 0, 302, 255, 78,
	79, 87, 69, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 287, 85,
	287, 0, 0, 86, 0, 0, 0, 95, 0, 0,
	83, 38, 90, 91, 92, 0, 93, 94, 46, 0,
	88, 0, 154, 153, 155, 0, 0, 145, 0, 0,
	0, 71, 0, 0, 0, 0, 38, 90, 91, 92,
	255, 93, 94, 46, 0, 0, 0, 287, 39, 40,
	305, 306, 304, 307, 0, 0, 71, 0, 0, 0,
	302, 0, 78, 79, 87, 69, 0, 0, 0, 85,
	0, 0, 0, 86, 0, 143, 142, 95, 0, 37,
	83, 150, 144, 149, 148, 0, 0, 583, 151, 152,
	88, 0, 0, 0, 85, 0, 0, 0, 86, 0,
	0, 0, 95, 0, 0, 83, 38, 90, 91, 92,
	0, 93, 94, 46, 0, 88, 0, 0, 39, 40,
	81, 89, 80, 44, 0, 0, 71, 0, 0, 0,
	0, 0, 78, 79, 87, 69, 154, 153, 155, 0,
	0, 145, 0, 39, 40, 81, 89, 80, 44, 0,
	747, 0, 0, 0, 38, 0, 0, 78, 79, 87,
	69, 46, 0, 0, 85, 0, 33, 0, 86, 0,
	0, 0, 95, 0, 0, 83, 21, 0, 0, 22,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 143,
	142, 0, 0, 0, 0, 150, 144, 149, 148, 0,
	0, 0, 151, 152, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 40, 305, 306, 304, 307, 0,
	0, 0, 37, 0, 748, 0, 726, 78, 79, 87,
	69, 0, 25, 38, 0, 30, 28, 29, 27, 0,
	46, 0, 0, 0, 0, 33, 0, 31, 32, 269,
	270, 19, 34, 35, 36, 21, 0, 599, 22, 0,
	24, 39, 40, 41, 42, 43, 44, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 154, 153, 155, 0, 0, 145,
	0, 37, 0, 681, 0, 598, 0, 0, 0, 0,
	743, 25, 0, 0, 30, 28, 29, 27, 0, 0,
	154, 153, 155, 0, 0, 145, 31, 32, 269, 270,
	0, 34, 35, 36, 742, 0, 599, 0, 0, 24,
	39, 40, 41, 42, 43, 44, 0, 143, 142, 0,
	0, 0, 0, 150, 144, 149, 148, 154, 153, 155,
	151, 152, 145, 0, 0, 0, 0, 154, 153, 155,
	0, 716, 145, 143, 142, 0, 0, 0, 0, 150,
	144, 149, 148, 154, 153, 155, 151, 152, 145, 0,
	0, 0, 0, 154, 153, 155, 0, 711, 145, 0,
	38, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	143, 142, 33, 0, 0, 0, 150, 144, 149, 148,
	143, 142, 21, 151, 152, 22, 150, 144, 149, 148,
	0, 0, 431, 151, 152, 0, 143, 142, 0, 0,
	0, 0, 150, 144, 149, 148, 143, 142, 0, 151,
	152, 49, 150, 144, 149, 148, 0, 0, 0, 151,
	152, 154, 153, 155, 0, 0, 145, 0, 37, 0,
	267, 0, 18, 0, 0, 0, 0, 656, 25, 0,
	0, 30, 28, 29, 27, 0, 0, 154, 153, 155,
	0, 0, 145, 31, 32, 269, 270, 19, 34, 35,
	36, 655, 0, 0, 0, 0, 24, 39, 40, 41,
	42, 43, 44, 0, 143, 142, 0, 0, 0, 0,
	150, 144, 149, 148, 154, 153, 155, 151, 152, 145,
	0, 0, 0, 0, 0, 0, 0, 0, 641, 0,
	143, 142, 0, 0, 0, 0, 150, 144, 149, 148,
	154, 153, 155, 151, 152, 145, 0, 0, 0, 0,
	154, 153, 155, 0, 505, 145, 0, 0, 0, 0,
	154, 153, 155, 0, 446, 145, 0, 143, 142, 0,
	0, 0, 0, 150, 144, 149, 148, 154, 153, 155,
	151, 152, 145, 0, 0, 0, 0, 0, 0, 0,
	0, 435, 0, 143, 142, 0, 0, 0, 0, 150,
	144, 149, 148, 143, 142, 0, 151, 152, 0, 150,
	144, 149, 148, 143, 142, 0, 151, 152, 0, 150,
	144, 149, 148, 0, 0, 430, 151, 152, 0, 0,
	143, 142, 0, 0, 0, 0, 150, 144, 149, 148,
	154, 153, 155, 151, 152, 145, 0, 0, 0, 0,
	154, 153, 155, 38, 0, 145, 177, 0, 0, 0,
	46, 0, 0, 0, 141, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 21, 0, 0, 22, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 143, 142, 0, 0, 0, 0, 150,
	144, 149, 148, 143, 142, 0, 151, 152, 0, 150,
	144, 149, 148, 0, 0, 0, 151, 152, 0, 0,
	0, 37, 0, 725, 0, 726, 0, 154, 153, 155,
	0, 25, 145, 0, 30, 28, 29, 27, 429, 153,
	155, 0, 0, 145, 0, 0, 31, 32, 0, 0,
	19, 34, 35, 36, 0, 0, 599, 0, 0, 24,
	39, 40, 41, 42, 43, 44, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	143, 142, 0, 0, 0, 0, 150, 144, 149, 148,
	0, 143, 142, 151, 152, 38, 0, 150, 144, 149,
	148, 0, 46, 0, 151, 152, 0, 33, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 21, 0, 0,
	22, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 38, 0, 0, 0, 0, 0,
	0, 46, 0, 0, 0, 0, 33, 0, 0, 0,
	0, 0, 0, 37, 0, 597, 21, 598, 0, 22,
	0, 0, 0, 25, 0, 0, 30, 28, 29, 27,
	0, 0, 0, 0, 0, 0, 0, 0, 31, 32,
	0, 0, 0, 34, 35, 36, 0, 0, 599, 0,
	0, 24, 39, 40, 41, 42, 43, 44, 0, 0,
	0, 0, 37, 0, 17, 0, 18, 0, 0, 0,
	0, 0, 25, 0, 0, 30, 28, 29, 27, 0,
	0, 0, 0, 0, 0, 0, 0, 31, 32, 0,
	0, 19, 34, 35, 36, 0, 0, 0, 0, 0,
	24, 39, 40, 41, 42, 43, 44,
}
var yyPact = [...]int{

	2510, -1000, 2510, -1000, -1000, 147, 147, 147, 147, 147,
	147, -1000, -1000, -1000, -1000, -1000, -1000, 1692, 1692, 147,
	153, 602, 600, 136, 661, 1500, 147, 340, 1095, 1095,
	468, 147, 147, 654, 1692, 673, 672, 610, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 159, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2256, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 159, -1000, -1000, 1667,
	-62, -47, -1000, -1000, -1000, -1000, -1000, -1000, 1692, 1692,
	135, 133, -1000, 1692, 166, 132, 1692, 1692, 1095, 131,
	-1000, -1000, -1000, -1000, -1000, -1000, 2246, 483, -26, -1000,
	580, 630, 1198, 973, 648, 518, 446, -1000, 400, 1095,
	1198, 1420, 147, -19, 156, 147, 269, -1000, 147, 1095,
	1095, 147, 147, 1095, -1000, -1000, -1000, -1000, 1692, 1692,
	-1000, -1000, 144, 1989, -41, 147, -1000, -20, 1095, -1000,
	1692, 2510, 1692, 1692, 1692, 471, 467, 513, 1692, 1692,
	1692, 1692, 1692, 1692, 1692, -1000, 1101, 70, 69, 174,
	913, 913, -1000, -1000, 446, 446, 350, 2333, 86, 86,
	477, 492, -1000, 522, -1000, 456, 446, 2056, 1095, 661,
	548, 558, 1198, 57, -1000, -1000, -1000, 823, 58, 643,
	823, 488, 488, 488, 1597, -1000, 130, 627, -1000, 67,
	1132, -1000, 661, 1692, -1000, 270, 119, 129, -1000, 147,
	147, -1000, -1000, 629, 2333, 2333, 502, -1000, -1000, 1692,
	-1000, 610, 172, 2333, 324, -43, -56, -56, 523, 1692,
	86, 1692, 86, 86, -46, -46, -1000, -1000, -1000, 398,
	522, -1000, 1692, -1000, -1000, -1000, -1000, -1000, -1000, 1692,
	1514, 345, 1692, -1000, 1667, -1000, -1000, 86, 128, 127,
	126, 471, 1692, 305, 2056, -1000, -1000, 1692, -1000, 147,
	147, 316, -1000, -23, 524, 1692, 1762, 97, 1198, 1077,
	643, 8, -1000, 1155, -1000, -1000, 293, -1000, 823, 574,
	1692, -1000, 174, -1000, 174, 174, -1000, -24, 622, -1000,
	2333, -1000, -1000, -65, 124, 122, 110, 103, 1095, 709,
	220, 1077, -1000, -1000, 2333, 400, 1095, 400, 104, -1000,
	-1000, 661, 147, 147, -1000, 99, 1095, 304, 324, 2510,
	1692, -1000, -1000, 2344, -1000, -56, -1000, -1000, -1000, 2166,
	1963, 63, 301, 350, 1692, 2183, 478, 65, -1000, 65,
	-1000, 65, -1000, 287, 999, 373, -1000, 2156, -1000, -1000,
	2056, -1000, 1692, 33, -1000, -25, 560, 2333, -1000, 86,
	1077, -1000, -31, 648, -36, 143, -68, -1000, 543, 573,
	501, 538, 823, -1000, -1000, -1000, -1000, -1000, 1095, -1000,
	1095, 643, 564, 555, 2333, 496, -1000, -1000, 496, 1597,
	1095, 1345, 446, 446, 446, 1692, 56, -37, 827, 1095,
	585, -1000, 1077, 575, 147, 55, 147, 621, 53, 147,
	-1000, -1000, 400, 52, 427, 300, 379, -1000, 2146, 1692,
	-1000, -1000, -1000, -1000, 2333, 1692, 86, 45, -38, 44,
	42, -1000, 254, 185, 669, 147, 2056, 299, 2333, -1000,
	433, 175, 1762, 173, -1000, -1000, -1000, 38, -40, 643,
	1077, 1692, 823, 537, 501, 535, -1000, 823, -1000, -1000,
	-1000, -1000, -1000, 1692, 1692, -1000, -1000, 249, 36, 1692,
	1514, 1692, 6, -1000, 1095, -1000, -1000, -1000, 1077, 1077,
	31, -42, 1692, 26, 1095, -1000, 192, -1000, 210, 619,
	-1000, 24, 616, 147, 405, 2510, 522, 2333, -1000, -1000,
	86, -1000, -1000, -1000, 568, 19, -1000, 323, 2510, 359,
	-1000, -1000, -1000, 596, 489, 1077, -1000, -1000, 2333, 1224,
	823, 534, 823, 905, 2333, -1000, 94, 248, 1618, 1272,
	16, 111, 245, 170, -1000, -1000, -1000, 827, 1095, 2333,
	-1000, -1000, -1000, 400, 2461, 197, -1000, 93, -1000, 147,
	-1000, -1000, 91, 184, 298, 323, 2056, 1692, 147, -1000,
	-1000, -1000, 86, -1000, -1000, -1000, 1692, 85, 905, 823,
	1224, 251, 84, 241, 230, 223, 196, 669, 82, 15,
	-1000, -1000, 147, 297, 2461, -1000, -1000, 1692, 1692, 1443,
	2461, 400, -1000, 580, 567, 399, 296, 380, -1000, 2120,
	-1000, -1000, 2333, 1095, 905, -1000, 14, 580, 553, 251,
	81, 80, 77, 76, 12, 251, 222, -1000, 147, -1000,
	2083, 2057, 482, -1000, 1989, 285, 9, 5, 74, 147,
	397, 2056, 3, -1000, -1000, 1692, 1, 251, 251, 251,
	251, 195, 0, 73, -1000, 2461, 1889, 1095, -1000, 147,
	-1000, -1000, 580, -1000, 147, -1000, -1000, -1000, -1000, -1,
	-4, -6, -7, 72, -1000, 251, 318, 284, 1889, -1000,
	-1000, 1692, -1000, 315, -1000, -10, -1000, -1000, -1000, -1000,
	-1000, 251, -12, 283, 333, 2461, 1692, 379, 354, -1000,
	1979, 1889, -1000, -13, -1000, 395, 281, -1000, 1953, 379,
	147, 1889, 275, -1000, 147, 392, 2319, -1000, 313, 2461,
	352, -1000, 147, -1000, -1000, 1692, 1692, 274, 313, 1889,
	1692, 147, -1000, 1916, 1890, 480, 386, 272, 376, -1000,
	1732, -1000, 2319, 1810, 1095, 147, 384, 1889, 1692, -1000,
	307, -1000, 147, -1000, 1315, 1810, -1000, 1810,
}
var yyPgo = [...]int{

	0, 8, 55, 15, 127, 152, 33, 133, 804, 802,
	801, 799, 7, 798, 797, 793, 788, 787, 39, 22,
	14, 785, 784, 780, 774, 772, 771, 792, 57, 47,
	766, 46, 27, 760, 759, 13, 757, 37, 752, 691,
	749, 48, 49, 629, 288, 23, 126, 100, 38, 746,
	742, 740, 739, 1127, 738, 736, 734, 729, 586, 727,
	726, 24, 272, 722, 43, 716, 715, 35, 714, 16,
	710, 708, 706, 704, 53, 701, 21, 19, 32, 45,
	12, 36, 700, 698, 694, 25, 690, 5, 40, 18,
	17, 689, 10, 4, 2, 0, 20, 54, 685, 44,
	684, 42, 456, 6, 248, 683, 50, 41, 51, 34,
	28, 31, 52, 681, 363, 660,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 7, 7, 8, 8, 9, 9, 10,
	10, 10, 10, 10, 11, 11, 11, 11, 11, 11,
	12, 12, 13, 13, 13, 14, 14, 14, 15, 15,
	15, 15, 16, 16, 17, 17, 17, 17, 17, 17,
	18, 18, 19, 19, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 22, 22, 22, 22, 23, 23,
	24, 24, 24, 24, 24, 24, 24, 25, 25, 26,
	26, 26, 26, 26, 27, 28, 28, 28, 28, 29,
	29, 30, 31, 31, 32, 32, 33, 33, 34, 34,
	35, 35, 36, 36, 36, 37, 37, 38, 38, 39,
	39, 40, 40, 41, 41, 42, 42, 42, 42, 42,
	42, 43, 43, 43, 43, 43, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	45, 46, 46, 47, 47, 48, 48, 49, 49, 50,
	50, 51, 51, 51, 52, 52, 53, 54, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 56, 56, 56,
	56, 56, 56, 56, 57, 57, 57, 57, 58, 58,
	59, 59, 59, 59, 60, 60, 60, 60, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 62, 63, 63,
	64, 64, 65, 65, 65, 66, 67, 67, 67, 67,
	67, 67, 68, 68, 68, 68, 68, 69, 69, 69,
	70, 70, 71, 71, 71, 72, 73, 73, 74, 74,
	75, 75, 76, 76, 77, 77, 78, 78, 79, 79,
	80, 80, 81, 81, 82, 82, 82, 82, 83, 84,
	85, 85, 86, 86, 87, 87, 88, 88, 89, 89,
	90, 90, 91, 91, 92, 92, 93, 93, 94, 94,
	95, 95, 95, 95, 95, 95, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 103, 104, 105, 105, 106,
	106, 107, 107, 108, 108, 109, 109, 110, 110, 111,
	111, 111, 111, 112, 112, 113, 113, 114, 114, 115,
	115,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	9, 7, 9, 2, 8, 9, 7, 9, 2, 3,
	2, 2, 8, 9, 1, 8, 9, 1, 3, 3,
	2, 3, 2, 2, 6, 6, 8, 5, 7, 7,
	1, 3, 1, 3, 0, 1, 1, 2, 2, 6,
	3, 3, 4, 6, 7, 9, 6, 4, 10, 11,
	0, 1, 1, 1, 1, 2, 2, 5, 6, 5,
	3, 3, 5, 3, 5, 5, 4, 4, 4, 1,
	1, 3, 0, 2, 0, 2, 0, 3, 0, 2,
	0, 3, 0, 3, 4, 0, 2, 0, 2, 0,
	2, 6, 9, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 1, 3, 2, 4, 1,
	1, 0, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 4, 4, 6, 6, 4, 6, 4, 4,
	4, 6, 4, 4, 6, 4, 2, 3, 3, 3,
	3, 3, 2, 2, 3, 3, 2, 2, 3, 4,
	5, 5, 5, 1, 5, 7, 10, 12, 7, 8,
	9, 9, 9, 9, 11, 8, 10, 2, 0, 3,
	1, 1, 1, 2, 3, 1, 1, 1, 2, 3,
	1, 1, 5, 5, 6, 6, 4, 0, 2, 4,
	1, 1, 1, 3, 1, 5, 0, 1, 4, 2,
	0, 2, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 1, 3, 6, 9, 5, 8, 7, 3,
	1, 3, 5, 6, 4, 2, 0, 2, 4, 2,
	0, 2, 4, 2, 0, 2, 4, 2, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	3, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	1, 1, 1, 0, 1, 0, 1, 1, 1, 0,
	1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -10, -27, -82, -83, -86, -17,
	-58, -15, -21, -22, -23, -16, -26, 74, 76, 101,
	-39, 26, 29, -95, 110, 82, -104, 88, 86, 87,
	85, 97, 98, 16, 102, 103, 104, 72, 4, 111,
	112, 113, 114, 115, 116, -102, 11, -1, -115, 122,
	-115, -115, -115, -115, -115, -44, -43, -42, -56, -54,
	-53, -58, -59, -72, -55, -57, -102, -104, -25, 128,
	-95, 24, -96, -97, -98, -99, -100, -101, 125, 126,
	115, 113, -60, 73, -46, 62, 66, 127, 83, 114,
	5, 6, 7, 9, 10, 70, -44, -103, -102, -115,
	-28, 19, 15, 17, -30, -29, 13, -53, 128, 30,
	30, 128, -106, -105, -102, -106, -95, -115, -102, 83,
	30, -95, -95, -24, 89, 90, 31, 32, 91, 92,
	-115, -115, 12, -44, 5, 5, -41, -40, -113, 25,
	119, 78, 118, 117, 124, 69, -108, -114, 126, 125,
	123, 130, 131, 65, 64, 66, -44, -77, -27, -39,
	133, 133, -44, -44, 128, 128, -73, -44, 117, 124,
	-108, -114, -53, -44, -44, -95, 128, 80, 63, 132,
	-35, 38, 20, -79, -64, -95, 24, 14, -79, -31,
	14, 57, 58, 59, -107, 71, -95, -64, 129, -77,
	-44, -115, 132, 119, -115, 83, 30, 105, -115, -95,
	-95, -115, -115, -95, -44, -44, 124, -115, -115, 132,
	-115, 132, -95, -44, -1, -44, -44, -44, -108, 67,
	63, 68, 61, 60, -44, -44, -44, -44, -44, -44,
	-44, 129, 132, 129, 129, -95, -97, -95, -97, -107,
	-107, -74, 77, -46, 128, -53, -46, 67, 63, 61,
	60, 69, -107, -2, -8, -6, -13, 74, -12, 99,
	100, -95, -103, -102, -36, 44, 41, -64, 132, 16,
	-78, -67, -65, -66, -68, 23, -64, -53, 14, -32,
	18, -78, -112, 60, -112, -112, -81, -71, -70, -45,
	-44, -61, 123, -95, 115, 113, 114, 116, 128, 27,
	28, 36, 129, -106, -44, 84, 128, 84, 128, -115,
	-115, 20, -42, -77, -41, 22, 128, -88, -87, 79,
	75, -99, -101, -44, -46, -44, -46, -46, -77, -44,
	-44, -45, -75, -74, 79, -44, -46, 128, -53, 128,
	-53, 128, -53, -108, -44, 81, -2, -44, -115, -115,
	80, -38, 45, -44, -48, -49, -50, -44, -61, 21,
	128, -27, -79, -85, -84, -43, -95, -32, -109, 56,
	-111, 53, 132, 48, 50, 51, 52, -95, 22, -95,
	22, -78, -33, 39, -44, -29, -28, -29, -29, 132,
	22, 128, 128, 128, 128, 128, -80, -95, -18, 128,
	-95, -43, 128, -43, -27, -80, -27, 129, -103, -103,
	-115, -115, 128, -80, 81, -88, -87, -1, -44, 64,
	129, 129, 129, 81, -44, 78, 64, -47, -46, -47,
	-47, 86, 63, 129, 132, 76, 78, -2, -44, -37,
	46, 72, 132, -51, 42, 43, -47, -76, -43, -31,
	132, 124, 47, -109, -111, -110, 49, 47, -78, -95,
	-95, -32, -34, 40, 41, -81, -95, 129, -77, -107,
	-107, -107, -77, 129, 132, -20, 31, 32, 33, 34,
	-19, -18, 35, -76, 37, -115, 129, -115, 22, 129,
	-115, -27, 129, 74, 81, 78, -44, -44, -46, 129,
	132, 129, 129, 93, 109, -96, -115, -2, -6, 81,
	-37, 111, -48, 112, 129, 132, -32, -85, -44, -67,
	47, -110, 47, -67, -44, -77, 96, 129, -44, -44,
	-45, -44, 129, 108, -80, -43, -43, 129, 132, -44,
	129, -95, -115, 84, 106, 22, 129, 22, -115, 74,
	-1, -47, 39, 129, -90, -89, 79, 75, 76, -52,
	31, 32, 21, -27, -76, -69, 54, 55, -67, 47,
	-67, 128, 96, 129, 129, 129, 129, 132, 96, 112,
	-20, -19, -27, -3, -7, -5, -11, 74, 76, 107,
	106, 128, -115, 128, 109, 81, -90, -89, -2, -44,
	-115, -47, -44, 128, -67, -69, -62, -63, 95, 128,
	96, 96, 96, 96, -96, 128, 129, -115, 81, -3,
	-44, -44, -103, -115, -44, -3, -27, -35, 39, 74,
	81, 78, -80, 129, -35, 41, -62, 128, 128, 128,
	128, 129, -62, 96, -115, 78, 80, 63, -115, 81,
	129, 129, 128, -115, 74, -2, 129, -77, 129, -62,
	-62, -62, -62, 96, 129, 128, -3, -4, -9, -7,
	-14, 74, -12, -95, -115, -35, -115, 129, 129, 129,
	129, 128, -62, -92, -91, 79, 75, -87, 81, -4,
	-44, 80, 129, -62, 129, 81, -92, -3, -44, -87,
	76, 78, -4, 129, 74, 81, 78, -115, -4, -7,
	81, -115, 74, -3, -5, 74, 76, -94, -93, 79,
	75, 76, -115, -44, -44, -103, 81, -94, -93, -4,
	-44, -115, 78, 80, 63, 74, 81, 78, 74, -12,
	-95, -115, 74, -4, -44, 80, -115, 78,
}
var yyDef = [...]int{

	-2, -2, -2, 21, 22, 329, 329, 329, 329, 329,
	329, 15, 16, 17, 18, 19, 20, 0, 0, 329,
	0, 0, 0, 0, 0, 0, 329, 0, 0, 0,
	80, 329, 329, 0, 0, 0, 0, 325, 290, 291,
	292, 293, 294, 295, 296, 0, 303, 2, 9, 330,
	10, 11, 12, 13, 14, 313, 136, 137, 138, 139,
	140, 141, 142, 143, 144, 145, 146, 147, 148, 119,
	131, 0, 125, 126, 127, 128, 129, 130, 0, 0,
	295, 293, 203, 246, 313, 0, 0, 0, 0, 294,
	297, 298, 299, 300, 301, 302, 313, 0, 146, 33,
	-2, 0, 0, 0, 102, 0, 311, 100, 119, 0,
	0, 0, 329, 309, 307, 329, 0, 50, 329, 0,
	0, 329, 329, 0, 81, 82, 83, 84, 0, 0,
	52, 53, 0, -2, 329, 329, 120, 123, 0, 326,
	0, -2, 0, 327, 328, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 314, 313, 0, 0, 0,
	0, 0, 192, 193, 311, 311, 0, -2, 327, 328,
	0, 0, 186, 196, 197, 0, 311, -2, 0, 0,
	112, 0, 0, 0, 258, 220, 221, 0, 0, 104,
	0, 323, 323, 323, 0, 312, 0, 0, 198, 0,
	-2, 48, 0, 0, 49, 0, 0, 0, 51, 329,
	329, 70, 71, 0, -2, -2, 0, 90, 91, 0,
	93, 325, 0, 306, 276, 167, -2, -2, 0, 0,
	0, 0, 0, 0, 187, 188, 189, 190, 191, 194,
	195, 149, 0, 151, 166, 132, 134, 133, 135, 0,
	0, 250, 0, 169, 119, 152, 171, 0, 0, 0,
	0, 313, 0, 0, -2, 25, 26, 0, 44, 329,
	329, 0, 305, 304, 117, 0, 0, 119, 0, 0,
	104, -2, 226, 227, 230, 231, 222, 225, 0, 106,
	0, 103, 0, 324, 0, 0, 101, 262, 242, 244,
	-2, 241, 150, 131, 295, 293, 294, 296, 0, 0,
	0, 0, 199, 310, -2, 119, 0, 119, 0, 72,
	77, 0, 329, 329, 124, 0, 0, 0, 276, -2,
	0, 172, 173, 313, 176, -2, 180, 183, 255, 313,
	313, 0, 0, 249, 0, 313, 0, 119, 178, 119,
	182, 119, 185, 0, 313, 0, 4, 313, 40, 41,
	-2, 94, 0, -2, 111, 155, 161, -2, 160, 0,
	0, 266, 259, 102, 270, 0, 131, 272, 0, -2,
	317, 0, 0, 316, 320, 321, 322, 228, 0, 223,
	0, 104, 108, 0, -2, 96, 99, 97, 98, 0,
	0, 0, 311, 311, 311, 0, 0, 260, 64, 0,
	60, 57, 0, 0, 329, 0, 329, 0, 0, 329,
	89, 92, 119, 0, 0, 0, 275, 277, 313, 0,
	200, 201, 202, 245, -2, 0, 0, 0, 153, 0,
	0, 87, 0, 204, 0, 329, -2, 0, -2, 113,
	115, 0, 0, 157, 162, 163, 264, 0, 252, 104,
	0, 0, 0, 0, 317, 0, 318, 0, 257, 229,
	224, 273, 95, 0, 0, 263, 243, 198, 0, 0,
	0, 0, 0, 54, 0, 55, 65, 66, 0, 0,
	0, 62, 0, 0, 0, 69, 329, 76, 0, 0,
	73, 0, 0, 329, 0, -2, 174, -2, 175, 177,
	0, 181, 184, 88, 0, 0, 31, 280, -2, 0,
	114, 116, 156, 0, 119, 0, 268, 271, -2, 237,
	0, 0, 0, 236, -2, 107, 0, 199, 313, 313,
	0, 313, 0, 0, 261, 67, 68, 64, 0, -2,
	58, 59, 74, 119, -2, 0, 121, 0, 29, 329,
	274, 154, 0, 205, 0, 280, -2, 0, 329, 158,
	164, 165, 0, 267, 253, 232, 0, 0, 233, 0,
	237, 218, 0, 200, 201, 202, 204, 0, 0, 0,
	56, 63, 329, 0, -2, 23, 24, 0, 0, 329,
	-2, 119, 30, 110, 0, 0, 0, 279, 281, 313,
	32, 265, -2, 0, 235, 234, 0, 110, 0, 218,
	0, 0, 0, 0, 0, 218, 0, 75, 329, 6,
	313, 313, 0, 38, -2, 0, 0, 0, 0, 329,
	0, -2, 0, 208, 217, 0, 0, 218, 218, 218,
	218, 205, 0, 0, 78, -2, -2, 0, 39, 329,
	122, 206, 110, 42, 329, 278, 239, 219, 209, 0,
	0, 0, 0, 0, 215, 218, 284, 0, -2, 27,
	28, 0, 47, 0, 79, 0, 43, 210, 211, 212,
	213, 218, 0, 0, 284, -2, 0, 0, 0, 8,
	313, -2, 207, 0, 216, 0, 0, 285, 313, 283,
	329, -2, 0, 214, 329, 0, -2, 36, 288, -2,
	0, 34, 329, 282, -2, 0, 0, 0, 288, -2,
	0, 329, 35, 313, 313, 0, 0, 0, 287, 289,
	313, 37, -2, -2, 0, 329, 0, -2, 0, -2,
	0, 45, 329, 286, 313, -2, 46, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 127, 3, 3, 3, 131, 3, 3,
	128, 129, 123, 126, 132, 125, 133, 130, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 122,
	3, 124,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:183
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:188
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:195
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:200
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:207
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:212
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:219
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:224
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:231
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:235
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:239
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:243
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:247
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:251
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:255
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:259
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:263
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:267
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:271
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:275
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:281
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:285
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:291
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:301
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:305
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:311
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:315
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:321
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:325
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:329
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 32:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:333
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:337
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:343
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:347
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:351
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:355
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:359
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:363
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:369
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:373
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:379
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:383
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:387
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:393
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:397
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:401
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:407
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:411
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:415
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:419
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:425
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:429
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:435
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:439
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:443
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:447
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:451
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:455
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression, To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:461
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:465
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:471
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:475
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:481
		{
			yyVAL.expression = nil
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:485
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:489
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:493
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:497
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:503
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:507
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:511
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:515
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 73:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:519
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:525
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:529
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:533
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:537
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 78:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:543
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 79:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:547
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:553
		{
			yyVAL.expression = nil
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:557
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:561
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:565
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:569
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:573
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:577
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:583
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:587
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:593
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:597
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:601
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:605
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:609
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].token.Literal}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:615
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:627
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:637
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:646
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:655
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:666
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:670
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:676
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:682
		{
			yyVAL.expression = nil
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:686
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:692
		{
			yyVAL.expression = nil
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:696
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:702
		{
			yyVAL.expression = nil
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:706
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:712
		{
			yyVAL.expression = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:716
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:722
		{
			yyVAL.expression = nil
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:726
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:732
		{
			yyVAL.expression = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:736
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:740
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:746
		{
			yyVAL.expression = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:750
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:756
		{
			yyVAL.expression = nil
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:760
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:766
		{
			yyVAL.expression = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:770
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:776
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 122:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:780
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:786
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:790
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:796
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:800
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:804
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:808
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:812
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:816
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:822
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Column: yyDollar[1].identifier}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:826
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:830
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:834
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Number: yyDollar[3].integer}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:838
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: yyDollar[3].integer}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:844
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:848
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:852
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:856
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:860
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:864
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:868
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:872
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:876
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:880
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:884
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:888
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:892
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:896
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:902
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:908
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:912
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:918
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:922
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:928
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:932
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:938
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:942
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:948
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:952
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:958
		{
			yyVAL.token = Token{}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:962
		{
			yyVAL.token = yyDollar[1].token
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:966
		{
			yyVAL.token = yyDollar[1].token
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:972
		{
			yyVAL.token = yyDollar[1].token
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:976
		{
			yyVAL.token = yyDollar[1].token
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:982
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:988
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1011
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1015
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1019
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1023
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1027
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1031
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1035
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1039
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1043
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1047
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1051
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1055
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1059
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 181:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1063
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1067
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1071
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1075
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1079
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1083
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1089
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1093
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1097
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1101
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1105
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1109
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1113
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1119
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1123
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1127
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1131
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1137
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1141
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 200:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1147
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Arg: yyDollar[4].expression}
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1151
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Arg: yyDollar[4].expression}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1155
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Arg: yyDollar[4].expression}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1159
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1165
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Arg: yyDollar[4].expression}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1169
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Arg: yyDollar[4].expression, Separator: yyDollar[6].text.Value()}
		}
	case 206:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1173
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Arg: yyDollar[4].expression, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 207:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line parser.y:1177
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Arg: yyDollar[4].expression, Separator: yyDollar[6].text.Value(), WithinGroup: yyDollar[8].token.Literal + " " + yyDollar[9].token.Literal, OrderBy: yyDollar[11].expression}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1183
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Over: yyDollar[4].token.Literal, AnalyticClause: yyDollar[6].expression.(AnalyticClause)}
		}
	case 209:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1187
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 210:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1191
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 211:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1195
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 212:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1199
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 213:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1203
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 214:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:1207
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression, yyDollar[6].text}, Over: yyDollar[8].token.Literal, AnalyticClause: yyDollar[10].expression.(AnalyticClause)}
		}
	case 215:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1211
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 216:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1215
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1221
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1227
		{
			yyVAL.expression = nil
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1231
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1237
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1241
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1247
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1251
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1255
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1261
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1267
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1271
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1275
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1279
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1283
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1287
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1293
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 233:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1297
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1301
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1305
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1309
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1315
		{
			yyVAL.expression = nil
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1319
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1323
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1329
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1333
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1339
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1343
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1347
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1353
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 246:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1359
		{
			yyVAL.expression = nil
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1363
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1369
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1373
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1379
		{
			yyVAL.expression = nil
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1383
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1389
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1393
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1399
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1403
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1409
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1413
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1419
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1423
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1429
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1433
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1439
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1443
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 264:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1449
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 265:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1453
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 266:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1457
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 267:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1461
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1467
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1473
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1479
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1483
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1489
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 273:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1494
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1501
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1505
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1511
		{
			yyVAL.procexpr = nil
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1515
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1521
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1525
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1531
		{
			yyVAL.procexpr = nil
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1535
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1541
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1545
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1551
		{
			yyVAL.procexpr = nil
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1555
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1561
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1565
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1571
		{
			yyVAL.procexpr = nil
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1575
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1581
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1585
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1589
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1593
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1597
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1601
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1605
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1611
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1617
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1623
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1629
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1635
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1641
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1647
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1653
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1657
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1663
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1669
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1673
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1679
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1683
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1689
		{
			yyVAL.token = Token{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1693
		{
			yyVAL.token = yyDollar[1].token
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1699
		{
			yyVAL.token = Token{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1703
		{
			yyVAL.token = yyDollar[1].token
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1709
		{
			yyVAL.token = Token{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1713
		{
			yyVAL.token = yyDollar[1].token
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1719
		{
			yyVAL.token = Token{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1723
		{
			yyVAL.token = yyDollar[1].token
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1729
		{
			yyVAL.token = Token{}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1733
		{
			yyVAL.token = yyDollar[1].token
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1737
		{
			yyVAL.token = yyDollar[1].token
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1741
		{
			yyVAL.token = yyDollar[1].token
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1747
		{
			yyVAL.token = Token{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1751
		{
			yyVAL.token = yyDollar[1].token
		}
	case 325:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1757
		{
			yyVAL.token = Token{}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1761
		{
			yyVAL.token = yyDollar[1].token
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1768
		{
			yyVAL.token = yyDollar[1].token
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1772
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1779
		{
			yyVAL.token = Token{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1783
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
