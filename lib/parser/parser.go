//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	identifier  Identifier
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const TRIGGER = 57447
const FUNCTION = 57448
const AGGREGATE = 57449
const BEGIN = 57450
const RETURN = 57451
const IGNORE = 57452
const WITHIN = 57453
const VAR = 57454
const TIES = 57455
const NULLS = 57456
const ERROR = 57457
const COUNT = 57458
const LISTAGG = 57459
const AGGREGATE_FUNCTION = 57460
const FUNCTION_WITH_INS = 57461
const COMPARISON_OP = 57462
const STRING_OP = 57463
const SUBSTITUTION_OP = 57464
const UMINUS = 57465
const UPLUS = 57466

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"TRIGGER",
	"FUNCTION",
	"AGGREGATE",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"TIES",
	"NULLS",
	"ERROR",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_INS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1902

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 150,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 52,
	1, 1,
	75, 1,
	79, 1,
	81, 1,
	-2, 150,
	-1, 54,
	132, 231,
	-2, 150,
	-1, 91,
	57, 130,
	58, 130,
	59, 130,
	-2, 141,
	-1, 121,
	63, 342,
	67, 342,
	68, 342,
	-2, 118,
	-1, 124,
	63, 342,
	67, 342,
	68, 342,
	-2, 121,
	-1, 135,
	75, 1,
	79, 1,
	81, 1,
	-2, 150,
	-1, 164,
	77, 281,
	-2, 342,
	-1, 192,
	63, 342,
	67, 342,
	68, 342,
	-2, 288,
	-1, 204,
	63, 342,
	67, 342,
	68, 342,
	-2, 112,
	-1, 205,
	63, 342,
	67, 342,
	68, 342,
	-2, 113,
	-1, 209,
	63, 342,
	67, 342,
	68, 342,
	-2, 123,
	-1, 211,
	81, 4,
	-2, 150,
	-1, 220,
	69, 0,
	120, 0,
	127, 0,
	-2, 201,
	-1, 221,
	69, 0,
	120, 0,
	127, 0,
	-2, 203,
	-1, 268,
	47, 344,
	-2, 290,
	-1, 287,
	63, 342,
	67, 342,
	68, 342,
	-2, 274,
	-1, 303,
	63, 342,
	67, 342,
	68, 342,
	-2, 337,
	-1, 312,
	63, 342,
	67, 342,
	68, 342,
	-2, 124,
	-1, 332,
	81, 1,
	-2, 150,
	-1, 338,
	69, 0,
	120, 0,
	127, 0,
	-2, 212,
	-1, 361,
	63, 342,
	67, 342,
	68, 342,
	-2, 146,
	-1, 365,
	63, 342,
	67, 342,
	68, 342,
	-2, 192,
	-1, 393,
	63, 342,
	67, 342,
	68, 342,
	-2, 136,
	-1, 427,
	75, 4,
	79, 4,
	81, 4,
	-2, 150,
	-1, 429,
	81, 4,
	-2, 150,
	-1, 430,
	81, 4,
	-2, 150,
	-1, 443,
	81, 285,
	-2, 342,
	-1, 453,
	63, 342,
	67, 342,
	68, 342,
	-2, 149,
	-1, 490,
	13, 150,
	131, 150,
	-2, 66,
	-1, 512,
	75, 4,
	79, 4,
	81, 4,
	-2, 150,
	-1, 519,
	75, 1,
	79, 1,
	81, 1,
	-2, 150,
	-1, 521,
	77, 282,
	79, 282,
	81, 282,
	-2, 342,
	-1, 537,
	63, 342,
	67, 342,
	68, 342,
	-2, 303,
	-1, 544,
	63, 342,
	67, 342,
	68, 342,
	-2, 140,
	-1, 560,
	63, 342,
	67, 342,
	68, 342,
	-2, 77,
	-1, 564,
	81, 6,
	-2, 150,
	-1, 570,
	132, 97,
	135, 97,
	-2, 342,
	-1, 616,
	81, 6,
	-2, 150,
	-1, 617,
	81, 6,
	-2, 150,
	-1, 621,
	81, 4,
	-2, 150,
	-1, 629,
	63, 342,
	67, 342,
	68, 342,
	-2, 272,
	-1, 643,
	75, 6,
	79, 6,
	81, 6,
	-2, 150,
	-1, 648,
	125, 48,
	-2, 342,
	-1, 659,
	63, 342,
	67, 342,
	68, 342,
	-2, 269,
	-1, 671,
	75, 6,
	79, 6,
	81, 6,
	-2, 150,
	-1, 672,
	81, 8,
	-2, 150,
	-1, 677,
	81, 6,
	-2, 150,
	-1, 680,
	75, 4,
	79, 4,
	81, 4,
	-2, 150,
	-1, 717,
	81, 6,
	-2, 150,
	-1, 720,
	75, 8,
	79, 8,
	81, 8,
	-2, 150,
	-1, 722,
	81, 8,
	-2, 150,
	-1, 723,
	81, 8,
	-2, 150,
	-1, 733,
	75, 8,
	79, 8,
	81, 8,
	-2, 150,
	-1, 738,
	75, 6,
	79, 6,
	81, 6,
	-2, 150,
	-1, 746,
	81, 8,
	-2, 150,
	-1, 757,
	75, 8,
	79, 8,
	81, 8,
	-2, 150,
}

const yyPrivate = 57344

const yyLast = 2196

var yyAct = [...]int{

	68, 22, 716, 744, 613, 745, 620, 331, 268, 715,
	588, 128, 405, 497, 174, 492, 313, 607, 418, 619,
	446, 191, 286, 372, 462, 421, 1, 107, 283, 612,
	111, 112, 454, 319, 20, 276, 288, 362, 330, 660,
	470, 267, 56, 498, 96, 183, 380, 318, 19, 379,
	695, 103, 75, 22, 140, 279, 320, 73, 269, 347,
	155, 129, 420, 400, 177, 83, 157, 395, 155, 264,
	156, 673, 559, 534, 212, 155, 151, 508, 106, 134,
	509, 524, 506, 505, 491, 55, 20, 466, 172, 91,
	144, 457, 143, 142, 179, 179, 213, 145, 146, 144,
	19, 398, 193, 179, 266, 215, 145, 146, 609, 3,
	201, 202, 208, 149, 203, 195, 139, 726, 51, 367,
	384, 188, 385, 386, 381, 378, 65, 50, 382, 713,
	133, 712, 216, 133, 711, 710, 22, 709, 167, 692,
	148, 147, 149, 213, 207, 139, 213, 684, 298, 683,
	682, 681, 105, 105, 618, 108, 240, 600, 243, 182,
	599, 3, 218, 178, 178, 598, 127, 137, 136, 20,
	41, 597, 194, 144, 138, 143, 142, 179, 596, 50,
	145, 146, 179, 19, 576, 179, 97, 561, 93, 290,
	94, 558, 92, 552, 222, 546, 137, 136, 41, 66,
	27, 533, 144, 138, 143, 142, 526, 383, 235, 145,
	146, 236, 22, 323, 525, 326, 523, 516, 504, 502,
	490, 452, 91, 247, 441, 324, 278, 41, 440, 368,
	311, 249, 252, 136, 439, 263, 438, 97, 144, 417,
	143, 142, 281, 282, 3, 145, 146, 302, 328, 310,
	237, 306, 27, 295, 239, 238, 693, 296, 341, 667,
	666, 665, 50, 290, 664, 370, 375, 179, 663, 345,
	640, 387, 207, 634, 179, 335, 179, 327, 242, 630,
	334, 250, 389, 245, 246, 627, 250, 625, 431, 404,
	337, 403, 339, 340, 402, 259, 401, 406, 305, 366,
	410, 375, 375, 377, 99, 355, 406, 353, 351, 424,
	308, 307, 357, 173, 99, 162, 161, 390, 415, 350,
	315, 425, 105, 160, 394, 100, 396, 397, 467, 149,
	406, 376, 206, 22, 720, 27, 178, 192, 50, 148,
	325, 149, 432, 408, 139, 643, 427, 52, 125, 196,
	133, 374, 641, 532, 530, 99, 53, 329, 257, 435,
	528, 677, 617, 60, 9, 601, 20, 639, 616, 375,
	434, 662, 464, 121, 448, 124, 449, 126, 564, 602,
	19, 669, 528, 165, 179, 198, 411, 413, 461, 476,
	166, 638, 150, 637, 636, 137, 136, 635, 595, 290,
	483, 144, 138, 143, 142, 258, 527, 563, 145, 146,
	410, 27, 451, 375, 158, 159, 9, 447, 465, 447,
	164, 447, 472, 170, 171, 475, 478, 482, 22, 474,
	22, 22, 473, 447, 423, 450, 325, 500, 197, 756,
	304, 3, 751, 141, 511, 51, 513, 514, 116, 117,
	741, 740, 737, 727, 463, 724, 204, 205, 290, 50,
	150, 199, 200, 209, 110, 719, 679, 375, 676, 179,
	179, 217, 675, 652, 219, 220, 221, 538, 539, 642,
	228, 229, 230, 231, 232, 233, 234, 575, 529, 574,
	536, 518, 406, 442, 366, 531, 375, 375, 463, 9,
	433, 535, 562, 545, 555, 426, 114, 115, 118, 119,
	550, 522, 747, 22, 746, 543, 746, 109, 723, 722,
	22, 430, 485, 486, 487, 488, 287, 168, 572, 573,
	429, 566, 27, 718, 303, 375, 315, 717, 315, 315,
	622, 179, 179, 179, 621, 580, 579, 717, 312, 591,
	592, 593, 374, 20, 50, 42, 50, 50, 621, 587,
	410, 336, 248, 338, 348, 22, 333, 19, 567, 568,
	332, 332, 248, 605, 604, 9, 749, 748, 731, 624,
	623, 556, 557, 510, 747, 718, 349, 626, 622, 333,
	447, 758, 70, 71, 72, 179, 89, 74, 755, 361,
	365, 742, 631, 633, 736, 706, 628, 678, 384, 578,
	385, 386, 381, 378, 517, 393, 382, 22, 22, 41,
	463, 315, 22, 89, 456, 189, 647, 27, 3, 27,
	27, 406, 423, 569, 649, 650, 423, 585, 654, 50,
	653, 254, 657, 658, 22, 253, 50, 149, 445, 554,
	280, 447, 674, 153, 224, 428, 214, 90, 223, 225,
	21, 670, 256, 255, 43, 44, 49, 45, 46, 47,
	48, 436, 22, 22, 703, 704, 685, 701, 22, 186,
	668, 22, 409, 471, 90, 594, 443, 542, 41, 694,
	541, 50, 477, 227, 226, 705, 9, 707, 453, 41,
	540, 469, 700, 687, 688, 689, 690, 691, 708, 185,
	186, 187, 27, 468, 725, 154, 360, 261, 22, 27,
	686, 22, 481, 22, 22, 701, 728, 701, 701, 702,
	315, 459, 460, 714, 22, 729, 287, 262, 701, 22,
	480, 646, 581, 50, 50, 392, 750, 22, 50, 752,
	700, 701, 700, 700, 190, 175, 743, 501, 22, 507,
	154, 499, 701, 700, 27, 760, 583, 584, 5, 102,
	50, 732, 101, 734, 735, 520, 700, 702, 132, 702,
	702, 697, 521, 154, 739, 651, 577, 700, 571, 315,
	702, 9, 565, 9, 9, 365, 503, 753, 50, 50,
	299, 300, 399, 702, 50, 537, 309, 50, 759, 301,
	190, 176, 277, 265, 702, 184, 27, 27, 544, 275,
	120, 27, 51, 152, 123, 148, 147, 149, 131, 697,
	139, 697, 697, 384, 104, 385, 386, 560, 8, 757,
	373, 7, 697, 27, 50, 570, 6, 50, 346, 50,
	50, 163, 62, 284, 154, 697, 493, 494, 495, 496,
	50, 285, 42, 271, 244, 50, 697, 270, 152, 661,
	81, 27, 27, 50, 61, 64, 9, 27, 42, 59,
	27, 137, 136, 9, 50, 57, 63, 144, 138, 143,
	142, 152, 58, 582, 145, 146, 342, 272, 180, 343,
	344, 98, 384, 458, 385, 386, 381, 378, 589, 590,
	382, 154, 364, 358, 363, 130, 359, 27, 260, 479,
	27, 455, 27, 27, 154, 391, 95, 629, 9, 17,
	16, 67, 113, 27, 154, 14, 422, 419, 27, 148,
	147, 149, 13, 12, 139, 10, 27, 456, 15, 644,
	11, 698, 645, 648, 610, 696, 608, 27, 316, 154,
	655, 314, 297, 4, 169, 154, 2, 154, 0, 0,
	659, 43, 44, 49, 45, 46, 47, 48, 0, 0,
	9, 9, 0, 0, 0, 9, 0, 43, 44, 49,
	45, 46, 47, 48, 0, 137, 136, 0, 0, 0,
	0, 144, 138, 143, 142, 273, 0, 9, 145, 146,
	0, 0, 154, 0, 154, 0, 154, 42, 0, 152,
	0, 0, 0, 0, 51, 0, 148, 147, 149, 0,
	0, 139, 369, 0, 98, 9, 9, 721, 0, 0,
	738, 9, 152, 0, 9, 251, 251, 384, 0, 385,
	386, 381, 378, 632, 484, 382, 730, 0, 489, 0,
	0, 274, 0, 0, 274, 0, 0, 407, 0, 0,
	0, 0, 0, 414, 42, 416, 0, 0, 0, 0,
	0, 9, 137, 136, 9, 754, 9, 9, 144, 138,
	143, 142, 154, 0, 69, 145, 146, 9, 0, 0,
	0, 0, 9, 0, 251, 0, 251, 251, 0, 0,
	9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	152, 9, 152, 0, 152, 0, 43, 44, 49, 45,
	46, 47, 48, 251, 352, 354, 356, 0, 0, 547,
	548, 549, 551, 42, 70, 71, 72, 0, 89, 74,
	51, 154, 0, 274, 0, 274, 0, 0, 0, 98,
	0, 98, 98, 69, 0, 0, 0, 0, 0, 0,
	42, 70, 71, 72, 0, 89, 74, 51, 0, 0,
	0, 0, 0, 43, 44, 49, 45, 46, 47, 48,
	69, 0, 0, 0, 154, 0, 0, 0, 0, 0,
	515, 84, 0, 0, 0, 85, 0, 42, 0, 90,
	0, 0, 82, 78, 0, 154, 0, 0, 0, 0,
	0, 0, 87, 0, 154, 0, 272, 180, 84, 0,
	0, 251, 85, 251, 0, 251, 90, 189, 0, 82,
	78, 0, 0, 148, 147, 149, 0, 251, 139, 87,
	0, 0, 43, 44, 49, 80, 88, 79, 48, 553,
	42, 0, 241, 274, 0, 289, 0, 76, 77, 86,
	122, 42, 70, 71, 72, 41, 89, 74, 51, 43,
	44, 49, 80, 88, 79, 48, 154, 0, 0, 0,
	0, 69, 0, 0, 76, 77, 86, 122, 42, 137,
	136, 0, 586, 0, 0, 144, 138, 143, 142, 0,
	0, 0, 145, 146, 236, 0, 43, 44, 49, 45,
	46, 47, 48, 603, 0, 251, 0, 0, 0, 84,
	0, 0, 606, 85, 273, 0, 0, 90, 0, 0,
	82, 78, 0, 0, 0, 0, 0, 0, 274, 274,
	87, 0, 0, 0, 0, 0, 0, 42, 70, 71,
	72, 0, 89, 74, 51, 0, 0, 0, 0, 43,
	44, 49, 45, 46, 47, 48, 0, 69, 0, 0,
	43, 44, 49, 292, 293, 291, 294, 0, 0, 0,
	0, 0, 0, 289, 656, 76, 77, 86, 122, 0,
	0, 0, 0, 0, 251, 0, 0, 43, 44, 49,
	45, 46, 47, 48, 0, 84, 0, 0, 0, 85,
	274, 274, 274, 90, 0, 41, 82, 78, 42, 70,
	71, 72, 0, 89, 74, 51, 87, 0, 0, 148,
	147, 149, 0, 0, 139, 0, 0, 0, 69, 0,
	0, 0, 0, 42, 70, 71, 72, 0, 89, 74,
	51, 0, 0, 0, 0, 251, 43, 44, 49, 80,
	88, 79, 48, 69, 274, 0, 0, 0, 0, 0,
	0, 76, 77, 86, 122, 0, 84, 0, 0, 0,
	85, 0, 0, 0, 90, 137, 136, 82, 78, 0,
	0, 144, 138, 143, 142, 0, 0, 87, 145, 146,
	0, 84, 0, 0, 0, 85, 0, 0, 0, 90,
	0, 0, 82, 78, 42, 70, 71, 72, 0, 89,
	74, 51, 87, 0, 0, 0, 0, 43, 44, 49,
	80, 88, 79, 48, 69, 0, 0, 0, 0, 0,
	0, 0, 76, 77, 86, 122, 148, 147, 149, 0,
	0, 139, 43, 44, 49, 80, 88, 79, 48, 0,
	733, 0, 0, 0, 0, 0, 0, 76, 77, 86,
	54, 0, 84, 0, 0, 0, 85, 0, 0, 0,
	90, 0, 0, 82, 78, 42, 70, 210, 72, 0,
	89, 74, 51, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 136, 0, 69, 0, 0, 144, 138,
	143, 142, 0, 0, 0, 145, 146, 148, 147, 149,
	0, 0, 139, 43, 44, 49, 292, 293, 291, 294,
	0, 680, 0, 0, 0, 0, 0, 0, 76, 77,
	86, 122, 0, 84, 0, 42, 0, 85, 0, 0,
	0, 90, 51, 0, 82, 78, 0, 34, 0, 0,
	0, 0, 0, 0, 87, 42, 0, 23, 0, 0,
	24, 0, 0, 137, 136, 0, 0, 0, 0, 144,
	138, 143, 142, 0, 0, 69, 145, 146, 0, 0,
	0, 0, 0, 0, 43, 44, 49, 80, 88, 79,
	48, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	77, 86, 122, 41, 0, 699, 0, 614, 0, 0,
	0, 0, 0, 26, 0, 0, 31, 29, 30, 28,
	0, 148, 147, 149, 0, 0, 139, 0, 32, 33,
	321, 322, 0, 35, 36, 37, 38, 672, 0, 0,
	615, 0, 0, 25, 43, 44, 49, 45, 46, 47,
	48, 42, 0, 0, 0, 0, 0, 0, 51, 0,
	0, 0, 0, 34, 43, 44, 49, 45, 46, 47,
	48, 0, 0, 23, 0, 0, 24, 137, 136, 0,
	0, 0, 412, 144, 138, 143, 142, 0, 0, 0,
	145, 146, 0, 0, 0, 0, 0, 0, 0, 0,
	42, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 0, 34, 42, 0, 0, 0, 0, 0, 41,
	0, 317, 23, 39, 0, 24, 0, 0, 0, 26,
	0, 388, 31, 29, 30, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 33, 321, 322, 40, 35,
	36, 37, 38, 0, 0, 0, 0, 0, 0, 25,
	43, 44, 49, 45, 46, 47, 48, 0, 41, 0,
	611, 0, 614, 0, 148, 147, 149, 0, 26, 139,
	0, 31, 29, 30, 28, 437, 147, 149, 671, 0,
	139, 0, 0, 32, 33, 42, 0, 0, 35, 36,
	37, 38, 51, 0, 0, 615, 0, 34, 25, 43,
	44, 49, 45, 46, 47, 48, 0, 23, 0, 0,
	24, 0, 43, 44, 49, 45, 46, 47, 48, 0,
	137, 136, 0, 0, 0, 0, 144, 138, 143, 142,
	0, 137, 136, 145, 146, 0, 0, 144, 138, 143,
	142, 0, 0, 0, 145, 146, 148, 147, 149, 0,
	0, 139, 0, 41, 0, 18, 0, 39, 0, 0,
	519, 0, 0, 26, 0, 0, 31, 29, 30, 28,
	0, 0, 0, 0, 0, 148, 147, 149, 32, 33,
	139, 0, 40, 35, 36, 37, 38, 0, 0, 512,
	0, 0, 0, 25, 43, 44, 49, 45, 46, 47,
	48, 0, 137, 136, 0, 42, 0, 0, 144, 138,
	143, 142, 148, 147, 149, 145, 146, 139, 0, 0,
	0, 0, 148, 147, 149, 180, 444, 139, 0, 42,
	0, 137, 136, 0, 0, 0, 135, 144, 138, 143,
	142, 148, 147, 149, 145, 146, 139, 371, 0, 0,
	42, 0, 0, 0, 0, 0, 0, 211, 0, 0,
	181, 0, 0, 0, 0, 0, 0, 0, 137, 136,
	180, 0, 0, 0, 144, 138, 143, 142, 137, 136,
	0, 145, 146, 0, 144, 138, 143, 142, 0, 0,
	0, 145, 146, 0, 0, 0, 0, 137, 136, 0,
	0, 0, 0, 144, 138, 143, 142, 0, 0, 0,
	145, 146, 0, 0, 43, 44, 49, 45, 46, 47,
	48, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 43, 44,
	49, 45, 46, 47, 48, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 43,
	44, 49, 45, 46, 47, 48,
}
var yyPact = [...]int{

	1911, -1000, 222, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1449, -1000,
	-1000, 173, 194, 742, 739, 811, 1013, -1000, 434, 1294,
	1294, 417, -1000, -1000, 808, 1424, 819, 1424, 233, 1424,
	-1000, 753, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	228, -1000, 1911, 1988, 1353, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 228, -1000, -1000, -61, -70,
	-1000, -1000, -1000, -1000, -1000, -1000, 1424, 1424, 192, 185,
	184, -1000, 1424, 263, 183, 1424, 1424, 1294, 182, -1000,
	-1000, 717, 791, 2031, 2076, 801, 652, 554, -1000, 547,
	1424, 1294, 2031, -1000, -20, 227, -1000, 355, -1000, 1294,
	1294, -1000, -1000, 1294, -1000, -1000, -1000, -1000, 1424, 1424,
	205, 1375, 1353, -23, 1375, 1591, 2007, 11, 593, -1000,
	-30, 1294, -1000, 1424, -1000, 1911, 1424, 1424, 1424, 581,
	591, 633, 1424, 1424, 1424, 1424, 1424, 1424, 1424, -1000,
	76, 118, 123, 122, 224, 1256, 1166, 858, -1000, -1000,
	1424, 554, 554, 495, 1375, 150, 150, 578, 602, -1000,
	47, -1000, 289, 554, 673, 696, 2031, 797, -31, -1000,
	-1000, 874, 805, 794, 874, 590, 590, 590, 1267, -1000,
	121, -1000, 1179, 126, 773, 811, 1424, 356, 167, 180,
	179, -1000, -1000, 786, 1375, 1375, 587, 118, 1424, 1375,
	1424, 1767, 1294, 811, 1294, 753, 226, 1375, 491, -36,
	112, 112, 614, 1424, 150, 1424, 150, 150, -27, -27,
	-1000, -1000, -1000, 275, 47, -1000, 1424, -1000, -1000, -1000,
	-1000, -1000, 1424, -1000, -1000, 1424, 1139, 485, 1424, -1000,
	1353, -1000, -1000, 150, 177, 176, 174, 581, -1000, 1424,
	671, 1424, 1520, 98, 2055, 1070, 2031, 794, 72, -1000,
	1829, -1000, -1000, 1203, -1000, 874, 706, 1424, -1000, 224,
	-1000, 224, 224, -1000, -34, 780, -1000, 1375, -1000, -1000,
	-68, 165, 163, 160, 158, -1000, 1294, -1000, 547, 551,
	1671, 1070, -1000, 1375, 547, 1294, 547, 107, 1294, 811,
	-1000, -1000, 1375, 424, 221, -1000, -1000, 1449, -1000, -1000,
	-1000, -1000, -1000, 450, -1000, -39, 441, -1000, 157, 1294,
	419, 492, 1911, 1424, -1000, -1000, 1841, -1000, 112, -1000,
	-1000, -1000, 104, 102, 96, 92, 412, 495, 1424, 1978,
	584, 155, -1000, 155, -1000, 155, -1000, 349, 89, -1000,
	1424, 875, -1000, -44, 689, 1375, -1000, 150, 1070, -1000,
	-1000, 1294, 801, -48, 201, -76, -1000, -1000, 666, 654,
	634, 634, 785, 874, -1000, -1000, -1000, -1000, 1294, 560,
	794, 700, 681, 1375, 621, -1000, -1000, 621, 1267, 1294,
	1166, 554, 554, 554, 1424, 88, -51, -1000, 825, 1294,
	726, -1000, 1070, 720, -1000, 87, -1000, 774, 86, -52,
	-1000, -1000, -53, 724, -55, -1000, 507, 1767, 1941, 1767,
	1767, 547, 85, 540, 410, -1000, 1912, 1424, -1000, -1000,
	-1000, -1000, -1000, 1375, 1424, 150, 84, -54, 82, 74,
	-1000, 313, 249, 1375, -1000, 552, 241, 1520, 239, -1000,
	-1000, -1000, 69, -62, -1000, 794, 1070, 1424, 874, 874,
	653, -1000, 643, 640, 634, -1000, -1000, -1000, -1000, -1000,
	1424, 1424, -1000, -1000, 63, 1424, 1424, 1139, 1424, 61,
	627, 1294, -1000, -1000, -1000, 1070, 1070, 59, -63, 1424,
	55, 1294, 323, 270, 770, 811, 811, 1424, 766, 811,
	-1000, -1000, 1767, 408, 406, 52, 764, -1000, 535, 1911,
	47, 1375, -1000, -1000, 150, -1000, -1000, -1000, 703, -1000,
	-1000, -1000, 735, 616, 1070, -1000, -1000, 1375, 785, 854,
	874, 874, 874, 638, 1375, -1000, 302, 46, 39, 33,
	28, 25, 269, -1000, 547, -1000, -1000, -1000, 825, 1294,
	1375, -1000, -1000, 547, 1816, 260, -1000, -1000, -1000, 724,
	1375, 254, 22, 465, 504, 503, -1000, 156, -1000, 514,
	-1000, 154, -1000, -1000, -1000, 150, -1000, -1000, -1000, 1424,
	148, 854, 999, 785, 874, 142, 301, 298, 297, 295,
	271, 139, 238, -1000, -1000, -1000, -1000, 398, 220, -1000,
	-1000, 1449, -1000, -1000, 1424, 1424, 1816, 1816, 763, 392,
	479, 1767, 1424, -1000, -1000, 547, -1000, 717, -1000, 1375,
	1294, -1000, 1424, 785, 276, 137, 133, 130, 129, 128,
	276, 285, -1000, 1816, 1830, 1677, 8, 589, 1375, 391,
	387, 253, 533, 385, -1000, 1563, 19, 18, 17, 1375,
	15, 717, 679, 276, 276, 276, 276, 276, 7, 125,
	-1000, 1816, 1651, 1294, 1294, -1000, -1000, 1816, -1000, 531,
	1767, -1000, -1000, -1000, -1000, -1000, 1424, 5, 3, 2,
	-1, -3, -1000, 276, 458, 384, 209, -1000, -1000, 1449,
	-1000, -1000, -1000, 439, 438, 374, -1000, 513, -1000, -1000,
	-1000, -1000, -1000, -1000, -15, 372, 468, 1816, 1424, 502,
	1651, 1492, 1651, 1651, -1000, -1000, -1000, 530, 371, -1000,
	962, -1000, -1000, 1651, 370, 369, -1000, 527, 1816, 437,
	501, 500, -1000, 510, 361, 435, 1651, 1424, -1000, -1000,
	-1000, 524, 358, -1000, 761, -1000, 517, 1651, -1000, 509,
	-1000,
}
var yyPgo = [...]int{

	0, 26, 16, 17, 50, 108, 56, 966, 47, 33,
	963, 961, 958, 956, 29, 4, 955, 954, 951, 950,
	948, 945, 43, 13, 15, 943, 942, 25, 937, 936,
	62, 18, 935, 932, 931, 930, 929, 768, 67, 44,
	926, 45, 35, 925, 919, 14, 918, 32, 916, 660,
	915, 61, 42, 57, 52, 85, 337, 22, 65, 20,
	37, 914, 912, 903, 893, 879, 892, 886, 885, 875,
	653, 363, 874, 870, 36, 39, 869, 69, 58, 867,
	8, 863, 10, 861, 853, 852, 851, 59, 848, 24,
	21, 41, 64, 12, 28, 846, 841, 840, 23, 838,
	7, 38, 6, 19, 2, 9, 5, 3, 0, 126,
	11, 199, 834, 51, 121, 54, 49, 40, 46, 55,
	828, 443,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 7, 7, 8, 8, 8,
	9, 10, 10, 10, 10, 11, 11, 12, 12, 12,
	12, 12, 13, 13, 14, 14, 14, 15, 15, 16,
	16, 17, 17, 17, 17, 18, 18, 18, 18, 18,
	19, 19, 19, 19, 20, 20, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 22, 22, 23, 23,
	24, 24, 24, 24, 24, 25, 25, 25, 25, 25,
	26, 26, 26, 26, 27, 28, 28, 29, 30, 30,
	31, 31, 31, 32, 32, 32, 32, 33, 33, 33,
	33, 33, 33, 33, 34, 34, 34, 35, 35, 35,
	35, 35, 36, 36, 36, 37, 38, 38, 38, 38,
	39, 39, 40, 41, 41, 42, 42, 43, 43, 44,
	44, 45, 45, 46, 46, 46, 47, 47, 48, 48,
	49, 49, 50, 50, 51, 51, 52, 52, 52, 52,
	52, 52, 53, 54, 55, 55, 55, 55, 55, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 57, 58, 58, 59, 59, 60, 60,
	61, 61, 62, 62, 63, 63, 63, 64, 64, 65,
	66, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	68, 68, 68, 68, 68, 68, 68, 69, 69, 69,
	69, 70, 70, 71, 71, 72, 72, 72, 72, 72,
	73, 73, 74, 74, 74, 74, 74, 74, 74, 74,
	75, 76, 76, 77, 77, 78, 78, 78, 79, 80,
	80, 80, 80, 80, 80, 80, 81, 81, 81, 81,
	81, 81, 82, 82, 83, 83, 84, 84, 84, 85,
	86, 86, 87, 87, 88, 88, 89, 89, 90, 90,
	91, 91, 92, 92, 93, 93, 94, 94, 95, 95,
	95, 95, 96, 97, 98, 98, 99, 99, 100, 100,
	101, 101, 102, 102, 103, 103, 104, 104, 105, 105,
	106, 106, 107, 107, 108, 108, 108, 108, 108, 108,
	108, 108, 109, 110, 110, 111, 112, 112, 113, 113,
	114, 114, 115, 115, 116, 116, 117, 117, 118, 118,
	119, 119, 120, 120, 121, 121,
}
var yyR2 = [...]int{

	0, 0, 1, 3, 0, 3, 0, 3, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 6, 8, 8,
	1, 7, 8, 1, 1, 1, 1, 7, 8, 1,
	1, 1, 1, 1, 6, 8, 8, 1, 2, 1,
	1, 7, 8, 1, 1, 7, 8, 1, 1, 1,
	2, 2, 1, 2, 1, 1, 6, 7, 4, 8,
	5, 6, 8, 5, 7, 7, 1, 3, 1, 3,
	0, 1, 1, 2, 2, 5, 2, 2, 3, 5,
	6, 8, 5, 3, 1, 1, 3, 3, 1, 3,
	1, 1, 3, 9, 10, 10, 12, 0, 1, 1,
	1, 1, 2, 2, 5, 6, 3, 4, 2, 2,
	4, 2, 2, 3, 4, 5, 5, 4, 4, 4,
	1, 1, 3, 0, 2, 0, 2, 0, 3, 0,
	2, 0, 3, 0, 3, 4, 0, 2, 0, 2,
	0, 2, 6, 9, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 1, 3, 1, 3,
	2, 4, 1, 1, 0, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 4, 4, 6, 6, 4,
	6, 4, 4, 4, 6, 4, 4, 6, 4, 2,
	3, 3, 3, 3, 3, 2, 2, 3, 3, 2,
	2, 0, 1, 4, 4, 5, 5, 5, 5, 1,
	5, 10, 8, 9, 9, 9, 9, 9, 8, 10,
	2, 0, 3, 1, 1, 1, 2, 3, 1, 1,
	1, 2, 3, 1, 1, 3, 4, 5, 6, 7,
	5, 6, 2, 4, 1, 1, 1, 3, 1, 5,
	0, 1, 4, 2, 0, 2, 1, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 1, 3, 6, 9,
	5, 8, 7, 3, 1, 3, 5, 6, 4, 5,
	0, 2, 4, 5, 0, 2, 4, 5, 0, 2,
	4, 5, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 1, 3, 1, 3,
	0, 1, 0, 1, 0, 1, 0, 1, 1, 1,
	0, 1, 0, 1, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -7, -5, -10, -37, -95, -96, -99, -71,
	-21, -19, -25, -26, -32, -20, -35, -36, 74, -8,
	-9, -49, -108, 26, 29, 112, 82, -111, 88, 86,
	87, 85, 97, 98, 16, 102, 103, 104, 105, 76,
	101, 72, 4, 113, 114, 116, 117, 118, 119, 115,
	-109, 11, 125, -56, 131, -55, -52, -68, -66, -65,
	-71, -72, -85, -67, -69, -109, -111, -34, -108, 24,
	5, 6, 7, -53, 10, -54, 128, 129, 74, 118,
	116, -73, 73, -58, 62, 66, 130, 83, 117, 9,
	70, -38, 19, 15, 17, -40, -39, 13, -65, 131,
	131, 30, 30, -113, -112, -109, -113, -108, -109, 83,
	30, -108, -108, -33, 89, 90, 31, 32, 91, 92,
	12, -56, 131, 5, -56, 115, -56, -109, -110, -51,
	-50, -120, 25, 122, -1, 78, 121, 120, 127, 69,
	-115, -121, 129, 128, 126, 133, 134, 65, 64, 66,
	-56, -90, -37, -70, -49, 136, 131, 136, -56, -56,
	131, 131, 131, -86, -56, 120, 127, -115, -121, -65,
	-56, -56, -108, 131, -45, 38, 20, -92, -77, -108,
	24, 14, -92, -41, 14, 57, 58, 59, -114, 71,
	-70, -90, -56, -108, -77, 135, 122, 83, 30, 106,
	107, -108, -108, -108, -56, -56, 127, -90, 135, -56,
	6, 80, 63, 135, 63, 135, -108, -56, -1, -56,
	-56, -56, -115, 67, 63, 68, 61, 60, -56, -56,
	-56, -56, -56, -56, -56, 132, 135, 132, 132, 132,
	-108, 6, -114, -108, 6, -114, -114, -87, 77, -58,
	131, -65, -58, 67, 63, 61, 60, 69, 116, -114,
	-46, 44, 41, -78, -77, 16, 135, -91, -80, -78,
	-79, -81, 23, 131, -65, 14, -42, 18, -91, -119,
	60, -119, -119, -94, -84, -83, -57, -56, -74, 126,
	-108, 118, 116, 117, 119, 132, 131, -37, 22, 27,
	28, 36, -113, -56, 84, 131, 84, 131, 131, 20,
	-52, -90, -56, -2, -11, -5, -12, 74, -8, -9,
	-6, 99, 100, -108, -110, -109, -108, -51, 22, 131,
	-101, -100, 79, 75, -53, -54, -56, -58, -56, -58,
	-58, -90, -70, -70, -70, -57, -88, -87, 79, -56,
	-58, 131, -65, 131, -65, 131, -65, -115, -70, -48,
	45, -56, -60, -61, -62, -56, -74, 21, 131, -37,
	-108, 22, -98, -97, -55, -108, -92, -42, 53, -116,
	-118, 52, 56, 135, 48, 50, 51, -108, 22, -80,
	-91, -43, 39, -56, -39, -38, -39, -39, 135, 22,
	131, 131, 131, 131, 131, -93, -108, -37, -22, 131,
	-108, -55, 131, -55, -37, -93, -37, 132, -31, -28,
	-30, -27, -29, -109, -108, -110, 81, 125, -56, 80,
	80, 131, -93, 81, -101, -1, -56, 64, 132, 132,
	132, 132, 81, -56, 78, 64, -59, -58, -59, -59,
	86, 63, 132, -56, -47, 46, 72, 135, -63, 42,
	43, -59, -89, -55, -108, -41, 135, 127, 47, 47,
	-117, 49, -117, -116, -118, -91, -108, 132, -42, -44,
	40, 41, -94, -108, -70, -114, -114, -114, -114, -70,
	132, 135, -24, 31, 32, 33, 34, -23, -22, 35,
	-89, 37, 132, 22, 132, 135, 135, 35, 132, 135,
	76, -2, 78, -2, -2, -37, 132, 74, 81, 78,
	-56, -56, -58, 132, 135, 132, 132, 93, 111, -47,
	113, -60, 114, 132, 135, -42, -98, -56, -80, -80,
	47, 47, 47, -117, -56, -90, 132, -70, -70, -70,
	-57, -70, 132, -37, 22, -93, -55, -55, 132, 135,
	-56, 132, -108, 84, 108, 22, -27, -30, -30, -109,
	-56, 22, -31, -2, 81, 81, 132, 22, 74, -1,
	-59, 39, -64, 31, 32, 21, -37, -89, -82, 54,
	55, -80, -80, -80, 47, 96, 132, 132, 132, 132,
	132, 96, 110, -37, -24, -23, -37, -3, -13, -5,
	-17, 74, -14, -15, 76, 109, 108, 108, 132, -103,
	-102, 79, 75, 76, 76, 131, -100, 131, -59, -56,
	131, -82, 54, -80, 131, 96, 96, 96, 96, 96,
	131, 114, 81, 125, -56, -56, -109, -110, -56, -3,
	-3, 22, 81, -103, -2, -56, -37, -45, -93, -56,
	-75, -76, 95, 131, 131, 131, 131, 131, -75, 96,
	-3, 78, 80, 63, 63, 81, 81, 108, 74, 81,
	78, 132, 132, 132, 132, -45, 41, -75, -75, -75,
	-75, -75, 132, 131, -3, -4, -16, -5, -18, 74,
	-14, -15, -6, -108, -108, -3, 74, -2, -90, 132,
	132, 132, 132, 132, -75, -105, -104, 79, 75, 81,
	125, -56, 80, 80, 81, -102, 132, 81, -105, -3,
	-56, 76, -4, 78, -4, -4, 74, 81, 78, -4,
	81, 81, 74, -3, -107, -106, 79, 75, 76, 76,
	-104, 81, -107, -4, -56, 74, 81, 78, 74, -4,
	-106,
}
var yyDef = [...]int{

	-2, -2, 2, 25, 26, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 0, 33,
	34, 0, 0, 0, 0, 0, 0, 62, 0, 0,
	0, 107, 64, 65, 0, 0, 0, 0, 0, 0,
	30, 352, 324, 325, 326, 327, 328, 329, 330, 331,
	0, 332, -2, 342, -2, 169, 170, 171, 172, 173,
	174, 175, 176, 177, 178, 179, 180, 181, 164, 0,
	156, 157, 158, 159, 160, 161, 0, 0, 0, 329,
	327, 239, 280, 342, 0, 0, 0, 0, 328, 162,
	163, -2, 0, 0, 0, 133, 0, 340, 131, 150,
	231, 0, 0, 60, 338, 336, 61, 0, 63, 0,
	0, 86, 87, 0, 108, 109, 110, 111, 0, 0,
	0, -2, 150, 119, -2, 122, 342, 179, 0, 151,
	154, 0, 353, 0, 3, -2, 0, 354, 355, 342,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 343,
	342, 0, 0, 0, 0, 0, 231, 0, 225, 226,
	231, 340, 340, 0, -2, 354, 355, 0, 0, 219,
	229, 230, 0, 340, 143, 0, 0, 0, 292, 253,
	254, 0, 0, 135, 0, 350, 350, 350, 0, 341,
	0, 232, -2, 150, 0, 0, 0, 0, 0, 0,
	0, 88, 93, 0, -2, -2, 0, 0, 0, -2,
	157, -2, 0, 0, 0, 352, 0, 335, 310, 200,
	-2, -2, 0, 0, 0, 0, 0, 0, 220, 221,
	222, 223, 224, 227, 228, 182, 0, 184, 199, 234,
	165, 167, 231, 166, 168, 231, 231, 284, 0, 202,
	150, 185, 204, 0, 0, 0, 0, 342, 116, 231,
	148, 0, 0, 150, 255, 0, 0, 135, -2, 259,
	260, 263, 264, 150, 258, 0, 137, 0, 134, 0,
	351, 0, 0, 132, 296, 276, 278, -2, 275, 183,
	164, 329, 327, 328, 330, 233, 0, 68, 150, 0,
	0, 0, 339, -2, 150, 0, 150, 0, 0, 0,
	117, 120, -2, 0, 0, 35, 36, 0, 39, 40,
	41, 23, 24, 0, 334, 333, 0, 155, 0, 0,
	0, 310, -2, 0, 205, 206, 342, 209, -2, 213,
	216, 289, 0, 0, 0, 0, 0, 283, 0, 342,
	0, 150, 211, 150, 215, 150, 218, 0, 0, 125,
	0, -2, 142, 188, 194, -2, 193, 0, 0, 300,
	256, 0, 133, 304, 0, 164, 293, 306, 0, 0,
	346, 346, 344, 0, 345, 348, 349, 261, 0, 344,
	135, 139, 0, -2, 127, 130, 128, 129, 0, 0,
	231, 340, 340, 340, 231, 0, 294, 70, 80, 0,
	76, 73, 0, 0, 85, 0, 92, 0, 0, 100,
	101, 95, 98, 94, 0, 89, 0, -2, 342, -2,
	-2, 150, 0, 0, 0, 311, 342, 0, 235, 236,
	237, 238, 279, -2, 0, 0, 0, 186, 0, 0,
	114, 0, 240, -2, 144, 146, 0, 0, 190, 195,
	196, 298, 0, 286, 257, 135, 0, 0, 0, 0,
	0, 347, 0, 0, 346, 291, 262, 265, 307, 126,
	0, 0, 297, 277, 0, 231, 231, 231, 231, 0,
	-2, 0, 71, 81, 82, 0, 0, 0, 78, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	27, 5, -2, 0, 0, 0, 0, 31, 0, -2,
	207, -2, 208, 210, 0, 214, 217, 115, 0, 145,
	147, 189, 0, 150, 0, 302, 305, -2, 266, 344,
	0, 0, 0, 0, -2, 138, 233, 0, 0, 0,
	0, 0, 0, 67, 150, 295, 83, 84, 80, 0,
	-2, 74, 75, 150, -2, 0, 96, 102, 99, 0,
	-2, 0, 0, 314, 0, 0, 152, 0, 32, 308,
	187, 0, 191, 197, 198, 0, 301, 287, 267, 0,
	0, 344, 344, 270, 0, 0, 235, 236, 237, 238,
	240, 0, 0, 69, 72, 79, 91, 0, 0, 42,
	43, 0, 53, 54, 0, 47, -2, -2, 0, 0,
	314, -2, 0, 28, 29, 150, 309, 141, 299, -2,
	0, 268, 0, 271, 251, 0, 0, 0, 0, 0,
	251, 0, 103, -2, 342, 342, 179, 0, -2, 0,
	0, 0, 0, 0, 315, 342, 0, 0, 0, -2,
	0, 141, 0, 251, 251, 251, 251, 251, 0, 0,
	7, -2, -2, 0, 0, 104, 105, -2, 37, 0,
	-2, 153, 241, 273, 242, 250, 0, 0, 0, 0,
	0, 0, 248, 251, 318, 0, 0, 49, 50, 0,
	57, 58, 59, 0, 0, 0, 38, 312, 252, 243,
	244, 245, 246, 247, 0, 0, 318, -2, 0, 0,
	-2, 342, -2, -2, 106, 313, 249, 0, 0, 319,
	342, 44, 9, -2, 0, 0, 51, 0, -2, 322,
	0, 0, 52, 316, 0, 322, -2, 0, 45, 46,
	317, 0, 0, 323, 342, 55, 0, -2, 56, 320,
	321,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 130, 3, 3, 3, 134, 3, 3,
	131, 132, 126, 129, 135, 128, 136, 133, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 125,
	3, 127,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:185
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:190
		{
			yyVAL.program = []Statement{yyDollar[1].statement}
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:195
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[3].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:202
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:207
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[3].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:214
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:219
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[3].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:226
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:231
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[3].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:238
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:242
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:246
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:250
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:254
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:258
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:262
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:266
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:270
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:274
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:278
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:302
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:306
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:312
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:316
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:320
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:326
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:332
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:336
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:340
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:344
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:350
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:354
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:360
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:364
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:368
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:372
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:376
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:382
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:386
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:392
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:396
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:400
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:406
		{
			yyVAL.statement = Return{Value: NewNullValue()}
		}
	case 48:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:410
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:416
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:420
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:426
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:430
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:434
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:438
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 55:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:444
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:448
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:452
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:456
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:460
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:466
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:470
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:474
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:478
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:484
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:488
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 66:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:494
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 67:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:498
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[7].expression}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:502
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Query: yyDollar[4].expression}
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:506
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:510
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Query: yyDollar[5].expression}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:514
		{
			yyVAL.statement = AddColumns{Table: yyDollar[3].expression, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:518
		{
			yyVAL.statement = AddColumns{Table: yyDollar[3].expression, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:522
		{
			yyVAL.statement = DropColumns{Table: yyDollar[3].expression, Columns: []Expression{yyDollar[5].expression}}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:526
		{
			yyVAL.statement = DropColumns{Table: yyDollar[3].expression, Columns: yyDollar[6].expressions}
		}
	case 75:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:530
		{
			yyVAL.statement = RenameColumn{Table: yyDollar[3].expression, Old: yyDollar[5].expression, New: yyDollar[7].identifier}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:536
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:540
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:546
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:550
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:556
		{
			yyVAL.expression = nil
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:560
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:564
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:568
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:572
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:578
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:582
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:586
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:590
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:594
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:600
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:604
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:608
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:612
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:618
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:624
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:628
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expression)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:634
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:640
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:644
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:650
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:654
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:658
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 103:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:664
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 104:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:668
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].expressions, Statements: yyDollar[9].program}
		}
	case 105:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:672
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Statements: yyDollar[9].program}
		}
	case 106:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line parser.y:676
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Parameters: yyDollar[7].expressions, Statements: yyDollar[11].program}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:682
		{
			yyVAL.expression = nil
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:686
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:690
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:694
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:698
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:702
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:706
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:712
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:716
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:720
		{
			yyVAL.expression = CursorAttrebute{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Attrebute: yyDollar[3].token}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:726
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].expression.(PrimitiveType).Value}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:730
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:734
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:738
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:742
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].expression}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:748
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:752
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[3].expression}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:756
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[4].expression, Code: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:762
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:774
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:784
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:793
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:802
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:813
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:817
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:823
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:829
		{
			yyVAL.expression = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:833
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:839
		{
			yyVAL.expression = nil
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:843
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:849
		{
			yyVAL.expression = nil
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:853
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:859
		{
			yyVAL.expression = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:863
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:869
		{
			yyVAL.expression = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:873
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:879
		{
			yyVAL.expression = nil
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:883
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:887
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:893
		{
			yyVAL.expression = nil
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:897
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:903
		{
			yyVAL.expression = nil
		}
	case 149:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:907
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:913
		{
			yyVAL.expression = nil
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:917
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 152:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:923
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 153:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:927
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:933
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:937
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:943
		{
			yyVAL.expression = NewStringValue(yyDollar[1].token.Literal)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:947
		{
			yyVAL.expression = NewIntegerValueFromString(yyDollar[1].token.Literal)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:951
		{
			yyVAL.expression = NewFloatValueFromString(yyDollar[1].token.Literal)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:955
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:959
		{
			yyVAL.expression = NewDatetimeValueFromString(yyDollar[1].token.Literal)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:963
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:969
		{
			yyVAL.expression = NewTernaryValueFromString(yyDollar[1].token.Literal)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:975
		{
			yyVAL.expression = NewNullValueFromString(yyDollar[1].token.Literal)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:981
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, Column: yyDollar[1].identifier}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:985
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:989
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:993
		{
			yyVAL.expression = ColumnNumber{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Number: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:997
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1003
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1007
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1011
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1015
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1019
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1023
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1027
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1031
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1035
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1039
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1043
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1047
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1051
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1055
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1061
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1067
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1071
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1077
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1081
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1087
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1091
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1097
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1101
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1107
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1111
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 194:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1117
		{
			yyVAL.token = Token{}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1121
		{
			yyVAL.token = yyDollar[1].token
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1125
		{
			yyVAL.token = yyDollar[1].token
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1131
		{
			yyVAL.token = yyDollar[1].token
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1135
		{
			yyVAL.token = yyDollar[1].token
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1141
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1147
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1170
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1174
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1178
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1182
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].expression, Negation: yyDollar[3].token}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1190
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].expression, Negation: yyDollar[3].token}
		}
	case 207:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1194
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1198
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1202
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 210:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1206
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 211:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1210
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 212:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1214
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1218
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1222
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1226
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1230
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1234
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1238
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1242
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1248
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1252
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1256
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1260
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1264
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1268
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1272
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1278
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1282
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1286
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1290
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 231:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1296
		{
			yyVAL.expressions = nil
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1300
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1306
		{
			yyVAL.expression = Function{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1310
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1317
		{
			yyVAL.expression = AggregateFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1321
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1325
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1329
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1333
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1339
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 241:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1343
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 242:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1349
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 243:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1353
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 244:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1357
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 245:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1361
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 246:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1365
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1369
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1373
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 249:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1377
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1383
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1389
		{
			yyVAL.expression = nil
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1393
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1399
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1403
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1409
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1413
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1417
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1423
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1429
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1433
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1437
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1441
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1445
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1449
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1453
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1459
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[4].expression, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1463
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[4].expression, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1467
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[5].expression, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 269:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1471
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[5].expression, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: JoinCondition{Literal: yyDollar[6].token.Literal, On: yyDollar[7].expression}}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1475
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[5].expression, JoinType: yyDollar[3].token, Natural: yyDollar[2].token}
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1479
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[6].expression, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Natural: yyDollar[2].token}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1485
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1489
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1495
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1499
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1505
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1509
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1513
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1519
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1525
		{
			yyVAL.expression = nil
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1529
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1535
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1539
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1545
		{
			yyVAL.expression = nil
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1549
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1555
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1559
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1565
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1569
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1575
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1579
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1585
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1589
		{
			yyVAL.expressions = append([]Expression{Table{Object: yyDollar[1].expression}}, yyDollar[3].expressions...)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1595
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1599
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1605
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1609
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 298:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1615
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 299:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1619
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 300:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1623
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 301:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1627
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 302:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1633
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1639
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1645
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1649
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 306:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1655
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 307:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1660
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1667
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 309:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1671
		{
			yyVAL.procexprs = append([]ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}, yyDollar[5].procexprs...)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1677
		{
			yyVAL.procexpr = nil
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1681
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1687
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1691
		{
			yyVAL.procexprs = append([]ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}, yyDollar[5].procexprs...)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1697
		{
			yyVAL.procexpr = nil
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1701
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1707
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 317:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1711
		{
			yyVAL.procexprs = append([]ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}, yyDollar[5].procexprs...)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1717
		{
			yyVAL.procexpr = nil
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1721
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1727
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1731
		{
			yyVAL.procexprs = append([]ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}, yyDollar[5].procexprs...)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1737
		{
			yyVAL.procexpr = nil
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1741
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1747
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1751
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1755
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1759
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1763
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1767
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1771
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1775
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1781
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1787
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 334:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1791
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 335:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1797
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1803
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1807
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1813
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1817
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1823
		{
			yyVAL.token = Token{}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1827
		{
			yyVAL.token = yyDollar[1].token
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1833
		{
			yyVAL.token = Token{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1837
		{
			yyVAL.token = yyDollar[1].token
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1843
		{
			yyVAL.token = Token{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1847
		{
			yyVAL.token = yyDollar[1].token
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1853
		{
			yyVAL.token = Token{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1857
		{
			yyVAL.token = yyDollar[1].token
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1863
		{
			yyVAL.token = yyDollar[1].token
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1867
		{
			yyVAL.token = yyDollar[1].token
		}
	case 350:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1873
		{
			yyVAL.token = Token{}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1877
		{
			yyVAL.token = yyDollar[1].token
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1883
		{
			yyVAL.token = Token{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1887
		{
			yyVAL.token = yyDollar[1].token
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1893
		{
			yyVAL.token = yyDollar[1].token
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1897
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
