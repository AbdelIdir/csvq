//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	identifier  Identifier
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const TRIGGER = 57447
const FUNCTION = 57448
const AGGREGATE = 57449
const BEGIN = 57450
const RETURN = 57451
const IGNORE = 57452
const WITHIN = 57453
const VAR = 57454
const TIES = 57455
const NULLS = 57456
const ERROR = 57457
const COUNT = 57458
const LISTAGG = 57459
const AGGREGATE_FUNCTION = 57460
const FUNCTION_WITH_INS = 57461
const COMPARISON_OP = 57462
const STRING_OP = 57463
const SUBSTITUTION_OP = 57464
const UMINUS = 57465
const UPLUS = 57466

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"TRIGGER",
	"FUNCTION",
	"AGGREGATE",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"TIES",
	"NULLS",
	"ERROR",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_INS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1865

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 141,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 58,
	132, 222,
	-2, 141,
	-1, 100,
	57, 121,
	58, 121,
	59, 121,
	-2, 132,
	-1, 133,
	63, 333,
	67, 333,
	68, 333,
	-2, 347,
	-1, 135,
	63, 333,
	67, 333,
	68, 333,
	-2, 347,
	-1, 142,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 171,
	77, 272,
	-2, 333,
	-1, 181,
	81, 3,
	-2, 141,
	-1, 204,
	63, 333,
	67, 333,
	68, 333,
	-2, 279,
	-1, 221,
	63, 333,
	67, 333,
	68, 333,
	-2, 103,
	-1, 222,
	63, 333,
	67, 333,
	68, 333,
	-2, 104,
	-1, 229,
	63, 333,
	67, 333,
	68, 333,
	-2, 347,
	-1, 236,
	69, 0,
	120, 0,
	127, 0,
	-2, 192,
	-1, 237,
	69, 0,
	120, 0,
	127, 0,
	-2, 194,
	-1, 277,
	75, 3,
	79, 3,
	81, 3,
	-2, 141,
	-1, 296,
	47, 335,
	-2, 281,
	-1, 315,
	63, 333,
	67, 333,
	68, 333,
	-2, 265,
	-1, 331,
	63, 333,
	67, 333,
	68, 333,
	-2, 328,
	-1, 343,
	63, 333,
	67, 333,
	68, 333,
	-2, 347,
	-1, 349,
	81, 1,
	-2, 141,
	-1, 355,
	69, 0,
	120, 0,
	127, 0,
	-2, 203,
	-1, 381,
	81, 3,
	-2, 141,
	-1, 382,
	81, 3,
	-2, 141,
	-1, 385,
	63, 333,
	67, 333,
	68, 333,
	-2, 137,
	-1, 389,
	63, 333,
	67, 333,
	68, 333,
	-2, 183,
	-1, 417,
	63, 333,
	67, 333,
	68, 333,
	-2, 127,
	-1, 467,
	81, 276,
	-2, 333,
	-1, 478,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 481,
	63, 333,
	67, 333,
	68, 333,
	-2, 140,
	-1, 518,
	13, 141,
	131, 141,
	-2, 347,
	-1, 547,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 549,
	77, 273,
	79, 273,
	81, 273,
	-2, 333,
	-1, 559,
	75, 1,
	79, 1,
	81, 1,
	-2, 26,
	-1, 570,
	63, 333,
	67, 333,
	68, 333,
	-2, 294,
	-1, 577,
	63, 333,
	67, 333,
	68, 333,
	-2, 131,
	-1, 595,
	63, 333,
	67, 333,
	68, 333,
	-2, 68,
	-1, 600,
	81, 5,
	-2, 141,
	-1, 606,
	132, 88,
	135, 88,
	-2, 333,
	-1, 618,
	81, 3,
	-2, 141,
	-1, 651,
	75, 5,
	79, 5,
	81, 5,
	-2, 141,
	-1, 657,
	81, 5,
	-2, 141,
	-1, 658,
	81, 5,
	-2, 141,
	-1, 671,
	63, 333,
	67, 333,
	68, 333,
	-2, 263,
	-1, 694,
	63, 333,
	67, 333,
	68, 333,
	-2, 347,
	-1, 702,
	75, 3,
	79, 3,
	81, 3,
	-2, 141,
	-1, 704,
	63, 333,
	67, 333,
	68, 333,
	-2, 260,
	-1, 716,
	75, 5,
	79, 5,
	81, 5,
	-2, 141,
	-1, 717,
	81, 7,
	-2, 141,
	-1, 723,
	81, 5,
	-2, 141,
	-1, 742,
	75, 7,
	79, 7,
	81, 7,
	-2, 141,
	-1, 762,
	81, 5,
	-2, 141,
	-1, 768,
	81, 7,
	-2, 141,
	-1, 769,
	81, 7,
	-2, 141,
	-1, 778,
	75, 5,
	79, 5,
	81, 5,
	-2, 141,
	-1, 784,
	75, 1,
	79, 5,
	81, 5,
	-2, 141,
	-1, 787,
	75, 5,
	79, 5,
	81, 5,
	-2, 28,
	-1, 793,
	109, 24,
	-2, 22,
	-1, 798,
	81, 7,
	-2, 141,
	-1, 814,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 815,
	81, 3,
	-2, 141,
	-1, 820,
	75, 7,
	79, 7,
	81, 7,
	-2, 141,
	-1, 822,
	109, 50,
	-2, 47,
	-1, 829,
	81, 3,
	-2, 141,
	-1, 830,
	81, 3,
	-2, 141,
	-1, 832,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
}

const yyPrivate = 57344

const yyLast = 2764

var yyAct = [...]int{

	72, 22, 809, 22, 97, 628, 796, 186, 281, 760,
	616, 526, 296, 278, 2, 458, 2, 234, 1, 470,
	50, 429, 521, 397, 651, 490, 314, 116, 443, 203,
	121, 122, 665, 446, 527, 482, 304, 652, 3, 311,
	3, 498, 404, 147, 295, 445, 403, 316, 386, 276,
	195, 347, 137, 79, 112, 189, 60, 364, 292, 77,
	297, 307, 419, 816, 718, 162, 182, 408, 105, 409,
	410, 405, 402, 540, 424, 406, 541, 163, 143, 162,
	294, 115, 162, 151, 100, 150, 149, 164, 158, 594,
	152, 153, 179, 408, 567, 409, 410, 405, 402, 303,
	552, 406, 538, 191, 191, 537, 151, 519, 150, 149,
	151, 205, 191, 152, 153, 59, 52, 152, 153, 49,
	216, 217, 141, 141, 220, 141, 226, 494, 185, 293,
	485, 174, 422, 183, 21, 183, 183, 231, 183, 208,
	232, 391, 741, 22, 771, 758, 155, 154, 156, 757,
	756, 146, 755, 754, 407, 326, 2, 738, 5, 194,
	832, 190, 190, 256, 730, 259, 729, 106, 725, 102,
	206, 103, 724, 101, 659, 640, 639, 505, 638, 637,
	3, 636, 22, 284, 609, 287, 596, 593, 285, 191,
	238, 740, 39, 161, 191, 160, 39, 191, 585, 293,
	579, 318, 144, 143, 566, 39, 554, 553, 151, 145,
	150, 149, 551, 544, 345, 152, 153, 159, 536, 3,
	293, 533, 518, 476, 100, 465, 464, 463, 263, 462,
	334, 323, 253, 161, 255, 106, 254, 705, 51, 495,
	442, 306, 739, 161, 712, 53, 54, 55, 56, 291,
	348, 392, 711, 710, 709, 266, 341, 159, 708, 99,
	309, 310, 682, 330, 324, 676, 117, 159, 672, 266,
	662, 130, 131, 660, 454, 428, 427, 333, 22, 426,
	340, 425, 358, 372, 344, 108, 370, 368, 336, 362,
	335, 318, 352, 394, 191, 400, 185, 180, 351, 411,
	108, 169, 191, 168, 191, 202, 167, 109, 223, 52,
	209, 141, 136, 683, 413, 3, 156, 374, 565, 588,
	563, 681, 556, 346, 599, 430, 723, 377, 435, 400,
	400, 641, 401, 273, 430, 658, 556, 449, 390, 657,
	161, 600, 714, 680, 450, 642, 707, 430, 414, 396,
	22, 207, 190, 108, 210, 440, 679, 215, 678, 202,
	218, 219, 433, 2, 325, 52, 677, 459, 455, 39,
	172, 635, 224, 225, 227, 228, 418, 173, 420, 421,
	274, 555, 22, 22, 148, 200, 475, 3, 332, 212,
	472, 819, 473, 400, 807, 789, 492, 788, 783, 772,
	457, 161, 49, 770, 264, 765, 722, 721, 191, 474,
	399, 489, 701, 504, 69, 48, 687, 48, 663, 3,
	3, 120, 52, 318, 511, 159, 161, 561, 560, 126,
	127, 479, 480, 546, 96, 435, 161, 466, 400, 456,
	114, 114, 211, 118, 436, 438, 376, 500, 493, 502,
	393, 506, 503, 501, 359, 337, 338, 360, 361, 830,
	159, 161, 510, 530, 829, 213, 214, 161, 342, 161,
	769, 375, 175, 768, 119, 382, 799, 763, 619, 22,
	798, 762, 618, 801, 381, 432, 318, 124, 125, 128,
	129, 439, 559, 441, 762, 400, 350, 191, 191, 264,
	349, 365, 800, 161, 777, 161, 621, 161, 491, 571,
	572, 620, 477, 799, 350, 619, 3, 826, 569, 562,
	430, 379, 380, 818, 791, 400, 400, 159, 558, 159,
	568, 159, 597, 390, 564, 782, 727, 700, 612, 578,
	545, 589, 583, 625, 576, 39, 484, 201, 22, 258,
	156, 469, 40, 491, 261, 262, 93, 48, 240, 817,
	22, 2, 239, 241, 431, 613, 275, 719, 400, 184,
	608, 602, 614, 2, 191, 191, 191, 50, 308, 451,
	452, 198, 453, 603, 604, 3, 631, 632, 633, 161,
	499, 617, 634, 627, 39, 435, 48, 3, 286, 270,
	575, 22, 574, 269, 272, 271, 646, 74, 75, 76,
	399, 93, 78, 543, 243, 242, 645, 94, 573, 22,
	512, 497, 496, 114, 517, 197, 198, 199, 664, 408,
	384, 409, 410, 487, 488, 191, 289, 673, 732, 509,
	591, 592, 290, 508, 615, 670, 416, 675, 187, 531,
	539, 528, 22, 161, 623, 624, 3, 111, 22, 22,
	692, 41, 42, 47, 43, 44, 45, 46, 666, 110,
	699, 520, 94, 430, 140, 529, 697, 587, 532, 434,
	534, 610, 408, 491, 409, 410, 405, 402, 674, 542,
	406, 607, 48, 601, 703, 327, 328, 522, 523, 524,
	525, 161, 535, 22, 329, 423, 339, 188, 305, 580,
	581, 582, 584, 196, 731, 132, 557, 22, 22, 747,
	748, 49, 134, 161, 22, 626, 746, 139, 70, 27,
	113, 27, 64, 9, 161, 9, 761, 8, 398, 7,
	3, 6, 743, 22, 363, 170, 66, 644, 312, 313,
	448, 746, 728, 299, 286, 298, 764, 586, 649, 706,
	590, 85, 753, 22, 48, 65, 68, 743, 61, 22,
	22, 773, 598, 67, 62, 622, 486, 746, 746, 22,
	776, 388, 387, 138, 611, 22, 383, 746, 22, 797,
	288, 507, 650, 743, 743, 161, 48, 48, 2, 22,
	806, 415, 613, 787, 808, 104, 17, 746, 16, 71,
	513, 514, 515, 516, 123, 22, 22, 823, 824, 698,
	14, 22, 793, 743, 822, 447, 643, 444, 2, 746,
	22, 22, 13, 22, 12, 647, 648, 10, 822, 822,
	743, 822, 15, 688, 11, 743, 559, 744, 279, 695,
	696, 661, 793, 793, 743, 743, 653, 787, 4, 668,
	669, 742, 156, 277, 0, 146, 0, 793, 793, 0,
	793, 27, 0, 0, 0, 9, 0, 0, 0, 479,
	480, 0, 558, 684, 685, 766, 0, 0, 686, 0,
	0, 0, 0, 48, 0, 693, 0, 0, 0, 204,
	0, 408, 87, 409, 410, 405, 402, 629, 630, 406,
	27, 779, 780, 0, 9, 751, 144, 143, 57, 95,
	713, 786, 151, 145, 150, 149, 715, 0, 0, 152,
	153, 0, 0, 720, 0, 133, 0, 135, 155, 726,
	156, 810, 0, 146, 0, 0, 733, 734, 735, 736,
	737, 0, 448, 605, 774, 0, 448, 0, 157, 0,
	749, 750, 48, 827, 0, 0, 752, 0, 0, 0,
	0, 0, 779, 780, 48, 786, 792, 759, 0, 688,
	165, 166, 0, 0, 0, 0, 171, 0, 0, 177,
	178, 0, 40, 0, 144, 143, 0, 0, 157, 0,
	151, 145, 150, 149, 0, 0, 27, 152, 153, 781,
	9, 300, 192, 0, 40, 48, 785, 0, 0, 0,
	0, 790, 0, 0, 193, 0, 0, 0, 221, 222,
	802, 0, 0, 48, 192, 0, 229, 0, 0, 812,
	813, 233, 0, 235, 236, 237, 0, 0, 0, 244,
	245, 246, 247, 248, 249, 250, 40, 825, 0, 0,
	39, 0, 0, 0, 0, 831, 48, 0, 0, 0,
	691, 0, 48, 48, 412, 265, 268, 0, 27, 0,
	0, 0, 9, 0, 0, 0, 0, 0, 0, 0,
	0, 155, 154, 156, 0, 0, 146, 0, 0, 0,
	315, 41, 42, 47, 43, 44, 45, 46, 0, 331,
	27, 27, 0, 40, 9, 9, 0, 48, 0, 301,
	0, 0, 0, 41, 42, 47, 43, 44, 45, 46,
	343, 48, 48, 73, 0, 0, 0, 0, 48, 353,
	0, 355, 0, 354, 40, 356, 357, 144, 143, 0,
	0, 49, 0, 151, 145, 150, 149, 48, 0, 251,
	152, 153, 252, 0, 366, 41, 42, 47, 43, 44,
	45, 46, 367, 0, 0, 0, 0, 48, 0, 0,
	378, 0, 0, 48, 48, 0, 0, 0, 0, 385,
	389, 0, 0, 48, 40, 0, 0, 0, 0, 48,
	0, 0, 48, 0, 0, 417, 0, 27, 0, 0,
	805, 9, 0, 48, 73, 0, 0, 0, 0, 0,
	0, 0, 41, 42, 47, 43, 44, 45, 46, 48,
	48, 40, 74, 75, 76, 48, 93, 78, 49, 0,
	437, 0, 0, 483, 48, 48, 0, 48, 0, 0,
	460, 73, 0, 41, 42, 47, 43, 44, 45, 46,
	0, 155, 154, 156, 0, 467, 146, 0, 0, 484,
	0, 471, 0, 471, 0, 471, 27, 0, 0, 0,
	9, 0, 0, 0, 481, 0, 0, 0, 27, 88,
	0, 0, 9, 89, 471, 0, 0, 94, 0, 0,
	86, 82, 0, 41, 42, 47, 43, 44, 45, 46,
	91, 0, 0, 0, 0, 0, 0, 144, 143, 0,
	0, 0, 315, 151, 145, 150, 149, 0, 0, 27,
	152, 153, 0, 9, 0, 0, 0, 0, 0, 0,
	41, 42, 47, 84, 92, 83, 46, 27, 155, 154,
	156, 9, 52, 146, 0, 80, 81, 90, 98, 0,
	0, 548, 0, 0, 0, 0, 0, 0, 549, 0,
	0, 0, 550, 0, 0, 0, 0, 0, 63, 0,
	27, 0, 0, 0, 9, 389, 27, 27, 0, 0,
	9, 9, 0, 0, 0, 570, 0, 0, 0, 0,
	107, 0, 0, 0, 144, 143, 0, 0, 577, 0,
	151, 145, 150, 149, 0, 0, 0, 152, 153, 252,
	155, 154, 156, 0, 0, 146, 0, 0, 595, 0,
	0, 27, 0, 0, 820, 9, 0, 0, 0, 606,
	0, 0, 0, 0, 0, 27, 27, 0, 0, 9,
	9, 0, 27, 0, 0, 471, 9, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 0,
	0, 27, 0, 0, 0, 9, 144, 143, 0, 0,
	0, 0, 151, 145, 150, 149, 0, 0, 0, 152,
	153, 27, 0, 0, 0, 9, 0, 27, 27, 0,
	0, 9, 9, 0, 0, 0, 0, 27, 0, 0,
	0, 9, 0, 27, 0, 0, 27, 9, 0, 667,
	9, 155, 154, 156, 0, 0, 146, 27, 471, 671,
	0, 9, 0, 0, 0, 0, 0, 815, 0, 0,
	107, 0, 0, 27, 27, 0, 0, 9, 9, 27,
	0, 267, 267, 9, 689, 690, 694, 0, 27, 27,
	0, 27, 9, 9, 0, 9, 0, 0, 155, 154,
	156, 0, 302, 146, 704, 302, 0, 144, 143, 0,
	0, 0, 814, 151, 145, 150, 149, 0, 0, 0,
	152, 153, 0, 0, 0, 0, 0, 0, 40, 74,
	75, 76, 0, 93, 78, 49, 0, 0, 0, 155,
	154, 156, 0, 0, 146, 0, 0, 0, 73, 267,
	0, 267, 267, 784, 144, 143, 0, 40, 0, 0,
	151, 145, 150, 149, 0, 0, 0, 152, 153, 0,
	0, 0, 0, 0, 0, 767, 300, 192, 267, 369,
	371, 373, 0, 0, 40, 0, 88, 0, 0, 0,
	89, 0, 0, 775, 94, 144, 143, 86, 82, 0,
	0, 151, 145, 150, 149, 0, 0, 91, 152, 153,
	302, 0, 302, 0, 0, 0, 107, 0, 107, 107,
	0, 0, 0, 0, 803, 804, 0, 40, 0, 811,
	0, 0, 0, 0, 0, 0, 0, 41, 42, 47,
	84, 92, 83, 46, 0, 0, 0, 192, 0, 0,
	317, 828, 80, 81, 90, 98, 40, 74, 75, 76,
	0, 93, 78, 49, 0, 0, 41, 42, 47, 43,
	44, 45, 46, 0, 0, 0, 73, 267, 0, 267,
	0, 267, 0, 0, 301, 40, 74, 75, 76, 0,
	93, 78, 49, 41, 42, 47, 43, 44, 45, 46,
	267, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 302, 0, 89, 0,
	0, 0, 94, 201, 0, 86, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 91, 41, 42, 47, 43,
	44, 45, 46, 88, 0, 0, 0, 89, 0, 0,
	0, 94, 0, 0, 86, 82, 0, 0, 155, 154,
	156, 0, 0, 146, 91, 41, 42, 47, 84, 92,
	83, 46, 778, 0, 155, 154, 156, 0, 267, 146,
	80, 81, 90, 98, 40, 74, 75, 76, 0, 93,
	78, 49, 0, 0, 41, 42, 47, 320, 321, 319,
	322, 0, 0, 0, 73, 302, 302, 317, 0, 80,
	81, 90, 98, 0, 144, 143, 0, 0, 0, 0,
	151, 145, 150, 149, 0, 0, 0, 152, 153, 0,
	144, 143, 0, 0, 0, 52, 151, 145, 150, 149,
	0, 0, 88, 152, 153, 0, 89, 0, 0, 0,
	94, 0, 39, 86, 82, 0, 0, 155, 154, 156,
	0, 267, 146, 91, 0, 0, 40, 74, 230, 76,
	0, 93, 78, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 302, 302, 302, 40, 73, 0, 0, 0,
	0, 0, 0, 41, 42, 47, 84, 92, 83, 46,
	155, 154, 156, 395, 0, 146, 0, 0, 80, 81,
	90, 98, 0, 144, 143, 0, 717, 0, 0, 151,
	145, 150, 149, 0, 88, 0, 152, 153, 89, 0,
	0, 0, 94, 0, 267, 86, 82, 0, 0, 0,
	0, 0, 0, 302, 0, 91, 40, 74, 75, 76,
	0, 93, 78, 49, 0, 0, 144, 143, 0, 0,
	0, 0, 151, 145, 150, 149, 73, 0, 0, 152,
	153, 0, 0, 0, 0, 41, 42, 47, 84, 92,
	83, 46, 0, 0, 0, 0, 0, 52, 0, 0,
	80, 81, 90, 98, 41, 42, 47, 43, 44, 45,
	46, 0, 0, 0, 88, 0, 0, 0, 89, 0,
	0, 0, 94, 0, 0, 86, 82, 40, 74, 75,
	76, 0, 93, 78, 49, 91, 0, 0, 461, 154,
	156, 0, 0, 146, 0, 0, 0, 73, 0, 0,
	0, 0, 40, 74, 75, 76, 0, 93, 78, 49,
	0, 0, 0, 0, 0, 41, 42, 47, 84, 92,
	83, 46, 73, 0, 0, 0, 0, 0, 0, 0,
	80, 81, 90, 58, 0, 88, 0, 0, 0, 89,
	0, 0, 0, 94, 144, 143, 86, 82, 0, 0,
	151, 145, 150, 149, 0, 0, 91, 152, 153, 0,
	88, 0, 0, 0, 89, 0, 0, 0, 94, 0,
	0, 86, 82, 40, 0, 0, 0, 0, 0, 0,
	49, 91, 0, 0, 0, 34, 41, 42, 47, 84,
	92, 83, 46, 0, 0, 23, 0, 0, 24, 0,
	0, 80, 81, 90, 98, 0, 0, 0, 0, 0,
	0, 41, 42, 47, 320, 321, 319, 322, 0, 0,
	0, 0, 0, 0, 40, 0, 80, 81, 90, 98,
	0, 49, 0, 0, 0, 0, 34, 0, 0, 0,
	0, 39, 0, 821, 0, 795, 23, 0, 0, 24,
	0, 26, 0, 0, 31, 29, 30, 28, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 33, 282, 283,
	20, 35, 36, 37, 38, 0, 0, 0, 656, 0,
	0, 25, 41, 42, 47, 43, 44, 45, 46, 0,
	0, 40, 39, 0, 745, 0, 655, 0, 49, 0,
	0, 0, 26, 34, 0, 31, 29, 30, 28, 0,
	0, 0, 0, 23, 0, 0, 24, 32, 33, 282,
	283, 0, 35, 36, 37, 38, 0, 0, 0, 656,
	0, 0, 25, 41, 42, 47, 43, 44, 45, 46,
	40, 0, 0, 0, 0, 0, 0, 49, 40, 0,
	260, 0, 34, 0, 0, 0, 0, 0, 0, 39,
	0, 280, 23, 19, 0, 24, 0, 0, 0, 26,
	0, 0, 31, 29, 30, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 33, 282, 283, 20, 35,
	36, 37, 38, 0, 0, 0, 0, 0, 0, 25,
	41, 42, 47, 43, 44, 45, 46, 40, 39, 0,
	794, 0, 795, 0, 49, 0, 0, 0, 26, 34,
	0, 31, 29, 30, 28, 0, 0, 0, 0, 23,
	0, 0, 24, 32, 33, 0, 0, 20, 35, 36,
	37, 38, 0, 0, 0, 656, 0, 0, 25, 41,
	42, 47, 43, 44, 45, 46, 0, 41, 42, 47,
	43, 44, 45, 46, 40, 0, 257, 0, 155, 154,
	156, 0, 0, 146, 0, 39, 0, 654, 0, 655,
	0, 0, 716, 0, 0, 26, 0, 0, 31, 29,
	30, 28, 0, 0, 0, 0, 0, 155, 154, 156,
	32, 33, 146, 0, 0, 35, 36, 37, 38, 0,
	0, 702, 656, 0, 0, 25, 41, 42, 47, 43,
	44, 45, 46, 0, 144, 143, 0, 40, 0, 0,
	151, 145, 150, 149, 49, 0, 0, 152, 153, 34,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 23,
	0, 0, 24, 144, 143, 0, 0, 0, 0, 151,
	145, 150, 149, 0, 0, 0, 152, 153, 0, 0,
	0, 0, 0, 41, 42, 47, 43, 44, 45, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 154,
	156, 0, 0, 146, 0, 39, 0, 18, 0, 19,
	0, 0, 547, 0, 0, 26, 0, 0, 31, 29,
	30, 28, 0, 0, 0, 0, 0, 155, 154, 156,
	32, 33, 146, 0, 20, 35, 36, 37, 38, 0,
	0, 478, 0, 0, 0, 25, 41, 42, 47, 43,
	44, 45, 46, 0, 144, 143, 0, 0, 0, 0,
	151, 145, 150, 149, 155, 154, 156, 152, 153, 146,
	0, 0, 0, 0, 155, 154, 156, 0, 468, 146,
	0, 0, 0, 144, 143, 0, 0, 0, 142, 151,
	145, 150, 149, 155, 154, 156, 152, 153, 146, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 181,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 143, 0, 0, 0, 0, 151, 145, 150, 149,
	144, 143, 0, 152, 153, 0, 151, 145, 150, 149,
	0, 0, 0, 152, 153, 0, 0, 0, 0, 144,
	143, 0, 0, 0, 0, 151, 145, 150, 149, 0,
	0, 0, 152, 153,
}
var yyPact = [...]int{

	2533, -1000, 2533, -1000, -1000, 184, 184, 184, 184, 184,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2012, 2083,
	184, 154, 176, 639, 627, 710, 1140, 184, 391, 1650,
	1650, 398, 184, 184, 703, 2083, 717, 2083, 197, 649,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 189, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2610, 1850, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 189,
	-1000, -1000, -54, -49, -1000, -1000, -1000, -1000, -1000, -1000,
	2083, 2083, 175, 172, 170, -1000, 2083, 250, 169, 2083,
	2083, 1650, 166, -1000, -1000, 2629, 3, 506, 1850, -1000,
	610, 687, 1693, 1010, 699, 568, 476, -1000, 473, 2083,
	1650, 1693, 184, 4, 188, 184, 359, -1000, 184, 1650,
	1650, 184, 184, 1650, -1000, -1000, -1000, -1000, 2083, 2083,
	-1000, -1000, 181, 1780, -9, 1780, 1932, -1000, 2, 1650,
	-1000, 2083, 2533, 2083, 2083, 2083, 484, 495, 554, 2083,
	2083, 2083, 2083, 2083, 2083, 2083, -1000, 1027, 100, 104,
	102, 222, 2470, 1722, 2354, -1000, -1000, 2083, 476, 476,
	327, 1863, 138, 138, 536, 544, -1000, 796, -1000, 264,
	476, 2297, 1650, 710, 1650, 100, 592, 601, 1693, 64,
	-1000, -1000, -1000, 1623, 85, 690, 1623, 518, 518, 518,
	1751, -1000, 99, -1000, 1284, 133, 668, -1000, 710, 2083,
	-1000, 304, 146, 159, 157, -1000, 184, 184, -1000, -1000,
	686, 1863, 1863, 602, -1000, -1000, 2083, -1000, -1000, 1780,
	2083, 649, 192, 1863, 421, -20, -43, -43, 547, 2083,
	138, 2083, 138, 138, -16, -16, -1000, -1000, -1000, 874,
	796, -1000, 2083, -1000, -1000, -1000, -1000, -1000, 2083, -1000,
	-1000, 2083, 1594, 422, 2083, -1000, 1850, -1000, -1000, 138,
	156, 155, 152, 484, -1000, 2083, 365, 2297, -1000, -1000,
	2012, -1000, 184, 184, 404, -1000, -2, 395, 585, 2083,
	2108, 120, 1951, 1693, 1190, 690, 19, -1000, 1052, -1000,
	-1000, 988, -1000, 1623, 607, 2083, -1000, 222, -1000, 222,
	222, -1000, -3, 683, -1000, 1863, -1000, -1000, -57, 150,
	148, 145, 144, -1000, 1650, 184, 473, 548, 1109, 1190,
	-1000, 1863, 473, 1650, 473, 108, 1650, -1000, -1000, 710,
	184, 184, -1000, 1780, -1000, 143, 1650, 358, 421, 2533,
	2083, -1000, -1000, 2034, -1000, -43, -1000, -1000, -1000, 97,
	95, 94, 93, 356, 327, 2083, 2600, 487, 124, -1000,
	124, -1000, 124, -1000, 323, 91, 436, -1000, 2563, -1000,
	-1000, 2297, 2297, -1000, 2083, 1197, -1000, -5, 591, 1863,
	-1000, 138, 1190, -1000, -1000, 1650, -6, 699, -8, 112,
	-71, -1000, 575, 574, 541, 541, 581, 1623, -1000, -1000,
	-1000, -1000, 1650, 45, 690, 603, 598, 1863, 523, -1000,
	-1000, 523, 1751, 1650, 1722, 476, 476, 476, 2083, 90,
	-28, -1000, 184, 666, 1650, 616, 184, 1190, 612, 184,
	89, 184, 680, 86, -30, -1000, -1000, -33, 615, -59,
	184, -1000, -1000, -1000, 473, 81, 466, 352, 439, -1000,
	2534, 2083, -1000, -1000, -1000, -1000, -1000, 1863, 2083, 138,
	80, -35, 75, 74, -1000, 288, 211, 184, 2297, 347,
	346, 1863, -1000, 474, 207, 2108, 204, -1000, -1000, -1000,
	72, -41, -1000, 690, 1190, 2083, 1623, 1623, 571, -1000,
	555, 553, 541, -1000, -1000, -1000, -1000, -1000, 2083, 2083,
	-1000, -1000, 68, 2083, 2083, 1594, 2083, 66, 297, 1650,
	-1000, 184, -1000, -1000, 1190, 1190, 55, -46, 2083, -1000,
	54, 1650, -1000, 240, -1000, 233, 671, 710, 710, 2083,
	669, 710, -1000, 52, 659, 184, 464, 2533, 796, 1863,
	-1000, -1000, 138, -1000, -1000, -1000, 605, -1000, 403, 2533,
	435, 430, -1000, -1000, -1000, 623, 522, 1190, -1000, -1000,
	1863, 581, 853, 1623, 1623, 1623, 545, 1863, -1000, 275,
	49, 47, 46, 44, 43, 235, -1000, 184, 473, -1000,
	-1000, -1000, -1000, 666, 1650, 1863, 184, 184, -1000, 473,
	2413, 231, -1000, -1000, -1000, 615, 1863, 227, 42, -1000,
	142, -1000, 184, -1000, -1000, 139, 337, 403, 2297, 2083,
	184, 184, -1000, -1000, -1000, 138, -1000, -1000, -1000, 2083,
	137, 853, 634, 581, 1623, 134, 270, 262, 260, 247,
	225, 131, 199, -1000, 184, 184, -1000, -1000, -1000, 184,
	335, 2413, -1000, -1000, 2012, 2083, 1227, 2413, 2413, 654,
	473, -1000, 610, 463, 331, 440, -1000, 2443, -1000, -1000,
	-1000, 1863, 1650, -1000, 2083, 581, 251, 127, 123, 122,
	121, 113, 251, 246, -1000, -1000, -1000, 184, -1000, 2414,
	1906, 1, 504, -1000, 1780, 326, 325, 218, 40, 36,
	184, 462, 2297, 34, 1863, 32, 610, 597, 251, 251,
	251, 251, 251, 25, 111, -1000, 2413, 2230, 1650, 1650,
	-1000, 184, 184, 2413, -1000, -1000, -1000, 184, -1000, -1000,
	-1000, -1000, 2083, 21, 20, 18, 17, 13, -1000, 251,
	402, 324, 2230, -1000, -1000, 2012, -1000, 393, 390, -1000,
	-1000, 322, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12,
	318, 415, 2413, 2083, 439, 428, -1000, 1764, 2230, 2230,
	184, -1000, 461, 317, -1000, 1545, 439, 184, 2230, 316,
	314, -1000, 184, 450, 2346, -1000, 401, 2413, 426, 407,
	-1000, 184, -1000, -1000, 2012, 2083, 313, 401, 2230, 2083,
	184, 184, -1000, 1504, 1457, 0, 496, 449, 310, 438,
	-1000, 1356, -1000, -1000, 2346, 2179, 1650, 1650, 184, 443,
	2230, 2012, -1000, 384, 379, -1000, 184, -1000, 82, 2179,
	2179, -1000, 2179,
}
var yyPgo = [...]int{

	0, 17, 49, 191, 142, 37, 13, 24, 863, 861,
	858, 856, 8, 848, 847, 844, 842, 837, 34, 11,
	22, 834, 832, 33, 827, 825, 45, 28, 820, 814,
	809, 808, 806, 158, 62, 68, 805, 50, 36, 801,
	791, 7, 790, 35, 786, 134, 783, 52, 56, 59,
	53, 115, 899, 26, 902, 19, 48, 782, 781, 776,
	775, 1378, 774, 773, 768, 766, 195, 732, 765, 761,
	47, 237, 759, 58, 60, 755, 12, 753, 5, 749,
	748, 746, 745, 57, 744, 25, 29, 44, 55, 21,
	39, 741, 739, 738, 23, 737, 15, 51, 32, 10,
	736, 9, 2, 6, 0, 414, 4, 728, 730, 54,
	385, 43, 46, 41, 42, 61, 727, 384, 238,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 6, 6, 7, 7, 8, 8, 9, 9,
	10, 10, 10, 10, 10, 10, 11, 11, 11, 11,
	11, 11, 11, 12, 12, 13, 13, 13, 14, 14,
	14, 15, 15, 15, 15, 16, 16, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 18, 18, 19,
	19, 20, 20, 20, 20, 20, 21, 21, 21, 21,
	21, 22, 22, 22, 22, 23, 24, 24, 25, 26,
	26, 27, 27, 27, 28, 28, 28, 28, 29, 29,
	29, 29, 29, 29, 29, 30, 30, 30, 31, 31,
	31, 31, 31, 32, 32, 32, 33, 34, 34, 34,
	34, 35, 35, 36, 37, 37, 38, 38, 39, 39,
	40, 40, 41, 41, 42, 42, 42, 43, 43, 44,
	44, 45, 45, 46, 46, 47, 47, 48, 48, 48,
	48, 48, 48, 49, 50, 51, 51, 51, 51, 51,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 53, 54, 54, 55, 55, 56,
	56, 57, 57, 58, 58, 59, 59, 59, 60, 60,
	61, 62, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 64, 64, 64, 64, 64, 64, 64, 65, 65,
	65, 65, 66, 66, 67, 67, 68, 68, 68, 68,
	68, 69, 69, 70, 70, 70, 70, 70, 70, 70,
	70, 71, 72, 72, 73, 73, 74, 74, 74, 75,
	76, 76, 76, 76, 76, 76, 76, 77, 77, 77,
	77, 77, 77, 78, 78, 79, 79, 80, 80, 80,
	81, 82, 82, 83, 83, 84, 84, 85, 85, 86,
	86, 87, 87, 88, 88, 89, 89, 90, 90, 91,
	91, 91, 91, 92, 93, 94, 94, 95, 95, 96,
	96, 97, 97, 98, 98, 99, 99, 100, 100, 101,
	101, 102, 102, 103, 103, 104, 104, 104, 104, 104,
	104, 104, 104, 105, 106, 106, 107, 108, 108, 109,
	109, 110, 110, 111, 111, 112, 112, 113, 113, 114,
	114, 115, 115, 116, 116, 117, 117, 118, 118,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	8, 9, 7, 9, 9, 2, 8, 9, 7, 9,
	9, 2, 3, 2, 2, 8, 9, 1, 8, 9,
	1, 3, 3, 2, 3, 2, 2, 7, 8, 5,
	9, 6, 7, 9, 6, 8, 8, 1, 3, 1,
	3, 0, 1, 1, 2, 2, 6, 3, 3, 4,
	6, 7, 9, 6, 4, 1, 1, 3, 3, 1,
	3, 1, 1, 3, 10, 11, 11, 13, 0, 1,
	1, 1, 1, 2, 2, 5, 6, 3, 5, 3,
	3, 5, 3, 3, 4, 5, 5, 5, 4, 4,
	4, 1, 1, 3, 0, 2, 0, 2, 0, 3,
	0, 2, 0, 3, 0, 3, 4, 0, 2, 0,
	2, 0, 2, 6, 9, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 3, 1,
	3, 2, 4, 1, 1, 0, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 4, 4, 6, 6,
	4, 6, 4, 4, 4, 6, 4, 4, 6, 4,
	2, 3, 3, 3, 3, 3, 2, 2, 3, 3,
	2, 2, 0, 1, 4, 4, 5, 5, 5, 5,
	1, 5, 10, 8, 9, 9, 9, 9, 9, 8,
	10, 2, 0, 3, 1, 1, 1, 2, 3, 1,
	1, 1, 2, 3, 1, 1, 3, 4, 5, 6,
	7, 5, 6, 2, 4, 1, 1, 1, 3, 1,
	5, 0, 1, 4, 2, 0, 2, 1, 3, 1,
	3, 1, 3, 1, 3, 1, 3, 1, 3, 6,
	9, 5, 8, 7, 3, 1, 3, 5, 6, 4,
	2, 0, 2, 4, 2, 0, 2, 4, 2, 0,
	2, 4, 2, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	3, 0, 1, 0, 1, 0, 1, 0, 1, 1,
	1, 0, 1, 0, 1, 1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -10, -33, -91, -92, -95, -67,
	-17, -15, -21, -22, -28, -16, -31, -32, 74, 76,
	101, -45, -104, 26, 29, 112, 82, -107, 88, 86,
	87, 85, 97, 98, 16, 102, 103, 104, 105, 72,
	4, 113, 114, 116, 117, 118, 119, 115, -105, 11,
	-1, -118, 125, -118, -118, -118, -118, -52, 131, -51,
	-48, -64, -62, -61, -67, -68, -81, -63, -65, -105,
	-107, -30, -104, 24, 5, 6, 7, -49, 10, -50,
	128, 129, 74, 118, 116, -69, 73, -54, 62, 66,
	130, 83, 117, 9, 70, -52, -105, -106, 131, -118,
	-34, 19, 15, 17, -36, -35, 13, -61, 131, 131,
	30, 30, -109, -108, -105, -109, -104, -118, -105, 83,
	30, -104, -104, -29, 89, 90, 31, 32, 91, 92,
	-118, -118, 12, -52, 5, -52, 115, -47, -46, -116,
	25, 122, 78, 121, 120, 127, 69, -111, -117, 129,
	128, 126, 133, 134, 65, 64, 66, -52, -86, -33,
	-66, -45, 136, 131, 136, -52, -52, 131, 131, 131,
	-82, -52, 120, 127, -111, -117, -61, -52, -52, -104,
	131, 80, 63, 135, 63, -86, -41, 38, 20, -88,
	-73, -104, 24, 14, -88, -37, 14, 57, 58, 59,
	-110, 71, -66, -86, -52, -104, -73, -118, 135, 122,
	-118, 83, 30, 106, 107, -118, -104, -104, -118, -118,
	-104, -52, -52, 127, -118, -118, 135, -118, -118, -52,
	6, 135, -104, -52, -1, -52, -52, -52, -111, 67,
	63, 68, 61, 60, -52, -52, -52, -52, -52, -52,
	-52, 132, 135, 132, 132, 132, -104, 6, -110, -104,
	6, -110, -110, -83, 77, -54, 131, -61, -54, 67,
	63, 61, 60, 69, 116, -110, -2, -8, -6, -13,
	74, -12, 99, 100, -104, -106, -105, -104, -42, 44,
	41, -74, -73, 135, 16, -87, -76, -74, -75, -77,
	23, 131, -61, 14, -38, 18, -87, -115, 60, -115,
	-115, -90, -80, -79, -53, -52, -70, 126, -104, 118,
	116, 117, 119, 132, 131, -33, 22, 27, 28, 36,
	-109, -52, 84, 131, 84, 131, 131, -118, -118, 20,
	-48, -86, -118, -52, -47, 22, 131, -97, -96, 79,
	75, -49, -50, -52, -54, -52, -54, -54, -86, -66,
	-66, -66, -53, -84, -83, 79, -52, -54, 131, -61,
	131, -61, 131, -61, -111, -66, 81, -2, -52, -118,
	-118, 80, 80, -44, 45, -52, -56, -57, -58, -52,
	-70, 21, 131, -33, -104, 22, -88, -94, -93, -51,
	-104, -38, 53, -112, -114, 52, 56, 135, 48, 50,
	51, -104, 22, -76, -87, -39, 39, -52, -35, -34,
	-35, -35, 135, 22, 131, 131, 131, 131, 131, -89,
	-104, -118, -33, -18, 131, -104, -51, 131, -51, -33,
	-89, -33, 132, -27, -24, -26, -23, -25, -105, -104,
	-106, -118, -118, -118, 131, -89, 81, -97, -96, -1,
	-52, 64, 132, 132, 132, 132, 81, -52, 78, 64,
	-55, -54, -55, -55, 86, 63, 132, 76, 78, -2,
	-2, -52, -43, 46, 72, 135, -59, 42, 43, -55,
	-85, -51, -104, -37, 135, 127, 47, 47, -113, 49,
	-113, -112, -114, -87, -104, 132, -38, -40, 40, 41,
	-90, -104, -66, -110, -110, -110, -110, -66, 132, 135,
	-118, -20, 31, 32, 33, 34, -19, -18, 35, -118,
	-85, 37, -118, 132, -118, 22, 132, 135, 135, 35,
	132, 135, -118, -33, 132, 74, 81, 78, -52, -52,
	-54, 132, 135, 132, 132, 93, 111, -118, -2, -6,
	81, 81, -43, 113, -56, 114, 132, 135, -38, -94,
	-52, -76, -76, 47, 47, 47, -113, -52, -86, 132,
	-66, -66, -66, -53, -66, 132, -118, -33, 22, -89,
	-118, -51, -51, 132, 135, -52, 132, -104, -118, 84,
	108, 22, -23, -26, -26, -105, -52, 22, -27, 132,
	22, -118, 74, -1, -55, 39, -99, -98, 79, 75,
	76, 76, -60, 31, 32, 21, -33, -85, -78, 54,
	55, -76, -76, -76, 47, 96, 132, 132, 132, 132,
	132, 96, 110, -118, -33, -20, -19, -118, -118, -33,
	-3, -7, -5, -11, 74, 76, 109, 108, 108, 132,
	131, -118, 131, 81, -99, -98, -2, -52, -118, -118,
	-55, -52, 131, -78, 54, -76, 131, 96, 96, 96,
	96, 96, 131, 114, -118, -118, -118, 81, -3, -52,
	-52, -105, -106, -118, -52, -3, -3, 22, -33, -41,
	74, 81, 78, -89, -52, -71, -72, 95, 131, 131,
	131, 131, 131, -71, 96, -118, 78, 80, 63, 63,
	-118, 81, 81, 108, 132, 132, -118, 74, -2, 132,
	132, -41, 41, -71, -71, -71, -71, -71, 132, 131,
	-3, -4, -9, -7, -14, 74, -12, -104, -104, -118,
	-118, -3, -118, -86, 132, 132, 132, 132, 132, -71,
	-101, -100, 79, 75, -96, 81, -4, -52, 80, 80,
	81, 132, 81, -101, -3, -52, -96, 76, 78, -4,
	-4, -118, 74, 81, 78, -118, -4, -7, 81, 81,
	-118, 74, -3, -5, 74, 76, -103, -102, 79, 75,
	76, 76, -118, -52, -52, -105, -106, 81, -103, -102,
	-4, -52, -118, -118, 78, 80, 63, 63, 74, 81,
	78, 74, -12, -104, -104, -118, 74, -4, -52, 80,
	80, -118, 78,
}
var yyDef = [...]int{

	-2, -2, -2, 22, 23, 347, 347, 347, 347, 347,
	14, 15, 16, 17, 18, 19, 20, 21, 0, 0,
	347, 0, 0, 0, 0, 0, 0, 347, 0, 0,
	0, 98, 347, 347, 0, 0, 0, 0, 0, 343,
	315, 316, 317, 318, 319, 320, 321, 322, 0, 323,
	2, 9, 348, 10, 11, 12, 13, 333, -2, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 155, 0, 147, 148, 149, 150, 151, 152,
	0, 0, 0, 320, 318, 230, 271, 333, 0, 0,
	0, 0, 319, 153, 154, 333, 170, 0, 141, 35,
	-2, 0, 0, 0, 124, 0, 331, 122, 141, 222,
	0, 0, 347, 329, 327, 347, 0, 53, 347, 0,
	0, 347, 347, 0, 99, 100, 101, 102, 0, 0,
	55, 56, 0, -2, 347, -2, 347, 142, 145, 0,
	344, 0, -2, 0, 345, 346, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 334, 333, 0, 0,
	0, 0, 0, 222, 0, 216, 217, 222, 331, 331,
	0, -2, 345, 346, 0, 0, 210, 220, 221, 0,
	331, -2, 0, 0, 0, 0, 134, 0, 0, 0,
	283, 244, 245, 0, 0, 126, 0, 341, 341, 341,
	0, 332, 0, 223, -2, 141, 0, 51, 0, 0,
	52, 0, 0, 0, 0, 54, 347, 347, 77, 78,
	0, -2, -2, 0, 109, 110, 0, 112, 113, -2,
	148, 343, 0, 326, 301, 191, -2, -2, 0, 0,
	0, 0, 0, 0, 211, 212, 213, 214, 215, 218,
	219, 173, 0, 175, 190, 225, 156, 158, 222, 157,
	159, 222, 222, 275, 0, 193, 141, 176, 195, 0,
	0, 0, 0, 333, 107, 222, 0, -2, 26, 27,
	0, 47, 347, 347, 0, 325, 324, 0, 139, 0,
	0, 141, 246, 0, 0, 126, -2, 250, 251, 254,
	255, 141, 249, 0, 128, 0, 125, 0, 342, 0,
	0, 123, 287, 267, 269, -2, 266, 174, 155, 320,
	318, 319, 321, 224, 0, 347, 141, 0, 0, 0,
	330, -2, 141, 0, 141, 0, 0, 79, 84, 0,
	347, 347, 114, -2, 146, 0, 0, 0, 301, -2,
	0, 196, 197, 333, 200, -2, 204, 207, 280, 0,
	0, 0, 0, 0, 274, 0, 333, 0, 141, 202,
	141, 206, 141, 209, 0, 0, 0, 4, 333, 43,
	44, -2, -2, 116, 0, -2, 133, 179, 185, -2,
	184, 0, 0, 291, 247, 0, 284, 124, 295, 0,
	155, 297, 0, 0, 337, 337, 335, 0, 336, 339,
	340, 252, 0, 335, 126, 130, 0, -2, 118, 121,
	119, 120, 0, 0, 222, 331, 331, 331, 222, 0,
	285, 59, 347, 71, 0, 67, 347, 0, 0, 347,
	0, 347, 0, 0, 91, 92, 86, 89, 85, 0,
	347, 108, 111, 115, 141, 0, 0, 0, 300, 302,
	333, 0, 226, 227, 228, 229, 270, -2, 0, 0,
	0, 177, 0, 0, 105, 0, 231, 347, -2, 0,
	0, -2, 135, 137, 0, 0, 181, 186, 187, 289,
	0, 277, 248, 126, 0, 0, 0, 0, 0, 338,
	0, 0, 337, 282, 253, 256, 298, 117, 0, 0,
	288, 268, 0, 222, 222, 222, 222, 0, -2, 0,
	61, 347, 72, 73, 0, 0, 0, 69, 0, 64,
	0, 0, 76, 347, 83, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 347, 0, -2, 198, -2,
	199, 201, 0, 205, 208, 106, 0, 32, 305, -2,
	0, 0, 136, 138, 180, 0, 141, 0, 293, 296,
	-2, 257, 335, 0, 0, 0, 0, -2, 129, 224,
	0, 0, 0, 0, 0, 0, 57, 347, 141, 286,
	62, 74, 75, 71, 0, -2, 347, 347, 81, 141,
	-2, 0, 87, 93, 90, 0, -2, 0, 0, 143,
	0, 30, 347, 299, 178, 0, 0, 305, -2, 0,
	347, 347, 182, 188, 189, 0, 292, 278, 258, 0,
	0, 335, 335, 261, 0, 0, 226, 227, 228, 229,
	231, 0, 0, 58, 347, 347, 70, 65, 66, 347,
	0, -2, 24, 25, 0, 0, 347, -2, -2, 0,
	141, 31, 132, 0, 0, 304, 306, 333, 33, 34,
	290, -2, 0, 259, 0, 262, 242, 0, 0, 0,
	0, 0, 242, 0, 60, 63, 82, 347, 6, 333,
	333, 170, 0, 41, -2, 0, 0, 0, 0, 0,
	347, 0, -2, 0, -2, 0, 132, 0, 242, 242,
	242, 242, 242, 0, 0, 94, -2, -2, 0, 0,
	42, 347, 347, -2, 144, 232, 45, 347, 303, 264,
	233, 241, 0, 0, 0, 0, 0, 0, 239, 242,
	309, 0, -2, 28, 29, 0, 50, 0, 0, 95,
	96, 0, 46, 243, 234, 235, 236, 237, 238, 0,
	0, 309, -2, 0, 0, 0, 8, 333, -2, -2,
	347, 240, 0, 0, 310, 333, 308, 347, -2, 0,
	0, 97, 347, 0, -2, 38, 313, -2, 0, 0,
	36, 347, 307, -2, 0, 0, 0, 313, -2, 0,
	347, 347, 37, 333, 333, 170, 0, 0, 0, 312,
	314, 333, 39, 40, -2, -2, 0, 0, 347, 0,
	-2, 0, -2, 0, 0, 48, 347, 311, 333, -2,
	-2, 49, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 130, 3, 3, 3, 134, 3, 3,
	131, 132, 126, 129, 135, 128, 136, 133, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 125,
	3, 127,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:182
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:187
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:194
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:199
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:206
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:211
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:218
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:223
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:230
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:234
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:238
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:242
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:246
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:250
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:254
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:258
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:262
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:266
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:270
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:274
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:278
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:304
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:308
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:314
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:324
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:328
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:332
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:336
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 34:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:340
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:344
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:350
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:354
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:358
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:362
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:366
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:370
		{
			yyVAL.statement = Return{Value: NewNullValue()}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:374
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:380
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:384
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:390
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:394
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:398
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:404
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:408
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:412
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:418
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:422
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:426
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:430
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:436
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:440
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:446
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:450
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[7].expression}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:454
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Query: yyDollar[4].expression}
		}
	case 60:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:458
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:462
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Query: yyDollar[5].expression}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:466
		{
			yyVAL.statement = AddColumns{Table: yyDollar[3].expression, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 63:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:470
		{
			yyVAL.statement = AddColumns{Table: yyDollar[3].expression, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:474
		{
			yyVAL.statement = DropColumns{Table: yyDollar[3].expression, Columns: []Expression{yyDollar[5].expression}}
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:478
		{
			yyVAL.statement = DropColumns{Table: yyDollar[3].expression, Columns: yyDollar[6].expressions}
		}
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:482
		{
			yyVAL.statement = RenameColumn{Table: yyDollar[3].expression, Old: yyDollar[5].expression, New: yyDollar[7].identifier}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:488
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:492
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:498
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:502
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:508
		{
			yyVAL.expression = nil
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:512
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:516
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:520
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:524
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:530
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:534
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:538
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:542
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:546
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 81:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:552
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 82:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:556
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:560
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:564
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:570
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:576
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:580
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expression)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:586
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:592
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:596
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:602
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:606
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:610
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:616
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:620
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].expressions, Statements: yyDollar[9].program}
		}
	case 96:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:624
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Statements: yyDollar[9].program}
		}
	case 97:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.y:628
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Parameters: yyDollar[7].expressions, Statements: yyDollar[11].program}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:634
		{
			yyVAL.expression = nil
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:638
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:642
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:646
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:650
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:654
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:658
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:664
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:668
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:672
		{
			yyVAL.expression = CursorAttrebute{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Attrebute: yyDollar[3].token}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:678
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].expression.(PrimitiveType).Value}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:682
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:686
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:690
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:694
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].expression}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:700
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:704
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[3].expression}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:708
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[4].expression, Code: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:714
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:726
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:736
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:745
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:754
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:765
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:769
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:775
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:781
		{
			yyVAL.expression = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:785
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:791
		{
			yyVAL.expression = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:795
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:801
		{
			yyVAL.expression = nil
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:805
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:811
		{
			yyVAL.expression = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:815
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:821
		{
			yyVAL.expression = nil
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:825
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:831
		{
			yyVAL.expression = nil
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:835
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:839
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:845
		{
			yyVAL.expression = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:849
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:855
		{
			yyVAL.expression = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:859
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:865
		{
			yyVAL.expression = nil
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:869
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:875
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 144:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:879
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:885
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:889
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:895
		{
			yyVAL.expression = NewStringValue(yyDollar[1].token.Literal)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:899
		{
			yyVAL.expression = NewIntegerValueFromString(yyDollar[1].token.Literal)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:903
		{
			yyVAL.expression = NewFloatValueFromString(yyDollar[1].token.Literal)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:907
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:911
		{
			yyVAL.expression = NewDatetimeValueFromString(yyDollar[1].token.Literal)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:915
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:921
		{
			yyVAL.expression = NewTernaryValueFromString(yyDollar[1].token.Literal)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:927
		{
			yyVAL.expression = NewNullValueFromString(yyDollar[1].token.Literal)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:933
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, Column: yyDollar[1].identifier}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:937
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:941
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:945
		{
			yyVAL.expression = ColumnNumber{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Number: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:949
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:955
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:959
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:963
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:967
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:971
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:975
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:979
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:983
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:987
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:991
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:995
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:999
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1003
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1007
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1013
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1019
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1023
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1029
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1033
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1039
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1043
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1049
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1053
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1059
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1063
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1069
		{
			yyVAL.token = Token{}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1073
		{
			yyVAL.token = yyDollar[1].token
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1077
		{
			yyVAL.token = yyDollar[1].token
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1083
		{
			yyVAL.token = yyDollar[1].token
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1087
		{
			yyVAL.token = yyDollar[1].token
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1093
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1099
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1122
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1126
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1130
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1134
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1138
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].expression, Negation: yyDollar[3].token}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1142
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].expression, Negation: yyDollar[3].token}
		}
	case 198:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1146
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1150
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1154
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1158
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1162
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1166
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1170
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1174
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1178
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1182
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1190
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1194
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1200
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1204
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1208
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1212
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1216
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1220
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1224
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1230
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1234
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1238
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1242
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1248
		{
			yyVAL.expressions = nil
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1252
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1258
		{
			yyVAL.expression = Function{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1262
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1269
		{
			yyVAL.expression = AggregateFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1273
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1277
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1281
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1285
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1291
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 232:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1295
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 233:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1301
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 234:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1305
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 235:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1309
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 236:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1313
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 237:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1317
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 238:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1321
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 239:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1325
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 240:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1329
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1335
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1341
		{
			yyVAL.expression = nil
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1345
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1351
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1355
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1361
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1365
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1369
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1375
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1381
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1385
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1389
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1393
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1397
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1401
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1405
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1411
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[4].expression, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1415
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[4].expression, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1419
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[5].expression, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 260:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1423
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[5].expression, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: JoinCondition{Literal: yyDollar[6].token.Literal, On: yyDollar[7].expression}}
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1427
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[5].expression, JoinType: yyDollar[3].token, Natural: yyDollar[2].token}
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1431
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[6].expression, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Natural: yyDollar[2].token}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1437
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1441
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1447
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1451
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1457
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1461
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1465
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1471
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1477
		{
			yyVAL.expression = nil
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1481
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1487
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1491
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1497
		{
			yyVAL.expression = nil
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1501
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1507
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1511
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1517
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1521
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1527
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 282:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1531
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1537
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1541
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1547
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1551
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1557
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1561
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1567
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 290:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1571
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 291:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1575
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 292:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1579
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 293:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1585
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1591
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1597
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1601
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1607
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 298:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1612
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1619
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1623
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1629
		{
			yyVAL.procexpr = nil
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1633
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1639
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1643
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1649
		{
			yyVAL.procexpr = nil
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1653
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1659
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1663
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1669
		{
			yyVAL.procexpr = nil
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1673
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 311:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1679
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1683
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1689
		{
			yyVAL.procexpr = nil
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1693
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1699
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1703
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1707
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1711
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1715
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1719
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1723
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1727
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1733
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1739
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1743
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1749
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1755
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1759
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1765
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 330:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1769
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1775
		{
			yyVAL.token = Token{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1779
		{
			yyVAL.token = yyDollar[1].token
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1785
		{
			yyVAL.token = Token{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1789
		{
			yyVAL.token = yyDollar[1].token
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1795
		{
			yyVAL.token = Token{}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1799
		{
			yyVAL.token = yyDollar[1].token
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1805
		{
			yyVAL.token = Token{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1809
		{
			yyVAL.token = yyDollar[1].token
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1815
		{
			yyVAL.token = yyDollar[1].token
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1819
		{
			yyVAL.token = yyDollar[1].token
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1825
		{
			yyVAL.token = Token{}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1829
		{
			yyVAL.token = yyDollar[1].token
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1835
		{
			yyVAL.token = Token{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1839
		{
			yyVAL.token = yyDollar[1].token
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1846
		{
			yyVAL.token = yyDollar[1].token
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1850
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1857
		{
			yyVAL.token = Token{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1861
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
