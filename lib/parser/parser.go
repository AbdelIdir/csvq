//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const TIES = 57388
const PERCENT = 57389
const JOIN = 57390
const INNER = 57391
const OUTER = 57392
const LEFT = 57393
const RIGHT = 57394
const FULL = 57395
const CROSS = 57396
const ON = 57397
const USING = 57398
const NATURAL = 57399
const UNION = 57400
const INTERSECT = 57401
const EXCEPT = 57402
const ALL = 57403
const ANY = 57404
const EXISTS = 57405
const IN = 57406
const AND = 57407
const OR = 57408
const NOT = 57409
const BETWEEN = 57410
const LIKE = 57411
const IS = 57412
const NULL = 57413
const NULLS = 57414
const DISTINCT = 57415
const WITH = 57416
const CASE = 57417
const IF = 57418
const ELSEIF = 57419
const WHILE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const DO = 57424
const END = 57425
const DECLARE = 57426
const CURSOR = 57427
const FOR = 57428
const FETCH = 57429
const OPEN = 57430
const CLOSE = 57431
const DISPOSE = 57432
const NEXT = 57433
const PRIOR = 57434
const ABSOLUTE = 57435
const RELATIVE = 57436
const RANGE = 57437
const SEPARATOR = 57438
const PARTITION = 57439
const OVER = 57440
const COMMIT = 57441
const ROLLBACK = 57442
const CONTINUE = 57443
const BREAK = 57444
const EXIT = 57445
const PRINT = 57446
const PRINTF = 57447
const SOURCE = 57448
const FUNCTION = 57449
const BEGIN = 57450
const RETURN = 57451
const VAR = 57452
const COMPARISON_OP = 57453
const STRING_OP = 57454
const SUBSTITUTION_OP = 57455
const UMINUS = 57456
const UPLUS = 57457

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"TIES",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"NULLS",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"BEGIN",
	"RETURN",
	"VAR",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1734

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 119,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 95,
	58, 99,
	59, 99,
	60, 99,
	-2, 110,
	-1, 124,
	64, 300,
	68, 300,
	69, 300,
	-2, 316,
	-1, 138,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 163,
	79, 240,
	-2, 300,
	-1, 172,
	83, 3,
	-2, 119,
	-1, 195,
	64, 300,
	68, 300,
	69, 300,
	-2, 247,
	-1, 203,
	4, 85,
	-2, 300,
	-1, 204,
	4, 86,
	-2, 300,
	-1, 218,
	64, 300,
	68, 300,
	69, 300,
	-2, 295,
	-1, 221,
	70, 0,
	111, 0,
	118, 0,
	-2, 167,
	-1, 222,
	70, 0,
	111, 0,
	118, 0,
	-2, 169,
	-1, 243,
	96, 110,
	123, 247,
	-2, 300,
	-1, 260,
	77, 3,
	81, 3,
	83, 3,
	-2, 119,
	-1, 277,
	48, 302,
	50, 306,
	-2, 249,
	-1, 296,
	64, 300,
	68, 300,
	69, 300,
	-2, 233,
	-1, 320,
	83, 1,
	-2, 119,
	-1, 326,
	70, 0,
	111, 0,
	118, 0,
	-2, 178,
	-1, 334,
	96, 110,
	123, 203,
	-2, 300,
	-1, 352,
	83, 3,
	-2, 119,
	-1, 355,
	64, 300,
	68, 300,
	69, 300,
	-2, 115,
	-1, 359,
	64, 300,
	68, 300,
	69, 300,
	-2, 158,
	-1, 371,
	50, 306,
	-2, 302,
	-1, 386,
	64, 300,
	68, 300,
	69, 300,
	-2, 105,
	-1, 423,
	83, 244,
	-2, 300,
	-1, 433,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 435,
	64, 300,
	68, 300,
	69, 300,
	-2, 118,
	-1, 483,
	83, 5,
	-2, 119,
	-1, 487,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 493,
	79, 241,
	81, 241,
	83, 241,
	-2, 300,
	-1, 502,
	77, 1,
	81, 1,
	83, 1,
	-2, 25,
	-1, 512,
	64, 300,
	68, 300,
	69, 300,
	-2, 262,
	-1, 518,
	64, 300,
	68, 300,
	69, 300,
	-2, 109,
	-1, 526,
	64, 300,
	68, 300,
	69, 300,
	-2, 61,
	-1, 533,
	77, 5,
	81, 5,
	83, 5,
	-2, 119,
	-1, 540,
	83, 5,
	-2, 119,
	-1, 551,
	83, 3,
	-2, 119,
	-1, 578,
	64, 300,
	68, 300,
	69, 300,
	-2, 316,
	-1, 591,
	64, 300,
	68, 300,
	69, 300,
	-2, 231,
	-1, 601,
	77, 5,
	81, 5,
	83, 5,
	-2, 119,
	-1, 602,
	83, 7,
	-2, 119,
	-1, 608,
	77, 3,
	81, 3,
	83, 3,
	-2, 119,
	-1, 617,
	77, 7,
	81, 7,
	83, 7,
	-2, 119,
	-1, 632,
	83, 5,
	-2, 119,
	-1, 638,
	83, 7,
	-2, 119,
	-1, 646,
	77, 5,
	81, 5,
	83, 5,
	-2, 119,
	-1, 650,
	77, 1,
	81, 5,
	83, 5,
	-2, 119,
	-1, 653,
	77, 5,
	81, 5,
	83, 5,
	-2, 27,
	-1, 658,
	109, 23,
	-2, 20,
	-1, 663,
	83, 7,
	-2, 119,
	-1, 676,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 677,
	83, 3,
	-2, 119,
	-1, 681,
	77, 7,
	81, 7,
	83, 7,
	-2, 119,
	-1, 683,
	109, 47,
	-2, 44,
	-1, 689,
	83, 3,
	-2, 119,
	-1, 691,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
}

const yyPrivate = 57344

const yyLast = 2240

var yyAct = [...]int{

	68, 24, 615, 24, 92, 630, 661, 672, 595, 414,
	549, 264, 560, 154, 586, 175, 365, 426, 50, 467,
	533, 219, 1, 472, 41, 436, 372, 313, 444, 112,
	113, 292, 318, 452, 473, 184, 75, 143, 360, 356,
	276, 370, 100, 178, 73, 127, 2, 285, 55, 288,
	336, 71, 157, 282, 284, 393, 49, 388, 275, 259,
	157, 159, 158, 21, 525, 147, 375, 157, 376, 377,
	378, 373, 148, 149, 371, 509, 131, 6, 496, 95,
	277, 151, 107, 152, 43, 171, 142, 447, 616, 174,
	38, 85, 86, 87, 208, 88, 89, 40, 180, 180,
	147, 274, 146, 145, 439, 191, 180, 148, 149, 139,
	69, 198, 199, 408, 147, 202, 146, 145, 166, 391,
	194, 148, 149, 40, 174, 210, 136, 140, 139, 361,
	211, 156, 629, 147, 141, 146, 145, 627, 614, 24,
	148, 149, 183, 374, 101, 155, 97, 610, 98, 81,
	96, 179, 179, 82, 583, 582, 38, 90, 240, 192,
	246, 79, 545, 38, 38, 310, 274, 156, 274, 544,
	529, 84, 194, 24, 267, 281, 181, 527, 180, 268,
	223, 155, 37, 180, 69, 524, 180, 151, 150, 152,
	298, 521, 142, 217, 508, 498, 497, 495, 479, 466,
	411, 37, 43, 407, 330, 76, 77, 83, 67, 241,
	101, 247, 303, 248, 95, 314, 239, 238, 598, 261,
	592, 317, 308, 80, 251, 570, 287, 215, 297, 319,
	362, 273, 566, 140, 139, 316, 404, 290, 291, 147,
	141, 146, 145, 344, 152, 236, 148, 149, 237, 251,
	342, 329, 340, 103, 307, 299, 309, 216, 103, 332,
	323, 24, 106, 214, 448, 311, 64, 39, 322, 39,
	43, 205, 540, 298, 103, 180, 368, 156, 481, 156,
	379, 396, 399, 381, 52, 180, 93, 131, 164, 137,
	483, 312, 52, 315, 109, 165, 346, 567, 520, 134,
	314, 397, 368, 368, 597, 492, 419, 261, 43, 499,
	213, 401, 314, 54, 152, 156, 431, 142, 364, 103,
	348, 24, 40, 134, 369, 383, 680, 394, 179, 155,
	689, 387, 670, 389, 390, 395, 654, 156, 649, 405,
	430, 111, 415, 640, 635, 607, 605, 584, 572, 195,
	421, 363, 413, 24, 133, 503, 486, 422, 140, 139,
	428, 412, 429, 368, 147, 141, 146, 145, 53, 91,
	347, 148, 149, 664, 3, 180, 135, 663, 133, 443,
	638, 456, 633, 457, 124, 352, 632, 552, 250, 253,
	321, 551, 298, 463, 320, 632, 110, 397, 451, 261,
	368, 446, 249, 52, 156, 39, 156, 465, 156, 314,
	665, 645, 434, 450, 249, 455, 337, 153, 155, 298,
	155, 144, 155, 462, 553, 432, 160, 161, 475, 163,
	297, 458, 169, 170, 24, 664, 482, 321, 552, 39,
	298, 269, 686, 679, 65, 26, 656, 26, 368, 325,
	180, 327, 328, 648, 625, 180, 606, 542, 489, 117,
	118, 485, 37, 504, 511, 557, 438, 190, 156, 203,
	204, 368, 368, 507, 258, 519, 152, 528, 339, 506,
	502, 212, 478, 269, 24, 515, 532, 218, 24, 220,
	221, 222, 298, 501, 510, 229, 230, 231, 232, 233,
	234, 235, 167, 24, 425, 88, 678, 225, 243, 543,
	368, 224, 226, 603, 548, 180, 550, 180, 37, 115,
	116, 119, 120, 173, 41, 255, 397, 39, 289, 254,
	513, 546, 257, 256, 24, 517, 573, 187, 559, 296,
	579, 24, 576, 580, 568, 156, 228, 227, 453, 569,
	564, 516, 24, 186, 187, 188, 514, 454, 449, 531,
	505, 585, 354, 271, 427, 180, 427, 90, 427, 441,
	442, 612, 156, 269, 324, 590, 326, 375, 594, 376,
	377, 378, 491, 26, 461, 427, 558, 39, 418, 367,
	272, 460, 385, 314, 334, 563, 176, 565, 261, 338,
	476, 474, 24, 24, 622, 555, 556, 613, 105, 24,
	104, 587, 611, 349, 621, 398, 400, 26, 24, 39,
	609, 355, 359, 618, 130, 634, 628, 530, 484, 621,
	410, 392, 38, 24, 156, 642, 386, 641, 618, 24,
	59, 11, 182, 11, 644, 593, 38, 24, 599, 494,
	621, 24, 181, 657, 24, 261, 573, 306, 621, 618,
	662, 300, 301, 38, 24, 669, 69, 653, 626, 671,
	302, 416, 543, 38, 177, 621, 445, 24, 24, 684,
	286, 38, 24, 181, 618, 185, 123, 423, 547, 683,
	24, 382, 24, 621, 468, 469, 470, 471, 618, 380,
	39, 683, 618, 683, 435, 26, 636, 42, 40, 38,
	618, 86, 653, 445, 490, 44, 45, 46, 47, 48,
	427, 85, 86, 87, 261, 88, 89, 647, 94, 126,
	125, 38, 129, 189, 108, 652, 261, 38, 502, 121,
	122, 296, 51, 243, 40, 74, 72, 70, 631, 434,
	39, 501, 673, 9, 39, 366, 8, 132, 7, 335,
	162, 367, 61, 293, 331, 26, 294, 488, 359, 39,
	687, 280, 279, 278, 493, 596, 78, 242, 647, 11,
	652, 427, 60, 63, 522, 523, 56, 90, 62, 359,
	57, 151, 150, 152, 554, 440, 142, 26, 512, 358,
	39, 357, 128, 353, 93, 270, 52, 39, 459, 384,
	518, 99, 16, 11, 58, 196, 66, 197, 39, 114,
	200, 201, 4, 445, 526, 14, 13, 10, 15, 12,
	619, 262, 206, 207, 209, 535, 102, 140, 139, 5,
	617, 359, 260, 147, 141, 146, 145, 0, 0, 0,
	148, 149, 237, 0, 0, 0, 0, 375, 534, 376,
	377, 378, 373, 561, 562, 371, 0, 0, 39, 39,
	0, 0, 0, 0, 0, 39, 0, 375, 26, 376,
	377, 378, 373, 0, 39, 371, 574, 575, 578, 0,
	0, 0, 0, 0, 0, 0, 168, 0, 0, 39,
	0, 11, 588, 0, 0, 39, 304, 305, 534, 0,
	0, 591, 0, 39, 0, 534, 0, 39, 0, 0,
	39, 0, 0, 0, 0, 0, 0, 93, 26, 0,
	39, 0, 26, 0, 0, 151, 150, 152, 0, 0,
	142, 0, 0, 39, 39, 0, 0, 26, 39, 0,
	691, 0, 0, 0, 0, 0, 39, 0, 39, 0,
	0, 11, 0, 0, 0, 0, 0, 0, 0, 0,
	637, 102, 0, 350, 351, 0, 534, 534, 26, 252,
	252, 140, 139, 643, 0, 26, 0, 147, 141, 146,
	145, 0, 534, 11, 148, 149, 26, 283, 0, 0,
	283, 0, 0, 0, 0, 0, 0, 534, 0, 667,
	668, 0, 0, 534, 674, 402, 403, 0, 0, 0,
	406, 534, 0, 409, 0, 658, 0, 0, 534, 0,
	0, 0, 688, 0, 0, 0, 0, 0, 534, 0,
	252, 0, 252, 252, 0, 0, 26, 26, 0, 0,
	0, 658, 658, 26, 0, 0, 534, 0, 0, 0,
	0, 0, 26, 0, 658, 0, 658, 0, 0, 252,
	341, 343, 345, 0, 11, 0, 0, 26, 0, 0,
	0, 0, 0, 26, 0, 0, 0, 38, 85, 86,
	87, 26, 88, 89, 40, 26, 0, 0, 26, 283,
	0, 0, 0, 102, 0, 102, 102, 69, 26, 477,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 0,
	0, 26, 26, 0, 11, 0, 26, 0, 11, 0,
	0, 0, 0, 0, 26, 0, 26, 0, 0, 0,
	500, 0, 0, 11, 0, 0, 81, 0, 0, 0,
	82, 0, 0, 0, 90, 252, 244, 252, 79, 252,
	38, 85, 86, 87, 0, 88, 89, 40, 84, 0,
	0, 0, 0, 0, 11, 0, 252, 0, 0, 0,
	69, 11, 0, 0, 0, 0, 0, 0, 0, 283,
	0, 0, 11, 541, 0, 0, 0, 0, 0, 0,
	245, 0, 76, 77, 83, 67, 464, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 82, 0, 0, 0, 90, 0, 0,
	37, 79, 0, 0, 0, 0, 0, 0, 0, 571,
	252, 84, 11, 11, 0, 0, 577, 0, 0, 11,
	581, 0, 0, 0, 0, 0, 0, 0, 11, 0,
	0, 589, 0, 0, 283, 0, 0, 0, 0, 283,
	0, 0, 0, 11, 0, 76, 77, 83, 67, 11,
	600, 0, 0, 0, 0, 0, 604, 11, 0, 0,
	0, 11, 0, 0, 11, 0, 38, 85, 86, 87,
	0, 88, 89, 40, 11, 0, 0, 0, 0, 0,
	0, 252, 0, 623, 624, 0, 69, 11, 11, 0,
	0, 0, 11, 0, 0, 0, 0, 0, 0, 283,
	11, 283, 11, 639, 0, 0, 0, 38, 85, 86,
	87, 0, 88, 89, 40, 0, 0, 0, 0, 0,
	0, 0, 0, 651, 0, 81, 655, 69, 0, 82,
	0, 0, 0, 90, 666, 244, 0, 79, 0, 0,
	0, 0, 252, 675, 0, 0, 0, 84, 0, 283,
	0, 0, 0, 0, 0, 0, 0, 685, 0, 0,
	0, 0, 0, 0, 690, 0, 81, 0, 0, 0,
	82, 0, 0, 0, 90, 0, 0, 0, 79, 245,
	0, 76, 77, 83, 67, 193, 0, 0, 84, 38,
	85, 86, 87, 0, 88, 89, 40, 0, 38, 85,
	86, 87, 0, 88, 89, 40, 0, 0, 0, 69,
	0, 0, 0, 0, 38, 85, 86, 87, 69, 88,
	89, 40, 76, 77, 83, 67, 193, 0, 0, 0,
	0, 0, 0, 0, 69, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 0, 82, 0, 0, 0, 90, 81, 0, 0,
	79, 82, 0, 0, 0, 90, 0, 0, 0, 79,
	84, 437, 0, 81, 0, 0, 0, 82, 0, 84,
	0, 90, 0, 0, 0, 79, 0, 0, 0, 151,
	150, 152, 0, 0, 142, 84, 0, 0, 438, 0,
	0, 0, 295, 0, 76, 77, 83, 67, 0, 0,
	0, 333, 0, 76, 77, 83, 67, 151, 150, 152,
	0, 0, 142, 0, 0, 0, 0, 0, 0, 76,
	77, 83, 67, 0, 0, 140, 139, 0, 0, 0,
	0, 147, 141, 146, 145, 151, 150, 152, 148, 149,
	142, 0, 0, 0, 0, 0, 151, 150, 152, 0,
	681, 142, 0, 140, 139, 0, 0, 0, 0, 147,
	141, 146, 145, 677, 0, 0, 148, 149, 237, 151,
	150, 152, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 140, 139, 0, 676, 0, 0, 147, 141, 146,
	145, 0, 140, 139, 148, 149, 0, 0, 147, 141,
	146, 145, 151, 150, 152, 148, 149, 142, 0, 0,
	0, 0, 0, 0, 0, 140, 139, 650, 0, 0,
	0, 147, 141, 146, 145, 151, 150, 152, 148, 149,
	142, 0, 0, 0, 0, 0, 151, 150, 152, 0,
	646, 142, 0, 0, 0, 0, 0, 0, 140, 139,
	0, 608, 0, 0, 147, 141, 146, 145, 151, 150,
	152, 148, 149, 142, 0, 0, 0, 0, 0, 0,
	0, 140, 139, 0, 0, 0, 0, 147, 141, 146,
	145, 0, 140, 139, 148, 149, 0, 0, 147, 141,
	146, 145, 0, 0, 0, 148, 149, 151, 150, 152,
	0, 0, 142, 0, 140, 139, 0, 0, 0, 43,
	147, 141, 146, 145, 602, 0, 0, 148, 149, 151,
	150, 152, 0, 0, 142, 0, 0, 0, 0, 0,
	151, 150, 152, 0, 601, 142, 0, 0, 0, 0,
	0, 0, 0, 140, 139, 487, 0, 0, 0, 147,
	141, 146, 145, 151, 150, 152, 148, 149, 142, 0,
	0, 0, 0, 0, 0, 140, 139, 0, 433, 0,
	0, 147, 141, 146, 145, 0, 140, 139, 148, 149,
	0, 0, 147, 141, 146, 145, 151, 150, 152, 148,
	149, 142, 420, 0, 0, 0, 0, 0, 0, 140,
	139, 424, 0, 0, 0, 147, 141, 146, 145, 151,
	150, 152, 148, 149, 142, 0, 0, 0, 0, 151,
	150, 152, 0, 0, 142, 0, 172, 0, 0, 151,
	150, 152, 140, 139, 142, 0, 0, 0, 147, 141,
	146, 145, 0, 0, 138, 148, 149, 151, 150, 152,
	0, 0, 142, 0, 0, 140, 139, 0, 0, 0,
	0, 147, 141, 146, 145, 140, 139, 0, 148, 149,
	0, 147, 141, 146, 145, 140, 139, 0, 148, 149,
	0, 147, 141, 146, 145, 417, 150, 152, 148, 149,
	142, 38, 0, 140, 139, 0, 0, 0, 40, 147,
	141, 146, 145, 33, 0, 0, 148, 149, 0, 0,
	0, 0, 0, 22, 0, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 140, 139, 0, 0, 0, 40, 147, 141, 146,
	145, 33, 0, 0, 148, 149, 0, 0, 0, 0,
	0, 22, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 37, 0, 682, 0, 660, 0, 0, 0, 0,
	0, 17, 0, 38, 30, 28, 29, 27, 0, 0,
	40, 0, 0, 0, 0, 33, 31, 32, 265, 266,
	20, 34, 35, 36, 0, 22, 538, 25, 23, 37,
	0, 620, 0, 537, 0, 0, 0, 0, 0, 539,
	0, 38, 30, 28, 29, 27, 0, 0, 40, 0,
	0, 0, 0, 33, 31, 32, 265, 266, 0, 34,
	35, 36, 0, 22, 538, 25, 23, 0, 0, 0,
	0, 0, 0, 37, 0, 263, 0, 19, 0, 0,
	0, 0, 0, 17, 0, 38, 30, 28, 29, 27,
	0, 0, 40, 0, 0, 0, 0, 33, 31, 32,
	265, 266, 20, 34, 35, 36, 0, 22, 0, 25,
	23, 37, 0, 659, 0, 660, 0, 0, 0, 0,
	0, 17, 0, 38, 30, 28, 29, 27, 0, 0,
	40, 0, 0, 0, 0, 33, 31, 32, 0, 0,
	20, 34, 35, 36, 0, 22, 538, 25, 23, 0,
	0, 0, 0, 0, 0, 37, 0, 536, 0, 537,
	0, 0, 0, 0, 0, 539, 0, 0, 30, 28,
	29, 27, 0, 0, 0, 0, 0, 0, 0, 0,
	31, 32, 0, 0, 0, 34, 35, 36, 0, 0,
	538, 25, 0, 37, 0, 18, 0, 19, 0, 0,
	0, 0, 0, 17, 0, 0, 30, 28, 29, 27,
	0, 0, 0, 0, 0, 0, 0, 0, 31, 32,
	0, 0, 20, 34, 35, 36, 0, 0, 0, 25,
}
var yyPact = [...]int{

	2129, -1000, 2129, -1000, -1000, -1000, 154, 154, 154, 154,
	154, 154, -1000, -1000, -1000, -1000, -1000, 733, 1440, 1440,
	154, 131, 580, 578, 140, 697, 154, 311, 727, 727,
	428, 154, 154, 674, 1440, 725, 724, 599, -1000, 174,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 154,
	269, 0, 176, 1804, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 174, -1000, -1000, 1156, -60, -66,
	-1000, -1000, -1000, -1000, -1000, -1000, 1440, 1440, -1000, 1440,
	177, 136, 1440, 1440, 727, -1000, -1000, -1000, -1000, -1000,
	-1000, 1784, 459, -37, -1000, 558, 654, 659, 628, 671,
	495, 394, -1000, 388, 727, 659, 1333, 154, -1000, 154,
	727, 727, 154, 154, 727, -1000, -1000, -1000, -1000, 1440,
	1440, -1000, -1000, 153, 1633, -32, 154, -1000, -1, 727,
	-1000, 1440, -1000, 224, 141, 135, 697, 1440, 2129, 1440,
	1440, 1440, 409, 443, 485, 1440, 1440, 1440, 1440, 1440,
	1440, 1440, -1000, 122, 94, 93, 197, 705, 1292, 705,
	-1000, -1000, 323, 1822, 102, 102, 461, 471, -1000, 247,
	-1000, 404, 2009, 727, 697, 519, 549, 659, 42, -1000,
	-1000, -1000, 152, 40, 662, 152, 467, 467, 467, 1415,
	-1000, 133, 634, -1000, 89, 1482, -1000, -1000, 154, 154,
	-1000, -1000, 637, 1822, 1822, 716, -1000, -1000, 1440, -1000,
	599, 143, 1822, 388, 727, 388, 112, -1000, 1822, 313,
	-17, -3, -3, 496, 1440, 102, 1440, 102, 102, -52,
	-52, -1000, -1000, -1000, 16, 247, -1000, 1440, -1000, -1000,
	-1000, -1000, 81, 726, 1424, -1000, -1000, -1000, 335, 1440,
	-1000, 1156, -1000, -1000, 102, 130, 128, 121, 409, 287,
	2009, -1000, -1000, 1440, -1000, 154, 154, 303, -1000, -2,
	517, 1440, 1440, 108, 659, 642, 662, 17, -1000, 677,
	-1000, -1000, 669, -1000, 152, 553, 1440, -1000, 197, -1000,
	197, 197, -1000, -7, 609, -1000, 1822, -1000, -67, 727,
	159, 160, 642, -1000, -1000, -1000, 697, 154, 154, -1000,
	114, 727, 154, 80, -13, 154, 608, 77, 278, 313,
	2129, 1440, -1000, -1000, 1860, -1000, -3, -1000, -1000, -1000,
	-1000, 547, 210, -1000, 1794, 274, 323, 1440, 1761, 439,
	127, -1000, 127, -1000, 127, -1000, 252, 347, -1000, 1728,
	-1000, -1000, 2009, -1000, 1440, 1454, -1000, -22, 527, 1822,
	-1000, 102, 642, -1000, -25, 671, -39, 146, -75, -1000,
	510, 528, 498, 509, 152, -1000, -1000, -1000, -1000, -1000,
	727, -1000, 727, 662, 551, 543, 1822, 478, -1000, -1000,
	478, 1415, 727, 1083, 76, 663, 727, 566, -1000, 642,
	563, 154, -1000, -1000, 388, 75, -1000, 192, 727, -1000,
	182, 606, 385, 273, 360, -1000, 1705, 1440, 1440, 709,
	541, 209, -1000, 1822, 1440, 102, 74, -48, 73, 72,
	-1000, 214, 154, 2009, 272, 1822, -1000, 392, 514, 1440,
	401, -1000, -1000, -1000, 71, -51, 662, 642, 1440, 152,
	508, 498, 503, -1000, 152, -1000, -1000, -1000, -1000, -1000,
	1440, 1440, -1000, -1000, 200, 68, -1000, -1000, -1000, -1000,
	642, 642, 62, -62, 1440, 54, 727, -1000, 47, 605,
	-1000, 388, -1000, 2091, 164, 154, 381, 2129, 247, 46,
	39, 1440, 683, 1822, -1000, -1000, 102, -1000, -1000, -1000,
	-1000, 310, 2129, 346, -1000, -1000, -1000, 574, 444, 642,
	-1000, -1000, 1822, 808, 152, 502, 152, 828, 1822, -1000,
	110, 199, -1000, -1000, 663, 727, 1822, -1000, -1000, -1000,
	103, 154, 265, 2091, -1000, -1000, 1440, 1440, 86, 733,
	2091, -1000, 154, -1000, -1000, -1000, 32, 31, -1000, 264,
	310, 2009, 1440, 154, -1000, -1000, -1000, 102, -1000, -1000,
	-1000, 1440, 98, 828, 152, 808, 207, 96, -1000, -1000,
	388, -1000, 154, -1000, 1694, 1672, 449, -1000, 1633, 293,
	263, -1000, -1000, -1000, 380, 262, 361, -1000, 1611, -1000,
	-1000, 1822, 727, 828, -1000, 24, 558, 530, 207, 15,
	-1000, 2091, 1965, 727, -1000, 154, 154, 378, 2009, 14,
	-1000, -1000, 1440, 9, -1000, 305, 261, 1965, -1000, -1000,
	1440, -1000, 298, -1000, -1000, 154, -1000, -1000, -1000, -1000,
	260, 314, 2091, 1440, 360, 333, -1000, 1600, 1965, -1000,
	377, 255, -1000, 1577, 360, 154, 1965, 253, 154, 370,
	2047, -1000, 296, 2091, 332, -1000, 154, -1000, -1000, 1440,
	1440, 249, 296, 1965, 1440, 154, -1000, 1544, 1521, 442,
	367, 243, 358, -1000, 1510, -1000, 2047, 1927, 727, 154,
	366, 1965, 1440, -1000, 248, -1000, 154, -1000, 870, 1927,
	-1000, 1927,
}
var yyPgo = [...]int{

	0, 21, 59, 2, 88, 374, 46, 20, 842, 840,
	839, 835, 11, 831, 830, 829, 828, 827, 34, 23,
	19, 826, 825, 822, 819, 816, 812, 77, 57, 42,
	811, 35, 47, 809, 808, 15, 805, 25, 803, 63,
	802, 45, 48, 313, 349, 223, 17, 39, 801, 799,
	795, 794, 814, 790, 788, 786, 783, 640, 782, 777,
	776, 38, 8, 775, 53, 773, 772, 80, 771, 12,
	766, 763, 762, 760, 50, 759, 28, 13, 40, 43,
	27, 31, 758, 756, 755, 16, 753, 9, 32, 14,
	10, 748, 5, 7, 6, 0, 747, 51, 746, 44,
	745, 36, 266, 4, 444, 742, 56, 733, 37, 41,
	33, 26, 49, 732, 421, 707,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	6, 6, 6, 7, 7, 8, 8, 9, 9, 10,
	10, 10, 10, 10, 11, 11, 11, 11, 11, 11,
	12, 12, 13, 13, 13, 14, 14, 14, 15, 15,
	15, 15, 16, 16, 17, 17, 17, 17, 17, 17,
	18, 18, 19, 19, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 22, 22, 22, 22, 23, 23,
	24, 24, 24, 24, 24, 24, 24, 25, 25, 26,
	26, 26, 26, 26, 27, 28, 28, 28, 28, 29,
	29, 30, 31, 31, 32, 32, 33, 33, 34, 34,
	35, 35, 36, 36, 36, 37, 37, 38, 38, 39,
	39, 40, 40, 41, 41, 42, 42, 42, 42, 42,
	42, 43, 43, 43, 43, 43, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	45, 45, 46, 46, 47, 47, 48, 48, 49, 49,
	50, 50, 50, 51, 51, 52, 53, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 55, 55, 55, 55,
	55, 55, 55, 56, 56, 56, 56, 57, 57, 58,
	58, 59, 59, 59, 60, 60, 60, 60, 61, 61,
	62, 63, 63, 64, 64, 65, 65, 65, 66, 67,
	67, 67, 67, 67, 67, 68, 68, 68, 68, 68,
	69, 69, 69, 70, 70, 71, 71, 71, 72, 73,
	73, 74, 74, 75, 75, 76, 76, 77, 77, 78,
	78, 79, 79, 80, 80, 81, 81, 82, 82, 82,
	82, 83, 84, 85, 85, 86, 86, 87, 87, 88,
	88, 89, 89, 90, 90, 91, 91, 92, 92, 93,
	93, 94, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 103, 104, 105, 105, 106, 106, 107, 107,
	108, 108, 109, 109, 110, 110, 111, 111, 111, 111,
	112, 112, 113, 113, 114, 114, 115, 115,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	9, 7, 9, 2, 8, 9, 7, 9, 2, 3,
	2, 2, 8, 9, 1, 8, 9, 1, 3, 3,
	2, 3, 2, 2, 6, 6, 8, 5, 7, 7,
	1, 3, 1, 3, 0, 1, 1, 2, 2, 6,
	3, 3, 4, 6, 7, 9, 6, 4, 10, 11,
	0, 1, 1, 1, 1, 2, 2, 5, 6, 5,
	3, 3, 5, 3, 5, 5, 4, 4, 4, 1,
	1, 3, 0, 2, 0, 2, 0, 3, 0, 2,
	0, 3, 0, 3, 4, 0, 2, 0, 2, 0,
	2, 6, 9, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 1, 1, 3, 1, 3, 2, 4, 1, 1,
	0, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 4, 4, 6, 6, 4, 6, 4, 4, 4,
	6, 4, 4, 6, 4, 2, 3, 3, 3, 3,
	3, 2, 2, 3, 3, 2, 2, 3, 4, 4,
	1, 1, 2, 2, 7, 8, 7, 8, 7, 8,
	2, 0, 3, 1, 1, 1, 2, 3, 1, 1,
	1, 2, 3, 1, 1, 5, 5, 6, 6, 4,
	0, 2, 4, 1, 1, 1, 3, 1, 5, 0,
	1, 4, 2, 0, 2, 1, 3, 1, 3, 1,
	3, 1, 3, 1, 3, 1, 3, 6, 9, 5,
	8, 7, 3, 1, 3, 5, 6, 4, 2, 0,
	2, 4, 2, 0, 2, 4, 2, 0, 2, 4,
	2, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 3, 0, 1,
	0, 1, 0, 1, 0, 1, 0, 1, 1, 1,
	0, 1, 0, 1, 1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -23, -10, -27, -82, -83, -86,
	-17, -57, -15, -21, -22, -16, -26, 84, 76, 78,
	103, -39, 26, 29, -95, 110, -104, 90, 88, 89,
	87, 99, 100, 16, 104, 105, 106, 74, 4, -102,
	11, -1, -115, 116, -115, -115, -115, -115, -115, -106,
	-95, -105, -102, -44, -43, -42, -55, -53, -52, -57,
	-58, -72, -54, -56, -102, -104, -25, 122, -95, 24,
	-96, -97, -98, -99, -100, -101, 119, 120, -60, 75,
	-45, 63, 67, 121, 85, 5, 6, 7, 9, 10,
	71, -44, -103, -102, -115, -28, 19, 15, 17, -30,
	-29, 13, -52, 122, 30, 30, 122, -106, -115, -102,
	85, 30, -95, -95, -24, 91, 92, 31, 32, 93,
	94, -115, -115, 12, -44, 5, 5, -41, -40, -113,
	25, 113, -115, 85, 30, 107, 126, 113, 80, 112,
	111, 118, 70, -108, -114, 120, 119, 117, 124, 125,
	66, 65, 67, -44, -77, -27, -39, 127, 122, 127,
	-44, -44, -73, -44, 111, 118, -108, -114, -52, -44,
	-44, -95, 82, 64, 126, -35, 38, 20, -79, -64,
	-95, 24, 14, -79, -31, 14, 58, 59, 60, -107,
	73, -95, -64, 123, -77, -44, -115, -115, -95, -95,
	-115, -115, -95, -44, -44, 118, -115, -115, 126, -115,
	126, -95, -44, 86, 122, 86, 122, -106, -44, -1,
	-44, -44, -44, -108, 68, 64, 69, 62, 61, -44,
	-44, -44, -44, -44, -44, -44, 123, 126, 123, 123,
	-95, -97, -59, -44, 73, 117, -95, -97, -74, 79,
	-45, 122, -52, -45, 68, 64, 62, 61, 70, -2,
	-8, -6, -13, 76, -12, 101, 102, -95, -103, -102,
	-36, 44, 41, -64, 126, 16, -78, -67, -65, -66,
	-68, 23, -64, -52, 14, -32, 18, -78, -112, 61,
	-112, -112, -81, -71, -70, 117, -44, -61, -95, 122,
	27, 28, 36, 123, -115, -115, 20, -42, -77, -41,
	22, 122, -27, -80, -95, -27, 123, -103, -88, -87,
	81, 77, -99, -101, -44, -45, -44, -45, -45, -77,
	123, 38, -35, 117, -44, -75, -74, 81, -44, -45,
	122, -52, 122, -52, 122, -52, -108, 83, -2, -44,
	-115, -115, 82, -38, 45, -44, -47, -48, -49, -44,
	-61, 21, 122, -27, -79, -85, -84, -43, -95, -32,
	-109, 57, -111, 54, 126, 49, 51, 52, 53, -95,
	22, -95, 22, -78, -33, 39, -44, -29, -28, -29,
	-29, 126, 22, 122, -80, -18, 122, -95, -43, 122,
	-43, -103, -115, -115, 122, -80, -115, 123, 126, -115,
	22, 123, 83, -88, -87, -1, -44, 65, 41, 96,
	38, -35, 83, -44, 80, 65, -46, -45, -46, -46,
	88, 64, 78, 80, -2, -44, -37, 47, 74, 126,
	-50, 42, 43, -46, -76, -43, -31, 126, 118, 48,
	-109, -111, -110, 50, 48, -78, -95, -95, -32, -34,
	40, 41, -81, -95, 123, -77, 123, -20, 31, 32,
	33, 34, -19, -18, 35, -76, 37, -115, -27, 123,
	-115, 86, -80, 108, 22, 76, 83, 80, -44, -47,
	5, 41, 96, -44, -45, 123, 126, 123, 123, 95,
	-115, -2, -6, 83, -37, 46, -47, 72, 123, 126,
	-32, -85, -44, -67, 48, -110, 48, -67, -44, -77,
	98, 123, -43, -43, 123, 126, -44, 123, -95, 123,
	22, -27, -3, -7, -5, -11, 76, 78, 109, 84,
	108, -115, 76, -1, 123, 123, -47, 5, -46, -90,
	-89, 81, 77, 78, -51, 31, 32, 21, -27, -76,
	-69, 55, 56, -67, 48, -67, 122, 98, -20, -19,
	122, -115, 83, -3, -44, -44, -103, -115, -44, -95,
	-3, -115, 123, 123, 83, -90, -89, -2, -44, -115,
	-46, -44, 122, -67, -69, -62, -63, 97, 122, -27,
	-115, 80, 82, 64, -115, 83, 76, 83, 80, -80,
	123, -35, 41, -62, 123, -3, -4, -9, -7, -14,
	76, -12, -95, -115, -115, 76, -2, 123, -77, 123,
	-92, -91, 81, 77, -87, 83, -4, -44, 82, -115,
	83, -92, -3, -44, -87, 78, 80, -4, 76, 83,
	80, -115, -4, -7, 83, -115, 76, -3, -5, 76,
	78, -94, -93, 81, 77, 78, -115, -44, -44, -103,
	83, -94, -93, -4, -44, -115, 80, 82, 64, 76,
	83, 80, 76, -12, -95, -115, 76, -4, -44, 82,
	-115, 80,
}
var yyDef = [...]int{

	-2, -2, -2, 20, 21, 22, 316, 316, 316, 316,
	316, 316, 15, 16, 17, 18, 19, 0, 0, 0,
	316, 0, 0, 0, 0, 0, 316, 0, 0, 0,
	80, 316, 316, 0, 0, 0, 0, 312, 283, 0,
	290, 2, 9, 317, 10, 11, 12, 13, 14, 316,
	0, 296, 294, 300, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 119, 131, 0,
	125, 126, 127, 128, 129, 130, 0, 0, 200, 239,
	300, 0, 0, 0, 0, 284, 285, 286, 287, 288,
	289, 300, 0, 146, 33, -2, 0, 0, 0, 102,
	0, 298, 100, 119, 0, 0, 0, 316, 50, 316,
	0, 0, 316, 316, 0, 81, 82, 83, 84, 0,
	0, 52, 53, 0, -2, 316, 316, 120, 123, 0,
	313, 0, 49, 0, 0, 0, 0, 0, -2, 0,
	314, 315, 300, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 301, 300, 0, 0, 0, 0, 0, 0,
	191, 192, 0, -2, 314, 315, 0, 0, 185, 195,
	196, 0, -2, 0, 0, 112, 0, 0, 0, 251,
	213, 214, 0, 0, 104, 0, 310, 310, 310, 0,
	299, 0, 0, 197, 0, -2, 48, 51, 316, 316,
	70, 71, 0, -2, -2, 0, 90, 91, 0, 93,
	312, 0, 293, 119, 0, 119, 0, 297, -2, 269,
	166, -2, -2, 0, 0, 0, 0, 0, 0, 186,
	187, 188, 189, 190, 193, 194, 149, 0, 150, 165,
	132, 134, 0, -2, 0, 201, 133, 135, 243, 0,
	168, 119, 151, 170, 0, 0, 0, 0, 300, 0,
	-2, 25, 26, 0, 44, 316, 316, 0, 292, 291,
	117, 0, 0, 119, 0, 0, 104, -2, 219, 220,
	223, 224, 215, 218, 0, 106, 0, 103, 0, 311,
	0, 0, 101, 255, 235, 237, -2, 234, 131, 0,
	0, 0, 0, 198, 72, 77, 0, 316, 316, 124,
	0, 0, 316, 0, 253, 316, 0, 0, 0, 269,
	-2, 0, 171, 172, 300, 175, -2, 179, 182, 248,
	199, 0, 0, 202, -2, 0, 242, 0, 300, 0,
	119, 177, 119, 181, 119, 184, 0, 0, 4, 300,
	40, 41, -2, 94, 0, -2, 111, 154, 160, -2,
	159, 0, 0, 259, 252, 102, 263, 0, 131, 265,
	0, -2, 304, 0, 0, 303, 307, 308, 309, 221,
	0, 216, 0, 104, 108, 0, -2, 96, 99, 97,
	98, 0, 0, 0, 0, 64, 0, 60, 57, 0,
	0, 316, 89, 92, 119, 0, 69, 316, 0, 76,
	0, 0, 0, 0, 268, 270, 300, 0, 0, 0,
	0, 0, 238, -2, 0, 0, 0, 152, 0, 0,
	87, 0, 316, -2, 0, -2, 113, 115, 0, 0,
	156, 161, 162, 257, 0, 245, 104, 0, 0, 0,
	0, 304, 0, 305, 0, 250, 222, 217, 266, 95,
	0, 0, 256, 236, 197, 0, 54, 55, 65, 66,
	0, 0, 0, 62, 0, 0, 0, 73, 0, 0,
	74, 119, 254, -2, 0, 316, 0, -2, 173, 111,
	0, 0, 0, -2, 174, 176, 0, 180, 183, 88,
	31, 273, -2, 0, 114, 116, 155, 0, 119, 0,
	261, 264, -2, 230, 0, 0, 0, 229, -2, 107,
	0, 198, 67, 68, 64, 0, -2, 58, 59, 121,
	0, 316, 0, -2, 23, 24, 0, 0, 316, 0,
	-2, 29, 316, 267, 204, 206, 111, 0, 153, 0,
	273, -2, 0, 316, 157, 163, 164, 0, 260, 246,
	225, 0, 0, 226, 0, 230, 211, 0, 56, 63,
	119, 75, 316, 6, 300, 300, 0, 38, -2, 0,
	0, 30, 205, 207, 0, 0, 272, 274, 300, 32,
	258, -2, 0, 228, 227, 0, 110, 0, 211, 0,
	78, -2, -2, 0, 39, 316, 316, 0, -2, 0,
	208, 210, 0, 0, 122, 277, 0, -2, 27, 28,
	0, 47, 0, 79, 42, 316, 271, 232, 212, 209,
	0, 277, -2, 0, 0, 0, 8, 300, -2, 43,
	0, 0, 278, 300, 276, 316, -2, 0, 316, 0,
	-2, 36, 281, -2, 0, 34, 316, 275, -2, 0,
	0, 0, 281, -2, 0, 316, 35, 300, 300, 0,
	0, 0, 280, 282, 300, 37, -2, -2, 0, 316,
	0, -2, 0, -2, 0, 45, 316, 279, 300, -2,
	46, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 121, 3, 3, 3, 125, 3, 3,
	122, 123, 117, 120, 126, 119, 127, 124, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 116,
	3, 118,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:180
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:185
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:192
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:197
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:204
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:209
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:216
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:221
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:228
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:232
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:236
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:240
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:244
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:248
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:252
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:256
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:260
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:264
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:268
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:274
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:278
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:302
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:308
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:312
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:318
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:322
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:326
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 32:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:330
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:334
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:340
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:344
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:348
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:352
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:356
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:360
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:366
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:370
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:376
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:380
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:384
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:390
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:394
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:398
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:404
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:408
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:412
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:416
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:422
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:426
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:432
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:436
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:440
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:444
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:448
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:452
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression.(FieldReference), To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:458
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:462
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:468
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:472
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:478
		{
			yyVAL.expression = nil
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:482
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:486
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:490
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:494
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:500
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:504
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:508
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:512
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 73:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:516
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:522
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:526
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:530
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:534
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 78:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:540
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 79:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:544
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:550
		{
			yyVAL.expression = nil
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:554
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:558
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:562
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:566
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:570
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:574
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:580
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:584
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:590
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:594
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:598
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:602
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:606
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].token.Literal}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:612
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:624
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:634
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:643
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:652
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:663
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:667
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:673
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:679
		{
			yyVAL.expression = nil
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:683
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:689
		{
			yyVAL.expression = nil
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:693
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:699
		{
			yyVAL.expression = nil
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:703
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:709
		{
			yyVAL.expression = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:713
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:719
		{
			yyVAL.expression = nil
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:723
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:729
		{
			yyVAL.expression = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:733
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:737
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:743
		{
			yyVAL.expression = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:747
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:753
		{
			yyVAL.expression = nil
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:757
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:763
		{
			yyVAL.expression = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:767
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:773
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 122:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:777
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:783
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:787
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:793
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:797
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:801
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:805
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:809
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:813
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:819
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Column: yyDollar[1].identifier}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:823
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:827
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:831
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Number: yyDollar[3].integer}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:835
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: yyDollar[3].integer}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:841
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:845
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:849
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:853
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:857
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:861
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:865
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:869
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:873
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:877
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:881
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:885
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:889
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:893
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:899
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:903
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:909
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:913
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:919
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:923
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:929
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:933
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:939
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:943
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:949
		{
			yyVAL.token = Token{}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:953
		{
			yyVAL.token = yyDollar[1].token
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:957
		{
			yyVAL.token = yyDollar[1].token
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:963
		{
			yyVAL.token = yyDollar[1].token
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:967
		{
			yyVAL.token = yyDollar[1].token
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:973
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:979
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1002
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1006
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1010
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1014
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1018
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1022
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1026
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1030
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1034
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1038
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1042
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1046
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1050
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1054
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1058
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1062
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1066
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1070
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1074
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1080
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1084
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1088
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1092
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1096
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1100
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1104
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1110
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1114
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1118
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1122
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1128
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1132
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1138
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Option: yyDollar[3].expression.(AggregateOption)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1142
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1148
		{
			yyVAL.expression = AggregateOption{Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}}}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1152
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[2].token)}}}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1156
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{yyDollar[2].expression}}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1162
		{
			orderBy := OrderByClause{OrderBy: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Items: yyDollar[6].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: orderBy}
		}
	case 205:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1167
		{
			orderBy := OrderByClause{OrderBy: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Items: yyDollar[7].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: orderBy}
		}
	case 206:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1172
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: yyDollar[4].expression, SeparatorLit: yyDollar[5].token.Literal, Separator: yyDollar[6].token.Literal}
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1176
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: yyDollar[5].expression, SeparatorLit: yyDollar[6].token.Literal, Separator: yyDollar[7].token.Literal}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1182
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Over: yyDollar[4].token.Literal, AnalyticClause: yyDollar[6].expression.(AnalyticClause)}
		}
	case 209:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1192
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1198
		{
			yyVAL.expression = nil
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1202
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1208
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1212
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1218
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1222
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1226
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1232
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1238
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1242
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1246
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1250
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1254
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1258
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1264
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1268
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 227:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1272
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 228:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1276
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1280
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1286
		{
			yyVAL.expression = nil
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1290
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1294
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1300
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1304
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1310
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1314
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1318
		{
			yyVAL.expression = Field{Object: AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1324
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1330
		{
			yyVAL.expression = nil
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1334
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1340
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1344
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1350
		{
			yyVAL.expression = nil
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1354
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1360
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1364
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1370
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1374
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1380
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1384
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1390
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1394
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1400
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1404
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1410
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1414
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1420
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 258:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1424
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1428
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 260:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1432
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1438
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1444
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression.(FieldReference), Value: yyDollar[3].expression}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1450
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1454
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1460
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1465
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1472
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1476
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1482
		{
			yyVAL.procexpr = nil
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1486
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1492
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1496
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1502
		{
			yyVAL.procexpr = nil
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1506
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1512
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1516
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1522
		{
			yyVAL.procexpr = nil
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1526
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1532
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1536
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1542
		{
			yyVAL.procexpr = nil
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1546
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1552
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1558
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1564
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1570
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1576
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1582
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1588
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1594
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1600
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1604
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1610
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1616
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1620
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1626
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1630
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1636
		{
			yyVAL.token = Token{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1640
		{
			yyVAL.token = yyDollar[1].token
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1646
		{
			yyVAL.token = Token{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1650
		{
			yyVAL.token = yyDollar[1].token
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1656
		{
			yyVAL.token = Token{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1660
		{
			yyVAL.token = yyDollar[1].token
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1666
		{
			yyVAL.token = Token{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1670
		{
			yyVAL.token = yyDollar[1].token
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1676
		{
			yyVAL.token = Token{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1680
		{
			yyVAL.token = yyDollar[1].token
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1684
		{
			yyVAL.token = yyDollar[1].token
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1688
		{
			yyVAL.token = yyDollar[1].token
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1694
		{
			yyVAL.token = Token{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1698
		{
			yyVAL.token = yyDollar[1].token
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1704
		{
			yyVAL.token = Token{}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1708
		{
			yyVAL.token = yyDollar[1].token
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1715
		{
			yyVAL.token = yyDollar[1].token
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1719
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1726
		{
			yyVAL.token = Token{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1730
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
