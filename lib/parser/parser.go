//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const TIES = 57388
const PERCENT = 57389
const JOIN = 57390
const INNER = 57391
const OUTER = 57392
const LEFT = 57393
const RIGHT = 57394
const FULL = 57395
const CROSS = 57396
const ON = 57397
const USING = 57398
const NATURAL = 57399
const UNION = 57400
const INTERSECT = 57401
const EXCEPT = 57402
const ALL = 57403
const ANY = 57404
const EXISTS = 57405
const IN = 57406
const AND = 57407
const OR = 57408
const NOT = 57409
const BETWEEN = 57410
const LIKE = 57411
const IS = 57412
const NULL = 57413
const NULLS = 57414
const DISTINCT = 57415
const WITH = 57416
const CASE = 57417
const IF = 57418
const ELSEIF = 57419
const WHILE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const DO = 57424
const END = 57425
const DECLARE = 57426
const CURSOR = 57427
const FOR = 57428
const FETCH = 57429
const OPEN = 57430
const CLOSE = 57431
const DISPOSE = 57432
const NEXT = 57433
const PRIOR = 57434
const ABSOLUTE = 57435
const RELATIVE = 57436
const RANGE = 57437
const SEPARATOR = 57438
const PARTITION = 57439
const OVER = 57440
const COMMIT = 57441
const ROLLBACK = 57442
const CONTINUE = 57443
const BREAK = 57444
const EXIT = 57445
const PRINT = 57446
const PRINTF = 57447
const SOURCE = 57448
const FUNCTION = 57449
const BEGIN = 57450
const RETURN = 57451
const VAR = 57452
const COMPARISON_OP = 57453
const STRING_OP = 57454
const SUBSTITUTION_OP = 57455

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"TIES",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"NULLS",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"BEGIN",
	"RETURN",
	"VAR",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"'='",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'('",
	"')'",
	"','",
	"'.'",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1717

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 104,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	77, 1,
	81, 1,
	83, 1,
	-2, 104,
	-1, 95,
	58, 84,
	59, 84,
	60, 84,
	-2, 95,
	-1, 125,
	64, 295,
	68, 295,
	69, 295,
	-2, 311,
	-1, 127,
	64, 295,
	68, 295,
	69, 295,
	-2, 223,
	-1, 137,
	77, 1,
	81, 1,
	83, 1,
	-2, 104,
	-1, 159,
	79, 218,
	-2, 295,
	-1, 169,
	83, 3,
	-2, 104,
	-1, 199,
	4, 52,
	-2, 295,
	-1, 200,
	4, 53,
	-2, 295,
	-1, 215,
	70, 0,
	111, 0,
	114, 0,
	-2, 149,
	-1, 216,
	70, 0,
	111, 0,
	114, 0,
	-2, 151,
	-1, 235,
	96, 95,
	121, 223,
	-2, 295,
	-1, 250,
	77, 3,
	81, 3,
	83, 3,
	-2, 104,
	-1, 269,
	48, 297,
	50, 301,
	-2, 225,
	-1, 287,
	64, 295,
	68, 295,
	69, 295,
	-2, 211,
	-1, 297,
	64, 295,
	68, 295,
	69, 295,
	-2, 290,
	-1, 314,
	83, 1,
	-2, 104,
	-1, 320,
	70, 0,
	111, 0,
	114, 0,
	-2, 160,
	-1, 327,
	96, 95,
	121, 182,
	-2, 295,
	-1, 345,
	83, 3,
	-2, 104,
	-1, 348,
	64, 295,
	68, 295,
	69, 295,
	-2, 100,
	-1, 352,
	64, 295,
	68, 295,
	69, 295,
	-2, 140,
	-1, 365,
	50, 301,
	-2, 297,
	-1, 378,
	64, 295,
	68, 295,
	69, 295,
	-2, 90,
	-1, 414,
	83, 220,
	-2, 295,
	-1, 424,
	77, 1,
	81, 1,
	83, 1,
	-2, 104,
	-1, 426,
	64, 295,
	68, 295,
	69, 295,
	-2, 103,
	-1, 472,
	83, 5,
	-2, 104,
	-1, 476,
	77, 1,
	81, 1,
	83, 1,
	-2, 104,
	-1, 482,
	79, 233,
	81, 233,
	83, 233,
	-2, 295,
	-1, 491,
	77, 1,
	81, 1,
	83, 1,
	-2, 28,
	-1, 501,
	64, 295,
	68, 295,
	69, 295,
	-2, 240,
	-1, 507,
	64, 295,
	68, 295,
	69, 295,
	-2, 94,
	-1, 515,
	64, 295,
	68, 295,
	69, 295,
	-2, 249,
	-1, 522,
	77, 5,
	81, 5,
	83, 5,
	-2, 104,
	-1, 529,
	83, 5,
	-2, 104,
	-1, 540,
	83, 3,
	-2, 104,
	-1, 567,
	64, 295,
	68, 295,
	69, 295,
	-2, 311,
	-1, 580,
	64, 295,
	68, 295,
	69, 295,
	-2, 209,
	-1, 590,
	77, 5,
	81, 5,
	83, 5,
	-2, 104,
	-1, 591,
	83, 7,
	-2, 104,
	-1, 597,
	77, 3,
	81, 3,
	83, 3,
	-2, 104,
	-1, 606,
	77, 7,
	81, 7,
	83, 7,
	-2, 104,
	-1, 621,
	83, 5,
	-2, 104,
	-1, 627,
	83, 7,
	-2, 104,
	-1, 635,
	77, 5,
	81, 5,
	83, 5,
	-2, 104,
	-1, 639,
	77, 1,
	81, 5,
	83, 5,
	-2, 104,
	-1, 642,
	77, 5,
	81, 5,
	83, 5,
	-2, 30,
	-1, 647,
	109, 26,
	-2, 23,
	-1, 652,
	83, 7,
	-2, 104,
	-1, 665,
	77, 1,
	81, 1,
	83, 1,
	-2, 104,
	-1, 666,
	83, 3,
	-2, 104,
	-1, 670,
	77, 7,
	81, 7,
	83, 7,
	-2, 104,
	-1, 672,
	109, 74,
	-2, 71,
	-1, 678,
	83, 3,
	-2, 104,
	-1, 680,
	77, 1,
	81, 1,
	83, 1,
	-2, 104,
}

const yyPrivate = 57344

const yyLast = 2184

var yyAct = [...]int{

	71, 27, 650, 27, 661, 619, 462, 584, 307, 538,
	549, 153, 92, 172, 405, 443, 254, 575, 269, 417,
	457, 55, 522, 427, 366, 364, 435, 605, 353, 357,
	284, 111, 112, 277, 312, 463, 213, 1, 180, 44,
	77, 270, 175, 100, 75, 129, 58, 249, 268, 107,
	126, 280, 142, 329, 380, 46, 156, 369, 514, 370,
	371, 372, 367, 498, 604, 365, 349, 138, 485, 438,
	144, 145, 146, 147, 148, 150, 149, 151, 385, 95,
	141, 156, 430, 41, 166, 41, 84, 85, 87, 399,
	88, 89, 43, 157, 383, 133, 156, 354, 177, 177,
	171, 2, 273, 275, 171, 187, 188, 144, 145, 146,
	147, 148, 265, 206, 196, 197, 198, 43, 190, 192,
	618, 139, 138, 616, 140, 144, 145, 146, 147, 148,
	368, 40, 207, 162, 46, 603, 599, 572, 27, 176,
	176, 179, 571, 101, 81, 97, 534, 98, 82, 96,
	40, 533, 90, 518, 516, 513, 79, 233, 510, 497,
	487, 486, 484, 469, 456, 402, 83, 398, 323, 190,
	27, 257, 41, 41, 295, 263, 304, 241, 266, 177,
	101, 232, 177, 231, 258, 587, 290, 581, 84, 85,
	87, 241, 88, 89, 217, 559, 355, 86, 211, 103,
	555, 70, 146, 147, 148, 46, 395, 337, 335, 45,
	95, 308, 238, 333, 288, 291, 302, 47, 48, 49,
	50, 51, 52, 53, 54, 311, 151, 310, 313, 150,
	279, 151, 210, 94, 141, 282, 283, 212, 103, 110,
	106, 439, 296, 3, 122, 123, 201, 193, 301, 325,
	103, 27, 303, 133, 90, 135, 529, 472, 317, 556,
	85, 87, 316, 290, 509, 360, 177, 586, 362, 481,
	160, 251, 373, 161, 305, 139, 138, 177, 140, 144,
	145, 146, 147, 148, 410, 488, 74, 103, 391, 388,
	135, 73, 308, 389, 360, 360, 422, 470, 341, 86,
	386, 339, 363, 209, 114, 669, 308, 176, 361, 659,
	134, 643, 638, 393, 396, 27, 151, 191, 629, 141,
	421, 194, 195, 624, 379, 375, 381, 382, 387, 596,
	594, 573, 136, 561, 492, 202, 203, 678, 205, 475,
	413, 412, 118, 119, 403, 134, 27, 340, 404, 653,
	627, 406, 251, 652, 622, 419, 360, 420, 621, 113,
	139, 138, 345, 140, 144, 145, 146, 147, 148, 177,
	86, 621, 143, 168, 434, 447, 67, 42, 167, 42,
	239, 654, 541, 315, 290, 453, 540, 314, 634, 389,
	442, 441, 360, 425, 542, 423, 437, 455, 653, 93,
	308, 315, 116, 117, 120, 121, 298, 299, 471, 448,
	290, 127, 288, 239, 452, 330, 541, 446, 465, 675,
	57, 668, 645, 637, 614, 27, 595, 531, 474, 40,
	546, 290, 429, 56, 91, 186, 496, 248, 88, 360,
	219, 177, 151, 416, 218, 220, 177, 251, 667, 125,
	245, 592, 493, 163, 244, 170, 247, 246, 504, 502,
	24, 360, 360, 508, 506, 343, 344, 517, 500, 222,
	221, 499, 490, 27, 281, 183, 478, 27, 182, 183,
	184, 290, 152, 40, 444, 553, 505, 68, 29, 503,
	29, 159, 27, 445, 165, 440, 494, 495, 347, 360,
	90, 432, 433, 601, 177, 537, 177, 261, 539, 480,
	451, 394, 409, 532, 42, 389, 397, 262, 450, 400,
	377, 558, 552, 27, 554, 548, 491, 173, 44, 568,
	27, 155, 199, 200, 557, 466, 464, 521, 105, 565,
	369, 27, 370, 371, 372, 208, 42, 535, 259, 574,
	214, 215, 216, 104, 177, 132, 223, 224, 225, 226,
	227, 228, 229, 41, 155, 583, 579, 544, 545, 235,
	519, 369, 582, 370, 371, 372, 367, 550, 551, 365,
	473, 374, 308, 458, 459, 460, 461, 562, 576, 259,
	598, 27, 27, 611, 569, 602, 401, 287, 27, 600,
	292, 293, 41, 467, 384, 297, 300, 27, 610, 294,
	174, 278, 264, 617, 607, 62, 14, 181, 14, 623,
	267, 41, 27, 610, 276, 29, 630, 42, 27, 607,
	318, 178, 320, 489, 625, 124, 27, 43, 633, 109,
	27, 536, 251, 27, 610, 615, 651, 479, 327, 128,
	607, 331, 610, 27, 660, 636, 41, 29, 642, 131,
	185, 108, 658, 641, 76, 342, 27, 27, 673, 610,
	155, 27, 155, 348, 352, 607, 532, 259, 72, 27,
	662, 27, 620, 672, 530, 359, 631, 610, 13, 607,
	378, 42, 12, 607, 11, 672, 10, 672, 676, 251,
	9, 607, 155, 642, 646, 358, 636, 562, 641, 8,
	7, 328, 158, 64, 390, 392, 523, 285, 286, 272,
	271, 585, 42, 78, 155, 234, 425, 407, 490, 63,
	560, 369, 66, 370, 371, 372, 367, 566, 29, 365,
	59, 570, 414, 65, 60, 543, 431, 351, 350, 130,
	346, 260, 578, 14, 449, 376, 99, 19, 608, 426,
	252, 524, 5, 69, 80, 115, 523, 4, 251, 17,
	16, 589, 18, 523, 15, 606, 436, 593, 250, 0,
	251, 0, 491, 0, 0, 14, 0, 0, 0, 0,
	6, 0, 0, 0, 155, 287, 155, 235, 155, 0,
	0, 42, 29, 0, 612, 613, 0, 0, 0, 0,
	0, 0, 436, 0, 0, 0, 0, 0, 0, 0,
	477, 352, 0, 0, 628, 0, 0, 482, 0, 61,
	0, 0, 0, 29, 523, 523, 0, 0, 0, 0,
	0, 0, 352, 0, 640, 0, 0, 644, 0, 42,
	523, 501, 0, 42, 102, 655, 155, 0, 0, 359,
	0, 154, 507, 0, 664, 523, 14, 0, 42, 0,
	0, 523, 0, 0, 0, 0, 515, 0, 674, 523,
	0, 511, 512, 647, 0, 679, 523, 0, 0, 0,
	0, 0, 352, 0, 154, 0, 523, 0, 0, 42,
	0, 0, 0, 93, 0, 0, 42, 0, 0, 647,
	647, 164, 29, 0, 523, 0, 0, 42, 0, 436,
	0, 0, 647, 0, 647, 240, 243, 0, 0, 0,
	14, 155, 0, 0, 0, 0, 0, 563, 564, 567,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 577, 0, 0, 0, 0, 155, 0,
	29, 14, 580, 0, 29, 0, 0, 42, 42, 0,
	0, 0, 0, 0, 42, 0, 0, 0, 0, 29,
	0, 0, 0, 42, 319, 102, 321, 322, 0, 0,
	242, 242, 0, 0, 0, 0, 0, 0, 42, 0,
	306, 0, 309, 0, 42, 0, 0, 0, 274, 332,
	29, 274, 42, 0, 0, 0, 42, 29, 0, 42,
	155, 626, 0, 0, 0, 0, 93, 0, 29, 42,
	0, 0, 154, 0, 632, 0, 0, 0, 0, 0,
	14, 0, 42, 42, 0, 0, 0, 42, 0, 242,
	0, 242, 242, 0, 356, 42, 0, 42, 0, 0,
	656, 657, 0, 0, 0, 663, 41, 84, 85, 87,
	0, 88, 89, 43, 242, 334, 336, 338, 29, 29,
	0, 0, 0, 677, 0, 29, 0, 0, 14, 0,
	0, 0, 14, 0, 29, 0, 0, 0, 418, 0,
	418, 0, 418, 0, 0, 0, 274, 14, 0, 29,
	102, 0, 102, 102, 411, 29, 0, 0, 0, 418,
	0, 0, 0, 29, 154, 81, 154, 29, 154, 82,
	29, 0, 428, 90, 0, 236, 0, 79, 14, 0,
	29, 150, 149, 151, 0, 14, 141, 83, 0, 0,
	150, 149, 151, 29, 29, 141, 14, 0, 29, 429,
	0, 0, 0, 242, 0, 242, 29, 242, 29, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 237,
	0, 483, 70, 454, 242, 0, 468, 139, 138, 0,
	140, 144, 145, 146, 147, 148, 139, 138, 274, 140,
	144, 145, 146, 147, 148, 0, 14, 14, 0, 0,
	0, 0, 0, 14, 0, 0, 0, 0, 0, 0,
	0, 0, 14, 0, 41, 84, 85, 87, 0, 88,
	89, 43, 0, 0, 0, 0, 0, 14, 0, 0,
	0, 0, 0, 14, 324, 0, 242, 0, 0, 0,
	418, 14, 0, 0, 0, 14, 0, 0, 14, 0,
	0, 520, 0, 0, 0, 0, 0, 0, 14, 0,
	274, 150, 149, 151, 0, 274, 141, 0, 0, 0,
	0, 14, 14, 81, 0, 0, 14, 82, 547, 0,
	0, 90, 0, 236, 14, 79, 14, 0, 0, 0,
	0, 0, 150, 149, 151, 83, 0, 141, 0, 0,
	0, 418, 0, 0, 0, 242, 0, 139, 138, 0,
	140, 144, 145, 146, 147, 148, 0, 0, 204, 0,
	0, 0, 0, 274, 0, 274, 86, 237, 0, 0,
	70, 189, 0, 0, 0, 0, 0, 0, 139, 138,
	588, 140, 144, 145, 146, 147, 148, 0, 230, 204,
	41, 84, 85, 87, 0, 88, 89, 43, 0, 0,
	0, 0, 0, 0, 0, 0, 242, 0, 0, 41,
	84, 85, 87, 274, 88, 89, 43, 0, 41, 84,
	85, 87, 0, 88, 89, 43, 0, 0, 0, 0,
	0, 0, 0, 41, 84, 85, 87, 0, 88, 89,
	43, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	0, 0, 0, 82, 0, 0, 0, 90, 0, 0,
	0, 79, 0, 0, 0, 0, 0, 0, 81, 0,
	0, 83, 82, 0, 0, 0, 90, 81, 0, 0,
	79, 82, 0, 0, 0, 90, 0, 0, 40, 79,
	83, 0, 81, 0, 0, 0, 82, 0, 0, 83,
	90, 0, 86, 0, 79, 0, 70, 189, 150, 149,
	151, 0, 0, 141, 83, 0, 0, 0, 0, 0,
	0, 86, 289, 0, 0, 70, 41, 84, 85, 87,
	86, 88, 89, 43, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 326, 0, 0, 70,
	0, 0, 0, 0, 139, 138, 0, 140, 144, 145,
	146, 147, 148, 0, 0, 204, 0, 0, 0, 41,
	0, 0, 150, 149, 151, 0, 43, 141, 0, 0,
	0, 36, 0, 0, 0, 81, 0, 680, 0, 82,
	0, 25, 0, 90, 26, 0, 0, 79, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 41, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 139, 138,
	36, 140, 144, 145, 146, 147, 148, 0, 0, 0,
	25, 0, 0, 26, 0, 0, 0, 0, 86, 40,
	0, 671, 70, 649, 0, 0, 0, 0, 0, 20,
	0, 0, 33, 30, 31, 32, 0, 0, 0, 0,
	0, 0, 0, 0, 34, 35, 255, 256, 23, 37,
	38, 39, 0, 0, 527, 28, 0, 0, 40, 0,
	609, 0, 526, 0, 150, 149, 151, 0, 528, 141,
	0, 33, 30, 31, 32, 150, 149, 151, 0, 670,
	141, 0, 0, 34, 35, 255, 256, 0, 37, 38,
	39, 0, 666, 527, 28, 0, 0, 150, 149, 151,
	0, 0, 141, 0, 0, 0, 0, 0, 0, 0,
	139, 138, 665, 140, 144, 145, 146, 147, 148, 0,
	0, 139, 138, 0, 140, 144, 145, 146, 147, 148,
	150, 149, 151, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 139, 138, 639, 140, 144, 145, 146,
	147, 148, 150, 149, 151, 0, 0, 141, 0, 0,
	0, 0, 0, 41, 150, 149, 151, 635, 0, 141,
	43, 0, 0, 0, 0, 36, 139, 138, 0, 140,
	144, 145, 146, 147, 148, 25, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 139, 138,
	0, 140, 144, 145, 146, 147, 148, 0, 0, 0,
	139, 138, 0, 140, 144, 145, 146, 147, 148, 0,
	0, 150, 149, 151, 0, 0, 141, 0, 0, 0,
	0, 0, 0, 40, 0, 253, 597, 22, 0, 150,
	149, 151, 0, 20, 141, 0, 33, 30, 31, 32,
	0, 0, 0, 0, 0, 0, 591, 0, 34, 35,
	255, 256, 23, 37, 38, 39, 0, 139, 138, 28,
	140, 144, 145, 146, 147, 148, 0, 0, 0, 150,
	149, 151, 0, 0, 141, 139, 138, 0, 140, 144,
	145, 146, 147, 148, 590, 150, 149, 151, 0, 0,
	141, 0, 0, 0, 150, 149, 151, 0, 0, 141,
	476, 0, 0, 0, 0, 0, 0, 0, 0, 424,
	0, 0, 150, 149, 151, 139, 138, 141, 140, 144,
	145, 146, 147, 148, 0, 0, 0, 415, 408, 149,
	151, 139, 138, 141, 140, 144, 145, 146, 147, 148,
	139, 138, 0, 140, 144, 145, 146, 147, 148, 0,
	150, 149, 151, 0, 0, 141, 0, 0, 139, 138,
	0, 140, 144, 145, 146, 147, 148, 169, 150, 149,
	151, 0, 0, 141, 139, 138, 0, 140, 144, 145,
	146, 147, 148, 137, 0, 0, 41, 0, 0, 0,
	0, 0, 0, 43, 0, 0, 139, 138, 36, 140,
	144, 145, 146, 147, 148, 0, 0, 0, 25, 0,
	0, 26, 0, 0, 139, 138, 0, 140, 144, 145,
	146, 147, 148, 41, 0, 0, 0, 0, 0, 0,
	43, 0, 0, 0, 0, 36, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 25, 0, 0, 26, 0,
	0, 0, 0, 0, 0, 0, 40, 0, 648, 0,
	649, 0, 0, 0, 0, 0, 20, 0, 0, 33,
	30, 31, 32, 0, 0, 0, 0, 41, 0, 0,
	0, 34, 35, 0, 43, 23, 37, 38, 39, 36,
	0, 527, 28, 40, 0, 525, 0, 526, 0, 25,
	0, 0, 26, 528, 0, 0, 33, 30, 31, 32,
	0, 0, 0, 0, 0, 0, 0, 0, 34, 35,
	0, 0, 0, 37, 38, 39, 0, 0, 527, 28,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 21,
	0, 22, 0, 0, 0, 0, 0, 20, 0, 0,
	33, 30, 31, 32, 0, 0, 0, 0, 0, 0,
	0, 0, 34, 35, 0, 0, 23, 37, 38, 39,
	0, 0, 0, 28,
}
var yyPact = [...]int{

	2073, -1000, 2073, -1000, -1000, -1000, -69, -69, -69, -69,
	-69, -69, -69, -69, -69, -1000, -1000, -1000, -1000, -1000,
	652, 1492, 1492, -69, 130, 523, 508, 120, 628, -69,
	652, 652, 274, 311, -69, -69, 623, 1492, 1492, 644,
	530, -1000, 140, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 225, 1903, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 140, -1000, -1000,
	1384, -27, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1492,
	159, 118, 1492, 652, -1000, -1000, 254, -1000, -1000, -1000,
	-1000, 1885, 391, -18, -1000, 489, 590, 652, 617, 603,
	420, 362, -1000, 355, 652, 652, 1356, -69, -3, 134,
	-1000, -69, -69, 652, 652, 652, -1000, -1000, -1000, -1000,
	1492, 1492, -1000, -1000, 132, 10, -69, 1413, -69, -1000,
	-9, 652, -1000, 1492, 217, 112, 117, 2073, 1492, 1492,
	1492, 375, 376, 408, 1492, 1492, 1492, 1492, 1492, 1492,
	1492, -1000, 1237, 62, 60, 167, 652, 1220, 301, 1689,
	71, 71, 386, 395, -1000, 249, 367, -1000, -1000, 1749,
	652, 626, 463, 476, 652, 596, -10, 598, 79, 610,
	593, 79, 413, 413, 413, 1375, -1000, 95, 573, -1000,
	53, -1000, 628, 1492, -1000, -1000, -69, -69, 586, 1689,
	1689, 183, -1000, -1000, 1492, -1000, 530, 154, 1689, 355,
	652, 355, 106, 306, -8, -45, -45, 429, 1492, 71,
	1492, 71, 71, 85, 85, -1000, -1000, -1000, 164, 249,
	-1000, -1000, -1000, -1000, 47, 1206, 1399, -1000, 334, 1492,
	-1000, 1384, -1000, -1000, 71, 93, 88, 87, 375, 264,
	1749, -1000, -1000, 1492, -1000, -69, -69, 280, -1000, -22,
	453, 1492, 1492, 76, 652, 652, -1000, 652, 593, 8,
	-1000, 559, -1000, -1000, -1000, -1000, 79, 481, 1492, -1000,
	167, -1000, 167, 167, -1000, -28, 582, 1689, -1000, -1000,
	-42, 652, 169, 168, 652, -1000, -1000, 1689, -1000, -1000,
	626, -69, -1000, -1000, 86, 652, -69, 46, -33, -69,
	574, 44, 261, 306, 2073, 1492, -1000, -1000, 1863, -1000,
	-45, -1000, -1000, -1000, 471, 188, -1000, 1076, 257, 301,
	1492, 1847, 378, 57, -1000, 57, -1000, 57, -1000, 232,
	317, -1000, 1829, -1000, -1000, 1749, -1000, 1492, 1085, -1000,
	-40, 459, 1689, -1000, 71, 652, -1000, 603, -53, 127,
	-67, -1000, -1000, -1000, 447, 491, 434, 445, 79, -1000,
	-1000, -1000, -1000, -1000, 652, 593, 478, 469, 1689, 416,
	-1000, -1000, 416, 1375, 652, 1062, 43, 552, 652, 501,
	-1000, 652, 498, -69, -1000, 355, 42, -1000, 211, 652,
	-1000, 149, 558, 352, 256, 324, -1000, 1820, 1492, 1492,
	642, 468, 173, -1000, 1689, 1492, 71, 41, -54, 40,
	39, -1000, 190, -69, 1749, 251, 1689, -1000, 358, 450,
	1492, 364, -1000, -1000, -1000, 38, -59, 593, 652, 1492,
	79, 441, 434, 438, -1000, 79, -1000, -1000, -1000, -1000,
	1492, 1492, -1000, -1000, 166, 37, -1000, -1000, -1000, -1000,
	652, 652, 34, -64, 1492, 33, 652, -1000, 32, 548,
	355, -1000, 2019, 148, -69, 351, 2073, 249, 30, 25,
	1492, 636, 1689, -1000, -1000, 71, -1000, -1000, -1000, -1000,
	305, 2073, 316, -1000, -1000, -1000, 536, 409, 652, -1000,
	-1000, 1689, 522, 79, 437, 79, 682, 1689, -1000, 80,
	161, -1000, -1000, 552, 652, 1689, -1000, -1000, -1000, 75,
	-69, 250, 2019, -1000, -1000, 1492, 1492, 81, 652, 2019,
	-1000, -69, -1000, -1000, -1000, 21, 16, -1000, 248, 305,
	1749, 1492, -69, -1000, -1000, -1000, 71, -1000, -1000, -1000,
	1492, 67, 682, 79, 522, 170, 65, -1000, -1000, 355,
	-1000, -69, -1000, 1804, 1764, 387, -1000, 10, 260, 247,
	-1000, -1000, -1000, 350, 246, 339, -1000, 1746, -1000, -1000,
	1689, 652, 682, -1000, 15, 489, 462, 170, 14, -1000,
	2019, 1574, 652, -1000, -69, -69, 348, 1749, 2, -1000,
	-1000, 1492, -1, -1000, 277, 240, 1574, -1000, -1000, 1492,
	-1000, 268, -1000, -1000, -69, -1000, -1000, -1000, -1000, 235,
	290, 2019, 1492, 324, 310, -1000, 1677, 1574, -1000, 347,
	229, -1000, 1655, 324, -69, 1574, 228, -69, 346, 1982,
	-1000, 272, 2019, 303, -1000, -69, -1000, -1000, 1492, 1492,
	226, 272, 1574, 1492, -69, -1000, 1622, 1600, 384, 345,
	222, 321, -1000, 1589, -1000, 1982, 1535, 652, -69, 343,
	1574, 1492, -1000, 255, -1000, -69, -1000, 1477, 1535, -1000,
	1535,
}
var yyPgo = [...]int{

	0, 36, 47, 64, 27, 243, 101, 22, 778, 775,
	774, 772, 770, 769, 767, 765, 763, 762, 761, 16,
	760, 758, 757, 790, 54, 43, 756, 38, 33, 755,
	754, 13, 751, 23, 750, 460, 749, 45, 46, 420,
	411, 764, 19, 66, 748, 747, 746, 745, 829, 744,
	743, 740, 732, 615, 729, 725, 723, 28, 7, 721,
	41, 720, 18, 719, 10, 718, 717, 713, 712, 711,
	26, 11, 48, 42, 8, 30, 53, 710, 709, 705,
	29, 700, 696, 694, 35, 6, 20, 692, 688, 14,
	34, 17, 9, 682, 5, 4, 2, 0, 678, 291,
	286, 44, 664, 40, 376, 12, 487, 661, 49, 660,
	52, 25, 15, 24, 51, 659, 372, 209,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 7, 7, 8, 8,
	9, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 13, 13, 13, 13, 14, 14, 15, 15, 15,
	15, 15, 15, 15, 16, 16, 17, 17, 17, 17,
	17, 18, 18, 18, 18, 18, 18, 19, 19, 20,
	20, 20, 21, 21, 21, 22, 22, 22, 22, 23,
	24, 24, 24, 24, 25, 25, 26, 27, 27, 28,
	28, 29, 29, 30, 30, 31, 31, 32, 32, 32,
	33, 33, 34, 34, 35, 35, 36, 36, 37, 37,
	38, 38, 38, 38, 38, 38, 39, 39, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 41, 41, 42, 42, 43, 43, 44, 44,
	45, 45, 46, 46, 46, 47, 47, 48, 49, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 51, 51,
	51, 51, 51, 52, 52, 52, 53, 53, 54, 54,
	55, 55, 55, 56, 56, 56, 56, 57, 57, 58,
	59, 59, 60, 60, 60, 61, 61, 62, 62, 62,
	62, 62, 62, 63, 63, 63, 63, 63, 64, 64,
	64, 65, 65, 65, 66, 66, 67, 68, 68, 69,
	69, 70, 70, 71, 71, 72, 72, 73, 73, 74,
	74, 75, 75, 76, 76, 77, 77, 77, 77, 78,
	79, 80, 80, 81, 81, 82, 83, 83, 84, 84,
	85, 85, 86, 86, 86, 86, 86, 87, 87, 88,
	89, 89, 90, 90, 91, 91, 92, 92, 93, 93,
	94, 94, 95, 95, 96, 96, 97, 98, 99, 99,
	100, 100, 101, 102, 103, 104, 105, 105, 106, 107,
	107, 108, 108, 109, 109, 110, 110, 111, 111, 112,
	112, 113, 113, 113, 113, 114, 114, 115, 115, 116,
	116, 117, 117,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 2, 2, 6, 3, 3, 4,
	6, 6, 9, 6, 4, 10, 11, 0, 1, 1,
	1, 1, 2, 2, 5, 6, 8, 9, 7, 9,
	2, 8, 9, 7, 9, 2, 3, 2, 2, 8,
	9, 1, 8, 9, 1, 5, 3, 3, 3, 5,
	5, 4, 4, 4, 1, 1, 3, 0, 2, 0,
	2, 0, 3, 0, 2, 0, 3, 0, 3, 4,
	0, 2, 0, 2, 0, 2, 6, 9, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 1, 1, 3, 1, 3, 2, 4,
	1, 1, 0, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 4, 4, 6, 6, 4, 6, 4,
	4, 4, 6, 4, 4, 6, 4, 2, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 4, 4, 1,
	1, 2, 2, 7, 8, 7, 8, 7, 8, 2,
	0, 3, 1, 2, 3, 1, 1, 1, 1, 2,
	3, 1, 1, 5, 5, 6, 6, 4, 0, 2,
	4, 1, 1, 1, 1, 3, 5, 0, 1, 0,
	2, 1, 3, 1, 3, 1, 3, 1, 3, 1,
	3, 1, 3, 4, 2, 6, 9, 5, 8, 7,
	3, 1, 3, 5, 6, 6, 6, 8, 1, 3,
	1, 3, 0, 1, 1, 2, 2, 5, 7, 7,
	4, 2, 0, 2, 4, 2, 0, 2, 4, 2,
	0, 2, 4, 2, 0, 2, 1, 1, 1, 2,
	1, 2, 1, 1, 1, 1, 1, 3, 3, 1,
	3, 1, 3, 0, 1, 0, 1, 0, 1, 0,
	1, 0, 1, 1, 1, 0, 1, 0, 1, 1,
	1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -14, -17, -23, -77, -78, -81,
	-82, -83, -87, -88, -53, -10, -12, -13, -11, -22,
	84, 76, 78, 103, -35, 26, 29, -97, 110, -106,
	88, 89, 90, 87, 99, 100, 16, 104, 105, 106,
	74, 4, -104, 11, -1, -117, 124, -117, -117, -117,
	-117, -117, -117, -117, -117, -97, -40, -39, -38, -51,
	-49, -48, -53, -54, -67, -50, -52, -104, -106, -16,
	120, -97, -98, -99, -100, -101, -102, -103, -56, 75,
	-41, 63, 67, 85, 5, 6, 116, 7, 9, 10,
	71, -40, -105, -104, -117, -24, 19, 15, 17, -26,
	-25, 13, -48, 120, 30, 30, 120, -108, -107, 11,
	-117, -97, -97, 85, 30, -15, 91, 92, 31, 32,
	93, 94, -117, -117, 12, -40, -71, -40, 5, -37,
	-36, -115, 25, 113, 85, 30, 107, 80, 112, 111,
	114, 70, -110, -116, 115, 116, 117, 118, 119, 66,
	65, 67, -40, -71, -23, -35, 123, 120, -68, -40,
	111, 114, -110, -116, -48, -40, -97, -99, -100, 82,
	64, 122, -31, 38, 20, -73, -60, -97, 14, -73,
	-27, 14, 58, 59, 60, -109, 73, -97, -97, 121,
	-71, -117, 122, 113, -117, -117, -97, -97, -97, -40,
	-40, 114, -117, -117, 122, -117, 122, -97, -40, 86,
	120, 86, 120, -1, -40, -40, -40, -110, 68, 64,
	69, 62, 61, -40, -40, -40, -40, -40, -40, -40,
	121, 121, 121, -97, -55, -40, 73, 117, -76, 79,
	-41, 120, -48, -41, 68, 64, 62, 61, 70, -2,
	-8, -6, -20, 76, -19, 101, 102, -97, -105, -104,
	-32, 44, 41, -97, 16, 122, -97, 22, -72, -62,
	-60, -61, -63, 23, -48, 24, 14, -28, 18, -72,
	-114, 61, -114, -114, -75, -66, -65, -40, -57, 117,
	-97, 120, 27, 28, 36, 121, -108, -40, -117, -117,
	20, -38, -71, -37, 22, 120, -23, -74, -97, -23,
	121, -105, -90, -89, 81, 77, -101, -103, -40, -41,
	-40, -41, -41, 121, 38, -31, 117, -40, -69, -76,
	81, -40, -41, 120, -48, 120, -48, 120, -48, -110,
	83, -2, -40, -117, -117, 82, -34, 45, -40, -43,
	-44, -45, -40, -57, 21, 120, -23, -80, -79, -39,
	-97, -73, -97, -28, -111, 57, -113, 54, 122, 49,
	51, 52, 53, -97, 22, -72, -29, 39, -40, -25,
	-24, -25, -25, 122, 22, 120, -74, -84, 120, -97,
	-39, 120, -39, -105, -117, 120, -74, -117, 121, 122,
	-117, 22, 121, 83, -90, -89, -1, -40, 65, 41,
	96, 38, -31, 83, -40, 80, 65, -42, -41, -42,
	-42, 88, 64, 78, 80, -2, -40, -33, 47, 74,
	122, -46, 42, 43, -42, -70, -39, -27, 122, 114,
	48, -111, -113, -112, 50, 48, -72, -97, -28, -30,
	40, 41, -75, -97, 121, -71, 121, -86, 31, 32,
	33, 34, -85, -84, 35, -70, 37, -117, -23, 121,
	86, -74, 108, 22, 76, 83, 80, -40, -43, 5,
	41, 96, -40, -41, 121, 122, 121, 121, 95, -117,
	-2, -6, 83, -33, 46, -43, 72, 121, 122, -28,
	-80, -40, -62, 48, -112, 48, -62, -40, -71, 98,
	121, -39, -39, 121, 122, -40, 121, -97, 121, 22,
	-23, -3, -7, -5, -18, 76, 78, 109, 84, 108,
	-117, 76, -1, 121, 121, -43, 5, -42, -92, -91,
	81, 77, 78, -47, 31, 32, 21, -23, -70, -64,
	55, 56, -62, 48, -62, 120, 98, -86, -85, 120,
	-117, 83, -3, -40, -40, -105, -117, -40, -97, -3,
	-117, 121, 121, 83, -92, -91, -2, -40, -117, -42,
	-40, 120, -62, -64, -58, -59, 97, 120, -23, -117,
	80, 82, 64, -117, 83, 76, 83, 80, -74, 121,
	-31, 41, -58, 121, -3, -4, -9, -7, -21, 76,
	-19, -97, -117, -117, 76, -2, 121, -71, 121, -94,
	-93, 81, 77, -89, 83, -4, -40, 82, -117, 83,
	-94, -3, -40, -89, 78, 80, -4, 76, 83, 80,
	-117, -4, -7, 83, -117, 76, -3, -5, 76, 78,
	-96, -95, 81, 77, 78, -117, -40, -40, -105, 83,
	-96, -95, -4, -40, -117, 80, 82, 64, 76, 83,
	80, 76, -19, -97, -117, 76, -4, -40, 82, -117,
	80,
}
var yyDef = [...]int{

	-2, -2, -2, 23, 24, 25, 311, 311, 311, 311,
	311, 311, 311, 311, 311, 18, 19, 20, 21, 22,
	0, 0, 0, 311, 0, 0, 0, 0, 0, 311,
	0, 0, 0, 47, 311, 311, 0, 0, 0, 0,
	307, 276, 0, 285, 2, 9, 312, 10, 11, 12,
	13, 14, 15, 16, 17, 0, 295, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	104, 116, 110, 111, 112, 113, 114, 115, 179, 217,
	295, 0, 0, 0, 277, 278, 0, 280, 282, 283,
	284, 295, 0, 128, 60, -2, 0, 0, 0, 87,
	0, 293, 85, 104, 0, 0, 0, 311, 291, 289,
	33, 311, 311, 0, 0, 0, 48, 49, 50, 51,
	0, 0, 34, 35, 0, -2, 311, -2, 311, 105,
	108, 0, 308, 0, 0, 0, 0, -2, 0, 309,
	310, 295, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 295, 0, 0, 0, 0, 0, 0, -2,
	309, 310, 0, 0, 167, 175, 0, 279, 281, -2,
	0, 0, 97, 0, 0, 0, 227, 192, 0, 0,
	89, 0, 305, 305, 305, 0, 294, 0, 0, 176,
	0, 32, 0, 0, 37, 38, 311, 311, 0, -2,
	-2, 0, 76, 77, 0, 78, 307, 0, 288, 104,
	0, 104, 0, 262, 148, -2, -2, 0, 0, 0,
	0, 0, 0, 168, 169, 170, 171, 172, 173, 174,
	131, 132, 147, 117, 0, -2, 0, 180, 219, 0,
	150, 104, 133, 152, 0, 0, 0, 0, 295, 0,
	-2, 28, 29, 0, 71, 311, 311, 0, 287, 286,
	102, 0, 0, 104, 0, 0, 193, 0, 89, -2,
	197, 198, 201, 202, 195, 196, 0, 91, 0, 88,
	0, 306, 0, 0, 86, 231, 214, -2, 212, 213,
	116, 0, 0, 0, 0, 177, 292, -2, 39, 44,
	0, 311, 224, 109, 0, 0, 311, 0, 229, 311,
	0, 0, 0, 262, -2, 0, 153, 154, 295, 157,
	-2, 161, 164, 178, 0, 0, 181, -2, 0, 234,
	0, 295, 0, 104, 159, 104, 163, 104, 166, 0,
	0, 4, 295, 67, 68, -2, 79, 0, -2, 96,
	136, 142, -2, 141, 0, 0, 237, 87, 241, 0,
	116, 228, 194, 243, 0, -2, 299, 0, 0, 298,
	302, 303, 304, 199, 0, 89, 93, 0, -2, 81,
	84, 82, 83, 0, 0, 0, 0, 252, 0, 248,
	257, 0, 0, 311, 75, 104, 0, 36, 41, 0,
	43, 0, 0, 0, 0, 261, 263, 295, 0, 0,
	0, 0, 0, 216, -2, 0, 0, 0, 134, 0,
	0, 54, 0, 311, -2, 0, -2, 98, 100, 0,
	0, 138, 143, 144, 235, 0, 221, 89, 0, 0,
	0, 0, 299, 0, 300, 0, 226, 200, 244, 80,
	0, 0, 232, 215, 176, 0, 245, 246, 253, 254,
	0, 0, 0, 250, 0, 0, 0, 40, 0, 0,
	104, 230, -2, 0, 311, 0, -2, 155, 96, 0,
	0, 0, -2, 156, 158, 0, 162, 165, 55, 58,
	266, -2, 0, 99, 101, 137, 0, 104, 0, 239,
	242, -2, 208, 0, 0, 0, 207, -2, 92, 0,
	177, 255, 256, 252, 0, -2, 258, 259, 106, 0,
	311, 0, -2, 26, 27, 0, 0, 311, 0, -2,
	56, 311, 260, 183, 185, 96, 0, 135, 0, 266,
	-2, 0, 311, 139, 145, 146, 0, 238, 222, 203,
	0, 0, 204, 0, 208, 190, 0, 247, 251, 104,
	42, 311, 6, 295, 295, 0, 65, -2, 0, 0,
	57, 184, 186, 0, 0, 265, 267, 295, 59, 236,
	-2, 0, 206, 205, 0, 95, 0, 190, 0, 45,
	-2, -2, 0, 66, 311, 311, 0, -2, 0, 187,
	189, 0, 0, 107, 270, 0, -2, 30, 31, 0,
	74, 0, 46, 69, 311, 264, 210, 191, 188, 0,
	270, -2, 0, 0, 0, 8, 295, -2, 70, 0,
	0, 271, 295, 269, 311, -2, 0, 311, 0, -2,
	63, 274, -2, 0, 61, 311, 268, -2, 0, 0,
	0, 274, -2, 0, 311, 62, 295, 295, 0, 0,
	0, 273, 275, 295, 64, -2, -2, 0, 311, 0,
	-2, 0, -2, 0, 72, 311, 272, 295, -2, 73,
	-2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 119, 3, 3,
	120, 121, 117, 115, 122, 116, 123, 118, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 124,
	3, 114,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:178
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:183
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:190
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:195
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:202
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:207
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:214
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:219
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:226
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:230
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:234
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:238
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:242
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:246
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:250
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:254
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:258
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:262
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:266
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:270
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:274
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:278
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:302
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:308
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:312
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:328
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:332
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:338
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:342
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:348
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:352
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:356
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:360
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:364
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:370
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:374
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:378
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:382
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 45:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:388
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 46:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:392
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:398
		{
			yyVAL.expression = nil
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:402
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:406
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:410
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:414
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:418
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:422
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:428
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:432
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:438
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 57:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:442
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:446
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 59:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:450
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:454
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:460
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 62:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:464
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 63:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:468
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 64:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:472
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:476
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:480
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:486
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:490
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 69:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:496
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 70:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:500
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:504
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:510
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 73:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:514
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:518
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:524
		{
			yyVAL.statement = SetFlag{Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:528
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:532
		{
			yyVAL.statement = Printf{Values: yyDollar[2].expressions}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:536
		{
			yyVAL.statement = Source{FilePath: yyDollar[2].token.Literal}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:542
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:554
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:564
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:573
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:582
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:593
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:597
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:603
		{
			yyVAL.expression = SelectClause{Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:609
		{
			yyVAL.expression = nil
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:613
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:619
		{
			yyVAL.expression = nil
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:623
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:629
		{
			yyVAL.expression = nil
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:633
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:639
		{
			yyVAL.expression = nil
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:643
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:649
		{
			yyVAL.expression = nil
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:653
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 97:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:659
		{
			yyVAL.expression = nil
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:663
		{
			yyVAL.expression = LimitClause{Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:667
		{
			yyVAL.expression = LimitClause{Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:673
		{
			yyVAL.expression = nil
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:677
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:683
		{
			yyVAL.expression = nil
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:687
		{
			yyVAL.expression = OffsetClause{Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:693
		{
			yyVAL.expression = nil
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:697
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:703
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 107:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:707
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Columns: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:713
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:717
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:723
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:727
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:731
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:735
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:739
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:743
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:749
		{
			yyVAL.expression = FieldReference{Column: yyDollar[1].identifier}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:753
		{
			yyVAL.expression = FieldReference{View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:759
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:763
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:767
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:771
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:775
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:779
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:783
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:787
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:791
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:795
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:799
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:803
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:807
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:811
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:817
		{
			yyVAL.expression = RowValue{Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:821
		{
			yyVAL.expression = RowValue{Value: yyDollar[1].expression}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:827
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:831
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:837
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:841
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:847
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:851
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:857
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:861
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:867
		{
			yyVAL.token = Token{}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:871
		{
			yyVAL.token = yyDollar[1].token
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:875
		{
			yyVAL.token = yyDollar[1].token
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:881
		{
			yyVAL.token = yyDollar[1].token
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:885
		{
			yyVAL.token = yyDollar[1].token
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:891
		{
			yyVAL.expression = Subquery{Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:897
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:920
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:924
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:928
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:932
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:936
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:940
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 155:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:944
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 156:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:948
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:952
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 158:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:956
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:960
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:964
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:968
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:972
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:976
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:980
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:984
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:988
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:992
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:998
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1002
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1006
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1010
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1014
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1020
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1024
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1028
		{
			yyVAL.expression = Logic{LHS: nil, Operator: yyDollar[1].token, RHS: yyDollar[2].expression}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1034
		{
			yyVAL.expression = Function{Name: yyDollar[1].identifier.Literal}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1038
		{
			yyVAL.expression = Function{Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1044
		{
			yyVAL.expression = AggregateFunction{Name: yyDollar[1].identifier.Literal, Option: yyDollar[3].expression.(AggregateOption)}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1048
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1054
		{
			yyVAL.expression = AggregateOption{Args: []Expression{AllColumns{}}}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1058
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{AllColumns{}}}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1062
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{yyDollar[2].expression}}
		}
	case 183:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1068
		{
			orderBy := OrderByClause{OrderBy: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Items: yyDollar[6].expressions}
			yyVAL.expression = GroupConcat{GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: orderBy}
		}
	case 184:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1073
		{
			orderBy := OrderByClause{OrderBy: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Items: yyDollar[7].expressions}
			yyVAL.expression = GroupConcat{GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: orderBy}
		}
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1078
		{
			yyVAL.expression = GroupConcat{GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: yyDollar[4].expression, SeparatorLit: yyDollar[5].token.Literal, Separator: yyDollar[6].token.Literal}
		}
	case 186:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1082
		{
			yyVAL.expression = GroupConcat{GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: yyDollar[5].expression, SeparatorLit: yyDollar[6].token.Literal, Separator: yyDollar[7].token.Literal}
		}
	case 187:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1088
		{
			yyVAL.expression = AnalyticFunction{Name: yyDollar[1].identifier.Literal, Over: yyDollar[4].token.Literal, AnalyticClause: yyDollar[6].expression.(AnalyticClause)}
		}
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1092
		{
			yyVAL.expression = AnalyticFunction{Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1098
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1104
		{
			yyVAL.expression = nil
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1108
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1114
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1118
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, Alias: yyDollar[2].identifier}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1122
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1128
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1132
		{
			yyVAL.expression = Stdin{Stdin: yyDollar[1].token.Literal}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1138
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1142
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1146
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1150
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1154
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1158
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1164
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1168
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1172
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1176
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1180
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = nil
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1190
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1194
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1200
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1204
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1208
		{
			yyVAL.expression = AllColumns{}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1214
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1218
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1224
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 217:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1230
		{
			yyVAL.expression = nil
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1234
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 219:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1240
		{
			yyVAL.expression = nil
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1244
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1250
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1254
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1260
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1264
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1270
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1274
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1280
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1284
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1290
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1294
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1300
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1304
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1310
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1314
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 235:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1320
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 236:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1324
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1328
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 238:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1332
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1338
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1344
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression.(FieldReference), Value: yyDollar[3].expression}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1350
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1354
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1360
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 244:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1365
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1372
		{
			yyVAL.expression = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 246:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1378
		{
			yyVAL.expression = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 247:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1382
		{
			yyVAL.expression = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1388
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1392
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1398
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1402
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 252:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1408
		{
			yyVAL.expression = nil
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1412
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1416
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1420
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1424
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1430
		{
			yyVAL.expression = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1434
		{
			yyVAL.expression = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 259:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1440
		{
			yyVAL.expression = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression.(FieldReference), To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1446
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1450
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1456
		{
			yyVAL.procexpr = nil
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1460
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1466
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1470
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1476
		{
			yyVAL.procexpr = nil
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1480
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1486
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1490
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1496
		{
			yyVAL.procexpr = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1500
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1506
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1510
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1516
		{
			yyVAL.procexpr = nil
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1520
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1526
		{
			yyVAL.identifier = Identifier{Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1532
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1538
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1542
		{
			i := yyDollar[2].integer.Value() * -1
			yyVAL.integer = NewInteger(i)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1549
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1553
		{
			f := yyDollar[2].float.Value() * -1
			yyVAL.float = NewFloat(f)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1560
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1566
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1572
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1578
		{
			yyVAL.variable = Variable{Name: yyDollar[1].token.Literal}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1584
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1588
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1594
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1600
		{
			yyVAL.expression = VariableAssignment{Name: yyDollar[1].token.Literal}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1604
		{
			yyVAL.expression = VariableAssignment{Name: yyDollar[1].token.Literal, Value: yyDollar[3].expression}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1610
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1614
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1620
		{
			yyVAL.token = Token{}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1624
		{
			yyVAL.token = yyDollar[1].token
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1630
		{
			yyVAL.token = Token{}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1634
		{
			yyVAL.token = yyDollar[1].token
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1640
		{
			yyVAL.token = Token{}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1644
		{
			yyVAL.token = yyDollar[1].token
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1650
		{
			yyVAL.token = Token{}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1654
		{
			yyVAL.token = yyDollar[1].token
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1660
		{
			yyVAL.token = Token{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1664
		{
			yyVAL.token = yyDollar[1].token
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1668
		{
			yyVAL.token = yyDollar[1].token
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1672
		{
			yyVAL.token = yyDollar[1].token
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1678
		{
			yyVAL.token = Token{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1682
		{
			yyVAL.token = yyDollar[1].token
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1688
		{
			yyVAL.token = Token{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1692
		{
			yyVAL.token = yyDollar[1].token
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1699
		{
			yyVAL.token = yyDollar[1].token
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1703
		{
			yyVAL.token = Token{Token: COMPARISON_OP, Literal: string('=')}
		}
	case 311:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1709
		{
			yyVAL.token = Token{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1713
		{
			yyVAL.token = Token{Token: ';', Literal: string(';')}
		}
	}
	goto yystack /* stack new state and value */
}
