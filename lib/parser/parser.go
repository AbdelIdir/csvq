//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const TRIGGER = 57447
const FUNCTION = 57448
const AGGREGATE = 57449
const BEGIN = 57450
const RETURN = 57451
const IGNORE = 57452
const WITHIN = 57453
const VAR = 57454
const TIES = 57455
const NULLS = 57456
const ERROR = 57457
const COUNT = 57458
const LISTAGG = 57459
const AGGREGATE_FUNCTION = 57460
const FUNCTION_WITH_INS = 57461
const COMPARISON_OP = 57462
const STRING_OP = 57463
const SUBSTITUTION_OP = 57464
const UMINUS = 57465
const UPLUS = 57466

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"TRIGGER",
	"FUNCTION",
	"AGGREGATE",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"TIES",
	"NULLS",
	"ERROR",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_INS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1882

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 137,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	75, 1,
	79, 1,
	81, 1,
	-2, 137,
	-1, 103,
	57, 117,
	58, 117,
	59, 117,
	-2, 128,
	-1, 136,
	63, 331,
	67, 331,
	68, 331,
	-2, 347,
	-1, 138,
	63, 331,
	67, 331,
	68, 331,
	-2, 347,
	-1, 145,
	75, 1,
	79, 1,
	81, 1,
	-2, 137,
	-1, 172,
	77, 264,
	-2, 331,
	-1, 182,
	81, 3,
	-2, 137,
	-1, 206,
	63, 331,
	67, 331,
	68, 331,
	-2, 271,
	-1, 221,
	63, 331,
	67, 331,
	68, 331,
	-2, 99,
	-1, 222,
	63, 331,
	67, 331,
	68, 331,
	-2, 100,
	-1, 229,
	63, 331,
	67, 331,
	68, 331,
	-2, 347,
	-1, 236,
	69, 0,
	120, 0,
	127, 0,
	-2, 186,
	-1, 237,
	69, 0,
	120, 0,
	127, 0,
	-2, 188,
	-1, 276,
	75, 3,
	79, 3,
	81, 3,
	-2, 137,
	-1, 295,
	47, 333,
	49, 337,
	-2, 273,
	-1, 313,
	63, 331,
	67, 331,
	68, 331,
	-2, 257,
	-1, 327,
	63, 331,
	67, 331,
	68, 331,
	-2, 326,
	-1, 339,
	63, 331,
	67, 331,
	68, 331,
	-2, 347,
	-1, 345,
	81, 1,
	-2, 137,
	-1, 351,
	69, 0,
	120, 0,
	127, 0,
	-2, 197,
	-1, 377,
	81, 3,
	-2, 137,
	-1, 378,
	81, 3,
	-2, 137,
	-1, 381,
	63, 331,
	67, 331,
	68, 331,
	-2, 133,
	-1, 385,
	63, 331,
	67, 331,
	68, 331,
	-2, 177,
	-1, 399,
	49, 337,
	-2, 333,
	-1, 412,
	63, 331,
	67, 331,
	68, 331,
	-2, 123,
	-1, 460,
	81, 268,
	-2, 331,
	-1, 471,
	75, 1,
	79, 1,
	81, 1,
	-2, 137,
	-1, 474,
	63, 331,
	67, 331,
	68, 331,
	-2, 136,
	-1, 536,
	75, 1,
	79, 1,
	81, 1,
	-2, 137,
	-1, 538,
	77, 265,
	79, 265,
	81, 265,
	-2, 331,
	-1, 548,
	75, 1,
	79, 1,
	81, 1,
	-2, 26,
	-1, 559,
	63, 331,
	67, 331,
	68, 331,
	-2, 286,
	-1, 565,
	63, 331,
	67, 331,
	68, 331,
	-2, 127,
	-1, 579,
	63, 331,
	67, 331,
	68, 331,
	-2, 64,
	-1, 584,
	81, 5,
	-2, 137,
	-1, 590,
	132, 84,
	135, 84,
	-2, 331,
	-1, 602,
	81, 3,
	-2, 137,
	-1, 630,
	75, 5,
	79, 5,
	81, 5,
	-2, 137,
	-1, 636,
	81, 5,
	-2, 137,
	-1, 637,
	81, 5,
	-2, 137,
	-1, 650,
	63, 331,
	67, 331,
	68, 331,
	-2, 255,
	-1, 670,
	63, 331,
	67, 331,
	68, 331,
	-2, 347,
	-1, 678,
	75, 3,
	79, 3,
	81, 3,
	-2, 137,
	-1, 691,
	75, 5,
	79, 5,
	81, 5,
	-2, 137,
	-1, 692,
	81, 7,
	-2, 137,
	-1, 698,
	81, 5,
	-2, 137,
	-1, 717,
	75, 7,
	79, 7,
	81, 7,
	-2, 137,
	-1, 737,
	81, 5,
	-2, 137,
	-1, 743,
	81, 7,
	-2, 137,
	-1, 744,
	81, 7,
	-2, 137,
	-1, 753,
	75, 5,
	79, 5,
	81, 5,
	-2, 137,
	-1, 759,
	75, 1,
	79, 5,
	81, 5,
	-2, 137,
	-1, 762,
	75, 5,
	79, 5,
	81, 5,
	-2, 28,
	-1, 768,
	109, 24,
	-2, 22,
	-1, 773,
	81, 7,
	-2, 137,
	-1, 789,
	75, 1,
	79, 1,
	81, 1,
	-2, 137,
	-1, 790,
	81, 3,
	-2, 137,
	-1, 795,
	75, 7,
	79, 7,
	81, 7,
	-2, 137,
	-1, 797,
	109, 50,
	-2, 47,
	-1, 804,
	81, 3,
	-2, 137,
	-1, 805,
	81, 3,
	-2, 137,
	-1, 807,
	75, 1,
	79, 1,
	81, 1,
	-2, 137,
}

const yyPrivate = 57344

const yyLast = 2594

var yyAct = [...]int{

	73, 24, 771, 24, 784, 101, 451, 424, 205, 612,
	735, 277, 2, 463, 2, 516, 600, 511, 483, 186,
	715, 234, 1, 436, 50, 644, 439, 119, 492, 312,
	124, 125, 195, 382, 393, 59, 51, 295, 314, 400,
	438, 309, 475, 53, 54, 55, 56, 57, 398, 294,
	80, 343, 302, 150, 200, 140, 189, 102, 517, 60,
	108, 78, 115, 291, 120, 87, 296, 76, 305, 133,
	134, 360, 164, 414, 419, 146, 791, 280, 693, 164,
	154, 161, 153, 152, 301, 293, 165, 155, 156, 118,
	529, 164, 180, 530, 403, 103, 404, 405, 406, 401,
	183, 154, 399, 153, 152, 52, 191, 191, 155, 156,
	166, 578, 556, 202, 191, 226, 541, 527, 69, 48,
	526, 48, 154, 216, 217, 510, 487, 220, 292, 155,
	156, 49, 478, 417, 184, 144, 231, 144, 100, 208,
	387, 175, 746, 232, 117, 117, 24, 121, 184, 733,
	184, 732, 207, 731, 730, 210, 729, 2, 215, 144,
	713, 218, 219, 194, 275, 255, 705, 258, 704, 190,
	190, 700, 184, 224, 225, 227, 228, 203, 109, 699,
	638, 402, 204, 24, 283, 623, 286, 622, 621, 191,
	284, 39, 620, 619, 191, 593, 109, 191, 105, 580,
	106, 316, 104, 238, 292, 292, 577, 230, 573, 567,
	630, 555, 543, 542, 540, 533, 158, 157, 159, 525,
	257, 149, 522, 716, 260, 261, 509, 469, 458, 39,
	807, 457, 256, 456, 259, 337, 274, 103, 455, 264,
	267, 344, 325, 262, 341, 254, 304, 253, 714, 687,
	388, 488, 435, 333, 334, 290, 686, 330, 685, 684,
	683, 354, 660, 654, 48, 651, 338, 307, 308, 265,
	641, 326, 147, 146, 161, 639, 447, 24, 154, 148,
	153, 152, 423, 336, 422, 155, 156, 340, 265, 348,
	316, 358, 390, 191, 396, 680, 111, 421, 407, 420,
	347, 48, 191, 285, 329, 368, 350, 366, 352, 353,
	364, 332, 331, 321, 111, 181, 111, 170, 375, 376,
	169, 114, 425, 428, 396, 396, 370, 117, 386, 395,
	425, 223, 52, 442, 363, 209, 159, 433, 144, 139,
	272, 443, 661, 425, 583, 159, 24, 397, 149, 392,
	448, 409, 554, 342, 552, 659, 190, 2, 624, 429,
	431, 545, 70, 27, 698, 27, 413, 452, 415, 416,
	545, 637, 625, 444, 445, 636, 446, 584, 24, 24,
	465, 426, 466, 631, 3, 52, 3, 273, 689, 396,
	173, 658, 485, 657, 656, 48, 450, 174, 655, 147,
	146, 482, 618, 191, 682, 154, 148, 153, 152, 496,
	212, 544, 155, 156, 468, 151, 328, 49, 316, 502,
	794, 782, 764, 763, 484, 758, 486, 747, 428, 745,
	464, 396, 464, 740, 464, 697, 123, 467, 696, 491,
	355, 373, 677, 356, 357, 663, 642, 550, 490, 519,
	441, 549, 495, 464, 285, 535, 459, 371, 449, 501,
	372, 805, 497, 211, 48, 804, 484, 744, 743, 521,
	378, 523, 24, 377, 504, 505, 506, 507, 774, 316,
	531, 737, 773, 548, 263, 776, 213, 214, 396, 122,
	191, 263, 775, 361, 738, 191, 48, 48, 737, 40,
	752, 64, 10, 176, 10, 605, 603, 546, 27, 566,
	602, 425, 553, 604, 470, 396, 396, 386, 574, 551,
	562, 581, 558, 395, 774, 346, 346, 560, 539, 3,
	345, 603, 564, 801, 793, 766, 571, 24, 757, 557,
	702, 676, 472, 473, 596, 27, 534, 609, 2, 24,
	575, 576, 39, 586, 592, 598, 477, 396, 597, 582,
	2, 201, 191, 159, 191, 462, 3, 587, 588, 96,
	50, 595, 240, 601, 269, 611, 239, 241, 268, 428,
	792, 694, 185, 271, 270, 24, 198, 243, 242, 306,
	48, 493, 484, 616, 627, 626, 563, 561, 39, 615,
	494, 617, 503, 24, 489, 629, 508, 464, 41, 42,
	47, 43, 44, 45, 46, 380, 288, 191, 643, 707,
	93, 94, 95, 649, 96, 97, 427, 653, 480, 481,
	98, 24, 500, 640, 289, 499, 547, 24, 24, 27,
	668, 647, 648, 599, 187, 441, 589, 10, 411, 441,
	520, 664, 425, 113, 652, 48, 528, 671, 672, 679,
	3, 675, 197, 198, 199, 662, 403, 48, 404, 405,
	406, 401, 669, 518, 399, 464, 607, 608, 403, 24,
	404, 405, 406, 112, 10, 98, 143, 568, 569, 570,
	572, 335, 24, 24, 722, 723, 322, 323, 673, 24,
	690, 706, 594, 48, 591, 324, 585, 695, 27, 512,
	513, 514, 515, 701, 524, 418, 728, 188, 24, 726,
	303, 48, 739, 196, 135, 49, 129, 130, 137, 3,
	142, 116, 79, 724, 725, 77, 75, 736, 24, 727,
	27, 27, 8, 394, 24, 24, 751, 748, 7, 48,
	6, 359, 171, 667, 24, 48, 48, 66, 749, 310,
	24, 3, 3, 24, 311, 298, 772, 645, 297, 681,
	721, 2, 85, 65, 24, 783, 781, 68, 10, 61,
	767, 597, 756, 664, 127, 128, 131, 132, 67, 760,
	24, 24, 798, 799, 765, 721, 24, 48, 62, 606,
	479, 2, 384, 777, 206, 24, 24, 383, 24, 141,
	48, 48, 787, 788, 379, 287, 498, 48, 410, 548,
	107, 721, 721, 58, 99, 17, 16, 71, 126, 14,
	800, 721, 440, 437, 27, 13, 48, 12, 806, 9,
	136, 15, 138, 703, 11, 719, 278, 10, 632, 4,
	717, 721, 276, 0, 0, 3, 48, 0, 0, 0,
	0, 0, 48, 48, 0, 0, 0, 0, 797, 0,
	0, 0, 48, 721, 0, 0, 0, 160, 48, 10,
	10, 48, 797, 797, 0, 797, 167, 168, 0, 780,
	0, 172, 48, 0, 178, 179, 0, 0, 0, 27,
	0, 0, 0, 718, 0, 21, 0, 0, 48, 48,
	0, 27, 5, 0, 48, 0, 0, 0, 0, 0,
	3, 0, 0, 48, 48, 0, 48, 0, 718, 0,
	0, 0, 3, 0, 0, 0, 221, 222, 0, 0,
	0, 741, 0, 0, 229, 0, 0, 27, 0, 233,
	0, 235, 236, 237, 718, 718, 688, 244, 245, 246,
	247, 248, 249, 250, 762, 27, 0, 754, 755, 472,
	473, 0, 547, 10, 0, 0, 0, 761, 163, 708,
	709, 710, 711, 712, 718, 162, 3, 0, 0, 0,
	0, 0, 0, 27, 0, 0, 0, 785, 0, 27,
	27, 718, 158, 157, 159, 313, 718, 149, 0, 0,
	734, 0, 0, 0, 327, 718, 718, 163, 762, 802,
	0, 0, 0, 0, 162, 0, 0, 0, 754, 755,
	0, 761, 0, 0, 0, 339, 0, 0, 10, 0,
	0, 27, 0, 0, 349, 0, 351, 0, 0, 0,
	10, 0, 0, 0, 27, 27, 0, 0, 147, 146,
	0, 27, 3, 0, 154, 148, 153, 152, 362, 0,
	251, 155, 156, 252, 0, 0, 0, 0, 0, 0,
	27, 0, 0, 0, 374, 0, 10, 0, 0, 0,
	0, 0, 0, 381, 385, 0, 0, 0, 0, 0,
	27, 0, 0, 0, 10, 0, 27, 27, 412, 0,
	0, 0, 0, 0, 40, 0, 27, 0, 0, 0,
	0, 0, 27, 0, 193, 27, 0, 0, 0, 0,
	0, 0, 10, 0, 192, 0, 27, 0, 10, 10,
	0, 63, 0, 768, 0, 158, 157, 159, 0, 0,
	149, 453, 27, 27, 0, 0, 0, 0, 27, 0,
	0, 0, 0, 110, 0, 0, 460, 27, 27, 0,
	27, 163, 0, 768, 768, 0, 0, 0, 162, 0,
	10, 0, 0, 0, 0, 474, 0, 0, 768, 768,
	0, 768, 0, 10, 10, 0, 163, 0, 0, 0,
	10, 147, 146, 389, 0, 0, 0, 154, 148, 153,
	152, 0, 0, 0, 155, 156, 252, 40, 0, 10,
	0, 0, 313, 41, 42, 47, 43, 44, 45, 46,
	177, 0, 0, 0, 163, 0, 163, 74, 0, 10,
	0, 432, 0, 434, 0, 10, 10, 0, 0, 0,
	0, 0, 0, 0, 0, 10, 0, 0, 0, 537,
	0, 10, 0, 0, 10, 40, 538, 0, 0, 0,
	163, 0, 163, 0, 163, 10, 476, 162, 0, 162,
	0, 162, 0, 385, 299, 192, 0, 0, 0, 0,
	0, 10, 10, 559, 158, 157, 159, 10, 0, 149,
	0, 0, 477, 0, 565, 110, 10, 10, 0, 10,
	0, 0, 0, 0, 0, 266, 266, 0, 0, 0,
	0, 0, 0, 579, 0, 0, 41, 42, 47, 43,
	44, 45, 46, 590, 0, 300, 0, 0, 300, 0,
	0, 0, 0, 0, 430, 0, 0, 0, 0, 0,
	147, 146, 0, 163, 0, 0, 154, 148, 153, 152,
	532, 0, 0, 155, 156, 0, 40, 93, 94, 95,
	0, 96, 97, 49, 41, 42, 47, 43, 44, 45,
	46, 0, 266, 0, 266, 266, 74, 0, 0, 0,
	0, 0, 111, 0, 0, 158, 157, 159, 0, 403,
	149, 404, 405, 406, 401, 613, 614, 399, 646, 795,
	266, 365, 367, 369, 0, 0, 0, 0, 650, 0,
	0, 40, 0, 0, 88, 0, 0, 0, 89, 0,
	0, 0, 98, 0, 0, 86, 0, 0, 665, 666,
	670, 74, 0, 300, 0, 91, 0, 110, 0, 110,
	110, 147, 146, 0, 0, 0, 0, 154, 148, 153,
	152, 163, 0, 0, 155, 156, 0, 0, 610, 0,
	0, 0, 0, 0, 0, 41, 42, 47, 84, 92,
	83, 46, 0, 40, 0, 0, 0, 52, 0, 163,
	81, 82, 90, 72, 0, 0, 628, 40, 93, 94,
	95, 408, 96, 97, 49, 0, 266, 0, 266, 0,
	266, 0, 0, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 0, 0, 0, 742, 0, 0, 0, 266,
	41, 42, 47, 43, 44, 45, 46, 0, 0, 0,
	0, 0, 0, 750, 300, 163, 0, 0, 0, 0,
	0, 0, 674, 40, 0, 88, 0, 0, 0, 89,
	0, 0, 0, 98, 0, 40, 86, 94, 0, 0,
	0, 0, 0, 192, 778, 779, 91, 0, 0, 786,
	0, 0, 40, 93, 94, 95, 0, 96, 97, 49,
	0, 0, 41, 42, 47, 43, 44, 45, 46, 0,
	0, 803, 74, 0, 266, 0, 41, 42, 47, 84,
	92, 83, 46, 0, 0, 0, 0, 0, 0, 315,
	0, 81, 82, 90, 72, 0, 0, 0, 0, 0,
	0, 300, 0, 0, 0, 0, 300, 0, 0, 0,
	88, 0, 0, 0, 89, 0, 0, 0, 98, 201,
	0, 86, 40, 93, 94, 95, 0, 96, 97, 49,
	0, 91, 41, 42, 47, 43, 44, 45, 46, 0,
	0, 0, 74, 0, 41, 42, 47, 43, 44, 45,
	46, 0, 0, 266, 158, 157, 159, 0, 0, 149,
	0, 41, 42, 47, 84, 92, 83, 46, 0, 0,
	790, 0, 0, 300, 0, 300, 81, 82, 90, 72,
	88, 0, 0, 0, 89, 0, 0, 0, 98, 0,
	0, 86, 40, 93, 94, 95, 0, 96, 97, 49,
	40, 91, 0, 0, 0, 0, 0, 49, 0, 0,
	147, 146, 74, 0, 0, 0, 154, 148, 153, 152,
	0, 266, 0, 155, 156, 0, 0, 0, 300, 0,
	0, 41, 42, 47, 318, 319, 317, 320, 0, 0,
	0, 0, 0, 0, 315, 0, 81, 82, 90, 72,
	88, 0, 0, 0, 89, 0, 0, 0, 98, 0,
	39, 86, 40, 93, 94, 95, 0, 96, 97, 49,
	0, 91, 0, 158, 157, 159, 0, 0, 149, 0,
	0, 40, 74, 0, 0, 0, 0, 789, 40, 93,
	94, 95, 0, 96, 97, 49, 0, 0, 0, 391,
	0, 41, 42, 47, 84, 92, 83, 46, 74, 41,
	42, 47, 43, 44, 45, 46, 81, 82, 90, 72,
	88, 0, 0, 0, 89, 0, 0, 0, 98, 147,
	146, 86, 40, 0, 0, 154, 148, 153, 152, 0,
	0, 91, 155, 156, 0, 0, 88, 0, 0, 0,
	89, 0, 0, 0, 98, 0, 40, 86, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 91, 34, 0,
	0, 41, 42, 47, 84, 92, 83, 46, 22, 0,
	0, 23, 0, 0, 0, 0, 81, 82, 90, 72,
	41, 42, 47, 43, 44, 45, 46, 41, 42, 47,
	318, 319, 317, 320, 0, 0, 0, 0, 0, 0,
	40, 0, 81, 82, 90, 72, 0, 49, 0, 0,
	0, 0, 34, 0, 39, 0, 796, 0, 770, 0,
	0, 0, 22, 0, 26, 23, 0, 31, 29, 30,
	28, 41, 42, 47, 43, 44, 45, 46, 0, 32,
	33, 281, 282, 20, 35, 36, 37, 38, 0, 0,
	0, 635, 0, 0, 25, 41, 42, 47, 43, 44,
	45, 46, 0, 0, 40, 0, 0, 0, 39, 0,
	720, 49, 634, 0, 0, 0, 34, 0, 26, 0,
	0, 31, 29, 30, 28, 0, 22, 0, 0, 23,
	0, 0, 0, 32, 33, 281, 282, 0, 35, 36,
	37, 38, 0, 0, 0, 635, 0, 0, 25, 41,
	42, 47, 43, 44, 45, 46, 40, 0, 0, 0,
	0, 0, 0, 49, 0, 0, 0, 0, 34, 0,
	0, 0, 39, 0, 279, 0, 19, 0, 22, 0,
	0, 23, 26, 0, 0, 31, 29, 30, 28, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 33, 281,
	282, 20, 35, 36, 37, 38, 0, 0, 0, 0,
	0, 0, 25, 41, 42, 47, 43, 44, 45, 46,
	40, 0, 0, 0, 39, 0, 769, 49, 770, 0,
	0, 0, 34, 0, 26, 0, 0, 31, 29, 30,
	28, 0, 22, 0, 0, 23, 0, 0, 0, 32,
	33, 0, 0, 20, 35, 36, 37, 38, 0, 0,
	0, 635, 0, 0, 25, 41, 42, 47, 43, 44,
	45, 46, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 158, 157, 159, 0, 0, 149, 0, 39, 0,
	633, 0, 634, 0, 0, 759, 0, 0, 26, 0,
	0, 31, 29, 30, 28, 0, 0, 0, 0, 0,
	158, 157, 159, 32, 33, 149, 0, 0, 35, 36,
	37, 38, 0, 0, 753, 635, 0, 0, 25, 41,
	42, 47, 43, 44, 45, 46, 0, 147, 146, 0,
	0, 0, 0, 154, 148, 153, 152, 158, 157, 159,
	155, 156, 149, 0, 0, 0, 0, 158, 157, 159,
	0, 0, 149, 0, 0, 0, 147, 146, 0, 0,
	0, 691, 154, 148, 153, 152, 158, 157, 159, 155,
	156, 149, 0, 0, 0, 0, 158, 157, 159, 0,
	0, 149, 692, 0, 0, 0, 0, 0, 0, 0,
	678, 0, 0, 147, 146, 0, 0, 0, 52, 154,
	148, 153, 152, 147, 146, 0, 155, 156, 0, 154,
	148, 153, 152, 158, 157, 159, 155, 156, 149, 0,
	0, 0, 147, 146, 0, 0, 0, 536, 154, 148,
	153, 152, 147, 146, 0, 155, 156, 40, 154, 148,
	153, 152, 0, 0, 49, 155, 156, 0, 0, 34,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 22,
	0, 0, 23, 0, 0, 0, 0, 0, 0, 147,
	146, 0, 0, 0, 0, 154, 148, 153, 152, 0,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 158, 157,
	159, 0, 0, 149, 0, 39, 0, 18, 0, 19,
	0, 0, 471, 0, 0, 26, 0, 0, 31, 29,
	30, 28, 0, 0, 0, 0, 0, 158, 157, 159,
	32, 33, 149, 0, 20, 35, 36, 37, 38, 0,
	0, 461, 0, 0, 0, 25, 41, 42, 47, 43,
	44, 45, 46, 0, 147, 146, 0, 0, 0, 0,
	154, 148, 153, 152, 158, 157, 159, 155, 156, 149,
	0, 0, 0, 0, 158, 157, 159, 0, 0, 149,
	182, 0, 0, 147, 146, 0, 0, 0, 145, 154,
	148, 153, 152, 158, 157, 159, 155, 156, 149, 0,
	0, 0, 0, 454, 157, 159, 0, 0, 149, 0,
	0, 0, 0, 158, 0, 159, 0, 0, 149, 0,
	147, 146, 0, 0, 0, 0, 154, 148, 153, 152,
	147, 146, 0, 155, 156, 0, 154, 148, 153, 152,
	0, 0, 0, 155, 156, 0, 0, 0, 0, 147,
	146, 0, 0, 0, 0, 154, 148, 153, 152, 147,
	146, 0, 155, 156, 0, 154, 148, 153, 152, 147,
	146, 0, 155, 156, 0, 154, 148, 153, 152, 0,
	0, 0, 155, 156,
}
var yyPact = [...]int{

	2343, -1000, 2343, -1000, -1000, 207, 207, 207, 207, 207,
	207, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1788, 1788,
	207, 183, 653, 623, 190, 714, 1726, 207, 406, 1858,
	1858, 695, 207, 207, 712, 1788, 723, 1788, 224, 661,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 216, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2420, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 216,
	-1000, -1000, 1718, -45, -26, -1000, -1000, -1000, -1000, -1000,
	-1000, 1788, 1788, 189, 186, -1000, 1788, 270, 185, 1788,
	1788, 1858, 184, -1000, -1000, -1000, -1000, -1000, -1000, 2410,
	37, 519, -1000, 606, 697, 1549, 1110, 709, 605, 490,
	-1000, 480, 1858, 1549, 1788, 207, 4, 213, 207, 380,
	-1000, 207, 1858, 1858, 207, 207, 1858, -1000, -1000, -1000,
	-1000, 1788, 1788, -1000, -1000, 204, 2183, -20, 2183, 1362,
	-1000, 1, 1858, -1000, 1788, 2343, 1788, 1788, 1788, 497,
	509, 527, 1788, 1788, 1788, 1788, 1788, 1788, 1788, -1000,
	938, 115, 113, 165, 1561, 1578, 1561, -1000, -1000, 490,
	490, 407, 2439, 138, 138, 511, 523, -1000, 279, -1000,
	271, 490, 2000, 1858, 714, 1858, 572, 593, 1549, 69,
	-1000, -1000, -1000, 1261, 70, 702, 1261, 529, 529, 529,
	1648, -1000, 182, 669, 110, -1000, 1081, -1000, 714, 1788,
	-1000, 332, 173, 181, 180, -1000, 207, 207, -1000, -1000,
	671, 2439, 2439, 615, -1000, -1000, 1788, -1000, -1000, 2183,
	1788, 661, 222, 2439, 451, -25, -46, -46, 560, 1788,
	138, 1788, 138, 138, -4, -4, -1000, -1000, -1000, 2459,
	279, -1000, 1788, -1000, -1000, -1000, -1000, 1788, -1000, -1000,
	1788, 1493, 414, 1788, -1000, 1718, -1000, -1000, 138, 179,
	176, 174, 497, -1000, 1788, 379, 2000, -1000, -1000, 1788,
	-1000, 207, 207, 393, -1000, -1, 390, 570, 1788, 1814,
	119, 1807, 1549, 1417, 702, 46, -1000, 1479, -1000, -1000,
	-1000, 1261, 609, 1788, -1000, 165, -1000, 165, 165, -1000,
	-2, 693, -1000, 2439, -1000, -1000, -57, 168, 166, 153,
	151, 1858, 495, 1213, 1417, -1000, -1000, 2439, 480, 1858,
	480, 120, 1858, -1000, -1000, 714, 207, 207, -1000, 2183,
	-1000, 145, 1858, 377, 451, 2343, 1788, -1000, -1000, 2449,
	-1000, -46, -1000, -1000, -1000, 106, 101, 99, 96, 375,
	407, 1788, 2373, 501, 157, -1000, 157, -1000, 157, -1000,
	351, 95, 438, -1000, 2344, -1000, -1000, 2000, 2000, -1000,
	1788, 1230, -1000, -3, 586, 2439, -1000, 138, 1417, -1000,
	-1000, 1858, -7, 709, -9, 124, -64, -1000, 557, 630,
	542, 553, 1261, -1000, -1000, -1000, -1000, -1000, 1858, 702,
	595, 591, 2439, 528, -1000, -1000, 528, 1648, 1858, 1578,
	490, 490, 490, 1788, 94, -10, 678, 1858, 638, -1000,
	1417, 613, 207, 90, 207, 692, 87, -15, -1000, -1000,
	-18, 621, -42, 207, -1000, -1000, -1000, 480, 83, 472,
	374, 450, -1000, 2259, 1788, -1000, -1000, -1000, -1000, -1000,
	2439, 1788, 138, 82, -19, 81, 80, -1000, 318, 250,
	207, 2000, 370, 366, 2439, -1000, 484, 241, 1814, 238,
	-1000, -1000, -1000, 79, -23, -1000, 702, 1417, 1788, 1261,
	550, 542, 549, -1000, 1261, -1000, -1000, -1000, -1000, 1788,
	1788, -1000, -1000, 77, 1788, 1788, 1493, 1788, 76, -1000,
	1858, -1000, -1000, -1000, 1417, 1417, 74, -24, 1788, 67,
	1858, -1000, 260, -1000, 269, 684, 714, 714, 1788, 682,
	714, -1000, 63, 680, 207, 470, 2343, 279, 2439, -1000,
	-1000, 138, -1000, -1000, -1000, 604, -1000, 431, 2343, 437,
	429, -1000, -1000, -1000, 645, 526, 1417, -1000, -1000, 2439,
	1351, 1261, 546, 1261, 618, 2439, -1000, 306, 61, 60,
	56, 55, 53, 262, -1000, -1000, -1000, 678, 1858, 2439,
	-1000, -1000, -1000, 480, 2116, 267, -1000, -1000, -1000, 621,
	2439, 263, 48, -1000, 144, -1000, 207, -1000, -1000, 139,
	365, 431, 2000, 1788, 207, 207, -1000, -1000, -1000, 138,
	-1000, -1000, -1000, 1788, 134, 618, 1261, 1351, 132, 302,
	298, 297, 295, 259, 131, 228, -1000, -1000, 207, 364,
	2116, -1000, -1000, 1788, 1788, 1362, 2116, 2116, 676, 480,
	-1000, 606, 467, 361, 456, -1000, 2222, -1000, -1000, -1000,
	2439, 1858, 618, -1000, 309, 129, 128, 127, 125, 118,
	309, 292, -1000, 207, -1000, 2193, 2212, 15, 518, -1000,
	2183, 357, 354, 256, 47, 39, 207, 466, 2000, 36,
	34, 606, 578, 309, 309, 309, 309, 309, 28, 117,
	-1000, 2116, 1936, 1858, 1858, -1000, 207, 207, 2116, -1000,
	-1000, -1000, 207, -1000, -1000, -1000, -1000, 1788, 24, 22,
	21, 19, 17, -1000, 309, 419, 352, 1936, -1000, -1000,
	1788, -1000, 388, 387, -1000, -1000, 348, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 10, 346, 402, 2116, 1788, 450,
	424, -1000, 2146, 1936, 1936, 207, -1000, 464, 344, -1000,
	2117, 450, 207, 1936, 342, 341, -1000, 207, 461, 2052,
	-1000, 403, 2116, 416, 409, -1000, 207, -1000, -1000, 1788,
	1788, 340, 403, 1936, 1788, 207, 207, -1000, 1739, 1620,
	13, 517, 460, 339, 449, -1000, 1331, -1000, -1000, 2052,
	1882, 1858, 1858, 207, 459, 1936, 1788, -1000, 385, 381,
	-1000, 207, -1000, 152, 1882, 1882, -1000, 1882,
}
var yyPgo = [...]int{

	0, 21, 164, 20, 223, 383, 11, 210, 852, 850,
	849, 848, 77, 846, 845, 844, 841, 839, 58, 15,
	17, 837, 835, 26, 833, 832, 40, 23, 829, 828,
	827, 826, 825, 912, 73, 60, 820, 32, 52, 818,
	816, 19, 815, 42, 814, 905, 809, 55, 59, 35,
	804, 29, 65, 13, 33, 807, 802, 800, 799, 1141,
	798, 788, 779, 777, 182, 501, 773, 772, 38, 295,
	769, 63, 66, 768, 37, 765, 9, 764, 759, 757,
	752, 71, 751, 18, 8, 49, 56, 7, 41, 750,
	748, 743, 34, 742, 6, 51, 25, 16, 737, 10,
	4, 2, 0, 736, 67, 735, 61, 732, 50, 118,
	5, 362, 731, 62, 54, 53, 48, 28, 39, 68,
	730, 415, 36,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 6, 6, 7, 7, 8, 8, 9, 9,
	10, 10, 10, 10, 10, 10, 11, 11, 11, 11,
	11, 11, 11, 12, 12, 13, 13, 13, 14, 14,
	14, 15, 15, 15, 15, 16, 16, 17, 17, 17,
	17, 17, 17, 18, 18, 19, 19, 20, 20, 20,
	20, 20, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 23, 24, 24, 25, 26, 26, 27, 27, 27,
	28, 28, 28, 28, 29, 29, 29, 29, 29, 29,
	29, 30, 30, 30, 31, 31, 31, 31, 31, 32,
	32, 32, 33, 34, 34, 34, 34, 35, 35, 36,
	37, 37, 38, 38, 39, 39, 40, 40, 41, 41,
	42, 42, 42, 43, 43, 44, 44, 45, 45, 46,
	46, 47, 47, 48, 48, 48, 48, 48, 48, 49,
	49, 49, 49, 49, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 51, 52,
	52, 53, 53, 54, 54, 55, 55, 56, 56, 57,
	57, 57, 58, 58, 59, 60, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 62, 62, 62, 62, 62,
	62, 62, 63, 63, 63, 63, 64, 64, 65, 66,
	66, 66, 66, 66, 67, 67, 68, 68, 68, 68,
	68, 68, 68, 68, 69, 70, 70, 71, 71, 72,
	72, 72, 73, 74, 74, 74, 74, 74, 74, 75,
	75, 75, 75, 75, 76, 76, 76, 77, 77, 78,
	78, 78, 79, 80, 80, 81, 81, 82, 82, 83,
	83, 84, 84, 85, 85, 86, 86, 87, 87, 88,
	88, 89, 89, 89, 89, 90, 91, 92, 92, 93,
	93, 94, 94, 95, 95, 96, 96, 97, 97, 98,
	98, 99, 99, 100, 100, 101, 101, 102, 102, 102,
	102, 102, 102, 102, 102, 103, 104, 105, 106, 107,
	108, 109, 110, 110, 111, 112, 112, 113, 113, 114,
	114, 115, 115, 116, 116, 117, 117, 118, 118, 118,
	118, 119, 119, 120, 120, 121, 121, 122, 122,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	8, 9, 7, 9, 9, 2, 8, 9, 7, 9,
	9, 2, 3, 2, 2, 8, 9, 1, 8, 9,
	1, 3, 3, 2, 3, 2, 2, 6, 6, 8,
	5, 7, 7, 1, 3, 1, 3, 0, 1, 1,
	2, 2, 6, 3, 3, 4, 6, 7, 9, 6,
	4, 1, 1, 3, 3, 1, 3, 1, 1, 3,
	10, 11, 11, 13, 0, 1, 1, 1, 1, 2,
	2, 5, 6, 3, 5, 3, 3, 5, 3, 3,
	4, 5, 5, 5, 4, 4, 4, 1, 1, 3,
	0, 2, 0, 2, 0, 3, 0, 2, 0, 3,
	0, 3, 4, 0, 2, 0, 2, 0, 2, 6,
	9, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 1, 3, 2, 4, 1, 1, 0,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	4, 4, 6, 6, 4, 6, 4, 4, 4, 6,
	4, 4, 6, 4, 2, 3, 3, 3, 3, 3,
	2, 2, 3, 3, 2, 2, 0, 1, 4, 5,
	5, 5, 5, 1, 5, 10, 8, 9, 9, 9,
	9, 9, 8, 10, 2, 0, 3, 1, 1, 1,
	2, 3, 1, 1, 1, 2, 3, 1, 1, 5,
	5, 6, 6, 4, 0, 2, 4, 1, 1, 1,
	3, 1, 5, 0, 1, 4, 2, 0, 2, 1,
	3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
	3, 6, 9, 5, 8, 7, 3, 1, 3, 5,
	6, 4, 2, 0, 2, 4, 2, 0, 2, 4,
	2, 0, 2, 4, 2, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 1, 3, 1, 3, 0,
	1, 0, 1, 0, 1, 0, 1, 0, 1, 1,
	1, 0, 1, 0, 1, 1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -10, -33, -89, -90, -93, -17,
	-65, -15, -21, -22, -28, -16, -31, -32, 74, 76,
	101, -45, 26, 29, -102, 112, 82, -111, 88, 86,
	87, 85, 97, 98, 16, 102, 103, 104, 105, 72,
	4, 113, 114, 116, 117, 118, 119, 115, -109, 11,
	-1, -122, 125, -122, -122, -122, -122, -122, -50, -49,
	-48, -62, -60, -59, -65, -66, -79, -61, -63, -109,
	-111, -30, 131, -102, 24, -103, -104, -105, -106, -107,
	-108, 128, 129, 118, 116, -67, 73, -52, 62, 66,
	130, 83, 117, 5, 6, 7, 9, 10, 70, -50,
	-109, -110, -122, -34, 19, 15, 17, -36, -35, 13,
	-59, 131, 30, 30, 131, -113, -112, -109, -113, -102,
	-122, -109, 83, 30, -102, -102, -29, 89, 90, 31,
	32, 91, 92, -122, -122, 12, -50, 5, -50, 115,
	-47, -46, -120, 25, 122, 78, 121, 120, 127, 69,
	-115, -121, 129, 128, 126, 133, 134, 65, 64, 66,
	-50, -84, -33, -45, 136, 131, 136, -50, -50, 131,
	131, -80, -50, 120, 127, -115, -121, -59, -50, -50,
	-102, 131, 80, 63, 135, 63, -41, 38, 20, -86,
	-71, -102, 24, 14, -86, -37, 14, 57, 58, 59,
	-114, 71, -102, -71, -64, -84, -50, -122, 135, 122,
	-122, 83, 30, 106, 107, -122, -102, -102, -122, -122,
	-102, -50, -50, 127, -122, -122, 135, -122, -122, -50,
	-104, 135, -102, -50, -1, -50, -50, -50, -115, 67,
	63, 68, 61, 60, -50, -50, -50, -50, -50, -50,
	-50, 132, 135, 132, 132, -102, -104, -114, -102, -104,
	-114, -114, -81, 77, -52, 131, -59, -52, 67, 63,
	61, 60, 69, 116, -114, -2, -8, -6, -13, 74,
	-12, 99, 100, -102, -110, -109, -102, -42, 44, 41,
	-72, -71, 135, 16, -85, -74, -72, -73, -75, 23,
	-59, 14, -38, 18, -85, -119, 60, -119, -119, -88,
	-78, -77, -51, -50, -68, 126, -102, 118, 116, 117,
	119, 131, 27, 28, 36, 132, -113, -50, 84, 131,
	84, 131, 131, -122, -122, 20, -48, -84, -122, -50,
	-47, 22, 131, -95, -94, 79, 75, -106, -108, -50,
	-52, -50, -52, -52, -84, -64, -64, -64, -51, -82,
	-81, 79, -50, -52, 131, -59, 131, -59, 131, -59,
	-115, -64, 81, -2, -50, -122, -122, 80, 80, -44,
	45, -50, -54, -55, -56, -50, -68, 21, 131, -33,
	-102, 22, -86, -92, -91, -49, -102, -38, -116, 56,
	-118, 53, 135, 48, 50, 51, 52, -102, 22, -85,
	-39, 39, -50, -35, -34, -35, -35, 135, 22, 131,
	131, 131, 131, 131, -87, -102, -18, 131, -102, -49,
	131, -49, -33, -87, -33, 132, -27, -24, -26, -23,
	-25, -109, -102, -110, -122, -122, -122, 131, -87, 81,
	-95, -94, -1, -50, 64, 132, 132, 132, 132, 81,
	-50, 78, 64, -53, -52, -53, -53, 86, 63, 132,
	76, 78, -2, -2, -50, -43, 46, 72, 135, -57,
	42, 43, -53, -83, -49, -102, -37, 135, 127, 47,
	-116, -118, -117, 49, 47, -85, -102, -38, -40, 40,
	41, -88, -102, -64, -114, -114, -114, -114, -64, 132,
	135, -20, 31, 32, 33, 34, -19, -18, 35, -83,
	37, -122, 132, -122, 22, 132, 135, 135, 35, 132,
	135, -122, -33, 132, 74, 81, 78, -50, -50, -52,
	132, 135, 132, 132, 93, 111, -122, -2, -6, 81,
	81, -43, 113, -54, 114, 132, 135, -38, -92, -50,
	-74, 47, -117, 47, -74, -50, -84, 132, -64, -64,
	-64, -51, -64, 132, -87, -49, -49, 132, 135, -50,
	132, -102, -122, 84, 108, 22, -23, -26, -26, -109,
	-50, 22, -27, 132, 22, -122, 74, -1, -53, 39,
	-97, -96, 79, 75, 76, 76, -58, 31, 32, 21,
	-33, -83, -76, 54, 55, -74, 47, -74, 96, 132,
	132, 132, 132, 132, 96, 110, -20, -19, -33, -3,
	-7, -5, -11, 74, 76, 109, 108, 108, 132, 131,
	-122, 131, 81, -97, -96, -2, -50, -122, -122, -53,
	-50, 131, -74, -76, 131, 96, 96, 96, 96, 96,
	131, 114, -122, 81, -3, -50, -50, -109, -110, -122,
	-50, -3, -3, 22, -33, -41, 74, 81, 78, -87,
	-69, -70, 95, 131, 131, 131, 131, 131, -69, 96,
	-122, 78, 80, 63, 63, -122, 81, 81, 108, 132,
	132, -122, 74, -2, 132, 132, -41, 41, -69, -69,
	-69, -69, -69, 132, 131, -3, -4, -9, -7, -14,
	74, -12, -102, -102, -122, -122, -3, -122, -84, 132,
	132, 132, 132, 132, -69, -99, -98, 79, 75, -94,
	81, -4, -50, 80, 80, 81, 132, 81, -99, -3,
	-50, -94, 76, 78, -4, -4, -122, 74, 81, 78,
	-122, -4, -7, 81, 81, -122, 74, -3, -5, 74,
	76, -101, -100, 79, 75, 76, 76, -122, -50, -50,
	-109, -110, 81, -101, -100, -4, -50, -122, -122, 78,
	80, 63, 63, 74, 81, 78, 74, -12, -102, -102,
	-122, 74, -4, -50, 80, 80, -122, 78,
}
var yyDef = [...]int{

	-2, -2, -2, 22, 23, 347, 347, 347, 347, 347,
	347, 15, 16, 17, 18, 19, 20, 21, 0, 0,
	347, 0, 0, 0, 0, 0, 0, 347, 0, 0,
	0, 94, 347, 347, 0, 0, 0, 0, 0, 343,
	307, 308, 309, 310, 311, 312, 313, 314, 0, 321,
	2, 9, 348, 10, 11, 12, 13, 14, 331, 154,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 137, 149, 0, 143, 144, 145, 146, 147,
	148, 0, 0, 312, 310, 223, 263, 331, 0, 0,
	0, 0, 311, 315, 316, 317, 318, 319, 320, 331,
	164, 0, 35, -2, 0, 0, 0, 120, 0, 329,
	118, 137, 0, 0, 216, 347, 327, 325, 347, 0,
	53, 347, 0, 0, 347, 347, 0, 95, 96, 97,
	98, 0, 0, 55, 56, 0, -2, 347, -2, 347,
	138, 141, 0, 344, 0, -2, 0, 345, 346, 331,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 332,
	331, 0, 0, 0, 0, 216, 0, 210, 211, 329,
	329, 0, -2, 345, 346, 0, 0, 204, 214, 215,
	0, 329, -2, 0, 0, 0, 130, 0, 0, 0,
	275, 237, 238, 0, 0, 122, 0, 341, 341, 341,
	0, 330, 0, 0, 0, 217, -2, 51, 0, 0,
	52, 0, 0, 0, 0, 54, 347, 347, 73, 74,
	0, -2, -2, 0, 105, 106, 0, 108, 109, -2,
	144, 343, 0, 324, 293, 185, -2, -2, 0, 0,
	0, 0, 0, 0, 205, 206, 207, 208, 209, 212,
	213, 167, 0, 169, 184, 150, 152, 216, 151, 153,
	216, 216, 267, 0, 187, 137, 170, 189, 0, 0,
	0, 0, 331, 103, 216, 0, -2, 26, 27, 0,
	47, 347, 347, 0, 323, 322, 0, 135, 0, 0,
	137, 239, 0, 0, 122, -2, 243, 244, 247, 248,
	242, 0, 124, 0, 121, 0, 342, 0, 0, 119,
	279, 259, 261, -2, 258, 168, 149, 312, 310, 311,
	313, 0, 0, 0, 0, 218, 328, -2, 137, 0,
	137, 0, 0, 75, 80, 0, 347, 347, 110, -2,
	142, 0, 0, 0, 293, -2, 0, 190, 191, 331,
	194, -2, 198, 201, 272, 0, 0, 0, 0, 0,
	266, 0, 331, 0, 137, 196, 137, 200, 137, 203,
	0, 0, 0, 4, 331, 43, 44, -2, -2, 112,
	0, -2, 129, 173, 179, -2, 178, 0, 0, 283,
	240, 0, 276, 120, 287, 0, 149, 289, 0, -2,
	335, 0, 0, 334, 338, 339, 340, 245, 0, 122,
	126, 0, -2, 114, 117, 115, 116, 0, 0, 216,
	329, 329, 329, 216, 0, 277, 67, 0, 63, 60,
	0, 0, 347, 0, 347, 0, 0, 87, 88, 82,
	85, 81, 0, 347, 104, 107, 111, 137, 0, 0,
	0, 292, 294, 331, 0, 219, 220, 221, 222, 262,
	-2, 0, 0, 0, 171, 0, 0, 101, 0, 224,
	347, -2, 0, 0, -2, 131, 133, 0, 0, 175,
	180, 181, 281, 0, 269, 241, 122, 0, 0, 0,
	0, 335, 0, 336, 0, 274, 246, 290, 113, 0,
	0, 280, 260, 0, 216, 216, 216, 216, 0, 57,
	0, 58, 68, 69, 0, 0, 0, 65, 0, 0,
	0, 72, 347, 79, 0, 0, 0, 0, 0, 0,
	0, 76, 0, 0, 347, 0, -2, 192, -2, 193,
	195, 0, 199, 202, 102, 0, 32, 297, -2, 0,
	0, 132, 134, 174, 0, 137, 0, 285, 288, -2,
	254, 0, 0, 0, 253, -2, 125, 218, 0, 0,
	0, 0, 0, 0, 278, 70, 71, 67, 0, -2,
	61, 62, 77, 137, -2, 0, 83, 89, 86, 0,
	-2, 0, 0, 139, 0, 30, 347, 291, 172, 0,
	0, 297, -2, 0, 347, 347, 176, 182, 183, 0,
	284, 270, 249, 0, 0, 250, 0, 254, 0, 219,
	220, 221, 222, 224, 0, 0, 59, 66, 347, 0,
	-2, 24, 25, 0, 0, 347, -2, -2, 0, 137,
	31, 128, 0, 0, 296, 298, 331, 33, 34, 282,
	-2, 0, 252, 251, 235, 0, 0, 0, 0, 0,
	235, 0, 78, 347, 6, 331, 331, 164, 0, 41,
	-2, 0, 0, 0, 0, 0, 347, 0, -2, 0,
	0, 128, 0, 235, 235, 235, 235, 235, 0, 0,
	90, -2, -2, 0, 0, 42, 347, 347, -2, 140,
	225, 45, 347, 295, 256, 226, 234, 0, 0, 0,
	0, 0, 0, 232, 235, 301, 0, -2, 28, 29,
	0, 50, 0, 0, 91, 92, 0, 46, 236, 227,
	228, 229, 230, 231, 0, 0, 301, -2, 0, 0,
	0, 8, 331, -2, -2, 347, 233, 0, 0, 302,
	331, 300, 347, -2, 0, 0, 93, 347, 0, -2,
	38, 305, -2, 0, 0, 36, 347, 299, -2, 0,
	0, 0, 305, -2, 0, 347, 347, 37, 331, 331,
	164, 0, 0, 0, 304, 306, 331, 39, 40, -2,
	-2, 0, 0, 347, 0, -2, 0, -2, 0, 0,
	48, 347, 303, 331, -2, -2, 49, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 130, 3, 3, 3, 134, 3, 3,
	131, 132, 126, 129, 135, 128, 136, 133, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 125,
	3, 127,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:192
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:197
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:204
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:209
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:216
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:221
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:228
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:233
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:240
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:244
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:248
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:252
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:256
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:260
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:264
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:268
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:272
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:276
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:280
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:304
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:308
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:314
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:324
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:328
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:334
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:338
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:342
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:346
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 34:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:350
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:354
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:360
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:364
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:368
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:372
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:376
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:380
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:384
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:390
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:394
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:400
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:404
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:408
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:414
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:418
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:422
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:428
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:432
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:436
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:440
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:446
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:450
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:456
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:460
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:464
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:468
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:472
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:476
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression, To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:482
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:486
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:492
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:496
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:502
		{
			yyVAL.expression = nil
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:506
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:510
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:514
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:518
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:524
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:528
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:532
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:536
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:540
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:546
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 78:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:550
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:554
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:558
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:564
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:570
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:574
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expression)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:580
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:586
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:590
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:596
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:600
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:604
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 90:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:610
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:614
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].expressions, Statements: yyDollar[9].program}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:618
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Statements: yyDollar[9].program}
		}
	case 93:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.y:622
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Parameters: yyDollar[7].expressions, Statements: yyDollar[11].program}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:628
		{
			yyVAL.expression = nil
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:632
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:636
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:640
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:644
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:648
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:652
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:658
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:662
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:666
		{
			yyVAL.expression = CursorAttrebute{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Attrebute: yyDollar[3].token}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:672
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:676
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:680
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:684
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:688
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].expression}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:694
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:698
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[3].expression}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:702
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[4].expression, Code: yyDollar[3].integer}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:708
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:720
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:730
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:739
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:748
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:759
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:763
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:769
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:775
		{
			yyVAL.expression = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:779
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:785
		{
			yyVAL.expression = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:789
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:795
		{
			yyVAL.expression = nil
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:799
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:805
		{
			yyVAL.expression = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:809
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:815
		{
			yyVAL.expression = nil
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:819
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:825
		{
			yyVAL.expression = nil
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:829
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:833
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:839
		{
			yyVAL.expression = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:843
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:849
		{
			yyVAL.expression = nil
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:853
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:859
		{
			yyVAL.expression = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:863
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:869
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 140:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:873
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:879
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:883
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:889
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:893
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:897
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:901
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:905
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:909
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:915
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, Column: yyDollar[1].identifier}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:919
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:923
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:927
		{
			yyVAL.expression = ColumnNumber{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Number: yyDollar[3].integer}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:931
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: yyDollar[3].integer}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:937
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:941
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:945
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:949
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:953
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:957
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:961
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:965
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:969
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:973
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:977
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:981
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:985
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:989
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:995
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1001
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1005
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1011
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1015
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1021
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1025
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1031
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1035
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1041
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1045
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1051
		{
			yyVAL.token = Token{}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1055
		{
			yyVAL.token = yyDollar[1].token
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1059
		{
			yyVAL.token = yyDollar[1].token
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1065
		{
			yyVAL.token = yyDollar[1].token
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1069
		{
			yyVAL.token = yyDollar[1].token
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1075
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1081
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1104
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1108
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1112
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1116
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1120
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1124
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1128
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1132
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1136
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1140
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1144
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1148
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1152
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1156
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1160
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1164
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1168
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1172
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1176
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1182
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1190
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1194
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1198
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1202
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1206
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1212
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1216
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1220
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1224
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1230
		{
			yyVAL.expressions = nil
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1234
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1240
		{
			yyVAL.expression = Function{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1246
		{
			yyVAL.expression = AggregateFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1250
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1254
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1258
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1262
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1268
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 225:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1272
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 226:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1278
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 227:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1282
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 228:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1286
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 229:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1290
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 230:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1294
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 231:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1298
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 232:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1302
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 233:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1306
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1312
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1318
		{
			yyVAL.expression = nil
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1322
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1328
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1332
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1338
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1342
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1346
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1352
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1358
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1362
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1366
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1370
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1374
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1378
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1384
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1388
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1392
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1396
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1400
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1406
		{
			yyVAL.expression = nil
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1410
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1414
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1420
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1424
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1430
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1434
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1438
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1444
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1450
		{
			yyVAL.expression = nil
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1454
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1460
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1464
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1470
		{
			yyVAL.expression = nil
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1474
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1480
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1484
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1490
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1494
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1500
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1504
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1510
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1514
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1520
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 278:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1524
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1530
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1534
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 281:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1540
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 282:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1544
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1548
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 284:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1552
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 285:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1558
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1564
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1570
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1574
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1580
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 290:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1585
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1592
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1596
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1602
		{
			yyVAL.procexpr = nil
		}
	case 294:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1606
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1612
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1616
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1622
		{
			yyVAL.procexpr = nil
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1626
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 299:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1632
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1636
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1642
		{
			yyVAL.procexpr = nil
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1646
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1652
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1656
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1662
		{
			yyVAL.procexpr = nil
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1666
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1672
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1676
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1680
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1684
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1688
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1692
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1696
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1700
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1706
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1712
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1718
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1724
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1730
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1736
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1742
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1748
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1752
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1758
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1764
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1768
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1774
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1778
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1784
		{
			yyVAL.token = Token{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1788
		{
			yyVAL.token = yyDollar[1].token
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1794
		{
			yyVAL.token = Token{}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1798
		{
			yyVAL.token = yyDollar[1].token
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1804
		{
			yyVAL.token = Token{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1808
		{
			yyVAL.token = yyDollar[1].token
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1814
		{
			yyVAL.token = Token{}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1818
		{
			yyVAL.token = yyDollar[1].token
		}
	case 337:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1824
		{
			yyVAL.token = Token{}
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1828
		{
			yyVAL.token = yyDollar[1].token
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1832
		{
			yyVAL.token = yyDollar[1].token
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1836
		{
			yyVAL.token = yyDollar[1].token
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1842
		{
			yyVAL.token = Token{}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1846
		{
			yyVAL.token = yyDollar[1].token
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1852
		{
			yyVAL.token = Token{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1856
		{
			yyVAL.token = yyDollar[1].token
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1863
		{
			yyVAL.token = yyDollar[1].token
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1867
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1874
		{
			yyVAL.token = Token{}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1878
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
