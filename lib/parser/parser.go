//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	identifier  Identifier
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const TRIGGER = 57447
const FUNCTION = 57448
const AGGREGATE = 57449
const BEGIN = 57450
const RETURN = 57451
const IGNORE = 57452
const WITHIN = 57453
const VAR = 57454
const TIES = 57455
const NULLS = 57456
const ERROR = 57457
const COUNT = 57458
const LISTAGG = 57459
const AGGREGATE_FUNCTION = 57460
const FUNCTION_WITH_INS = 57461
const COMPARISON_OP = 57462
const STRING_OP = 57463
const SUBSTITUTION_OP = 57464
const UMINUS = 57465
const UPLUS = 57466

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"TRIGGER",
	"FUNCTION",
	"AGGREGATE",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"TIES",
	"NULLS",
	"ERROR",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_INS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1858

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 142,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 50,
	1, 1,
	75, 1,
	79, 1,
	81, 1,
	-2, 142,
	-1, 52,
	132, 223,
	-2, 142,
	-1, 93,
	57, 122,
	58, 122,
	59, 122,
	-2, 133,
	-1, 123,
	63, 334,
	67, 334,
	68, 334,
	-2, 110,
	-1, 125,
	63, 334,
	67, 334,
	68, 334,
	-2, 113,
	-1, 133,
	75, 1,
	79, 1,
	81, 1,
	-2, 142,
	-1, 162,
	77, 273,
	-2, 334,
	-1, 172,
	81, 4,
	-2, 142,
	-1, 195,
	63, 334,
	67, 334,
	68, 334,
	-2, 280,
	-1, 207,
	63, 334,
	67, 334,
	68, 334,
	-2, 104,
	-1, 208,
	63, 334,
	67, 334,
	68, 334,
	-2, 105,
	-1, 211,
	63, 334,
	67, 334,
	68, 334,
	-2, 115,
	-1, 218,
	69, 0,
	120, 0,
	127, 0,
	-2, 193,
	-1, 219,
	69, 0,
	120, 0,
	127, 0,
	-2, 195,
	-1, 278,
	47, 336,
	-2, 282,
	-1, 297,
	63, 334,
	67, 334,
	68, 334,
	-2, 266,
	-1, 313,
	63, 334,
	67, 334,
	68, 334,
	-2, 329,
	-1, 322,
	63, 334,
	67, 334,
	68, 334,
	-2, 116,
	-1, 328,
	81, 1,
	-2, 142,
	-1, 334,
	69, 0,
	120, 0,
	127, 0,
	-2, 204,
	-1, 356,
	75, 4,
	79, 4,
	81, 4,
	-2, 142,
	-1, 358,
	81, 4,
	-2, 142,
	-1, 359,
	81, 4,
	-2, 142,
	-1, 362,
	63, 334,
	67, 334,
	68, 334,
	-2, 138,
	-1, 366,
	63, 334,
	67, 334,
	68, 334,
	-2, 184,
	-1, 394,
	63, 334,
	67, 334,
	68, 334,
	-2, 128,
	-1, 440,
	81, 277,
	-2, 334,
	-1, 452,
	75, 1,
	79, 1,
	81, 1,
	-2, 142,
	-1, 455,
	63, 334,
	67, 334,
	68, 334,
	-2, 141,
	-1, 492,
	13, 142,
	131, 142,
	-2, 58,
	-1, 516,
	75, 1,
	79, 1,
	81, 1,
	-2, 142,
	-1, 518,
	77, 274,
	79, 274,
	81, 274,
	-2, 334,
	-1, 538,
	63, 334,
	67, 334,
	68, 334,
	-2, 295,
	-1, 545,
	63, 334,
	67, 334,
	68, 334,
	-2, 132,
	-1, 561,
	63, 334,
	67, 334,
	68, 334,
	-2, 69,
	-1, 565,
	81, 6,
	-2, 142,
	-1, 571,
	132, 89,
	135, 89,
	-2, 334,
	-1, 582,
	81, 4,
	-2, 142,
	-1, 618,
	81, 6,
	-2, 142,
	-1, 619,
	81, 6,
	-2, 142,
	-1, 629,
	63, 334,
	67, 334,
	68, 334,
	-2, 264,
	-1, 643,
	75, 6,
	79, 6,
	81, 6,
	-2, 142,
	-1, 648,
	125, 43,
	-2, 334,
	-1, 656,
	75, 4,
	79, 4,
	81, 4,
	-2, 142,
	-1, 658,
	63, 334,
	67, 334,
	68, 334,
	-2, 261,
	-1, 670,
	75, 6,
	79, 6,
	81, 6,
	-2, 142,
	-1, 671,
	81, 8,
	-2, 142,
	-1, 676,
	81, 6,
	-2, 142,
	-1, 711,
	81, 6,
	-2, 142,
	-1, 715,
	75, 8,
	79, 8,
	81, 8,
	-2, 142,
	-1, 717,
	81, 8,
	-2, 142,
	-1, 718,
	81, 8,
	-2, 142,
	-1, 728,
	75, 6,
	79, 6,
	81, 6,
	-2, 142,
	-1, 733,
	75, 1,
	79, 6,
	81, 6,
	-2, 142,
	-1, 745,
	81, 8,
	-2, 142,
	-1, 758,
	75, 1,
	79, 1,
	81, 1,
	-2, 142,
	-1, 759,
	81, 4,
	-2, 142,
	-1, 764,
	75, 8,
	79, 8,
	81, 8,
	-2, 142,
	-1, 772,
	81, 4,
	-2, 142,
	-1, 773,
	81, 4,
	-2, 142,
	-1, 774,
	75, 1,
	79, 1,
	81, 1,
	-2, 142,
}

const yyPrivate = 57344

const yyLast = 2611

var yyAct = [...]int{

	66, 22, 743, 709, 613, 3, 755, 431, 91, 499,
	260, 2, 592, 580, 216, 1, 494, 464, 406, 177,
	692, 263, 625, 419, 421, 278, 53, 109, 443, 422,
	113, 114, 373, 298, 456, 286, 472, 381, 659, 191,
	380, 277, 500, 326, 274, 363, 293, 73, 186, 258,
	194, 22, 127, 180, 54, 3, 98, 71, 296, 289,
	279, 2, 396, 105, 343, 132, 138, 760, 81, 153,
	385, 401, 386, 387, 382, 379, 153, 154, 383, 155,
	560, 49, 153, 612, 93, 510, 170, 693, 511, 535,
	108, 521, 142, 508, 141, 140, 182, 182, 147, 143,
	144, 137, 134, 149, 196, 182, 507, 142, 493, 141,
	140, 468, 204, 205, 143, 144, 206, 385, 459, 386,
	387, 382, 379, 399, 174, 383, 131, 276, 213, 210,
	214, 672, 198, 720, 22, 707, 173, 706, 3, 174,
	181, 181, 705, 176, 2, 40, 704, 703, 165, 197,
	185, 690, 135, 134, 238, 142, 241, 384, 142, 136,
	141, 140, 143, 144, 99, 143, 144, 682, 681, 678,
	677, 620, 604, 22, 266, 603, 269, 3, 308, 368,
	182, 602, 146, 267, 147, 182, 601, 137, 182, 600,
	131, 574, 300, 562, 240, 131, 559, 553, 547, 243,
	244, 479, 418, 174, 220, 324, 534, 523, 174, 522,
	520, 257, 513, 506, 504, 93, 492, 99, 449, 95,
	151, 96, 438, 94, 327, 437, 245, 436, 39, 288,
	39, 39, 247, 250, 435, 305, 316, 235, 135, 134,
	273, 237, 236, 691, 142, 136, 141, 140, 666, 291,
	292, 143, 144, 665, 41, 42, 47, 43, 44, 45,
	46, 321, 312, 664, 320, 663, 323, 662, 331, 640,
	634, 630, 410, 300, 248, 371, 376, 182, 330, 622,
	621, 388, 101, 315, 182, 337, 182, 306, 427, 369,
	248, 333, 405, 335, 336, 404, 403, 402, 351, 176,
	349, 347, 375, 341, 318, 317, 367, 407, 171, 390,
	411, 376, 376, 378, 325, 101, 407, 160, 159, 425,
	346, 181, 353, 193, 158, 102, 407, 391, 426, 22,
	377, 643, 469, 3, 416, 101, 209, 412, 414, 2,
	715, 50, 356, 432, 428, 199, 395, 131, 397, 398,
	126, 147, 409, 641, 533, 255, 531, 22, 525, 22,
	22, 3, 639, 3, 3, 605, 63, 48, 676, 619,
	376, 430, 40, 466, 242, 193, 618, 525, 445, 606,
	446, 565, 201, 668, 638, 182, 90, 637, 636, 635,
	478, 599, 107, 107, 661, 110, 465, 463, 524, 564,
	300, 485, 256, 314, 49, 163, 451, 448, 453, 454,
	763, 411, 164, 753, 376, 737, 444, 48, 444, 474,
	444, 476, 467, 112, 475, 139, 477, 480, 736, 732,
	447, 502, 721, 711, 719, 200, 714, 444, 675, 674,
	465, 487, 488, 489, 490, 655, 484, 642, 623, 246,
	529, 528, 515, 22, 439, 429, 355, 3, 202, 203,
	300, 338, 773, 527, 339, 340, 772, 718, 717, 376,
	195, 182, 182, 746, 359, 712, 111, 745, 354, 711,
	748, 41, 42, 47, 43, 44, 45, 46, 358, 51,
	89, 747, 530, 367, 407, 375, 539, 540, 376, 376,
	48, 537, 526, 536, 563, 532, 123, 166, 125, 64,
	27, 519, 556, 544, 118, 119, 583, 22, 329, 746,
	582, 3, 328, 148, 557, 558, 246, 2, 344, 726,
	585, 577, 568, 569, 546, 573, 376, 567, 584, 48,
	450, 268, 182, 182, 182, 156, 157, 329, 551, 581,
	578, 162, 583, 591, 168, 169, 769, 192, 762, 738,
	27, 411, 465, 148, 731, 107, 22, 595, 596, 597,
	609, 679, 116, 117, 120, 121, 608, 654, 576, 514,
	68, 69, 70, 22, 87, 72, 611, 3, 39, 458,
	444, 207, 208, 87, 252, 624, 555, 211, 251, 182,
	589, 147, 215, 442, 761, 217, 218, 219, 631, 673,
	175, 226, 227, 228, 229, 230, 231, 232, 628, 22,
	22, 290, 486, 222, 633, 647, 491, 221, 223, 254,
	253, 407, 626, 225, 224, 189, 473, 58, 9, 649,
	650, 598, 653, 27, 22, 88, 39, 543, 542, 657,
	385, 39, 386, 387, 88, 361, 541, 22, 444, 471,
	470, 3, 297, 271, 669, 188, 189, 190, 461, 462,
	313, 22, 22, 699, 700, 684, 483, 22, 40, 667,
	683, 272, 27, 322, 424, 482, 268, 579, 9, 393,
	178, 503, 332, 698, 334, 48, 509, 701, 67, 501,
	713, 685, 686, 687, 688, 689, 680, 104, 548, 549,
	550, 552, 22, 103, 722, 130, 22, 345, 22, 22,
	651, 725, 287, 48, 575, 48, 48, 309, 310, 22,
	708, 572, 723, 357, 22, 702, 311, 698, 740, 698,
	698, 744, 362, 366, 2, 566, 22, 754, 577, 505,
	698, 752, 587, 588, 739, 695, 400, 319, 394, 22,
	22, 767, 768, 740, 740, 22, 179, 698, 275, 2,
	187, 9, 285, 22, 22, 22, 122, 740, 740, 740,
	49, 766, 124, 129, 106, 527, 698, 41, 42, 47,
	43, 44, 45, 46, 766, 766, 766, 710, 8, 695,
	433, 695, 695, 727, 374, 729, 730, 7, 40, 6,
	9, 342, 735, 161, 60, 440, 734, 294, 295, 48,
	281, 280, 453, 454, 526, 660, 79, 282, 183, 695,
	59, 62, 455, 756, 495, 496, 497, 498, 27, 55,
	61, 56, 586, 695, 460, 365, 364, 128, 695, 360,
	21, 270, 770, 481, 392, 97, 695, 695, 735, 17,
	729, 730, 734, 16, 40, 65, 27, 115, 27, 27,
	297, 14, 423, 420, 424, 570, 39, 13, 424, 12,
	10, 15, 11, 48, 67, 696, 261, 614, 4, 40,
	68, 69, 70, 694, 87, 72, 49, 259, 0, 0,
	0, 0, 0, 152, 0, 517, 0, 0, 0, 67,
	0, 0, 518, 0, 0, 0, 0, 41, 42, 47,
	43, 44, 45, 46, 0, 0, 0, 0, 0, 0,
	366, 0, 48, 0, 0, 283, 0, 0, 0, 0,
	538, 0, 0, 152, 0, 0, 0, 82, 0, 48,
	0, 83, 152, 545, 0, 88, 0, 0, 80, 76,
	0, 0, 27, 0, 0, 0, 9, 0, 85, 0,
	0, 0, 561, 41, 42, 47, 43, 44, 45, 46,
	571, 0, 0, 646, 0, 48, 48, 0, 146, 145,
	147, 413, 0, 137, 9, 0, 9, 9, 41, 42,
	47, 78, 86, 77, 46, 0, 0, 0, 40, 0,
	48, 299, 5, 74, 75, 84, 92, 0, 0, 0,
	0, 0, 0, 48, 0, 0, 27, 282, 183, 0,
	0, 0, 0, 0, 0, 40, 0, 48, 48, 0,
	0, 0, 0, 48, 135, 134, 0, 152, 0, 0,
	142, 136, 141, 140, 627, 183, 233, 143, 144, 234,
	0, 40, 0, 0, 629, 150, 0, 0, 0, 0,
	0, 184, 0, 0, 0, 27, 0, 0, 48, 0,
	0, 183, 48, 0, 48, 48, 644, 645, 648, 0,
	9, 0, 27, 0, 0, 48, 0, 0, 0, 152,
	48, 0, 0, 658, 0, 150, 0, 0, 0, 751,
	0, 0, 48, 0, 150, 0, 0, 41, 42, 47,
	43, 44, 45, 46, 152, 48, 48, 0, 27, 27,
	0, 48, 0, 0, 152, 283, 0, 0, 0, 48,
	48, 48, 0, 0, 41, 42, 47, 43, 44, 45,
	46, 0, 0, 27, 9, 0, 0, 0, 0, 152,
	0, 0, 0, 0, 0, 152, 27, 152, 716, 57,
	41, 42, 47, 43, 44, 45, 46, 146, 145, 147,
	27, 27, 137, 724, 0, 0, 27, 0, 40, 0,
	0, 100, 0, 0, 0, 0, 0, 0, 152, 0,
	152, 0, 152, 9, 0, 0, 389, 0, 0, 307,
	0, 0, 749, 750, 0, 0, 0, 757, 0, 0,
	9, 27, 0, 0, 0, 27, 0, 27, 27, 0,
	0, 0, 0, 135, 134, 0, 771, 0, 27, 142,
	136, 141, 140, 27, 0, 0, 143, 144, 234, 0,
	0, 0, 167, 0, 0, 27, 9, 9, 0, 0,
	0, 150, 0, 0, 0, 0, 0, 40, 27, 27,
	0, 0, 0, 0, 27, 146, 145, 147, 152, 0,
	137, 9, 27, 27, 27, 372, 370, 0, 0, 774,
	0, 0, 0, 0, 9, 0, 150, 41, 42, 47,
	43, 44, 45, 46, 0, 0, 0, 0, 9, 9,
	0, 0, 0, 0, 9, 0, 0, 0, 0, 0,
	0, 408, 100, 0, 0, 0, 0, 415, 0, 417,
	0, 135, 134, 249, 249, 0, 0, 142, 136, 141,
	140, 0, 0, 152, 143, 144, 0, 0, 0, 9,
	0, 0, 0, 9, 284, 9, 9, 284, 0, 0,
	150, 0, 150, 0, 150, 0, 9, 40, 68, 69,
	70, 9, 87, 72, 49, 0, 41, 42, 47, 43,
	44, 45, 46, 9, 0, 152, 40, 67, 239, 0,
	0, 0, 249, 0, 249, 249, 9, 9, 0, 0,
	0, 0, 9, 0, 0, 0, 152, 0, 0, 0,
	9, 9, 9, 0, 0, 152, 0, 0, 0, 0,
	0, 249, 348, 350, 352, 82, 0, 0, 0, 83,
	0, 0, 0, 88, 192, 0, 80, 76, 0, 385,
	512, 386, 387, 382, 379, 632, 85, 383, 457, 0,
	0, 0, 0, 284, 0, 284, 0, 0, 0, 100,
	0, 100, 100, 0, 0, 0, 146, 145, 147, 0,
	0, 137, 152, 0, 458, 0, 41, 42, 47, 78,
	86, 77, 46, 40, 68, 69, 70, 0, 87, 72,
	49, 74, 75, 84, 92, 41, 42, 47, 43, 44,
	45, 46, 0, 67, 0, 554, 0, 0, 0, 0,
	146, 145, 147, 0, 0, 137, 0, 249, 0, 249,
	0, 249, 135, 134, 764, 0, 0, 0, 142, 136,
	141, 140, 0, 0, 0, 143, 144, 0, 249, 0,
	0, 82, 0, 0, 0, 83, 0, 590, 0, 88,
	0, 0, 80, 76, 284, 0, 0, 0, 40, 68,
	69, 70, 85, 87, 72, 49, 135, 134, 607, 0,
	0, 0, 142, 136, 141, 140, 0, 610, 67, 143,
	144, 0, 0, 0, 0, 0, 146, 145, 147, 0,
	0, 137, 41, 42, 47, 302, 303, 301, 304, 0,
	0, 0, 759, 0, 0, 299, 0, 74, 75, 84,
	92, 0, 249, 0, 0, 0, 82, 0, 0, 0,
	83, 0, 0, 0, 88, 0, 39, 80, 76, 0,
	0, 0, 0, 0, 652, 0, 0, 85, 0, 0,
	284, 284, 135, 134, 0, 0, 0, 0, 142, 136,
	141, 140, 0, 0, 0, 143, 144, 0, 146, 145,
	147, 0, 0, 137, 0, 0, 0, 41, 42, 47,
	78, 86, 77, 46, 40, 68, 69, 70, 0, 87,
	72, 49, 74, 75, 84, 92, 0, 0, 0, 0,
	0, 249, 0, 0, 67, 0, 40, 68, 69, 70,
	0, 87, 72, 49, 40, 0, 0, 0, 0, 0,
	0, 284, 284, 284, 135, 134, 67, 0, 0, 0,
	142, 136, 141, 140, 0, 0, 0, 143, 144, 0,
	0, 0, 82, 0, 0, 0, 83, 0, 0, 0,
	88, 0, 40, 80, 76, 0, 0, 0, 0, 49,
	0, 0, 0, 85, 82, 0, 0, 0, 83, 249,
	0, 0, 88, 0, 0, 80, 76, 0, 284, 0,
	0, 40, 68, 69, 70, 85, 87, 72, 49, 0,
	0, 0, 0, 41, 42, 47, 78, 86, 77, 46,
	0, 67, 0, 0, 0, 0, 0, 0, 74, 75,
	84, 52, 0, 0, 0, 41, 42, 47, 78, 86,
	77, 46, 0, 41, 42, 47, 43, 44, 45, 46,
	74, 75, 84, 92, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 83, 0, 0, 0, 88, 0, 0,
	80, 76, 40, 68, 212, 70, 0, 87, 72, 49,
	85, 41, 42, 47, 43, 44, 45, 46, 0, 0,
	0, 385, 67, 386, 387, 382, 379, 593, 594, 383,
	0, 0, 0, 146, 145, 147, 0, 0, 137, 0,
	41, 42, 47, 302, 303, 301, 304, 758, 0, 0,
	0, 0, 0, 0, 0, 74, 75, 84, 92, 0,
	82, 0, 40, 0, 83, 0, 0, 0, 88, 49,
	0, 80, 76, 0, 34, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 23, 0, 0, 24, 0, 135,
	134, 0, 0, 0, 0, 142, 136, 141, 140, 0,
	0, 0, 143, 144, 0, 0, 0, 0, 0, 0,
	0, 41, 42, 47, 78, 86, 77, 46, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 75, 84, 92,
	39, 0, 765, 0, 742, 0, 0, 0, 0, 0,
	26, 0, 0, 31, 29, 30, 28, 0, 146, 145,
	147, 0, 0, 137, 0, 32, 33, 264, 265, 20,
	35, 36, 37, 38, 671, 0, 0, 617, 0, 0,
	25, 41, 42, 47, 43, 44, 45, 46, 40, 0,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	23, 0, 0, 24, 135, 134, 0, 0, 0, 0,
	142, 136, 141, 140, 0, 0, 0, 143, 144, 0,
	0, 0, 0, 0, 0, 0, 0, 40, 0, 0,
	0, 0, 0, 0, 49, 0, 0, 0, 0, 34,
	0, 0, 0, 0, 0, 0, 39, 0, 697, 23,
	616, 0, 24, 0, 0, 0, 26, 0, 0, 31,
	29, 30, 28, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 33, 264, 265, 0, 35, 36, 37, 38,
	0, 0, 0, 617, 0, 0, 25, 41, 42, 47,
	43, 44, 45, 46, 40, 39, 0, 262, 0, 19,
	0, 49, 0, 0, 0, 26, 34, 0, 31, 29,
	30, 28, 0, 0, 0, 0, 23, 0, 0, 24,
	32, 33, 264, 265, 20, 35, 36, 37, 38, 0,
	0, 0, 0, 0, 0, 25, 41, 42, 47, 43,
	44, 45, 46, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 145, 147, 0, 0,
	137, 0, 39, 0, 741, 0, 742, 0, 0, 733,
	0, 0, 26, 0, 0, 31, 29, 30, 28, 0,
	0, 0, 0, 0, 146, 145, 147, 32, 33, 137,
	0, 20, 35, 36, 37, 38, 0, 0, 728, 617,
	0, 0, 25, 41, 42, 47, 43, 44, 45, 46,
	0, 135, 134, 0, 40, 0, 0, 142, 136, 141,
	140, 49, 0, 0, 143, 144, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 0, 0, 24,
	135, 134, 0, 0, 0, 0, 142, 136, 141, 140,
	0, 0, 0, 143, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 145, 147, 0, 0,
	137, 0, 39, 0, 615, 0, 616, 0, 0, 670,
	0, 0, 26, 0, 0, 31, 29, 30, 28, 0,
	0, 0, 0, 0, 146, 145, 147, 32, 33, 137,
	0, 0, 35, 36, 37, 38, 0, 0, 656, 617,
	0, 0, 25, 41, 42, 47, 43, 44, 45, 46,
	0, 135, 134, 0, 40, 0, 0, 142, 136, 141,
	140, 49, 0, 0, 143, 144, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 0, 0, 24,
	135, 134, 0, 0, 0, 0, 142, 136, 141, 140,
	0, 0, 0, 143, 144, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 146, 145, 147, 0, 0,
	137, 0, 39, 0, 18, 0, 19, 0, 0, 516,
	0, 0, 26, 0, 0, 31, 29, 30, 28, 0,
	0, 0, 0, 0, 146, 145, 147, 32, 33, 137,
	0, 20, 35, 36, 37, 38, 0, 0, 452, 0,
	0, 0, 25, 41, 42, 47, 43, 44, 45, 46,
	0, 135, 134, 0, 0, 0, 0, 142, 136, 141,
	140, 146, 145, 147, 143, 144, 137, 0, 0, 0,
	0, 146, 145, 147, 0, 441, 137, 0, 0, 0,
	135, 134, 0, 0, 0, 133, 142, 136, 141, 140,
	146, 145, 147, 143, 144, 137, 0, 0, 0, 0,
	434, 145, 147, 0, 0, 137, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 134, 0,
	0, 0, 0, 142, 136, 141, 140, 135, 134, 0,
	143, 144, 0, 142, 136, 141, 140, 0, 0, 0,
	143, 144, 0, 0, 0, 0, 135, 134, 0, 0,
	0, 0, 142, 136, 141, 140, 135, 134, 0, 143,
	144, 0, 142, 136, 141, 140, 0, 0, 0, 143,
	144,
}
var yyPact = [...]int{

	2370, -1000, 216, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1670, 1692,
	-1000, 204, 194, 683, 677, 769, 1738, -1000, 393, 1700,
	1700, 483, -1000, -1000, 764, 1692, 777, 1692, 235, 690,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 225, -1000,
	2370, 2447, 1554, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 225, -1000, -1000, -54, -57, -1000, -1000,
	-1000, -1000, -1000, -1000, 1692, 1692, 193, 187, 186, -1000,
	1692, 285, 184, 1692, 1692, 1700, 177, -1000, -1000, 2466,
	73, 547, 1554, 652, 746, 1031, 1057, 756, 608, 486,
	-1000, 516, 1692, 1700, 1031, -1000, -3, 223, -1000, 352,
	-1000, 1700, 1700, -1000, -1000, 1700, -1000, -1000, -1000, -1000,
	1692, 1692, 209, 1594, -6, 1594, 1838, -1000, -7, 1700,
	-1000, 1692, -1000, 2370, 1692, 1692, 1692, 535, 560, 573,
	1692, 1692, 1692, 1692, 1692, 1692, 1692, -1000, 924, 105,
	110, 109, 151, 1382, 1363, 368, -1000, -1000, 1692, 486,
	486, 372, 1594, 143, 143, 531, 569, -1000, 32, -1000,
	286, 486, 2063, 1700, 769, 1700, 105, 619, 640, 1031,
	752, -8, -1000, -1000, 1004, 758, 704, 1004, 561, 561,
	561, 1479, -1000, 103, -1000, 1113, 156, 700, 769, 1692,
	319, 152, 174, 173, -1000, -1000, 737, 1594, 1594, 575,
	1692, 1594, 1692, 690, 183, 1594, 443, -34, -19, -19,
	584, 1692, 143, 1692, 143, 143, 29, 29, -1000, -1000,
	-1000, 118, 32, -1000, 1692, -1000, -1000, -1000, -1000, -1000,
	1692, -1000, -1000, 1692, 885, 449, 1692, -1000, 1554, -1000,
	-1000, 143, 170, 169, 167, 535, -1000, 1692, 375, 217,
	-1000, -1000, 1670, -1000, -1000, -1000, 408, -1000, -11, 394,
	610, 1692, 1767, 158, 1263, 674, 1031, 704, 22, -1000,
	1184, -1000, -1000, 804, -1000, 1004, 650, 1692, -1000, 151,
	-1000, 151, 151, -1000, -12, 734, -1000, 1594, -1000, -1000,
	-60, 166, 165, 164, 161, -1000, 1700, -1000, 516, 141,
	860, 674, -1000, 1594, 516, 1700, 516, 70, 1700, 769,
	-1000, -1000, 1594, -1000, 157, 1700, 374, 443, 2370, 1692,
	-1000, -1000, 2476, -1000, -19, -1000, -1000, -1000, 102, 95,
	93, 90, 373, 372, 1692, 2437, 539, 159, -1000, 159,
	-1000, 159, -1000, 344, 86, 464, 2063, 2400, 2063, 2063,
	-1000, 1692, 1402, -1000, -17, 626, 1594, -1000, 143, 674,
	-1000, -1000, 1700, 756, -24, 205, -67, -1000, -1000, 613,
	612, 587, 587, 602, 1004, -1000, -1000, -1000, -1000, 1700,
	69, 704, 645, 635, 1594, 577, -1000, -1000, 577, 1479,
	1700, 1363, 486, 486, 486, 1692, 84, -27, -1000, 803,
	1700, 664, -1000, 674, 654, -1000, 82, -1000, 727, 81,
	-29, -1000, -1000, -42, 661, -47, -1000, 516, 80, 505,
	371, 472, -1000, 2371, 1692, -1000, -1000, -1000, -1000, -1000,
	1594, 1692, 143, 78, -44, 77, 75, -1000, 305, 247,
	-1000, -1000, 2063, 370, 369, 1594, -1000, 517, 243, 1767,
	240, -1000, -1000, -1000, 74, -46, -1000, 704, 674, 1692,
	1004, 1004, 609, -1000, 601, 600, 587, -1000, -1000, -1000,
	-1000, -1000, 1692, 1692, -1000, -1000, 66, 1692, 1692, 885,
	1692, 65, 574, 1700, -1000, -1000, -1000, 674, 674, 64,
	-55, 1692, 61, 1700, 315, 273, 723, 769, 769, 1692,
	709, 769, 59, 702, -1000, 504, 2370, 32, 1594, -1000,
	-1000, 143, -1000, -1000, -1000, 648, 441, 216, 462, 454,
	-1000, -1000, -1000, 721, 579, 674, -1000, -1000, 1594, 602,
	1813, 1004, 1004, 1004, 594, 1594, -1000, 295, 57, 54,
	49, 43, 40, 269, -1000, 516, -1000, -1000, -1000, 803,
	1700, 1594, -1000, -1000, 516, 2250, 268, -1000, -1000, -1000,
	661, 1594, 261, 39, -1000, 149, -1000, -1000, -1000, 148,
	367, 441, 2063, 1692, -1000, -1000, -1000, -1000, -1000, 143,
	-1000, -1000, -1000, 1692, 140, 1813, 1391, 602, 1004, 139,
	293, 292, 291, 288, 266, 138, 239, -1000, -1000, -1000,
	-1000, 366, 206, -1000, -1000, 1670, 1692, 1692, 2250, 2250,
	698, 516, 652, 503, 364, 477, -1000, 2280, -1000, 1594,
	1700, -1000, 1692, 602, 299, 136, 134, 132, 122, 117,
	299, 287, -1000, 2250, 2251, 1924, 68, 546, 1594, 358,
	357, 260, 38, 37, -1000, 497, 2063, 36, 1594, 35,
	652, 634, 299, 299, 299, 299, 299, 19, 112, -1000,
	2250, 2014, 1700, 1700, -1000, -1000, 2250, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 1692, 15, 14, 10, 5, 3,
	-1000, 299, 400, 355, 215, -1000, -1000, 1670, -1000, 388,
	387, 353, -1000, -1000, -1000, -1000, -1000, -1000, 1, 351,
	354, 2250, 1692, 472, 453, 2014, 2160, 2014, 2014, -1000,
	-1000, 490, 348, -1000, 2131, 472, -1000, -1000, 2014, 347,
	334, -1000, 485, 2130, 398, 206, 415, 404, -1000, -1000,
	-1000, 1670, 1692, 332, 398, 2014, 1692, -1000, -1000, 1809,
	1522, 4, 541, 484, 329, 444, -1000, 1446, 2130, 1898,
	1700, 1700, -1000, 482, 2014, 1670, -1000, 386, 382, -1000,
	-1000, 1211, 1898, 1898, 1898,
}
var yyPgo = [...]int{

	0, 14, 49, 20, 87, 4, 10, 83, 897, 893,
	888, 887, 21, 886, 885, 882, 881, 880, 42, 9,
	16, 879, 877, 29, 873, 872, 24, 23, 871, 867,
	865, 863, 859, 1012, 62, 56, 855, 48, 35, 854,
	853, 19, 851, 34, 849, 850, 847, 52, 54, 57,
	47, 26, 470, 58, 68, 28, 45, 846, 845, 844,
	842, 1169, 841, 840, 839, 831, 220, 637, 830, 826,
	33, 38, 825, 44, 60, 821, 25, 820, 12, 818,
	817, 814, 813, 64, 811, 17, 50, 41, 53, 18,
	46, 809, 807, 804, 32, 798, 7, 43, 22, 13,
	797, 3, 6, 2, 0, 366, 8, 509, 784, 63,
	39, 66, 40, 36, 37, 59, 783, 425,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 7, 7, 8, 8, 9,
	9, 10, 10, 10, 10, 10, 10, 11, 11, 11,
	11, 11, 11, 11, 12, 12, 13, 13, 13, 14,
	14, 14, 15, 15, 15, 15, 16, 16, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 18, 18,
	19, 19, 20, 20, 20, 20, 20, 21, 21, 21,
	21, 21, 22, 22, 22, 22, 23, 24, 24, 25,
	26, 26, 27, 27, 27, 28, 28, 28, 28, 29,
	29, 29, 29, 29, 29, 29, 30, 30, 30, 31,
	31, 31, 31, 31, 32, 32, 32, 33, 34, 34,
	34, 34, 35, 35, 36, 37, 37, 38, 38, 39,
	39, 40, 40, 41, 41, 42, 42, 42, 43, 43,
	44, 44, 45, 45, 46, 46, 47, 47, 48, 48,
	48, 48, 48, 48, 49, 50, 51, 51, 51, 51,
	51, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 52, 53, 54, 54, 55, 55,
	56, 56, 57, 57, 58, 58, 59, 59, 59, 60,
	60, 61, 62, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 64, 64, 64, 64, 64, 64, 64, 65,
	65, 65, 65, 66, 66, 67, 67, 68, 68, 68,
	68, 68, 69, 69, 70, 70, 70, 70, 70, 70,
	70, 70, 71, 72, 72, 73, 73, 74, 74, 74,
	75, 76, 76, 76, 76, 76, 76, 76, 77, 77,
	77, 77, 77, 77, 78, 78, 79, 79, 80, 80,
	80, 81, 82, 82, 83, 83, 84, 84, 85, 85,
	86, 86, 87, 87, 88, 88, 89, 89, 90, 90,
	91, 91, 91, 91, 92, 93, 94, 94, 95, 95,
	96, 96, 97, 97, 98, 98, 99, 99, 100, 100,
	101, 101, 102, 102, 103, 103, 104, 104, 104, 104,
	104, 104, 104, 104, 105, 106, 106, 107, 108, 108,
	109, 109, 110, 110, 111, 111, 112, 112, 113, 113,
	114, 114, 115, 115, 116, 116, 117, 117,
}
var yyR2 = [...]int{

	0, 0, 1, 3, 0, 3, 0, 3, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 7, 8, 6, 8, 8, 1, 7, 8, 6,
	8, 8, 1, 2, 1, 1, 7, 8, 1, 7,
	8, 1, 2, 2, 1, 2, 1, 1, 6, 7,
	4, 8, 5, 6, 8, 5, 7, 7, 1, 3,
	1, 3, 0, 1, 1, 2, 2, 5, 2, 2,
	3, 5, 6, 8, 5, 3, 1, 1, 3, 3,
	1, 3, 1, 1, 3, 9, 10, 10, 12, 0,
	1, 1, 1, 1, 2, 2, 5, 6, 3, 4,
	2, 2, 4, 2, 2, 3, 4, 5, 5, 4,
	4, 4, 1, 1, 3, 0, 2, 0, 2, 0,
	3, 0, 2, 0, 3, 0, 3, 4, 0, 2,
	0, 2, 0, 2, 6, 9, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 1, 3,
	1, 3, 2, 4, 1, 1, 0, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 4, 4, 6,
	6, 4, 6, 4, 4, 4, 6, 4, 4, 6,
	4, 2, 3, 3, 3, 3, 3, 2, 2, 3,
	3, 2, 2, 0, 1, 4, 4, 5, 5, 5,
	5, 1, 5, 10, 8, 9, 9, 9, 9, 9,
	8, 10, 2, 0, 3, 1, 1, 1, 2, 3,
	1, 1, 1, 2, 3, 1, 1, 3, 4, 5,
	6, 7, 5, 6, 2, 4, 1, 1, 1, 3,
	1, 5, 0, 1, 4, 2, 0, 2, 1, 3,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	6, 9, 5, 8, 7, 3, 1, 3, 5, 6,
	4, 2, 0, 2, 4, 2, 0, 2, 4, 2,
	0, 2, 4, 2, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 1, 3,
	1, 3, 0, 1, 0, 1, 0, 1, 0, 1,
	1, 1, 0, 1, 0, 1, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -10, -33, -91, -92, -95, -67,
	-17, -15, -21, -22, -28, -16, -31, -32, 74, 76,
	101, -45, -104, 26, 29, 112, 82, -107, 88, 86,
	87, 85, 97, 98, 16, 102, 103, 104, 105, 72,
	4, 113, 114, 116, 117, 118, 119, 115, -105, 11,
	125, -52, 131, -51, -48, -64, -62, -61, -67, -68,
	-81, -63, -65, -105, -107, -30, -104, 24, 5, 6,
	7, -49, 10, -50, 128, 129, 74, 118, 116, -69,
	73, -54, 62, 66, 130, 83, 117, 9, 70, -52,
	-105, -106, 131, -34, 19, 15, 17, -36, -35, 13,
	-61, 131, 131, 30, 30, -109, -108, -105, -109, -104,
	-105, 83, 30, -104, -104, -29, 89, 90, 31, 32,
	91, 92, 12, -52, 5, -52, 115, -47, -46, -116,
	25, 122, -1, 78, 121, 120, 127, 69, -111, -117,
	129, 128, 126, 133, 134, 65, 64, 66, -52, -86,
	-33, -66, -45, 136, 131, 136, -52, -52, 131, 131,
	131, -82, -52, 120, 127, -111, -117, -61, -52, -52,
	-104, 131, 80, 63, 135, 63, -86, -41, 38, 20,
	-88, -73, -104, 24, 14, -88, -37, 14, 57, 58,
	59, -110, 71, -66, -86, -52, -104, -73, 135, 122,
	83, 30, 106, 107, -104, -104, -104, -52, -52, 127,
	135, -52, 6, 135, -104, -52, -1, -52, -52, -52,
	-111, 67, 63, 68, 61, 60, -52, -52, -52, -52,
	-52, -52, -52, 132, 135, 132, 132, 132, -104, 6,
	-110, -104, 6, -110, -110, -83, 77, -54, 131, -61,
	-54, 67, 63, 61, 60, 69, 116, -110, -2, -8,
	-6, -13, 74, -12, 99, 100, -104, -106, -105, -104,
	-42, 44, 41, -74, -73, 16, 135, -87, -76, -74,
	-75, -77, 23, 131, -61, 14, -38, 18, -87, -115,
	60, -115, -115, -90, -80, -79, -53, -52, -70, 126,
	-104, 118, 116, 117, 119, 132, 131, -33, 22, 27,
	28, 36, -109, -52, 84, 131, 84, 131, 131, 20,
	-48, -86, -52, -47, 22, 131, -97, -96, 79, 75,
	-49, -50, -52, -54, -52, -54, -54, -86, -66, -66,
	-66, -53, -84, -83, 79, -52, -54, 131, -61, 131,
	-61, 131, -61, -111, -66, 81, 125, -52, 80, 80,
	-44, 45, -52, -56, -57, -58, -52, -70, 21, 131,
	-33, -104, 22, -94, -93, -51, -104, -88, -38, 53,
	-112, -114, 52, 56, 135, 48, 50, 51, -104, 22,
	-76, -87, -39, 39, -52, -35, -34, -35, -35, 135,
	22, 131, 131, 131, 131, 131, -89, -104, -33, -18,
	131, -104, -51, 131, -51, -33, -89, -33, 132, -27,
	-24, -26, -23, -25, -105, -104, -106, 131, -89, 81,
	-97, -96, -1, -52, 64, 132, 132, 132, 132, 81,
	-52, 78, 64, -55, -54, -55, -55, 86, 63, 132,
	76, -2, 78, -2, -2, -52, -43, 46, 72, 135,
	-59, 42, 43, -55, -85, -51, -104, -37, 135, 127,
	47, 47, -113, 49, -113, -112, -114, -87, -104, 132,
	-38, -40, 40, 41, -90, -104, -66, -110, -110, -110,
	-110, -66, 132, 135, -20, 31, 32, 33, 34, -19,
	-18, 35, -85, 37, 132, 22, 132, 135, 135, 35,
	132, 135, -33, 132, 74, 81, 78, -52, -52, -54,
	132, 135, 132, 132, 93, 111, -2, -6, 81, 81,
	-43, 113, -56, 114, 132, 135, -38, -94, -52, -76,
	-76, 47, 47, 47, -113, -52, -86, 132, -66, -66,
	-66, -53, -66, 132, -33, 22, -89, -51, -51, 132,
	135, -52, 132, -104, 84, 108, 22, -23, -26, -26,
	-105, -52, 22, -27, 132, 22, 74, -1, -55, 39,
	-99, -98, 79, 75, 76, 76, -60, 31, 32, 21,
	-33, -85, -78, 54, 55, -76, -76, -76, 47, 96,
	132, 132, 132, 132, 132, 96, 110, -33, -20, -19,
	-33, -3, -7, -5, -11, 74, 76, 109, 108, 108,
	132, 131, 131, 81, -99, -98, -2, -52, -55, -52,
	131, -78, 54, -76, 131, 96, 96, 96, 96, 96,
	131, 114, 81, 125, -52, -52, -105, -106, -52, -3,
	-3, 22, -33, -41, 74, 81, 78, -89, -52, -71,
	-72, 95, 131, 131, 131, 131, 131, -71, 96, -3,
	78, 80, 63, 63, 81, 81, 108, 132, 132, 74,
	-2, 132, 132, -41, 41, -71, -71, -71, -71, -71,
	132, 131, -3, -4, -9, -7, -14, 74, -12, -104,
	-104, -3, -86, 132, 132, 132, 132, 132, -71, -101,
	-100, 79, 75, -96, 81, 125, -52, 80, 80, 81,
	132, 81, -101, -3, -52, -96, 76, -4, 78, -4,
	-4, 74, 81, 78, -4, -7, 81, 81, 74, -3,
	-5, 74, 76, -103, -102, 79, 75, 76, 76, -52,
	-52, -105, -106, 81, -103, -102, -4, -52, 78, 80,
	63, 63, 74, 81, 78, 74, -12, -104, -104, 74,
	-4, -52, 80, 80, 78,
}
var yyDef = [...]int{

	-2, -2, 2, 23, 24, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 0, 0,
	36, 0, 0, 0, 0, 0, 0, 54, 0, 0,
	0, 99, 56, 57, 0, 0, 0, 0, 0, 344,
	316, 317, 318, 319, 320, 321, 322, 323, 0, 324,
	-2, 334, -2, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 156, 0, 148, 149,
	150, 151, 152, 153, 0, 0, 0, 321, 319, 231,
	272, 334, 0, 0, 0, 0, 320, 154, 155, 334,
	171, 0, 142, -2, 0, 0, 0, 125, 0, 332,
	123, 142, 223, 0, 0, 52, 330, 328, 53, 0,
	55, 0, 0, 78, 79, 0, 100, 101, 102, 103,
	0, 0, 0, -2, 111, -2, 114, 143, 146, 0,
	345, 0, 3, -2, 0, 346, 347, 334, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 335, 334, 0,
	0, 0, 0, 0, 223, 0, 217, 218, 223, 332,
	332, 0, -2, 346, 347, 0, 0, 211, 221, 222,
	0, 332, -2, 0, 0, 0, 0, 135, 0, 0,
	0, 284, 245, 246, 0, 0, 127, 0, 342, 342,
	342, 0, 333, 0, 224, -2, 142, 0, 0, 0,
	0, 0, 0, 0, 80, 85, 0, -2, -2, 0,
	0, -2, 149, 344, 0, 327, 302, 192, -2, -2,
	0, 0, 0, 0, 0, 0, 212, 213, 214, 215,
	216, 219, 220, 174, 0, 176, 191, 226, 157, 159,
	223, 158, 160, 223, 223, 276, 0, 194, 142, 177,
	196, 0, 0, 0, 0, 334, 108, 223, 0, 0,
	27, 28, 0, 48, 44, 45, 0, 326, 325, 0,
	140, 0, 0, 142, 247, 0, 0, 127, -2, 251,
	252, 255, 256, 142, 250, 0, 129, 0, 126, 0,
	343, 0, 0, 124, 288, 268, 270, -2, 267, 175,
	156, 321, 319, 320, 322, 225, 0, 60, 142, 0,
	0, 0, 331, -2, 142, 0, 142, 0, 0, 0,
	109, 112, -2, 147, 0, 0, 0, 302, -2, 0,
	197, 198, 334, 201, -2, 205, 208, 281, 0, 0,
	0, 0, 0, 275, 0, 334, 0, 142, 203, 142,
	207, 142, 210, 0, 0, 0, -2, 334, -2, -2,
	117, 0, -2, 134, 180, 186, -2, 185, 0, 0,
	292, 248, 0, 125, 296, 0, 156, 285, 298, 0,
	0, 338, 338, 336, 0, 337, 340, 341, 253, 0,
	336, 127, 131, 0, -2, 119, 122, 120, 121, 0,
	0, 223, 332, 332, 332, 223, 0, 286, 62, 72,
	0, 68, 65, 0, 0, 77, 0, 84, 0, 0,
	92, 93, 87, 90, 86, 0, 81, 142, 0, 0,
	0, 301, 303, 334, 0, 227, 228, 229, 230, 271,
	-2, 0, 0, 0, 178, 0, 0, 106, 0, 232,
	33, 5, -2, 0, 0, -2, 136, 138, 0, 0,
	182, 187, 188, 290, 0, 278, 249, 127, 0, 0,
	0, 0, 0, 339, 0, 0, 338, 283, 254, 257,
	299, 118, 0, 0, 289, 269, 0, 223, 223, 223,
	223, 0, -2, 0, 63, 73, 74, 0, 0, 0,
	70, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 0, -2, 199, -2, 200,
	202, 0, 206, 209, 107, 0, 306, 2, 0, 0,
	137, 139, 181, 0, 142, 0, 294, 297, -2, 258,
	336, 0, 0, 0, 0, -2, 130, 225, 0, 0,
	0, 0, 0, 0, 59, 142, 287, 75, 76, 72,
	0, -2, 66, 67, 142, -2, 0, 88, 94, 91,
	0, -2, 0, 0, 144, 0, 32, 300, 179, 0,
	0, 306, -2, 0, 34, 35, 183, 189, 190, 0,
	293, 279, 259, 0, 0, 336, 336, 262, 0, 0,
	227, 228, 229, 230, 232, 0, 0, 61, 64, 71,
	83, 0, 0, 25, 26, 0, 0, 42, -2, -2,
	0, 142, 133, 0, 0, 305, 307, 334, 291, -2,
	0, 260, 0, 263, 243, 0, 0, 0, 0, 0,
	243, 0, 95, -2, 334, 334, 171, 0, -2, 0,
	0, 0, 0, 0, 46, 0, -2, 0, -2, 0,
	133, 0, 243, 243, 243, 243, 243, 0, 0, 7,
	-2, -2, 0, 0, 96, 97, -2, 145, 233, 47,
	304, 265, 234, 242, 0, 0, 0, 0, 0, 0,
	240, 243, 310, 0, 0, 29, 30, 0, 51, 0,
	0, 0, 244, 235, 236, 237, 238, 239, 0, 0,
	310, -2, 0, 0, 0, -2, 334, -2, -2, 98,
	241, 0, 0, 311, 334, 309, 39, 9, -2, 0,
	0, 37, 0, -2, 314, 0, 0, 0, 38, 308,
	23, 0, 0, 0, 314, -2, 0, 40, 41, 334,
	334, 171, 0, 0, 0, 313, 315, 334, -2, -2,
	0, 0, 49, 0, -2, 0, 48, 0, 0, 50,
	312, 334, -2, -2, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 130, 3, 3, 3, 134, 3, 3,
	131, 132, 126, 129, 135, 128, 136, 133, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 125,
	3, 127,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:181
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:186
		{
			yyVAL.program = []Statement{yyDollar[1].statement}
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:191
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[3].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:198
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:203
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[3].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:210
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:215
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[3].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:222
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:227
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[3].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:234
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:238
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:242
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:246
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:250
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:254
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:258
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:262
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:266
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:270
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:274
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:278
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:302
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:308
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:312
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:328
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:332
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:336
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:340
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:344
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:348
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:354
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:358
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:362
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 40:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:366
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:370
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:374
		{
			yyVAL.statement = Return{Value: NewNullValue()}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:378
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:384
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:388
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:394
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:398
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:402
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:408
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:412
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:416
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:422
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:426
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:430
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:434
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:440
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:444
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:450
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:454
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[7].expression}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:458
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Query: yyDollar[4].expression}
		}
	case 61:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:462
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 62:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:466
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Query: yyDollar[5].expression}
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:470
		{
			yyVAL.statement = AddColumns{Table: yyDollar[3].expression, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 64:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:474
		{
			yyVAL.statement = AddColumns{Table: yyDollar[3].expression, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:478
		{
			yyVAL.statement = DropColumns{Table: yyDollar[3].expression, Columns: []Expression{yyDollar[5].expression}}
		}
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:482
		{
			yyVAL.statement = DropColumns{Table: yyDollar[3].expression, Columns: yyDollar[6].expressions}
		}
	case 67:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:486
		{
			yyVAL.statement = RenameColumn{Table: yyDollar[3].expression, Old: yyDollar[5].expression, New: yyDollar[7].identifier}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:492
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:496
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:502
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:506
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:512
		{
			yyVAL.expression = nil
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:516
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:520
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:524
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:528
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:534
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:538
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:542
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:546
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:550
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:556
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:560
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:564
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:568
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:574
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:580
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:584
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expression)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:590
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:596
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:600
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:606
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:610
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:614
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:620
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 96:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:624
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].expressions, Statements: yyDollar[9].program}
		}
	case 97:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:628
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Statements: yyDollar[9].program}
		}
	case 98:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line parser.y:632
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Parameters: yyDollar[7].expressions, Statements: yyDollar[11].program}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:638
		{
			yyVAL.expression = nil
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:642
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:646
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:650
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:654
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:658
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:662
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:668
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 107:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:672
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:676
		{
			yyVAL.expression = CursorAttrebute{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Attrebute: yyDollar[3].token}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:682
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].expression.(PrimitiveType).Value}
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:686
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:690
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:694
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:698
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].expression}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:704
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:708
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[3].expression}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:712
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[4].expression, Code: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:718
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:730
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:740
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:749
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:758
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:769
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:773
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:779
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:785
		{
			yyVAL.expression = nil
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:789
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:795
		{
			yyVAL.expression = nil
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:799
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 129:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:805
		{
			yyVAL.expression = nil
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:809
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:815
		{
			yyVAL.expression = nil
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:819
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:825
		{
			yyVAL.expression = nil
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:829
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:835
		{
			yyVAL.expression = nil
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:839
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:843
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:849
		{
			yyVAL.expression = nil
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:853
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:859
		{
			yyVAL.expression = nil
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:863
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:869
		{
			yyVAL.expression = nil
		}
	case 143:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:873
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 144:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:879
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 145:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:883
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:889
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:893
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:899
		{
			yyVAL.expression = NewStringValue(yyDollar[1].token.Literal)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:903
		{
			yyVAL.expression = NewIntegerValueFromString(yyDollar[1].token.Literal)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:907
		{
			yyVAL.expression = NewFloatValueFromString(yyDollar[1].token.Literal)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:911
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:915
		{
			yyVAL.expression = NewDatetimeValueFromString(yyDollar[1].token.Literal)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:919
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:925
		{
			yyVAL.expression = NewTernaryValueFromString(yyDollar[1].token.Literal)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:931
		{
			yyVAL.expression = NewNullValueFromString(yyDollar[1].token.Literal)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:937
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, Column: yyDollar[1].identifier}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:941
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:945
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:949
		{
			yyVAL.expression = ColumnNumber{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Number: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:953
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:959
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:963
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:967
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:971
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:975
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:979
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:983
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:987
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:991
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:995
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:999
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1003
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1007
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1011
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1017
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1023
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1027
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1033
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1037
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1043
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1047
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1053
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1057
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1063
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1067
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1073
		{
			yyVAL.token = Token{}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1077
		{
			yyVAL.token = yyDollar[1].token
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1081
		{
			yyVAL.token = yyDollar[1].token
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1087
		{
			yyVAL.token = yyDollar[1].token
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1091
		{
			yyVAL.token = yyDollar[1].token
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1097
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1103
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1126
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1130
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1134
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1138
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1142
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].expression, Negation: yyDollar[3].token}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1146
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].expression, Negation: yyDollar[3].token}
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1150
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 200:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1154
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1158
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1162
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1166
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1170
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1174
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1178
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1182
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 208:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 209:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1190
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1194
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1198
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1204
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1208
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1212
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1216
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1220
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1224
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1228
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1234
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 220:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1238
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1242
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1246
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1252
		{
			yyVAL.expressions = nil
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1256
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1262
		{
			yyVAL.expression = Function{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1266
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1273
		{
			yyVAL.expression = AggregateFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1277
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1281
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1285
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1289
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1295
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 233:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1299
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 234:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1305
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 235:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1309
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 236:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1313
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 237:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1317
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 238:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1321
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 239:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1325
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 240:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1329
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 241:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1333
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1339
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1345
		{
			yyVAL.expression = nil
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1349
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1355
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1359
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1365
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1369
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1373
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1379
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1385
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1389
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1393
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1397
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1401
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1405
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1409
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1415
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[4].expression, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1419
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[4].expression, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1423
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[5].expression, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1427
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[5].expression, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: JoinCondition{Literal: yyDollar[6].token.Literal, On: yyDollar[7].expression}}
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1431
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[5].expression, JoinType: yyDollar[3].token, Natural: yyDollar[2].token}
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1435
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[6].expression, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Natural: yyDollar[2].token}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1441
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1445
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1451
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1455
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1461
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1465
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1469
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1475
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1481
		{
			yyVAL.expression = nil
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1485
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1491
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1495
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 276:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1501
		{
			yyVAL.expression = nil
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1505
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1511
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1515
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1521
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1525
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1531
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1535
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1541
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1545
		{
			yyVAL.expressions = append([]Expression{Table{Object: yyDollar[1].expression}}, yyDollar[3].expressions...)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1551
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1555
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1561
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1565
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 290:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1571
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 291:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1575
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 292:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1579
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 293:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1583
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 294:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1589
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1595
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1601
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1605
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 298:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1611
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 299:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1616
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1623
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1627
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1633
		{
			yyVAL.procexpr = nil
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1637
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1643
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1647
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1653
		{
			yyVAL.procexpr = nil
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1657
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1663
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1667
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1673
		{
			yyVAL.procexpr = nil
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1677
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1683
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1687
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1693
		{
			yyVAL.procexpr = nil
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1697
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1703
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1707
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1711
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1715
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1719
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1723
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1727
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1731
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1737
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1743
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 326:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1747
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1753
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1759
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1763
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1769
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1773
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1779
		{
			yyVAL.token = Token{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1783
		{
			yyVAL.token = yyDollar[1].token
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1789
		{
			yyVAL.token = Token{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1793
		{
			yyVAL.token = yyDollar[1].token
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1799
		{
			yyVAL.token = Token{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1803
		{
			yyVAL.token = yyDollar[1].token
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1809
		{
			yyVAL.token = Token{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1813
		{
			yyVAL.token = yyDollar[1].token
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1819
		{
			yyVAL.token = yyDollar[1].token
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1823
		{
			yyVAL.token = yyDollar[1].token
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1829
		{
			yyVAL.token = Token{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1833
		{
			yyVAL.token = yyDollar[1].token
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1839
		{
			yyVAL.token = Token{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1843
		{
			yyVAL.token = yyDollar[1].token
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1849
		{
			yyVAL.token = yyDollar[1].token
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1853
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
