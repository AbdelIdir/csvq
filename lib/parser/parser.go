//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const TIES = 57388
const PERCENT = 57389
const JOIN = 57390
const INNER = 57391
const OUTER = 57392
const LEFT = 57393
const RIGHT = 57394
const FULL = 57395
const CROSS = 57396
const ON = 57397
const USING = 57398
const NATURAL = 57399
const UNION = 57400
const INTERSECT = 57401
const EXCEPT = 57402
const ALL = 57403
const ANY = 57404
const EXISTS = 57405
const IN = 57406
const AND = 57407
const OR = 57408
const NOT = 57409
const BETWEEN = 57410
const LIKE = 57411
const IS = 57412
const NULL = 57413
const NULLS = 57414
const DISTINCT = 57415
const WITH = 57416
const CASE = 57417
const IF = 57418
const ELSEIF = 57419
const WHILE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const DO = 57424
const END = 57425
const DECLARE = 57426
const CURSOR = 57427
const FOR = 57428
const FETCH = 57429
const OPEN = 57430
const CLOSE = 57431
const DISPOSE = 57432
const NEXT = 57433
const PRIOR = 57434
const ABSOLUTE = 57435
const RELATIVE = 57436
const RANGE = 57437
const SEPARATOR = 57438
const PARTITION = 57439
const OVER = 57440
const COMMIT = 57441
const ROLLBACK = 57442
const CONTINUE = 57443
const BREAK = 57444
const EXIT = 57445
const PRINT = 57446
const PRINTF = 57447
const SOURCE = 57448
const FUNCTION = 57449
const BEGIN = 57450
const RETURN = 57451
const VAR = 57452
const COMPARISON_OP = 57453
const STRING_OP = 57454
const SUBSTITUTION_OP = 57455
const UMINUS = 57456
const UPLUS = 57457

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"TIES",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"NULLS",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"BEGIN",
	"RETURN",
	"VAR",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1719

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 119,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 94,
	58, 99,
	59, 99,
	60, 99,
	-2, 110,
	-1, 123,
	64, 297,
	68, 297,
	69, 297,
	-2, 313,
	-1, 137,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 161,
	79, 237,
	-2, 297,
	-1, 170,
	83, 3,
	-2, 119,
	-1, 192,
	64, 297,
	68, 297,
	69, 297,
	-2, 244,
	-1, 200,
	4, 85,
	-2, 297,
	-1, 201,
	4, 86,
	-2, 297,
	-1, 215,
	64, 297,
	68, 297,
	69, 297,
	-2, 292,
	-1, 218,
	70, 0,
	111, 0,
	118, 0,
	-2, 165,
	-1, 219,
	70, 0,
	111, 0,
	118, 0,
	-2, 167,
	-1, 240,
	96, 110,
	123, 244,
	-2, 297,
	-1, 255,
	77, 3,
	81, 3,
	83, 3,
	-2, 119,
	-1, 274,
	48, 299,
	50, 303,
	-2, 246,
	-1, 293,
	64, 297,
	68, 297,
	69, 297,
	-2, 230,
	-1, 317,
	83, 1,
	-2, 119,
	-1, 323,
	70, 0,
	111, 0,
	118, 0,
	-2, 176,
	-1, 331,
	96, 110,
	123, 201,
	-2, 297,
	-1, 349,
	83, 3,
	-2, 119,
	-1, 352,
	64, 297,
	68, 297,
	69, 297,
	-2, 115,
	-1, 356,
	64, 297,
	68, 297,
	69, 297,
	-2, 156,
	-1, 369,
	50, 303,
	-2, 299,
	-1, 382,
	64, 297,
	68, 297,
	69, 297,
	-2, 105,
	-1, 419,
	83, 241,
	-2, 297,
	-1, 429,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 431,
	64, 297,
	68, 297,
	69, 297,
	-2, 118,
	-1, 478,
	83, 5,
	-2, 119,
	-1, 482,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 488,
	79, 238,
	81, 238,
	83, 238,
	-2, 297,
	-1, 497,
	77, 1,
	81, 1,
	83, 1,
	-2, 25,
	-1, 507,
	64, 297,
	68, 297,
	69, 297,
	-2, 259,
	-1, 513,
	64, 297,
	68, 297,
	69, 297,
	-2, 109,
	-1, 521,
	64, 297,
	68, 297,
	69, 297,
	-2, 61,
	-1, 528,
	77, 5,
	81, 5,
	83, 5,
	-2, 119,
	-1, 535,
	83, 5,
	-2, 119,
	-1, 546,
	83, 3,
	-2, 119,
	-1, 573,
	64, 297,
	68, 297,
	69, 297,
	-2, 313,
	-1, 586,
	64, 297,
	68, 297,
	69, 297,
	-2, 228,
	-1, 596,
	77, 5,
	81, 5,
	83, 5,
	-2, 119,
	-1, 597,
	83, 7,
	-2, 119,
	-1, 603,
	77, 3,
	81, 3,
	83, 3,
	-2, 119,
	-1, 612,
	77, 7,
	81, 7,
	83, 7,
	-2, 119,
	-1, 627,
	83, 5,
	-2, 119,
	-1, 633,
	83, 7,
	-2, 119,
	-1, 641,
	77, 5,
	81, 5,
	83, 5,
	-2, 119,
	-1, 645,
	77, 1,
	81, 5,
	83, 5,
	-2, 119,
	-1, 648,
	77, 5,
	81, 5,
	83, 5,
	-2, 27,
	-1, 653,
	109, 23,
	-2, 20,
	-1, 658,
	83, 7,
	-2, 119,
	-1, 671,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 672,
	83, 3,
	-2, 119,
	-1, 676,
	77, 7,
	81, 7,
	83, 7,
	-2, 119,
	-1, 678,
	109, 47,
	-2, 44,
	-1, 684,
	83, 3,
	-2, 119,
	-1, 686,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
}

const yyPrivate = 57344

const yyLast = 2265

var yyAct = [...]int{

	68, 24, 153, 24, 625, 656, 410, 590, 91, 216,
	1, 173, 41, 667, 310, 555, 544, 440, 50, 21,
	462, 467, 610, 581, 422, 79, 361, 274, 432, 111,
	112, 273, 448, 370, 6, 289, 368, 357, 181, 315,
	353, 282, 468, 99, 70, 275, 126, 54, 142, 176,
	55, 74, 333, 72, 384, 389, 138, 156, 2, 49,
	156, 146, 259, 145, 144, 157, 520, 504, 147, 148,
	156, 491, 150, 149, 151, 285, 94, 141, 373, 43,
	374, 375, 376, 371, 169, 106, 369, 155, 146, 205,
	145, 144, 146, 130, 443, 147, 148, 178, 178, 147,
	148, 358, 154, 435, 188, 189, 172, 404, 191, 387,
	195, 196, 328, 172, 199, 150, 149, 151, 139, 138,
	141, 270, 155, 207, 146, 140, 145, 144, 164, 208,
	233, 147, 148, 234, 135, 624, 622, 154, 24, 150,
	149, 151, 177, 177, 141, 38, 528, 180, 609, 605,
	40, 578, 593, 3, 37, 372, 577, 237, 540, 539,
	191, 139, 138, 524, 278, 280, 43, 146, 140, 145,
	144, 24, 262, 38, 147, 148, 268, 522, 254, 271,
	178, 263, 519, 178, 516, 139, 138, 295, 245, 248,
	220, 146, 140, 145, 144, 214, 503, 100, 147, 148,
	234, 238, 359, 38, 493, 611, 492, 490, 305, 474,
	94, 461, 311, 243, 284, 100, 37, 96, 407, 97,
	403, 95, 314, 316, 294, 327, 307, 300, 236, 256,
	155, 235, 155, 212, 587, 246, 565, 326, 561, 64,
	39, 400, 39, 341, 339, 309, 337, 312, 322, 296,
	324, 325, 329, 304, 306, 213, 24, 52, 102, 92,
	287, 288, 313, 102, 246, 52, 155, 108, 295, 211,
	364, 178, 320, 366, 319, 336, 105, 377, 444, 202,
	476, 154, 178, 43, 151, 130, 136, 535, 155, 478,
	562, 395, 592, 133, 515, 427, 487, 311, 393, 364,
	364, 415, 343, 360, 494, 210, 102, 133, 675, 311,
	43, 390, 397, 379, 256, 367, 177, 363, 24, 426,
	365, 392, 665, 401, 102, 40, 308, 411, 162, 383,
	649, 385, 386, 644, 635, 163, 630, 602, 600, 579,
	391, 567, 498, 417, 110, 481, 394, 396, 132, 418,
	24, 408, 344, 684, 633, 349, 409, 155, 143, 155,
	364, 155, 132, 423, 424, 423, 425, 423, 627, 244,
	134, 334, 154, 178, 154, 52, 154, 39, 659, 452,
	660, 628, 658, 439, 423, 627, 547, 318, 295, 458,
	546, 317, 460, 393, 244, 640, 364, 548, 428, 109,
	442, 659, 318, 447, 451, 311, 446, 441, 256, 547,
	39, 681, 264, 470, 674, 295, 651, 643, 620, 477,
	155, 453, 601, 457, 537, 294, 480, 37, 552, 434,
	24, 187, 502, 253, 345, 473, 295, 87, 165, 151,
	421, 673, 598, 441, 364, 222, 178, 489, 250, 221,
	223, 178, 249, 264, 171, 484, 252, 251, 286, 514,
	225, 224, 499, 183, 184, 185, 364, 364, 184, 449,
	506, 559, 523, 508, 65, 26, 501, 26, 512, 24,
	510, 37, 511, 24, 505, 509, 450, 295, 497, 445,
	500, 363, 538, 116, 117, 39, 155, 351, 24, 89,
	373, 527, 374, 375, 376, 364, 607, 41, 437, 438,
	178, 526, 178, 517, 518, 266, 543, 423, 486, 456,
	545, 393, 554, 155, 414, 267, 455, 541, 430, 24,
	381, 174, 471, 469, 104, 574, 24, 558, 553, 560,
	563, 571, 564, 264, 550, 551, 103, 24, 129, 38,
	525, 568, 441, 114, 115, 118, 119, 39, 575, 479,
	178, 192, 580, 269, 84, 85, 86, 378, 87, 88,
	297, 298, 463, 464, 465, 466, 589, 585, 423, 299,
	53, 90, 406, 388, 303, 155, 175, 588, 311, 39,
	283, 38, 182, 281, 122, 40, 123, 24, 24, 617,
	594, 608, 604, 606, 24, 256, 542, 38, 496, 272,
	623, 485, 26, 24, 40, 38, 373, 629, 374, 375,
	376, 371, 556, 557, 369, 179, 125, 124, 24, 152,
	89, 636, 529, 38, 24, 85, 639, 158, 159, 38,
	161, 128, 24, 167, 168, 26, 24, 186, 51, 24,
	637, 59, 11, 73, 11, 538, 71, 69, 626, 24,
	616, 657, 256, 666, 664, 9, 362, 8, 652, 39,
	7, 568, 24, 24, 679, 616, 332, 24, 160, 61,
	200, 201, 529, 290, 291, 24, 277, 24, 276, 529,
	591, 77, 209, 239, 60, 63, 616, 56, 215, 62,
	217, 218, 219, 57, 616, 549, 226, 227, 228, 229,
	230, 231, 232, 436, 355, 354, 127, 350, 39, 240,
	265, 616, 39, 454, 373, 582, 374, 375, 376, 371,
	26, 256, 369, 380, 98, 678, 16, 39, 66, 616,
	113, 4, 14, 256, 613, 497, 42, 678, 293, 678,
	529, 529, 13, 10, 44, 45, 46, 47, 48, 613,
	15, 12, 614, 257, 530, 5, 529, 93, 39, 612,
	255, 0, 92, 107, 52, 39, 0, 0, 120, 121,
	613, 529, 621, 321, 0, 323, 39, 529, 648, 11,
	0, 0, 26, 0, 0, 529, 131, 0, 0, 653,
	0, 0, 529, 331, 0, 613, 335, 0, 0, 0,
	0, 0, 529, 0, 0, 0, 0, 0, 631, 613,
	346, 0, 11, 613, 26, 653, 653, 0, 352, 356,
	529, 613, 0, 648, 0, 0, 39, 39, 653, 642,
	653, 0, 0, 39, 0, 382, 0, 647, 0, 0,
	0, 0, 39, 193, 0, 194, 0, 0, 197, 198,
	0, 0, 0, 430, 668, 496, 0, 39, 0, 0,
	203, 204, 206, 39, 0, 0, 0, 0, 0, 0,
	412, 39, 682, 0, 0, 39, 0, 0, 39, 0,
	642, 0, 647, 0, 0, 92, 419, 0, 39, 0,
	0, 0, 0, 0, 26, 0, 0, 11, 0, 0,
	0, 39, 39, 431, 0, 0, 39, 0, 0, 0,
	0, 0, 0, 0, 39, 0, 39, 0, 38, 84,
	85, 86, 0, 87, 88, 40, 0, 0, 0, 0,
	0, 0, 301, 302, 0, 0, 0, 0, 0, 293,
	0, 240, 0, 26, 0, 0, 0, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 11,
	0, 0, 26, 0, 0, 483, 356, 0, 0, 0,
	0, 150, 488, 151, 0, 0, 141, 80, 0, 0,
	0, 81, 0, 0, 0, 89, 433, 356, 0, 78,
	0, 11, 0, 26, 0, 0, 507, 347, 348, 83,
	26, 0, 0, 0, 150, 149, 151, 513, 0, 141,
	0, 26, 0, 434, 0, 0, 0, 139, 138, 0,
	0, 521, 0, 146, 140, 145, 144, 150, 149, 151,
	147, 148, 141, 75, 76, 82, 67, 190, 356, 0,
	0, 398, 399, 0, 0, 0, 402, 0, 0, 405,
	139, 138, 0, 0, 0, 0, 146, 140, 145, 144,
	0, 26, 26, 147, 148, 0, 0, 0, 26, 0,
	0, 11, 58, 139, 138, 0, 0, 26, 0, 146,
	140, 145, 144, 569, 570, 573, 147, 148, 234, 0,
	0, 0, 26, 0, 101, 0, 0, 0, 26, 583,
	0, 0, 0, 0, 0, 0, 26, 0, 586, 0,
	26, 151, 0, 26, 141, 0, 0, 0, 0, 0,
	11, 0, 0, 26, 11, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 472, 0, 26, 26, 0, 11,
	475, 26, 0, 0, 0, 0, 0, 0, 0, 26,
	0, 26, 0, 166, 0, 139, 138, 0, 0, 0,
	0, 146, 140, 145, 144, 495, 0, 632, 147, 148,
	11, 0, 0, 0, 0, 0, 0, 11, 0, 0,
	638, 0, 0, 0, 0, 0, 0, 0, 11, 0,
	38, 84, 85, 86, 0, 87, 88, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 662, 663, 0, 0,
	0, 669, 0, 0, 0, 0, 0, 536, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 683,
	0, 0, 0, 0, 0, 247, 247, 0, 11, 11,
	0, 0, 0, 0, 0, 11, 0, 0, 0, 80,
	0, 0, 279, 81, 11, 279, 0, 89, 0, 241,
	0, 78, 0, 566, 0, 0, 0, 0, 0, 11,
	572, 83, 0, 0, 576, 11, 0, 0, 0, 0,
	0, 0, 0, 11, 0, 584, 0, 11, 0, 0,
	11, 0, 0, 0, 0, 247, 0, 247, 247, 0,
	11, 0, 0, 242, 595, 75, 76, 82, 67, 459,
	599, 0, 0, 11, 11, 0, 0, 0, 11, 0,
	0, 0, 247, 338, 340, 342, 11, 0, 11, 0,
	0, 0, 0, 0, 0, 0, 0, 618, 619, 0,
	0, 0, 0, 0, 0, 0, 38, 84, 85, 86,
	0, 87, 88, 40, 279, 0, 0, 634, 101, 0,
	101, 101, 38, 84, 85, 86, 0, 87, 88, 40,
	0, 0, 0, 0, 0, 0, 0, 646, 0, 0,
	650, 0, 0, 0, 0, 0, 0, 0, 661, 38,
	84, 85, 86, 0, 87, 88, 40, 670, 0, 0,
	0, 0, 0, 0, 0, 80, 0, 0, 0, 81,
	247, 680, 247, 89, 247, 241, 0, 78, 685, 0,
	0, 80, 0, 0, 0, 81, 0, 83, 0, 89,
	0, 247, 0, 78, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 0, 279, 0, 0, 80, 0,
	0, 0, 81, 0, 0, 0, 89, 0, 0, 242,
	78, 75, 76, 82, 67, 190, 0, 0, 0, 0,
	83, 0, 0, 0, 43, 0, 0, 75, 76, 82,
	67, 38, 84, 85, 86, 0, 87, 88, 40, 0,
	38, 84, 85, 86, 247, 87, 88, 40, 0, 0,
	0, 0, 292, 0, 75, 76, 82, 67, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 279, 0,
	150, 149, 151, 279, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 686, 0, 0, 0, 0,
	80, 0, 0, 0, 81, 0, 0, 0, 89, 80,
	0, 37, 78, 81, 0, 0, 0, 89, 0, 0,
	0, 78, 83, 0, 247, 0, 139, 138, 0, 0,
	0, 83, 146, 140, 145, 144, 0, 0, 0, 147,
	148, 0, 279, 0, 279, 38, 84, 85, 86, 0,
	87, 88, 40, 0, 0, 0, 75, 76, 82, 67,
	0, 0, 0, 330, 0, 75, 76, 82, 67, 0,
	0, 0, 0, 0, 0, 150, 149, 151, 0, 0,
	141, 0, 0, 0, 0, 247, 150, 149, 151, 0,
	676, 141, 279, 0, 0, 0, 150, 149, 151, 0,
	0, 141, 0, 672, 80, 0, 0, 0, 81, 0,
	0, 671, 89, 0, 0, 0, 78, 0, 0, 0,
	0, 139, 138, 0, 0, 0, 83, 146, 140, 145,
	144, 0, 139, 138, 147, 148, 0, 0, 146, 140,
	145, 144, 139, 138, 0, 147, 148, 0, 146, 140,
	145, 144, 150, 149, 151, 147, 148, 141, 0, 0,
	75, 76, 82, 67, 0, 0, 0, 645, 150, 149,
	151, 0, 0, 141, 0, 0, 0, 0, 0, 150,
	149, 151, 0, 641, 141, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 603, 150, 149, 151, 139, 138,
	141, 0, 0, 0, 146, 140, 145, 144, 0, 0,
	596, 147, 148, 0, 139, 138, 0, 0, 0, 0,
	146, 140, 145, 144, 0, 139, 138, 147, 148, 0,
	0, 146, 140, 145, 144, 150, 149, 151, 147, 148,
	141, 139, 138, 0, 0, 0, 0, 146, 140, 145,
	144, 0, 597, 0, 147, 148, 150, 149, 151, 0,
	0, 141, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 482, 0, 0, 0, 0, 0, 0, 150, 149,
	151, 139, 138, 141, 0, 0, 0, 146, 140, 145,
	144, 416, 0, 429, 147, 148, 0, 0, 0, 150,
	149, 151, 139, 138, 141, 0, 0, 0, 146, 140,
	145, 144, 0, 0, 420, 147, 148, 0, 150, 149,
	151, 0, 0, 141, 139, 138, 0, 0, 0, 0,
	146, 140, 145, 144, 0, 0, 0, 147, 148, 150,
	149, 151, 0, 0, 141, 139, 138, 0, 0, 0,
	0, 146, 140, 145, 144, 0, 170, 0, 147, 148,
	0, 150, 149, 151, 139, 138, 141, 0, 0, 0,
	146, 140, 145, 144, 0, 0, 137, 147, 148, 150,
	149, 151, 0, 0, 141, 139, 138, 0, 0, 0,
	0, 146, 140, 145, 144, 413, 149, 151, 147, 148,
	141, 0, 0, 0, 0, 38, 0, 139, 138, 0,
	0, 0, 40, 146, 140, 145, 144, 33, 0, 0,
	147, 148, 0, 0, 0, 139, 138, 22, 0, 0,
	23, 146, 140, 145, 144, 0, 0, 0, 147, 148,
	0, 139, 138, 0, 38, 0, 0, 146, 140, 145,
	144, 40, 0, 0, 147, 148, 33, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 22, 0, 0, 23,
	0, 0, 0, 0, 0, 37, 0, 677, 0, 655,
	0, 0, 0, 0, 0, 17, 0, 38, 30, 28,
	29, 27, 0, 0, 40, 0, 0, 0, 0, 33,
	31, 32, 260, 261, 20, 34, 35, 36, 0, 22,
	533, 25, 23, 0, 37, 0, 615, 0, 532, 0,
	0, 0, 0, 0, 534, 0, 38, 30, 28, 29,
	27, 0, 0, 40, 0, 0, 0, 0, 33, 31,
	32, 260, 261, 0, 34, 35, 36, 0, 22, 533,
	25, 23, 0, 0, 0, 0, 0, 37, 0, 258,
	0, 19, 0, 0, 0, 0, 0, 17, 0, 38,
	30, 28, 29, 27, 0, 0, 40, 0, 0, 0,
	0, 33, 31, 32, 260, 261, 20, 34, 35, 36,
	0, 22, 0, 25, 23, 0, 37, 0, 654, 0,
	655, 0, 0, 0, 0, 0, 17, 0, 38, 30,
	28, 29, 27, 0, 0, 40, 0, 0, 0, 0,
	33, 31, 32, 0, 0, 20, 34, 35, 36, 0,
	22, 533, 25, 23, 0, 0, 0, 0, 0, 37,
	0, 531, 0, 532, 0, 0, 0, 0, 0, 534,
	0, 0, 30, 28, 29, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 32, 0, 0, 0, 34,
	35, 36, 0, 0, 533, 25, 0, 0, 37, 0,
	18, 0, 19, 0, 0, 0, 0, 0, 17, 0,
	0, 30, 28, 29, 27, 0, 0, 0, 0, 0,
	0, 0, 0, 31, 32, 0, 0, 20, 34, 35,
	36, 0, 0, 0, 25,
}
var yyPact = [...]int{

	2154, -1000, 2154, -1000, -1000, -1000, 167, 167, 167, 167,
	167, 167, -1000, -1000, -1000, -1000, -1000, 603, 1591, 1591,
	167, 202, 516, 504, 154, 584, 167, 314, 635, 635,
	462, 167, 167, 582, 1591, 622, 621, 523, -1000, 172,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 167,
	263, 8, 173, 1846, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 172, -1000, -1000, 1487, -57, -1000,
	-1000, -1000, -1000, -1000, -1000, 1591, 1591, -1000, 1591, 217,
	136, 1591, 1591, 635, -1000, -1000, -1000, -1000, -1000, -1000,
	1824, 390, -20, -1000, 493, 566, 635, 611, 578, 405,
	358, -1000, 353, 635, 635, 924, 167, -1000, 167, 635,
	635, 167, 167, 635, -1000, -1000, -1000, -1000, 1591, 1591,
	-1000, -1000, 161, 50, -37, 167, -1000, -3, 635, -1000,
	1591, -1000, 219, 147, 133, 584, 1591, 2154, 1591, 1591,
	1591, 372, 381, 399, 1591, 1591, 1591, 1591, 1591, 1591,
	1591, -1000, 7, 108, 105, 184, 629, 1352, -1000, -1000,
	315, 1864, 113, 113, 384, 395, -1000, 1054, -1000, 363,
	2033, 635, 584, 471, 484, 635, 547, -5, 587, 141,
	579, 572, 141, 397, 397, 397, 1395, -1000, 127, 543,
	-1000, 104, 972, -1000, -1000, 167, 167, -1000, -1000, 564,
	1864, 1864, 559, -1000, -1000, 1591, -1000, 523, 204, 1864,
	353, 635, 353, 139, -1000, 1864, 310, -29, -56, -56,
	428, 1591, 113, 1591, 113, 113, -25, -25, -1000, -1000,
	-1000, 916, 1054, -1000, 1591, -1000, -1000, -1000, -1000, 102,
	74, 1496, -1000, 290, 1591, -1000, 1487, -1000, -1000, 113,
	124, 122, 121, 372, 269, 2033, -1000, -1000, 1591, -1000,
	167, 167, 273, -1000, -13, 452, 1591, 1591, 80, 635,
	635, -1000, 635, 572, 29, -1000, 545, -1000, -1000, -1000,
	-1000, 141, 491, 1591, -1000, 184, -1000, 184, 184, -1000,
	-17, 561, -1000, 1864, -1000, -67, 635, 199, 169, 635,
	-1000, -1000, -1000, 584, 167, 167, -1000, 119, 635, 167,
	97, -19, 167, 560, 95, 268, 310, 2154, 1591, -1000,
	-1000, 1880, -1000, -56, -1000, -1000, -1000, -1000, 483, 205,
	-1000, 1803, 266, 315, 1591, 1784, 375, 142, -1000, 142,
	-1000, 142, -1000, 231, 320, -1000, 1763, -1000, -1000, 2033,
	-1000, 1591, 949, -1000, -23, 466, 1864, -1000, 113, 635,
	-1000, 578, -32, 160, -70, -1000, -1000, -1000, 441, 451,
	419, 438, 141, -1000, -1000, -1000, -1000, -1000, 635, 572,
	486, 478, 1864, 409, -1000, -1000, 409, 1395, 635, 1196,
	88, 541, 635, 498, -1000, 635, 495, 167, -1000, -1000,
	353, 86, -1000, 194, 635, -1000, 181, 537, 350, 262,
	325, -1000, 1741, 1591, 1591, 606, 477, 200, -1000, 1864,
	1591, 113, 84, -55, 83, 81, -1000, 209, 167, 2033,
	259, 1864, -1000, 355, 444, 1591, 360, -1000, -1000, -1000,
	73, -59, 572, 635, 1591, 141, 437, 419, 434, -1000,
	141, -1000, -1000, -1000, -1000, 1591, 1591, -1000, -1000, 196,
	61, -1000, -1000, -1000, -1000, 635, 635, 59, -60, 1591,
	54, 635, -1000, 40, 528, -1000, 353, -1000, 2115, 179,
	167, 348, 2154, 1054, 36, 35, 1591, 601, 1864, -1000,
	-1000, 113, -1000, -1000, -1000, -1000, 309, 2154, 319, -1000,
	-1000, -1000, 513, 407, 635, -1000, -1000, 1864, 567, 141,
	423, 141, 675, 1864, -1000, 116, 192, -1000, -1000, 541,
	635, 1864, -1000, -1000, -1000, 114, 167, 258, 2115, -1000,
	-1000, 1591, 1591, 1368, 603, 2115, -1000, 167, -1000, -1000,
	-1000, 33, 28, -1000, 256, 309, 2033, 1591, 167, -1000,
	-1000, -1000, 113, -1000, -1000, -1000, 1591, 112, 675, 141,
	567, 195, 30, -1000, -1000, 353, -1000, 167, -1000, 1680,
	1720, 378, -1000, 50, 277, 255, -1000, -1000, -1000, 346,
	254, 332, -1000, 1664, -1000, -1000, 1864, 635, 675, -1000,
	26, 493, 465, 195, 25, -1000, 2115, 1990, 635, -1000,
	167, 167, 342, 2033, 13, -1000, -1000, 1591, 12, -1000,
	304, 253, 1990, -1000, -1000, 1591, -1000, 272, -1000, -1000,
	167, -1000, -1000, -1000, -1000, 251, 287, 2115, 1591, 325,
	317, -1000, 1653, 1990, -1000, 341, 250, -1000, 1637, 325,
	167, 1990, 247, 167, 340, 2072, -1000, 301, 2115, 302,
	-1000, 167, -1000, -1000, 1591, 1591, 239, 301, 1990, 1591,
	167, -1000, 1581, 1571, 377, 338, 225, 324, -1000, 1560,
	-1000, 2072, 1951, 635, 167, 335, 1990, 1591, -1000, 271,
	-1000, 167, -1000, 1465, 1951, -1000, 1951,
}
var yyPgo = [...]int{

	0, 9, 178, 22, 205, 153, 58, 146, 770, 769,
	765, 764, 62, 763, 762, 761, 760, 753, 42, 21,
	20, 752, 742, 741, 740, 738, 736, 34, 54, 43,
	734, 38, 41, 733, 723, 11, 720, 28, 717, 19,
	716, 46, 50, 47, 561, 25, 24, 40, 715, 714,
	713, 705, 1082, 703, 699, 697, 695, 651, 694, 693,
	691, 37, 7, 690, 45, 688, 27, 686, 15, 684,
	683, 679, 678, 52, 676, 17, 2, 31, 49, 14,
	35, 670, 667, 666, 26, 665, 6, 39, 23, 16,
	658, 4, 13, 5, 0, 657, 44, 656, 53, 653,
	51, 239, 8, 474, 648, 59, 647, 48, 36, 32,
	33, 75, 641, 358, 746,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	6, 6, 6, 7, 7, 8, 8, 9, 9, 10,
	10, 10, 10, 10, 11, 11, 11, 11, 11, 11,
	12, 12, 13, 13, 13, 14, 14, 14, 15, 15,
	15, 15, 16, 16, 17, 17, 17, 17, 17, 17,
	18, 18, 19, 19, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 22, 22, 22, 22, 23, 23,
	24, 24, 24, 24, 24, 24, 24, 25, 25, 26,
	26, 26, 26, 26, 27, 28, 28, 28, 28, 29,
	29, 30, 31, 31, 32, 32, 33, 33, 34, 34,
	35, 35, 36, 36, 36, 37, 37, 38, 38, 39,
	39, 40, 40, 41, 41, 42, 42, 42, 42, 42,
	42, 43, 43, 43, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 45, 45,
	46, 46, 47, 47, 48, 48, 49, 49, 50, 50,
	50, 51, 51, 52, 53, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 55, 55, 55, 55, 55, 55,
	55, 56, 56, 56, 56, 57, 57, 58, 58, 59,
	59, 59, 60, 60, 60, 60, 61, 61, 62, 63,
	63, 64, 64, 64, 65, 65, 66, 66, 66, 66,
	66, 66, 67, 67, 67, 67, 67, 68, 68, 68,
	69, 69, 70, 70, 70, 71, 72, 72, 73, 73,
	74, 74, 75, 75, 76, 76, 77, 77, 78, 78,
	79, 79, 80, 80, 81, 81, 81, 81, 82, 83,
	84, 84, 85, 85, 86, 86, 87, 87, 88, 88,
	89, 89, 90, 90, 91, 91, 92, 92, 93, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 102,
	103, 104, 104, 105, 105, 106, 106, 107, 107, 108,
	108, 109, 109, 110, 110, 110, 110, 111, 111, 112,
	112, 113, 113, 114, 114,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	9, 7, 9, 2, 8, 9, 7, 9, 2, 3,
	2, 2, 8, 9, 1, 8, 9, 1, 3, 3,
	2, 3, 2, 2, 6, 6, 8, 5, 7, 7,
	1, 3, 1, 3, 0, 1, 1, 2, 2, 6,
	3, 3, 4, 6, 7, 9, 6, 4, 10, 11,
	0, 1, 1, 1, 1, 2, 2, 5, 6, 5,
	3, 3, 5, 3, 5, 5, 4, 4, 4, 1,
	1, 3, 0, 2, 0, 2, 0, 3, 0, 2,
	0, 3, 0, 3, 4, 0, 2, 0, 2, 0,
	2, 6, 9, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 1,
	1, 3, 1, 3, 2, 4, 1, 1, 0, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 4,
	4, 6, 6, 4, 6, 4, 4, 4, 6, 4,
	4, 6, 4, 2, 3, 3, 3, 3, 3, 2,
	2, 3, 3, 2, 2, 3, 4, 4, 1, 1,
	2, 2, 7, 8, 7, 8, 7, 8, 2, 0,
	3, 1, 2, 3, 1, 1, 1, 1, 2, 3,
	1, 1, 5, 5, 6, 6, 4, 0, 2, 4,
	1, 1, 1, 3, 1, 5, 0, 1, 4, 2,
	0, 2, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 1, 3, 6, 9, 5, 8, 7, 3,
	1, 3, 5, 6, 4, 2, 0, 2, 4, 2,
	0, 2, 4, 2, 0, 2, 4, 2, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 1, 3, 1, 3, 0, 1, 0, 1, 0,
	1, 0, 1, 0, 1, 1, 1, 0, 1, 0,
	1, 1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -23, -10, -27, -81, -82, -85,
	-17, -57, -15, -21, -22, -16, -26, 84, 76, 78,
	103, -39, 26, 29, -94, 110, -103, 90, 88, 89,
	87, 99, 100, 16, 104, 105, 106, 74, 4, -101,
	11, -1, -114, 116, -114, -114, -114, -114, -114, -105,
	-94, -104, -101, -44, -43, -42, -55, -53, -52, -57,
	-58, -71, -54, -56, -101, -103, -25, 122, -94, -95,
	-96, -97, -98, -99, -100, 119, 120, -60, 75, -45,
	63, 67, 121, 85, 5, 6, 7, 9, 10, 71,
	-44, -102, -101, -114, -28, 19, 15, 17, -30, -29,
	13, -52, 122, 30, 30, 122, -105, -114, -101, 85,
	30, -94, -94, -24, 91, 92, 31, 32, 93, 94,
	-114, -114, 12, -44, 5, 5, -41, -40, -112, 25,
	113, -114, 85, 30, 107, 126, 113, 80, 112, 111,
	118, 70, -107, -113, 120, 119, 117, 124, 125, 66,
	65, 67, -44, -76, -27, -39, 127, 122, -44, -44,
	-72, -44, 111, 118, -107, -113, -52, -44, -44, -94,
	82, 64, 126, -35, 38, 20, -78, -64, -94, 14,
	-78, -31, 14, 58, 59, 60, -106, 73, -94, -94,
	123, -76, -44, -114, -114, -94, -94, -114, -114, -94,
	-44, -44, 118, -114, -114, 126, -114, 126, -94, -44,
	86, 122, 86, 122, -105, -44, -1, -44, -44, -44,
	-107, 68, 64, 69, 62, 61, -44, -44, -44, -44,
	-44, -44, -44, 123, 126, 123, 123, -94, -96, -59,
	-44, 73, 117, -73, 79, -45, 122, -52, -45, 68,
	64, 62, 61, 70, -2, -8, -6, -13, 76, -12,
	101, 102, -94, -102, -101, -36, 44, 41, -94, 16,
	126, -94, 22, -77, -66, -64, -65, -67, 23, -52,
	24, 14, -32, 18, -77, -111, 61, -111, -111, -80,
	-70, -69, 117, -44, -61, -94, 122, 27, 28, 36,
	123, -114, -114, 20, -42, -76, -41, 22, 122, -27,
	-79, -94, -27, 123, -102, -87, -86, 81, 77, -98,
	-100, -44, -45, -44, -45, -45, -76, 123, 38, -35,
	117, -44, -74, -73, 81, -44, -45, 122, -52, 122,
	-52, 122, -52, -107, 83, -2, -44, -114, -114, 82,
	-38, 45, -44, -47, -48, -49, -44, -61, 21, 122,
	-27, -84, -83, -43, -94, -78, -94, -32, -108, 57,
	-110, 54, 126, 49, 51, 52, 53, -94, 22, -77,
	-33, 39, -44, -29, -28, -29, -29, 126, 22, 122,
	-79, -18, 122, -94, -43, 122, -43, -102, -114, -114,
	122, -79, -114, 123, 126, -114, 22, 123, 83, -87,
	-86, -1, -44, 65, 41, 96, 38, -35, 83, -44,
	80, 65, -46, -45, -46, -46, 88, 64, 78, 80,
	-2, -44, -37, 47, 74, 126, -50, 42, 43, -46,
	-75, -43, -31, 126, 118, 48, -108, -110, -109, 50,
	48, -77, -94, -32, -34, 40, 41, -80, -94, 123,
	-76, 123, -20, 31, 32, 33, 34, -19, -18, 35,
	-75, 37, -114, -27, 123, -114, 86, -79, 108, 22,
	76, 83, 80, -44, -47, 5, 41, 96, -44, -45,
	123, 126, 123, 123, 95, -114, -2, -6, 83, -37,
	46, -47, 72, 123, 126, -32, -84, -44, -66, 48,
	-109, 48, -66, -44, -76, 98, 123, -43, -43, 123,
	126, -44, 123, -94, 123, 22, -27, -3, -7, -5,
	-11, 76, 78, 109, 84, 108, -114, 76, -1, 123,
	123, -47, 5, -46, -89, -88, 81, 77, 78, -51,
	31, 32, 21, -27, -75, -68, 55, 56, -66, 48,
	-66, 122, 98, -20, -19, 122, -114, 83, -3, -44,
	-44, -102, -114, -44, -94, -3, -114, 123, 123, 83,
	-89, -88, -2, -44, -114, -46, -44, 122, -66, -68,
	-62, -63, 97, 122, -27, -114, 80, 82, 64, -114,
	83, 76, 83, 80, -79, 123, -35, 41, -62, 123,
	-3, -4, -9, -7, -14, 76, -12, -94, -114, -114,
	76, -2, 123, -76, 123, -91, -90, 81, 77, -86,
	83, -4, -44, 82, -114, 83, -91, -3, -44, -86,
	78, 80, -4, 76, 83, 80, -114, -4, -7, 83,
	-114, 76, -3, -5, 76, 78, -93, -92, 81, 77,
	78, -114, -44, -44, -102, 83, -93, -92, -4, -44,
	-114, 80, 82, 64, 76, 83, 80, 76, -12, -94,
	-114, 76, -4, -44, 82, -114, 80,
}
var yyDef = [...]int{

	-2, -2, -2, 20, 21, 22, 313, 313, 313, 313,
	313, 313, 15, 16, 17, 18, 19, 0, 0, 0,
	313, 0, 0, 0, 0, 0, 313, 0, 0, 0,
	80, 313, 313, 0, 0, 0, 0, 309, 280, 0,
	287, 2, 9, 314, 10, 11, 12, 13, 14, 313,
	0, 293, 291, 297, 134, 135, 136, 137, 138, 139,
	140, 141, 142, 143, 144, 145, 146, 119, 131, 125,
	126, 127, 128, 129, 130, 0, 0, 198, 236, 297,
	0, 0, 0, 0, 281, 282, 283, 284, 285, 286,
	297, 0, 144, 33, -2, 0, 0, 0, 102, 0,
	295, 100, 119, 0, 0, 0, 313, 50, 313, 0,
	0, 313, 313, 0, 81, 82, 83, 84, 0, 0,
	52, 53, 0, -2, 313, 313, 120, 123, 0, 310,
	0, 49, 0, 0, 0, 0, 0, -2, 0, 311,
	312, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 298, 297, 0, 0, 0, 0, 0, 189, 190,
	0, -2, 311, 312, 0, 0, 183, 193, 194, 0,
	-2, 0, 0, 112, 0, 0, 0, 248, 211, 0,
	0, 104, 0, 307, 307, 307, 0, 296, 0, 0,
	195, 0, -2, 48, 51, 313, 313, 70, 71, 0,
	-2, -2, 0, 90, 91, 0, 93, 309, 0, 290,
	119, 0, 119, 0, 294, -2, 266, 164, -2, -2,
	0, 0, 0, 0, 0, 0, 184, 185, 186, 187,
	188, 191, 192, 147, 0, 148, 163, 132, 133, 0,
	-2, 0, 199, 240, 0, 166, 119, 149, 168, 0,
	0, 0, 0, 297, 0, -2, 25, 26, 0, 44,
	313, 313, 0, 289, 288, 117, 0, 0, 119, 0,
	0, 212, 0, 104, -2, 216, 217, 220, 221, 214,
	215, 0, 106, 0, 103, 0, 308, 0, 0, 101,
	252, 232, 234, -2, 231, 131, 0, 0, 0, 0,
	196, 72, 77, 0, 313, 313, 124, 0, 0, 313,
	0, 250, 313, 0, 0, 0, 266, -2, 0, 169,
	170, 297, 173, -2, 177, 180, 245, 197, 0, 0,
	200, -2, 0, 239, 0, 297, 0, 119, 175, 119,
	179, 119, 182, 0, 0, 4, 297, 40, 41, -2,
	94, 0, -2, 111, 152, 158, -2, 157, 0, 0,
	256, 102, 260, 0, 131, 249, 213, 262, 0, -2,
	301, 0, 0, 300, 304, 305, 306, 218, 0, 104,
	108, 0, -2, 96, 99, 97, 98, 0, 0, 0,
	0, 64, 0, 60, 57, 0, 0, 313, 89, 92,
	119, 0, 69, 313, 0, 76, 0, 0, 0, 0,
	265, 267, 297, 0, 0, 0, 0, 0, 235, -2,
	0, 0, 0, 150, 0, 0, 87, 0, 313, -2,
	0, -2, 113, 115, 0, 0, 154, 159, 160, 254,
	0, 242, 104, 0, 0, 0, 0, 301, 0, 302,
	0, 247, 219, 263, 95, 0, 0, 253, 233, 195,
	0, 54, 55, 65, 66, 0, 0, 0, 62, 0,
	0, 0, 73, 0, 0, 74, 119, 251, -2, 0,
	313, 0, -2, 171, 111, 0, 0, 0, -2, 172,
	174, 0, 178, 181, 88, 31, 270, -2, 0, 114,
	116, 153, 0, 119, 0, 258, 261, -2, 227, 0,
	0, 0, 226, -2, 107, 0, 196, 67, 68, 64,
	0, -2, 58, 59, 121, 0, 313, 0, -2, 23,
	24, 0, 0, 313, 0, -2, 29, 313, 264, 202,
	204, 111, 0, 151, 0, 270, -2, 0, 313, 155,
	161, 162, 0, 257, 243, 222, 0, 0, 223, 0,
	227, 209, 0, 56, 63, 119, 75, 313, 6, 297,
	297, 0, 38, -2, 0, 0, 30, 203, 205, 0,
	0, 269, 271, 297, 32, 255, -2, 0, 225, 224,
	0, 110, 0, 209, 0, 78, -2, -2, 0, 39,
	313, 313, 0, -2, 0, 206, 208, 0, 0, 122,
	274, 0, -2, 27, 28, 0, 47, 0, 79, 42,
	313, 268, 229, 210, 207, 0, 274, -2, 0, 0,
	0, 8, 297, -2, 43, 0, 0, 275, 297, 273,
	313, -2, 0, 313, 0, -2, 36, 278, -2, 0,
	34, 313, 272, -2, 0, 0, 0, 278, -2, 0,
	313, 35, 297, 297, 0, 0, 0, 277, 279, 297,
	37, -2, -2, 0, 313, 0, -2, 0, -2, 0,
	45, 313, 276, 297, -2, 46, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 121, 3, 3, 3, 125, 3, 3,
	122, 123, 117, 120, 126, 119, 127, 124, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 116,
	3, 118,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:179
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:184
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:191
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:196
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:203
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:208
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:215
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:220
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:227
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:231
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:235
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:239
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:243
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:247
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:251
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:255
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:259
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:263
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:267
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:273
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:277
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:281
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:291
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:301
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:307
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:311
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:317
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:321
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:325
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 32:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:329
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:333
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:339
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:343
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:347
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:351
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:355
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:359
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:365
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:369
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:375
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:379
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:383
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:389
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:393
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:397
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:403
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:407
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:411
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:415
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:421
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:425
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:431
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:435
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:439
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:443
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:447
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:451
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression.(FieldReference), To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:457
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:461
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:467
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:471
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:477
		{
			yyVAL.expression = nil
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:481
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:485
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:489
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:493
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:499
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:503
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:507
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:511
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 73:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:515
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:521
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:525
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:529
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:533
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 78:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:539
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 79:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:543
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:549
		{
			yyVAL.expression = nil
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:553
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:557
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:561
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:565
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:569
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:573
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:579
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:583
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:589
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:593
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:597
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:601
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:605
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].token.Literal}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:611
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:623
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:633
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:642
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:651
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:662
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:666
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:672
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:678
		{
			yyVAL.expression = nil
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:682
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:688
		{
			yyVAL.expression = nil
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:692
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:698
		{
			yyVAL.expression = nil
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:702
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:708
		{
			yyVAL.expression = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:712
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:718
		{
			yyVAL.expression = nil
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:722
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:728
		{
			yyVAL.expression = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:732
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:736
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:742
		{
			yyVAL.expression = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:746
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:752
		{
			yyVAL.expression = nil
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:756
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:762
		{
			yyVAL.expression = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:766
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:772
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 122:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:776
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:782
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:786
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:792
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:796
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:800
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:804
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:808
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:812
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:818
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Column: yyDollar[1].identifier}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:822
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:826
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Number: yyDollar[3].integer}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:832
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:836
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:840
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:844
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:848
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:852
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:856
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:860
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:864
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:868
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:872
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:876
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:880
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:884
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:890
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:894
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:900
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:904
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:910
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:914
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:920
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:924
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:930
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:934
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:940
		{
			yyVAL.token = Token{}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:944
		{
			yyVAL.token = yyDollar[1].token
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:948
		{
			yyVAL.token = yyDollar[1].token
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:954
		{
			yyVAL.token = yyDollar[1].token
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:958
		{
			yyVAL.token = yyDollar[1].token
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:964
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:970
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:993
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:997
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1001
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1005
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1009
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1013
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 171:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1017
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 172:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1021
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1025
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1029
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1033
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1037
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1041
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1045
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1049
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1053
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 181:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1057
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1061
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1065
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1071
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1075
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1079
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1083
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1087
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1091
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1095
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1101
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1105
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1109
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1113
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1119
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1123
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1129
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Option: yyDollar[3].expression.(AggregateOption)}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1133
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1139
		{
			yyVAL.expression = AggregateOption{Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}}}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1143
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[2].token)}}}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1147
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{yyDollar[2].expression}}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1153
		{
			orderBy := OrderByClause{OrderBy: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Items: yyDollar[6].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: orderBy}
		}
	case 203:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1158
		{
			orderBy := OrderByClause{OrderBy: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Items: yyDollar[7].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: orderBy}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1163
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: yyDollar[4].expression, SeparatorLit: yyDollar[5].token.Literal, Separator: yyDollar[6].token.Literal}
		}
	case 205:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1167
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: yyDollar[5].expression, SeparatorLit: yyDollar[6].token.Literal, Separator: yyDollar[7].token.Literal}
		}
	case 206:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1173
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Over: yyDollar[4].token.Literal, AnalyticClause: yyDollar[6].expression.(AnalyticClause)}
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1177
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1183
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1189
		{
			yyVAL.expression = nil
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1193
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1199
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier}
		}
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1203
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, Alias: yyDollar[2].identifier}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1207
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1213
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1217
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1223
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1227
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1231
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1235
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1239
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1243
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1249
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1253
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1257
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 225:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1261
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1265
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 227:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1271
		{
			yyVAL.expression = nil
		}
	case 228:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1275
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1279
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1285
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1289
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1295
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1299
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1303
		{
			yyVAL.expression = Field{Object: AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1309
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1315
		{
			yyVAL.expression = nil
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1319
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1325
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1329
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1335
		{
			yyVAL.expression = nil
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1339
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1345
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1349
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1355
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1359
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1365
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1369
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1375
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1379
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1385
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1389
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1395
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1399
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 254:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1405
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 255:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1409
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1413
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 257:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1417
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1423
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1429
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression.(FieldReference), Value: yyDollar[3].expression}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1435
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1439
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 262:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1445
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 263:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1450
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1457
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1461
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1467
		{
			yyVAL.procexpr = nil
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1471
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1477
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1481
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1487
		{
			yyVAL.procexpr = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1491
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1497
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1501
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1507
		{
			yyVAL.procexpr = nil
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1511
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1517
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 277:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1521
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 278:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1527
		{
			yyVAL.procexpr = nil
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1531
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1537
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1543
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1549
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1555
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1561
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1567
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1573
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1579
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1585
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1589
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1595
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1601
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1605
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1611
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1615
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1621
		{
			yyVAL.token = Token{}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1625
		{
			yyVAL.token = yyDollar[1].token
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1631
		{
			yyVAL.token = Token{}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1635
		{
			yyVAL.token = yyDollar[1].token
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1641
		{
			yyVAL.token = Token{}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1645
		{
			yyVAL.token = yyDollar[1].token
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1651
		{
			yyVAL.token = Token{}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1655
		{
			yyVAL.token = yyDollar[1].token
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1661
		{
			yyVAL.token = Token{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1665
		{
			yyVAL.token = yyDollar[1].token
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1669
		{
			yyVAL.token = yyDollar[1].token
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1673
		{
			yyVAL.token = yyDollar[1].token
		}
	case 307:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1679
		{
			yyVAL.token = Token{}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1683
		{
			yyVAL.token = yyDollar[1].token
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1689
		{
			yyVAL.token = Token{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1693
		{
			yyVAL.token = yyDollar[1].token
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1700
		{
			yyVAL.token = yyDollar[1].token
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1704
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 313:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1711
		{
			yyVAL.token = Token{}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1715
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
