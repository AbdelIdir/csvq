//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const TIES = 57388
const PERCENT = 57389
const JOIN = 57390
const INNER = 57391
const OUTER = 57392
const LEFT = 57393
const RIGHT = 57394
const FULL = 57395
const CROSS = 57396
const ON = 57397
const USING = 57398
const NATURAL = 57399
const UNION = 57400
const INTERSECT = 57401
const EXCEPT = 57402
const ALL = 57403
const ANY = 57404
const EXISTS = 57405
const IN = 57406
const AND = 57407
const OR = 57408
const NOT = 57409
const BETWEEN = 57410
const LIKE = 57411
const IS = 57412
const NULL = 57413
const NULLS = 57414
const DISTINCT = 57415
const WITH = 57416
const CASE = 57417
const IF = 57418
const ELSEIF = 57419
const WHILE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const DO = 57424
const END = 57425
const DECLARE = 57426
const CURSOR = 57427
const FOR = 57428
const FETCH = 57429
const OPEN = 57430
const CLOSE = 57431
const DISPOSE = 57432
const NEXT = 57433
const PRIOR = 57434
const ABSOLUTE = 57435
const RELATIVE = 57436
const RANGE = 57437
const SEPARATOR = 57438
const PARTITION = 57439
const OVER = 57440
const COMMIT = 57441
const ROLLBACK = 57442
const CONTINUE = 57443
const BREAK = 57444
const EXIT = 57445
const PRINT = 57446
const PRINTF = 57447
const SOURCE = 57448
const FUNCTION = 57449
const BEGIN = 57450
const RETURN = 57451
const VAR = 57452
const COMPARISON_OP = 57453
const STRING_OP = 57454
const SUBSTITUTION_OP = 57455

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"TIES",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"NULLS",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"BEGIN",
	"RETURN",
	"VAR",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"';'",
	"'*'",
	"'='",
	"'+'",
	"'-'",
	"'/'",
	"'%'",
	"'('",
	"')'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1698

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 116,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 89,
	58, 96,
	59, 96,
	60, 96,
	-2, 107,
	-1, 119,
	64, 292,
	68, 292,
	69, 292,
	-2, 308,
	-1, 121,
	64, 292,
	68, 292,
	69, 292,
	-2, 237,
	-1, 131,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 153,
	79, 230,
	-2, 292,
	-1, 163,
	83, 3,
	-2, 116,
	-1, 193,
	4, 83,
	-2, 292,
	-1, 194,
	4, 84,
	-2, 292,
	-1, 209,
	70, 0,
	111, 0,
	116, 0,
	-2, 161,
	-1, 210,
	70, 0,
	111, 0,
	116, 0,
	-2, 163,
	-1, 229,
	96, 107,
	122, 237,
	-2, 292,
	-1, 244,
	77, 3,
	81, 3,
	83, 3,
	-2, 116,
	-1, 263,
	48, 294,
	50, 298,
	-2, 239,
	-1, 281,
	64, 292,
	68, 292,
	69, 292,
	-2, 223,
	-1, 291,
	64, 292,
	68, 292,
	69, 292,
	-2, 287,
	-1, 308,
	83, 1,
	-2, 116,
	-1, 314,
	70, 0,
	111, 0,
	116, 0,
	-2, 172,
	-1, 321,
	96, 107,
	122, 194,
	-2, 292,
	-1, 339,
	83, 3,
	-2, 116,
	-1, 342,
	64, 292,
	68, 292,
	69, 292,
	-2, 112,
	-1, 346,
	64, 292,
	68, 292,
	69, 292,
	-2, 152,
	-1, 359,
	50, 298,
	-2, 294,
	-1, 372,
	64, 292,
	68, 292,
	69, 292,
	-2, 102,
	-1, 408,
	83, 234,
	-2, 292,
	-1, 418,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 420,
	64, 292,
	68, 292,
	69, 292,
	-2, 115,
	-1, 467,
	83, 5,
	-2, 116,
	-1, 471,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 477,
	79, 231,
	81, 231,
	83, 231,
	-2, 292,
	-1, 486,
	77, 1,
	81, 1,
	83, 1,
	-2, 25,
	-1, 496,
	64, 292,
	68, 292,
	69, 292,
	-2, 252,
	-1, 502,
	64, 292,
	68, 292,
	69, 292,
	-2, 106,
	-1, 510,
	64, 292,
	68, 292,
	69, 292,
	-2, 59,
	-1, 517,
	77, 5,
	81, 5,
	83, 5,
	-2, 116,
	-1, 524,
	83, 5,
	-2, 116,
	-1, 535,
	83, 3,
	-2, 116,
	-1, 562,
	64, 292,
	68, 292,
	69, 292,
	-2, 308,
	-1, 575,
	64, 292,
	68, 292,
	69, 292,
	-2, 221,
	-1, 585,
	77, 5,
	81, 5,
	83, 5,
	-2, 116,
	-1, 586,
	83, 7,
	-2, 116,
	-1, 592,
	77, 3,
	81, 3,
	83, 3,
	-2, 116,
	-1, 601,
	77, 7,
	81, 7,
	83, 7,
	-2, 116,
	-1, 616,
	83, 5,
	-2, 116,
	-1, 622,
	83, 7,
	-2, 116,
	-1, 630,
	77, 5,
	81, 5,
	83, 5,
	-2, 116,
	-1, 634,
	77, 1,
	81, 5,
	83, 5,
	-2, 116,
	-1, 637,
	77, 5,
	81, 5,
	83, 5,
	-2, 27,
	-1, 642,
	109, 23,
	-2, 20,
	-1, 647,
	83, 7,
	-2, 116,
	-1, 660,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 661,
	83, 3,
	-2, 116,
	-1, 665,
	77, 7,
	81, 7,
	83, 7,
	-2, 116,
	-1, 667,
	109, 47,
	-2, 44,
	-1, 673,
	83, 3,
	-2, 116,
	-1, 675,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
}

const yyPrivate = 57344

const yyLast = 2173

var yyAct = [...]int{

	65, 24, 645, 24, 656, 399, 579, 544, 243, 86,
	614, 533, 456, 166, 570, 429, 421, 437, 49, 147,
	301, 207, 1, 451, 41, 411, 351, 263, 105, 106,
	599, 360, 347, 278, 262, 358, 174, 306, 457, 271,
	94, 343, 136, 71, 69, 123, 52, 101, 323, 274,
	264, 169, 374, 150, 379, 120, 363, 150, 364, 365,
	366, 361, 2, 132, 359, 509, 140, 38, 138, 139,
	141, 142, 493, 151, 89, 95, 150, 91, 160, 92,
	140, 90, 138, 139, 141, 142, 267, 269, 127, 480,
	432, 424, 171, 171, 393, 377, 165, 40, 165, 181,
	182, 259, 200, 600, 348, 186, 613, 611, 190, 191,
	192, 598, 248, 594, 567, 566, 529, 156, 318, 528,
	184, 513, 511, 508, 505, 492, 201, 482, 481, 95,
	362, 479, 24, 463, 450, 61, 39, 145, 39, 396,
	135, 392, 170, 170, 173, 144, 143, 145, 38, 317,
	135, 227, 38, 289, 226, 87, 225, 37, 140, 37,
	582, 103, 141, 142, 24, 251, 576, 235, 554, 257,
	550, 184, 260, 171, 298, 252, 171, 389, 211, 205,
	284, 133, 132, 97, 97, 140, 134, 138, 139, 141,
	142, 133, 132, 331, 329, 140, 134, 138, 139, 141,
	142, 232, 89, 198, 349, 302, 235, 433, 304, 327,
	273, 285, 282, 307, 204, 206, 305, 97, 296, 100,
	195, 3, 79, 81, 43, 187, 245, 276, 277, 524,
	145, 127, 62, 26, 290, 26, 465, 97, 467, 129,
	551, 517, 295, 319, 504, 24, 297, 78, 79, 81,
	581, 82, 83, 335, 476, 311, 310, 284, 404, 354,
	171, 483, 356, 203, 43, 385, 367, 39, 416, 382,
	664, 171, 654, 299, 154, 638, 112, 113, 129, 155,
	633, 624, 619, 591, 589, 333, 302, 383, 354, 354,
	568, 108, 415, 556, 128, 487, 470, 407, 397, 39,
	302, 253, 357, 334, 387, 369, 380, 245, 121, 24,
	170, 355, 673, 84, 622, 373, 130, 375, 376, 339,
	390, 616, 103, 233, 68, 381, 67, 50, 85, 233,
	400, 324, 649, 128, 80, 406, 110, 111, 114, 115,
	24, 629, 253, 119, 537, 398, 107, 648, 419, 617,
	354, 647, 536, 616, 309, 413, 535, 414, 308, 417,
	80, 648, 309, 171, 26, 536, 670, 663, 640, 441,
	632, 609, 590, 146, 428, 526, 469, 37, 284, 447,
	39, 541, 153, 383, 423, 159, 354, 180, 431, 137,
	491, 436, 242, 145, 302, 435, 26, 440, 410, 449,
	662, 459, 245, 587, 284, 162, 164, 161, 82, 442,
	282, 446, 213, 275, 466, 177, 212, 214, 239, 24,
	241, 240, 238, 193, 194, 284, 438, 485, 216, 215,
	253, 548, 500, 354, 37, 171, 202, 498, 439, 488,
	171, 208, 209, 210, 39, 473, 434, 217, 218, 219,
	220, 221, 222, 223, 499, 354, 354, 489, 341, 495,
	229, 512, 497, 255, 157, 503, 490, 501, 24, 596,
	84, 494, 24, 426, 427, 39, 284, 26, 176, 177,
	178, 486, 56, 11, 475, 11, 445, 24, 281, 403,
	256, 444, 371, 527, 354, 167, 291, 460, 516, 171,
	534, 171, 458, 286, 287, 99, 532, 98, 41, 543,
	383, 363, 288, 364, 365, 366, 361, 530, 24, 359,
	126, 312, 553, 314, 563, 24, 547, 38, 549, 539,
	540, 560, 552, 514, 468, 395, 24, 378, 294, 321,
	168, 26, 325, 272, 571, 368, 569, 258, 557, 171,
	452, 453, 454, 455, 39, 564, 336, 578, 363, 38,
	364, 365, 366, 175, 342, 346, 38, 574, 270, 172,
	118, 40, 26, 531, 474, 122, 577, 302, 38, 125,
	179, 372, 102, 70, 261, 66, 24, 24, 606, 597,
	615, 9, 352, 24, 595, 8, 7, 593, 245, 322,
	74, 610, 24, 39, 152, 618, 58, 39, 279, 280,
	266, 265, 580, 72, 11, 228, 612, 24, 401, 57,
	60, 53, 39, 24, 628, 59, 625, 54, 538, 425,
	345, 24, 344, 408, 124, 24, 340, 254, 24, 443,
	370, 646, 93, 16, 63, 109, 11, 626, 24, 655,
	420, 26, 51, 39, 653, 245, 527, 87, 4, 14,
	39, 24, 24, 668, 13, 641, 24, 10, 557, 42,
	15, 39, 12, 603, 24, 246, 24, 44, 45, 46,
	47, 48, 419, 519, 485, 5, 281, 601, 229, 518,
	88, 244, 0, 0, 0, 0, 104, 0, 0, 605,
	26, 116, 117, 0, 26, 620, 0, 0, 0, 0,
	0, 472, 346, 0, 605, 0, 0, 0, 477, 26,
	0, 39, 39, 0, 245, 0, 631, 11, 39, 0,
	0, 0, 0, 346, 636, 605, 245, 39, 486, 518,
	0, 0, 496, 605, 0, 0, 518, 0, 0, 0,
	26, 657, 39, 502, 0, 234, 237, 26, 39, 0,
	605, 0, 0, 0, 0, 0, 39, 510, 26, 671,
	39, 185, 0, 39, 667, 188, 189, 631, 605, 636,
	87, 0, 0, 39, 346, 0, 667, 0, 667, 196,
	197, 11, 199, 0, 0, 0, 39, 39, 0, 0,
	0, 39, 0, 0, 0, 55, 0, 518, 518, 39,
	0, 39, 0, 0, 313, 0, 315, 316, 26, 26,
	0, 0, 11, 518, 0, 26, 0, 96, 602, 558,
	559, 562, 0, 0, 26, 21, 0, 0, 518, 326,
	0, 0, 0, 602, 518, 572, 0, 0, 0, 26,
	0, 0, 518, 0, 575, 26, 642, 0, 0, 518,
	292, 293, 0, 26, 602, 0, 0, 26, 0, 518,
	26, 0, 637, 6, 0, 0, 0, 0, 0, 0,
	26, 158, 642, 642, 0, 0, 0, 518, 0, 602,
	0, 0, 0, 26, 26, 642, 0, 642, 26, 0,
	149, 11, 0, 602, 0, 0, 26, 602, 26, 0,
	0, 353, 0, 621, 0, 602, 0, 637, 0, 337,
	338, 0, 0, 0, 0, 0, 627, 0, 412, 0,
	412, 0, 412, 149, 0, 0, 0, 0, 148, 0,
	384, 386, 0, 0, 0, 0, 0, 0, 0, 412,
	11, 0, 651, 652, 11, 96, 0, 658, 0, 0,
	236, 236, 144, 143, 145, 388, 0, 135, 0, 11,
	391, 148, 0, 394, 0, 672, 0, 0, 268, 0,
	0, 268, 144, 143, 145, 0, 0, 135, 0, 38,
	78, 79, 81, 0, 82, 83, 40, 675, 0, 0,
	11, 0, 430, 0, 0, 0, 0, 11, 133, 132,
	0, 478, 140, 134, 138, 139, 141, 142, 11, 236,
	198, 236, 236, 0, 0, 0, 0, 0, 133, 132,
	0, 0, 140, 134, 138, 139, 141, 142, 430, 149,
	0, 149, 0, 0, 236, 328, 330, 332, 75, 0,
	0, 0, 76, 0, 0, 0, 84, 461, 0, 0,
	73, 0, 464, 0, 0, 0, 0, 0, 11, 11,
	77, 149, 0, 0, 0, 11, 268, 300, 0, 303,
	96, 412, 96, 96, 11, 353, 0, 484, 0, 0,
	0, 0, 0, 149, 0, 0, 0, 0, 0, 11,
	283, 0, 0, 80, 0, 11, 64, 506, 507, 148,
	0, 0, 0, 11, 0, 0, 0, 11, 0, 363,
	11, 364, 365, 366, 361, 545, 546, 359, 0, 0,
	11, 350, 0, 236, 0, 236, 144, 236, 145, 525,
	0, 135, 412, 11, 11, 0, 430, 0, 11, 0,
	0, 0, 0, 0, 236, 0, 11, 0, 11, 0,
	0, 0, 0, 149, 0, 149, 0, 149, 268, 0,
	38, 78, 79, 81, 0, 82, 83, 40, 0, 0,
	0, 0, 133, 132, 0, 555, 140, 134, 138, 139,
	141, 142, 561, 0, 0, 0, 565, 0, 0, 0,
	0, 148, 0, 148, 0, 148, 0, 573, 0, 0,
	0, 0, 0, 0, 0, 0, 236, 0, 0, 0,
	0, 0, 0, 0, 0, 149, 584, 0, 0, 75,
	0, 0, 588, 76, 0, 0, 0, 84, 0, 230,
	268, 73, 0, 0, 0, 268, 0, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 0, 0, 0, 607,
	608, 0, 0, 462, 0, 0, 0, 38, 78, 79,
	81, 0, 82, 83, 40, 0, 0, 0, 0, 623,
	0, 231, 0, 0, 80, 0, 236, 64, 448, 0,
	38, 78, 79, 81, 0, 82, 83, 40, 0, 635,
	0, 149, 639, 0, 268, 0, 268, 0, 0, 0,
	650, 0, 0, 0, 0, 0, 0, 0, 0, 659,
	0, 0, 144, 143, 145, 0, 75, 135, 149, 0,
	76, 0, 0, 669, 84, 0, 230, 0, 73, 515,
	674, 0, 0, 0, 0, 0, 0, 236, 77, 75,
	0, 0, 0, 76, 268, 0, 0, 84, 0, 0,
	0, 73, 0, 0, 0, 0, 542, 0, 133, 132,
	0, 77, 140, 134, 138, 139, 141, 142, 231, 224,
	198, 80, 0, 0, 64, 183, 38, 78, 79, 81,
	149, 82, 83, 40, 0, 38, 78, 79, 81, 0,
	82, 83, 40, 0, 80, 0, 0, 64, 183, 0,
	38, 78, 79, 81, 0, 82, 83, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 583, 0,
	38, 78, 79, 81, 0, 82, 83, 40, 0, 0,
	0, 0, 0, 0, 0, 75, 0, 0, 0, 76,
	0, 0, 0, 84, 75, 0, 0, 73, 76, 0,
	0, 0, 84, 0, 0, 37, 73, 77, 0, 75,
	0, 0, 0, 76, 0, 0, 77, 84, 0, 0,
	0, 73, 0, 0, 0, 0, 0, 422, 0, 75,
	0, 77, 0, 76, 0, 0, 43, 84, 0, 0,
	80, 73, 0, 64, 0, 144, 143, 145, 38, 80,
	135, 77, 64, 0, 423, 40, 0, 144, 143, 145,
	33, 320, 135, 0, 80, 0, 0, 64, 0, 0,
	22, 0, 665, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 0, 0, 64, 0, 0,
	0, 133, 132, 0, 0, 140, 134, 138, 139, 141,
	142, 0, 0, 133, 132, 0, 0, 140, 134, 138,
	139, 141, 142, 0, 144, 143, 145, 0, 37, 135,
	666, 0, 644, 0, 144, 143, 145, 0, 17, 135,
	0, 30, 27, 28, 29, 0, 0, 144, 143, 145,
	0, 661, 135, 31, 32, 249, 250, 20, 34, 35,
	36, 0, 660, 522, 25, 0, 0, 144, 143, 145,
	133, 132, 135, 43, 140, 134, 138, 139, 141, 142,
	133, 132, 634, 0, 140, 134, 138, 139, 141, 142,
	144, 143, 145, 133, 132, 135, 0, 140, 134, 138,
	139, 141, 142, 0, 0, 630, 0, 0, 0, 0,
	144, 143, 145, 133, 132, 135, 0, 140, 134, 138,
	139, 141, 142, 0, 0, 592, 0, 0, 0, 144,
	143, 145, 0, 0, 135, 0, 133, 132, 0, 0,
	140, 134, 138, 139, 141, 142, 586, 0, 0, 0,
	0, 0, 0, 144, 143, 145, 133, 132, 135, 0,
	140, 134, 138, 139, 141, 142, 0, 0, 585, 0,
	0, 0, 144, 143, 145, 133, 132, 135, 0, 140,
	134, 138, 139, 141, 142, 0, 0, 471, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 143, 145, 133,
	132, 135, 0, 140, 134, 138, 139, 141, 142, 405,
	0, 418, 0, 0, 0, 144, 143, 145, 133, 132,
	135, 0, 140, 134, 138, 139, 141, 142, 0, 0,
	409, 0, 0, 0, 0, 0, 144, 143, 145, 0,
	0, 135, 133, 132, 0, 0, 140, 134, 138, 139,
	141, 142, 0, 0, 144, 143, 145, 0, 0, 135,
	0, 133, 132, 0, 0, 140, 134, 138, 139, 141,
	142, 163, 0, 0, 0, 0, 0, 0, 0, 144,
	143, 145, 133, 132, 135, 0, 140, 134, 138, 139,
	141, 142, 0, 0, 131, 0, 0, 0, 0, 0,
	133, 132, 0, 0, 140, 134, 138, 139, 141, 142,
	0, 0, 0, 0, 0, 38, 144, 143, 145, 0,
	0, 135, 40, 0, 0, 133, 132, 33, 0, 140,
	134, 138, 139, 141, 142, 0, 0, 22, 0, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 38, 0, 0, 0, 0, 0, 0, 40,
	0, 0, 133, 132, 33, 0, 140, 134, 138, 139,
	141, 142, 0, 0, 22, 0, 0, 23, 0, 0,
	0, 0, 0, 0, 0, 37, 0, 604, 0, 521,
	0, 0, 0, 0, 0, 523, 0, 0, 30, 27,
	28, 29, 0, 0, 0, 0, 0, 0, 0, 0,
	31, 32, 249, 250, 0, 34, 35, 36, 0, 0,
	522, 25, 37, 0, 247, 0, 19, 0, 402, 143,
	145, 0, 17, 135, 38, 30, 27, 28, 29, 0,
	0, 40, 0, 0, 0, 0, 33, 31, 32, 249,
	250, 20, 34, 35, 36, 0, 22, 0, 25, 23,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 133, 132, 0, 38, 140, 134,
	138, 139, 141, 142, 40, 0, 0, 0, 0, 33,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 22,
	0, 0, 23, 0, 37, 0, 643, 0, 644, 0,
	0, 0, 0, 0, 17, 0, 38, 30, 27, 28,
	29, 0, 0, 40, 0, 0, 0, 0, 33, 31,
	32, 0, 0, 20, 34, 35, 36, 0, 22, 522,
	25, 23, 0, 0, 0, 0, 0, 37, 0, 520,
	0, 521, 0, 0, 0, 0, 0, 523, 0, 0,
	30, 27, 28, 29, 0, 0, 0, 0, 0, 0,
	0, 0, 31, 32, 0, 0, 0, 34, 35, 36,
	0, 0, 522, 25, 0, 0, 37, 0, 18, 0,
	19, 0, 0, 0, 0, 0, 17, 0, 0, 30,
	27, 28, 29, 0, 0, 0, 0, 0, 0, 0,
	0, 31, 32, 0, 0, 20, 34, 35, 36, 0,
	0, 0, 25,
}
var yyPact = [...]int{

	2062, -1000, 2062, -1000, -1000, -1000, 110, 110, 110, 110,
	110, 110, -1000, -1000, -1000, -1000, -1000, 574, 1426, 1426,
	110, 62, 477, 475, 98, 560, 110, 574, 574, 261,
	245, 110, 110, 558, 1426, 1426, 570, 495, -1000, 118,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 209,
	1764, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 118, -1000, -1000, 1391, -48, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 1426, 163, 96, 1426, 574, -1000, -1000,
	216, -1000, -1000, -1000, -1000, 1739, 342, -25, -1000, 457,
	520, 574, 555, 549, 420, 314, -1000, 303, 574, 574,
	1286, 110, -18, 112, -1000, 110, 110, 574, 574, 574,
	-1000, -1000, -1000, -1000, 1426, 1426, -1000, -1000, 104, 1509,
	110, 897, 110, -1000, -21, 574, -1000, 1426, 177, 93,
	94, 2062, 1426, 1426, 1426, 326, 348, 367, 1426, 1426,
	1426, 1426, 1426, 1426, 1426, -1000, 1257, 34, 32, 116,
	574, 1263, 244, 1801, 46, 46, 354, 359, -1000, 70,
	322, -1000, -1000, 1898, 574, 560, 419, 449, 574, 531,
	-22, 562, 63, 554, 525, 63, 352, 352, 352, 985,
	-1000, 90, 476, -1000, 31, -1000, 560, 1426, -1000, -1000,
	110, 110, 518, 1801, 1801, 242, -1000, -1000, 1426, -1000,
	495, 152, 1801, 303, 574, 303, 86, 277, -35, -49,
	-49, 399, 1426, 46, 1426, 46, 46, 43, 43, -1000,
	-1000, -1000, 1071, 70, -1000, -1000, -1000, -1000, 27, 80,
	1406, -1000, 250, 1426, -1000, 1391, -1000, -1000, 46, 88,
	73, 72, 326, 220, 1898, -1000, -1000, 1426, -1000, 110,
	110, 237, -1000, -27, 413, 1426, 1426, 83, 574, 574,
	-1000, 574, 525, 7, -1000, 523, -1000, -1000, -1000, -1000,
	63, 453, 1426, -1000, 116, -1000, 116, 116, -1000, -28,
	515, 1801, -1000, -1000, -67, 574, 148, 144, 574, -1000,
	-1000, 1801, -1000, -1000, 560, 110, -1000, -1000, 56, 574,
	110, 19, -29, 110, 513, 17, 215, 277, 2062, 1426,
	-1000, -1000, 1913, -1000, -49, -1000, -1000, -1000, 448, 162,
	-1000, 1721, 214, 244, 1426, 1700, 333, 85, -1000, 85,
	-1000, 85, -1000, 204, 281, -1000, 1681, -1000, -1000, 1898,
	-1000, 1426, 1440, -1000, -32, 431, 1801, -1000, 46, 574,
	-1000, 549, -33, 91, -71, -1000, -1000, -1000, 398, 509,
	376, 390, 63, -1000, -1000, -1000, -1000, -1000, 574, 525,
	451, 445, 1801, 356, -1000, -1000, 356, 985, 574, 1166,
	12, 519, 574, 467, -1000, 574, 460, 110, -1000, 303,
	11, -1000, 150, 574, -1000, 130, 512, 300, 213, 285,
	-1000, 1657, 1426, 1426, 569, 443, 158, -1000, 1801, 1426,
	46, 9, -34, 6, 5, -1000, 166, 110, 1898, 212,
	1801, -1000, 310, 411, 1426, 318, -1000, -1000, -1000, 3,
	-51, 525, 574, 1426, 63, 389, 376, 384, -1000, 63,
	-1000, -1000, -1000, -1000, 1426, 1426, -1000, -1000, 146, 2,
	-1000, -1000, -1000, -1000, 574, 574, 1, -58, 1426, 0,
	574, -1000, -1, 511, -1000, 303, -1000, 2023, 121, 110,
	299, 2062, 70, -3, -6, 1426, 568, 1801, -1000, -1000,
	46, -1000, -1000, -1000, -1000, 275, 2062, 266, -1000, -1000,
	-1000, 498, 360, 574, -1000, -1000, 1801, 1070, 63, 383,
	63, 462, 1801, -1000, 49, 142, -1000, -1000, 519, 574,
	1801, -1000, -1000, -1000, 47, 110, 210, 2023, -1000, -1000,
	1426, 1426, 1382, 574, 2023, -1000, 110, -1000, -1000, -1000,
	-7, -8, -1000, 207, 275, 1898, 1426, 110, -1000, -1000,
	-1000, 46, -1000, -1000, -1000, 1426, 45, 462, 63, 1070,
	153, 39, -1000, -1000, 303, -1000, 110, -1000, 1638, 1614,
	339, -1000, 1509, 248, 201, -1000, -1000, -1000, 296, 200,
	288, -1000, 1595, -1000, -1000, 1801, 574, 462, -1000, -9,
	457, 428, 153, -11, -1000, 2023, 1861, 574, -1000, 110,
	110, 295, 1898, -15, -1000, -1000, 1426, -16, -1000, 272,
	199, 1861, -1000, -1000, 1426, -1000, 232, -1000, -1000, 110,
	-1000, -1000, -1000, -1000, 198, 240, 2023, 1426, 285, 263,
	-1000, 1575, 1861, -1000, 294, 197, -1000, 1552, 285, 110,
	1861, 192, 110, 292, 1980, -1000, 270, 2023, 254, -1000,
	110, -1000, -1000, 1426, 1426, 189, 270, 1861, 1426, 110,
	-1000, 1532, 1519, 336, 291, 187, 284, -1000, 1452, -1000,
	1980, 1504, 574, 110, 290, 1861, 1426, -1000, 230, -1000,
	110, -1000, 917, 1504, -1000, 1504,
}
var yyPgo = [...]int{

	0, 21, 8, 30, 103, 221, 62, 241, 691, 687,
	685, 683, 112, 675, 673, 672, 670, 667, 38, 12,
	23, 664, 659, 658, 645, 644, 643, 873, 52, 40,
	642, 36, 39, 640, 639, 13, 637, 16, 636, 835,
	634, 45, 46, 652, 308, 600, 25, 41, 632, 630,
	629, 628, 805, 627, 625, 621, 620, 482, 619, 615,
	613, 32, 6, 612, 50, 611, 27, 610, 7, 609,
	608, 606, 604, 48, 599, 15, 19, 34, 51, 20,
	33, 596, 595, 592, 26, 591, 5, 37, 14, 11,
	590, 10, 4, 2, 0, 585, 326, 324, 44, 583,
	43, 135, 9, 232, 582, 47, 580, 42, 35, 17,
	31, 49, 579, 389, 669,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	6, 6, 6, 7, 7, 8, 8, 9, 9, 10,
	10, 10, 10, 10, 11, 11, 11, 11, 11, 11,
	12, 12, 13, 13, 13, 14, 14, 14, 15, 15,
	16, 16, 17, 17, 17, 17, 17, 17, 18, 18,
	19, 19, 20, 20, 20, 20, 20, 21, 21, 21,
	21, 21, 22, 22, 22, 22, 23, 23, 24, 24,
	24, 24, 24, 24, 24, 25, 25, 26, 26, 26,
	26, 27, 28, 28, 28, 28, 29, 29, 30, 31,
	31, 32, 32, 33, 33, 34, 34, 35, 35, 36,
	36, 36, 37, 37, 38, 38, 39, 39, 40, 40,
	41, 41, 42, 42, 42, 42, 42, 42, 43, 43,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 45, 45, 46, 46, 47, 47,
	48, 48, 49, 49, 50, 50, 50, 51, 51, 52,
	53, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	55, 55, 55, 55, 55, 56, 56, 56, 57, 57,
	58, 58, 59, 59, 59, 60, 60, 60, 60, 61,
	61, 62, 63, 63, 64, 64, 64, 65, 65, 66,
	66, 66, 66, 66, 66, 67, 67, 67, 67, 67,
	68, 68, 68, 69, 69, 69, 70, 70, 71, 72,
	72, 73, 73, 74, 74, 75, 75, 76, 76, 77,
	77, 78, 78, 79, 79, 80, 80, 81, 81, 81,
	81, 82, 83, 84, 84, 85, 85, 86, 86, 87,
	87, 88, 88, 89, 89, 90, 90, 91, 91, 92,
	92, 93, 93, 94, 95, 96, 96, 97, 97, 98,
	99, 100, 101, 102, 102, 103, 104, 104, 105, 105,
	106, 106, 107, 107, 108, 108, 109, 109, 110, 110,
	110, 110, 111, 111, 112, 112, 113, 113, 114, 114,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	9, 7, 9, 2, 8, 9, 7, 9, 2, 3,
	2, 2, 8, 9, 1, 8, 9, 1, 3, 2,
	2, 2, 6, 6, 8, 5, 7, 7, 1, 3,
	1, 3, 0, 1, 1, 2, 2, 6, 3, 3,
	4, 6, 7, 9, 6, 4, 10, 11, 0, 1,
	1, 1, 1, 2, 2, 5, 6, 5, 3, 3,
	3, 5, 5, 4, 4, 4, 1, 1, 3, 0,
	2, 0, 2, 0, 3, 0, 2, 0, 3, 0,
	3, 4, 0, 2, 0, 2, 0, 2, 6, 9,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 1, 1, 3, 1, 3,
	2, 4, 1, 1, 0, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 4, 4, 6, 6, 4,
	6, 4, 4, 4, 6, 4, 4, 6, 4, 2,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 4,
	4, 1, 1, 2, 2, 7, 8, 7, 8, 7,
	8, 2, 0, 3, 1, 2, 3, 1, 1, 1,
	1, 2, 3, 1, 1, 5, 5, 6, 6, 4,
	0, 2, 4, 1, 1, 1, 1, 3, 5, 0,
	1, 4, 2, 0, 2, 1, 3, 1, 3, 1,
	3, 1, 3, 1, 3, 1, 3, 6, 9, 5,
	8, 7, 3, 1, 3, 5, 6, 4, 2, 0,
	2, 4, 2, 0, 2, 4, 2, 0, 2, 4,
	2, 0, 2, 1, 1, 1, 2, 1, 2, 1,
	1, 1, 1, 1, 3, 3, 1, 3, 1, 3,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
	1, 1, 0, 1, 0, 1, 1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -23, -10, -27, -81, -82, -85,
	-17, -57, -15, -21, -22, -16, -26, 84, 76, 78,
	103, -39, 26, 29, -94, 110, -103, 88, 89, 90,
	87, 99, 100, 16, 104, 105, 106, 74, 4, -101,
	11, -1, -114, 114, -114, -114, -114, -114, -114, -94,
	-44, -43, -42, -55, -53, -52, -57, -58, -71, -54,
	-56, -101, -103, -25, 121, -94, -95, -96, -97, -98,
	-99, -100, -60, 75, -45, 63, 67, 85, 5, 6,
	118, 7, 9, 10, 71, -44, -102, -101, -114, -28,
	19, 15, 17, -30, -29, 13, -52, 121, 30, 30,
	121, -105, -104, -101, -114, -94, -94, 85, 30, -24,
	91, 92, 31, 32, 93, 94, -114, -114, 12, -44,
	-76, -44, 5, -41, -40, -112, 25, 113, 85, 30,
	107, 80, 112, 111, 116, 70, -107, -113, 117, 118,
	115, 119, 120, 66, 65, 67, -44, -76, -27, -39,
	124, 121, -72, -44, 111, 116, -107, -113, -52, -44,
	-94, -96, -97, 82, 64, 123, -35, 38, 20, -78,
	-64, -94, 14, -78, -31, 14, 58, 59, 60, -106,
	73, -94, -94, 122, -76, -114, 123, 113, -114, -114,
	-94, -94, -94, -44, -44, 116, -114, -114, 123, -114,
	123, -94, -44, 86, 121, 86, 121, -1, -44, -44,
	-44, -107, 68, 64, 69, 62, 61, -44, -44, -44,
	-44, -44, -44, -44, 122, 122, 122, -94, -59, -44,
	73, 115, -73, 79, -45, 121, -52, -45, 68, 64,
	62, 61, 70, -2, -8, -6, -13, 76, -12, 101,
	102, -94, -102, -101, -36, 44, 41, -94, 16, 123,
	-94, 22, -77, -66, -64, -65, -67, 23, -52, 24,
	14, -32, 18, -77, -111, 61, -111, -111, -80, -70,
	-69, -44, -61, 115, -94, 121, 27, 28, 36, 122,
	-105, -44, -114, -114, 20, -42, -76, -41, 22, 121,
	-27, -79, -94, -27, 122, -102, -87, -86, 81, 77,
	-98, -100, -44, -45, -44, -45, -45, 122, 38, -35,
	115, -44, -74, -73, 81, -44, -45, 121, -52, 121,
	-52, 121, -52, -107, 83, -2, -44, -114, -114, 82,
	-38, 45, -44, -47, -48, -49, -44, -61, 21, 121,
	-27, -84, -83, -43, -94, -78, -94, -32, -108, 57,
	-110, 54, 123, 49, 51, 52, 53, -94, 22, -77,
	-33, 39, -44, -29, -28, -29, -29, 123, 22, 121,
	-79, -18, 121, -94, -43, 121, -43, -102, -114, 121,
	-79, -114, 122, 123, -114, 22, 122, 83, -87, -86,
	-1, -44, 65, 41, 96, 38, -35, 83, -44, 80,
	65, -46, -45, -46, -46, 88, 64, 78, 80, -2,
	-44, -37, 47, 74, 123, -50, 42, 43, -46, -75,
	-43, -31, 123, 116, 48, -108, -110, -109, 50, 48,
	-77, -94, -32, -34, 40, 41, -80, -94, 122, -76,
	122, -20, 31, 32, 33, 34, -19, -18, 35, -75,
	37, -114, -27, 122, -114, 86, -79, 108, 22, 76,
	83, 80, -44, -47, 5, 41, 96, -44, -45, 122,
	123, 122, 122, 95, -114, -2, -6, 83, -37, 46,
	-47, 72, 122, 123, -32, -84, -44, -66, 48, -109,
	48, -66, -44, -76, 98, 122, -43, -43, 122, 123,
	-44, 122, -94, 122, 22, -27, -3, -7, -5, -11,
	76, 78, 109, 84, 108, -114, 76, -1, 122, 122,
	-47, 5, -46, -89, -88, 81, 77, 78, -51, 31,
	32, 21, -27, -75, -68, 55, 56, -66, 48, -66,
	121, 98, -20, -19, 121, -114, 83, -3, -44, -44,
	-102, -114, -44, -94, -3, -114, 122, 122, 83, -89,
	-88, -2, -44, -114, -46, -44, 121, -66, -68, -62,
	-63, 97, 121, -27, -114, 80, 82, 64, -114, 83,
	76, 83, 80, -79, 122, -35, 41, -62, 122, -3,
	-4, -9, -7, -14, 76, -12, -94, -114, -114, 76,
	-2, 122, -76, 122, -91, -90, 81, 77, -86, 83,
	-4, -44, 82, -114, 83, -91, -3, -44, -86, 78,
	80, -4, 76, 83, 80, -114, -4, -7, 83, -114,
	76, -3, -5, 76, 78, -93, -92, 81, 77, 78,
	-114, -44, -44, -102, 83, -93, -92, -4, -44, -114,
	80, 82, 64, 76, 83, 80, 76, -12, -94, -114,
	76, -4, -44, 82, -114, 80,
}
var yyDef = [...]int{

	-2, -2, -2, 20, 21, 22, 308, 308, 308, 308,
	308, 308, 15, 16, 17, 18, 19, 0, 0, 0,
	308, 0, 0, 0, 0, 0, 308, 0, 0, 0,
	78, 308, 308, 0, 0, 0, 0, 304, 273, 0,
	282, 2, 9, 309, 10, 11, 12, 13, 14, 0,
	292, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 116, 128, 122, 123, 124, 125,
	126, 127, 191, 229, 292, 0, 0, 0, 274, 275,
	0, 277, 279, 280, 281, 292, 0, 140, 33, -2,
	0, 0, 0, 99, 0, 290, 97, 116, 0, 0,
	0, 308, 288, 286, 49, 308, 308, 0, 0, 0,
	79, 80, 81, 82, 0, 0, 50, 51, 0, -2,
	308, -2, 308, 117, 120, 0, 305, 0, 0, 0,
	0, -2, 0, 306, 307, 292, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 292, 0, 0, 0,
	0, 0, 0, -2, 306, 307, 0, 0, 179, 187,
	0, 276, 278, -2, 0, 0, 109, 0, 0, 0,
	241, 204, 0, 0, 101, 0, 302, 302, 302, 0,
	291, 0, 0, 188, 0, 48, 0, 0, 68, 69,
	308, 308, 0, -2, -2, 0, 88, 89, 0, 90,
	304, 0, 285, 116, 0, 116, 0, 259, 160, -2,
	-2, 0, 0, 0, 0, 0, 0, 180, 181, 182,
	183, 184, 185, 186, 143, 144, 159, 129, 0, -2,
	0, 192, 233, 0, 162, 116, 145, 164, 0, 0,
	0, 0, 292, 0, -2, 25, 26, 0, 44, 308,
	308, 0, 284, 283, 114, 0, 0, 116, 0, 0,
	205, 0, 101, -2, 209, 210, 213, 214, 207, 208,
	0, 103, 0, 100, 0, 303, 0, 0, 98, 245,
	226, -2, 224, 225, 128, 0, 0, 0, 0, 189,
	289, -2, 70, 75, 0, 308, 238, 121, 0, 0,
	308, 0, 243, 308, 0, 0, 0, 259, -2, 0,
	165, 166, 292, 169, -2, 173, 176, 190, 0, 0,
	193, -2, 0, 232, 0, 292, 0, 116, 171, 116,
	175, 116, 178, 0, 0, 4, 292, 40, 41, -2,
	91, 0, -2, 108, 148, 154, -2, 153, 0, 0,
	249, 99, 253, 0, 128, 242, 206, 255, 0, -2,
	296, 0, 0, 295, 299, 300, 301, 211, 0, 101,
	105, 0, -2, 93, 96, 94, 95, 0, 0, 0,
	0, 62, 0, 58, 55, 0, 0, 308, 87, 116,
	0, 67, 308, 0, 74, 0, 0, 0, 0, 258,
	260, 292, 0, 0, 0, 0, 0, 228, -2, 0,
	0, 0, 146, 0, 0, 85, 0, 308, -2, 0,
	-2, 110, 112, 0, 0, 150, 155, 156, 247, 0,
	235, 101, 0, 0, 0, 0, 296, 0, 297, 0,
	240, 212, 256, 92, 0, 0, 246, 227, 188, 0,
	52, 53, 63, 64, 0, 0, 0, 60, 0, 0,
	0, 71, 0, 0, 72, 116, 244, -2, 0, 308,
	0, -2, 167, 108, 0, 0, 0, -2, 168, 170,
	0, 174, 177, 86, 31, 263, -2, 0, 111, 113,
	149, 0, 116, 0, 251, 254, -2, 220, 0, 0,
	0, 219, -2, 104, 0, 189, 65, 66, 62, 0,
	-2, 56, 57, 118, 0, 308, 0, -2, 23, 24,
	0, 0, 308, 0, -2, 29, 308, 257, 195, 197,
	108, 0, 147, 0, 263, -2, 0, 308, 151, 157,
	158, 0, 250, 236, 215, 0, 0, 216, 0, 220,
	202, 0, 54, 61, 116, 73, 308, 6, 292, 292,
	0, 38, -2, 0, 0, 30, 196, 198, 0, 0,
	262, 264, 292, 32, 248, -2, 0, 218, 217, 0,
	107, 0, 202, 0, 76, -2, -2, 0, 39, 308,
	308, 0, -2, 0, 199, 201, 0, 0, 119, 267,
	0, -2, 27, 28, 0, 47, 0, 77, 42, 308,
	261, 222, 203, 200, 0, 267, -2, 0, 0, 0,
	8, 292, -2, 43, 0, 0, 268, 292, 266, 308,
	-2, 0, 308, 0, -2, 36, 271, -2, 0, 34,
	308, 265, -2, 0, 0, 0, 271, -2, 0, 308,
	35, 292, 292, 0, 0, 0, 270, 272, 292, 37,
	-2, -2, 0, 308, 0, -2, 0, -2, 0, 45,
	308, 269, 292, -2, 46, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 120, 3, 3,
	121, 122, 115, 117, 123, 118, 124, 119, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 114,
	3, 116,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:176
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:181
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:188
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:193
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:200
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:205
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:212
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:217
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:224
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:228
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:232
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:236
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:240
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:244
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:248
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:252
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:256
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:260
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:264
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:270
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:274
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:278
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:304
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:308
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:314
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:318
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:322
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 32:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:326
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:330
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:336
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:340
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:344
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:348
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:352
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:356
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:362
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:366
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:372
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:376
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:380
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:386
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:390
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:394
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:400
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:404
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:410
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:414
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:420
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:424
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 54:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:428
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:432
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 56:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:436
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:440
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression.(FieldReference), To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:446
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:450
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:456
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:460
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:466
		{
			yyVAL.expression = nil
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:470
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:474
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:478
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:482
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:488
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:492
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:496
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:500
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:504
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:510
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 73:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:514
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:518
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:522
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 76:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:528
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 77:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:532
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:538
		{
			yyVAL.expression = nil
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:542
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:546
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:550
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:554
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:558
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:562
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:568
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:572
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:578
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:582
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:586
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Values: yyDollar[2].expressions}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:590
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].token.Literal}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:596
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:608
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:618
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:627
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:636
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:647
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:651
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:657
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:663
		{
			yyVAL.expression = nil
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:667
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:673
		{
			yyVAL.expression = nil
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:677
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:683
		{
			yyVAL.expression = nil
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:687
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:693
		{
			yyVAL.expression = nil
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:697
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:703
		{
			yyVAL.expression = nil
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:707
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:713
		{
			yyVAL.expression = nil
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:717
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:721
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:727
		{
			yyVAL.expression = nil
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:731
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:737
		{
			yyVAL.expression = nil
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:741
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:747
		{
			yyVAL.expression = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:751
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:757
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 119:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:761
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:767
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:771
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:777
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:781
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:785
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:789
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:793
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:797
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:803
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Column: yyDollar[1].identifier}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:807
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:813
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:817
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:821
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:825
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:829
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:833
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:837
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:841
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:845
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:849
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:853
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:857
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:861
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:865
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:871
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:875
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:881
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:885
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:891
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:895
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:901
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:905
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:911
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:915
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:921
		{
			yyVAL.token = Token{}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:925
		{
			yyVAL.token = yyDollar[1].token
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:929
		{
			yyVAL.token = yyDollar[1].token
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:935
		{
			yyVAL.token = yyDollar[1].token
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:939
		{
			yyVAL.token = yyDollar[1].token
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:945
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:951
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:974
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:978
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:982
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:986
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:990
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:994
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:998
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1002
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1006
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1010
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1014
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1018
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1022
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1026
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1030
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1034
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1038
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1042
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1046
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1052
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1056
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1060
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1064
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1068
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1074
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1078
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1082
		{
			yyVAL.expression = Logic{LHS: nil, Operator: yyDollar[1].token, RHS: yyDollar[2].expression}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1088
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1092
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1098
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Option: yyDollar[3].expression.(AggregateOption)}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1102
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1108
		{
			yyVAL.expression = AggregateOption{Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}}}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1112
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[2].token)}}}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1116
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{yyDollar[2].expression}}
		}
	case 195:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1122
		{
			orderBy := OrderByClause{OrderBy: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Items: yyDollar[6].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: orderBy}
		}
	case 196:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1127
		{
			orderBy := OrderByClause{OrderBy: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Items: yyDollar[7].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: orderBy}
		}
	case 197:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1132
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: yyDollar[4].expression, SeparatorLit: yyDollar[5].token.Literal, Separator: yyDollar[6].token.Literal}
		}
	case 198:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1136
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: yyDollar[5].expression, SeparatorLit: yyDollar[6].token.Literal, Separator: yyDollar[7].token.Literal}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1142
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Over: yyDollar[4].token.Literal, AnalyticClause: yyDollar[6].expression.(AnalyticClause)}
		}
	case 200:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1146
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1152
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1158
		{
			yyVAL.expression = nil
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1162
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1168
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1172
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, Alias: yyDollar[2].identifier}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1176
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1182
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1192
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1196
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1200
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1204
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1208
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1212
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1218
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1222
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 217:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1226
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1230
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1234
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1240
		{
			yyVAL.expression = nil
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1244
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1248
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1254
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1258
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1262
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1268
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1272
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1278
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 229:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1284
		{
			yyVAL.expression = nil
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1288
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 231:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1294
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1298
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1304
		{
			yyVAL.expression = nil
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1308
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1314
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1318
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1324
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 238:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1328
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1334
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1338
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1344
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1348
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1354
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1358
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1364
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1368
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1374
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 248:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1378
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1382
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 250:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1386
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1392
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1398
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression.(FieldReference), Value: yyDollar[3].expression}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1404
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1408
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1414
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1419
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1426
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1430
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1436
		{
			yyVAL.procexpr = nil
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1440
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1446
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1450
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1456
		{
			yyVAL.procexpr = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1460
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1466
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1470
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1476
		{
			yyVAL.procexpr = nil
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1480
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1486
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1490
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1496
		{
			yyVAL.procexpr = nil
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1500
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1506
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1512
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1518
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1522
		{
			i := yyDollar[2].integer.Value() * -1
			yyVAL.integer = NewInteger(i)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1529
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1533
		{
			f := yyDollar[2].float.Value() * -1
			yyVAL.float = NewFloat(f)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1540
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1546
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1552
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1558
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1564
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1568
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1574
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1580
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1584
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1590
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1594
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 290:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1600
		{
			yyVAL.token = Token{}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1604
		{
			yyVAL.token = yyDollar[1].token
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1610
		{
			yyVAL.token = Token{}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1614
		{
			yyVAL.token = yyDollar[1].token
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1620
		{
			yyVAL.token = Token{}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1624
		{
			yyVAL.token = yyDollar[1].token
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1630
		{
			yyVAL.token = Token{}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1634
		{
			yyVAL.token = yyDollar[1].token
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1640
		{
			yyVAL.token = Token{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1644
		{
			yyVAL.token = yyDollar[1].token
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1648
		{
			yyVAL.token = yyDollar[1].token
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1652
		{
			yyVAL.token = yyDollar[1].token
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1658
		{
			yyVAL.token = Token{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1662
		{
			yyVAL.token = yyDollar[1].token
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1668
		{
			yyVAL.token = Token{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1672
		{
			yyVAL.token = yyDollar[1].token
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1679
		{
			yyVAL.token = yyDollar[1].token
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1683
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1690
		{
			yyVAL.token = Token{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1694
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
