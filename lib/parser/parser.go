//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	identifier  Identifier
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const TRIGGER = 57447
const FUNCTION = 57448
const AGGREGATE = 57449
const BEGIN = 57450
const RETURN = 57451
const IGNORE = 57452
const WITHIN = 57453
const VAR = 57454
const TIES = 57455
const NULLS = 57456
const ERROR = 57457
const COUNT = 57458
const LISTAGG = 57459
const AGGREGATE_FUNCTION = 57460
const FUNCTION_WITH_INS = 57461
const COMPARISON_OP = 57462
const STRING_OP = 57463
const SUBSTITUTION_OP = 57464
const UMINUS = 57465
const UPLUS = 57466

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"TRIGGER",
	"FUNCTION",
	"AGGREGATE",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"TIES",
	"NULLS",
	"ERROR",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_INS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1868

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 141,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 58,
	132, 222,
	-2, 141,
	-1, 100,
	57, 121,
	58, 121,
	59, 121,
	-2, 132,
	-1, 133,
	63, 332,
	67, 332,
	68, 332,
	-2, 348,
	-1, 135,
	63, 332,
	67, 332,
	68, 332,
	-2, 348,
	-1, 142,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 171,
	77, 271,
	-2, 332,
	-1, 181,
	81, 3,
	-2, 141,
	-1, 204,
	63, 332,
	67, 332,
	68, 332,
	-2, 278,
	-1, 221,
	63, 332,
	67, 332,
	68, 332,
	-2, 103,
	-1, 222,
	63, 332,
	67, 332,
	68, 332,
	-2, 104,
	-1, 229,
	63, 332,
	67, 332,
	68, 332,
	-2, 348,
	-1, 236,
	69, 0,
	120, 0,
	127, 0,
	-2, 192,
	-1, 237,
	69, 0,
	120, 0,
	127, 0,
	-2, 194,
	-1, 277,
	75, 3,
	79, 3,
	81, 3,
	-2, 141,
	-1, 296,
	47, 334,
	49, 338,
	-2, 280,
	-1, 314,
	63, 332,
	67, 332,
	68, 332,
	-2, 264,
	-1, 330,
	63, 332,
	67, 332,
	68, 332,
	-2, 327,
	-1, 342,
	63, 332,
	67, 332,
	68, 332,
	-2, 348,
	-1, 348,
	81, 1,
	-2, 141,
	-1, 354,
	69, 0,
	120, 0,
	127, 0,
	-2, 203,
	-1, 380,
	81, 3,
	-2, 141,
	-1, 381,
	81, 3,
	-2, 141,
	-1, 384,
	63, 332,
	67, 332,
	68, 332,
	-2, 137,
	-1, 388,
	63, 332,
	67, 332,
	68, 332,
	-2, 183,
	-1, 402,
	49, 338,
	-2, 334,
	-1, 415,
	63, 332,
	67, 332,
	68, 332,
	-2, 127,
	-1, 465,
	81, 275,
	-2, 332,
	-1, 476,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 479,
	63, 332,
	67, 332,
	68, 332,
	-2, 140,
	-1, 514,
	13, 141,
	131, 141,
	-2, 348,
	-1, 543,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 545,
	77, 272,
	79, 272,
	81, 272,
	-2, 332,
	-1, 555,
	75, 1,
	79, 1,
	81, 1,
	-2, 26,
	-1, 566,
	63, 332,
	67, 332,
	68, 332,
	-2, 293,
	-1, 572,
	63, 332,
	67, 332,
	68, 332,
	-2, 131,
	-1, 590,
	63, 332,
	67, 332,
	68, 332,
	-2, 68,
	-1, 595,
	81, 5,
	-2, 141,
	-1, 601,
	132, 88,
	135, 88,
	-2, 332,
	-1, 613,
	81, 3,
	-2, 141,
	-1, 645,
	75, 5,
	79, 5,
	81, 5,
	-2, 141,
	-1, 651,
	81, 5,
	-2, 141,
	-1, 652,
	81, 5,
	-2, 141,
	-1, 665,
	63, 332,
	67, 332,
	68, 332,
	-2, 262,
	-1, 687,
	63, 332,
	67, 332,
	68, 332,
	-2, 348,
	-1, 695,
	75, 3,
	79, 3,
	81, 3,
	-2, 141,
	-1, 708,
	75, 5,
	79, 5,
	81, 5,
	-2, 141,
	-1, 709,
	81, 7,
	-2, 141,
	-1, 715,
	81, 5,
	-2, 141,
	-1, 734,
	75, 7,
	79, 7,
	81, 7,
	-2, 141,
	-1, 754,
	81, 5,
	-2, 141,
	-1, 760,
	81, 7,
	-2, 141,
	-1, 761,
	81, 7,
	-2, 141,
	-1, 770,
	75, 5,
	79, 5,
	81, 5,
	-2, 141,
	-1, 776,
	75, 1,
	79, 5,
	81, 5,
	-2, 141,
	-1, 779,
	75, 5,
	79, 5,
	81, 5,
	-2, 28,
	-1, 785,
	109, 24,
	-2, 22,
	-1, 790,
	81, 7,
	-2, 141,
	-1, 806,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 807,
	81, 3,
	-2, 141,
	-1, 812,
	75, 7,
	79, 7,
	81, 7,
	-2, 141,
	-1, 814,
	109, 50,
	-2, 47,
	-1, 821,
	81, 3,
	-2, 141,
	-1, 822,
	81, 3,
	-2, 141,
	-1, 824,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
}

const yyPrivate = 57344

const yyLast = 2773

var yyAct = [...]int{

	72, 22, 732, 22, 801, 788, 456, 186, 97, 234,
	1, 752, 50, 296, 623, 522, 611, 278, 2, 517,
	2, 488, 659, 427, 59, 441, 468, 116, 276, 480,
	121, 122, 443, 497, 444, 313, 396, 310, 200, 303,
	403, 315, 295, 385, 401, 346, 697, 292, 195, 203,
	523, 147, 363, 79, 189, 137, 60, 281, 77, 112,
	417, 297, 162, 306, 164, 422, 155, 154, 156, 105,
	162, 146, 302, 808, 87, 406, 163, 407, 408, 409,
	404, 162, 100, 402, 536, 710, 115, 537, 589, 143,
	563, 151, 179, 548, 151, 733, 150, 149, 152, 153,
	52, 152, 153, 191, 191, 294, 646, 3, 158, 3,
	226, 205, 191, 534, 533, 515, 492, 293, 182, 483,
	216, 217, 144, 143, 220, 420, 183, 231, 151, 145,
	150, 149, 141, 208, 251, 152, 153, 252, 763, 174,
	232, 750, 731, 22, 141, 183, 325, 155, 185, 156,
	190, 190, 146, 49, 390, 481, 749, 183, 194, 206,
	2, 748, 405, 256, 151, 259, 150, 149, 747, 746,
	704, 152, 153, 155, 154, 156, 730, 141, 146, 722,
	721, 482, 22, 284, 717, 287, 716, 39, 653, 191,
	183, 634, 285, 293, 191, 633, 39, 191, 238, 632,
	631, 317, 258, 144, 143, 39, 630, 261, 262, 151,
	145, 150, 149, 604, 591, 703, 152, 153, 588, 275,
	580, 106, 100, 263, 293, 574, 562, 550, 549, 144,
	143, 547, 540, 532, 529, 151, 145, 150, 149, 305,
	514, 347, 152, 153, 474, 463, 266, 265, 268, 3,
	291, 51, 462, 461, 460, 323, 344, 333, 53, 54,
	55, 56, 308, 309, 391, 106, 322, 102, 329, 103,
	253, 101, 99, 255, 440, 254, 340, 702, 22, 117,
	339, 701, 700, 675, 130, 131, 669, 343, 3, 666,
	266, 317, 351, 393, 191, 399, 656, 350, 361, 410,
	654, 452, 357, 191, 332, 426, 376, 425, 424, 423,
	371, 369, 367, 335, 40, 353, 185, 355, 356, 398,
	334, 180, 108, 169, 428, 373, 168, 433, 399, 399,
	167, 109, 389, 428, 73, 400, 447, 493, 223, 108,
	156, 190, 52, 209, 366, 412, 428, 448, 395, 22,
	583, 141, 434, 436, 136, 273, 438, 676, 457, 70,
	27, 40, 27, 260, 207, 345, 2, 210, 561, 453,
	215, 559, 645, 218, 219, 674, 416, 431, 418, 419,
	552, 22, 22, 108, 3, 224, 225, 227, 228, 594,
	552, 635, 399, 455, 172, 490, 470, 715, 471, 652,
	39, 173, 274, 212, 651, 636, 191, 595, 706, 477,
	478, 673, 501, 672, 671, 670, 489, 487, 629, 699,
	551, 317, 507, 41, 42, 47, 43, 44, 45, 46,
	52, 126, 127, 433, 331, 49, 399, 811, 264, 799,
	781, 435, 469, 496, 469, 491, 469, 495, 500, 148,
	780, 775, 502, 52, 120, 3, 211, 526, 506, 473,
	489, 509, 510, 511, 512, 469, 764, 762, 336, 337,
	41, 42, 47, 43, 44, 45, 46, 22, 757, 213,
	214, 341, 472, 714, 317, 713, 694, 3, 3, 124,
	125, 128, 129, 399, 555, 191, 680, 657, 557, 556,
	191, 542, 27, 464, 454, 554, 375, 119, 567, 822,
	821, 558, 761, 571, 791, 760, 428, 398, 790, 793,
	381, 399, 399, 69, 48, 389, 48, 560, 592, 565,
	569, 564, 755, 380, 378, 379, 754, 175, 264, 584,
	364, 27, 546, 96, 22, 586, 587, 578, 754, 114,
	114, 792, 118, 608, 614, 573, 22, 769, 613, 616,
	615, 2, 475, 603, 399, 50, 598, 599, 597, 191,
	349, 191, 791, 2, 348, 609, 429, 612, 349, 614,
	818, 810, 626, 3, 628, 622, 783, 774, 489, 719,
	433, 449, 450, 693, 451, 607, 22, 541, 644, 39,
	620, 482, 201, 64, 9, 640, 9, 93, 639, 270,
	156, 467, 809, 269, 22, 155, 154, 156, 711, 184,
	146, 240, 307, 469, 198, 239, 241, 498, 191, 658,
	627, 807, 272, 271, 74, 75, 76, 27, 93, 78,
	570, 667, 660, 668, 243, 242, 22, 664, 681, 383,
	3, 39, 22, 22, 688, 689, 568, 499, 685, 197,
	198, 199, 3, 494, 692, 289, 48, 428, 94, 485,
	486, 144, 143, 724, 505, 290, 504, 151, 145, 150,
	149, 610, 516, 414, 152, 153, 525, 187, 527, 528,
	696, 530, 326, 327, 535, 469, 22, 524, 111, 94,
	538, 328, 618, 619, 110, 48, 723, 286, 27, 22,
	22, 739, 740, 140, 690, 605, 22, 602, 743, 596,
	3, 531, 705, 421, 720, 338, 188, 553, 304, 196,
	160, 132, 114, 49, 406, 22, 407, 408, 409, 756,
	27, 27, 518, 519, 520, 521, 9, 725, 726, 727,
	728, 729, 134, 139, 113, 22, 753, 766, 8, 397,
	7, 22, 22, 768, 6, 765, 581, 738, 362, 585,
	170, 22, 66, 311, 745, 312, 299, 22, 751, 784,
	22, 593, 681, 789, 298, 9, 608, 698, 85, 65,
	68, 22, 738, 606, 2, 800, 798, 61, 67, 62,
	617, 48, 3, 484, 387, 386, 138, 22, 22, 815,
	816, 382, 406, 22, 407, 408, 409, 404, 738, 738,
	402, 288, 22, 22, 2, 22, 503, 413, 738, 104,
	758, 17, 16, 71, 637, 123, 27, 14, 445, 442,
	202, 13, 555, 641, 642, 12, 10, 15, 738, 11,
	477, 478, 736, 554, 279, 647, 771, 772, 446, 655,
	4, 734, 286, 277, 0, 814, 778, 662, 663, 0,
	738, 0, 48, 0, 0, 0, 0, 0, 0, 814,
	814, 9, 814, 785, 0, 0, 802, 204, 0, 0,
	677, 678, 0, 0, 202, 679, 156, 0, 0, 146,
	0, 0, 686, 27, 48, 48, 57, 95, 819, 0,
	0, 0, 0, 785, 785, 27, 0, 771, 772, 0,
	778, 0, 0, 133, 0, 135, 0, 0, 785, 785,
	0, 785, 707, 0, 0, 0, 0, 0, 0, 712,
	0, 0, 0, 0, 0, 718, 157, 0, 0, 0,
	144, 143, 9, 0, 0, 27, 151, 145, 150, 149,
	0, 0, 0, 152, 153, 741, 742, 0, 165, 166,
	0, 744, 0, 27, 171, 0, 0, 177, 178, 0,
	0, 0, 0, 0, 9, 9, 157, 0, 0, 358,
	0, 0, 359, 360, 0, 0, 0, 0, 0, 0,
	48, 0, 0, 0, 0, 27, 374, 0, 0, 0,
	0, 27, 27, 0, 773, 0, 221, 222, 0, 0,
	0, 777, 0, 0, 229, 0, 782, 0, 0, 233,
	0, 235, 236, 237, 0, 794, 0, 244, 245, 246,
	247, 248, 249, 250, 804, 805, 0, 155, 154, 156,
	0, 0, 146, 0, 0, 27, 0, 446, 600, 0,
	0, 446, 817, 0, 0, 0, 0, 48, 27, 27,
	823, 0, 0, 0, 0, 27, 0, 0, 0, 48,
	9, 0, 735, 0, 0, 0, 0, 0, 314, 0,
	0, 0, 0, 0, 27, 0, 0, 330, 0, 0,
	0, 21, 0, 144, 143, 0, 0, 735, 52, 151,
	145, 150, 149, 0, 27, 5, 152, 153, 342, 48,
	27, 27, 0, 0, 0, 0, 0, 352, 0, 354,
	27, 0, 0, 735, 735, 0, 27, 48, 0, 27,
	0, 0, 0, 779, 0, 0, 0, 9, 0, 0,
	27, 0, 365, 508, 0, 0, 0, 513, 0, 9,
	161, 0, 0, 735, 0, 0, 27, 27, 377, 48,
	0, 0, 27, 684, 159, 48, 48, 384, 388, 0,
	735, 27, 27, 0, 27, 735, 0, 0, 0, 0,
	0, 0, 415, 0, 735, 735, 0, 779, 0, 9,
	161, 0, 0, 155, 154, 156, 0, 0, 146, 0,
	161, 0, 0, 40, 159, 0, 0, 9, 0, 48,
	0, 0, 0, 406, 159, 407, 408, 409, 404, 624,
	625, 402, 48, 48, 0, 0, 0, 458, 0, 48,
	575, 576, 577, 579, 0, 0, 0, 0, 0, 9,
	0, 0, 465, 0, 0, 9, 9, 0, 48, 144,
	143, 0, 0, 0, 0, 151, 145, 150, 149, 0,
	0, 479, 152, 153, 252, 0, 40, 0, 48, 0,
	63, 0, 0, 0, 48, 48, 0, 155, 154, 156,
	0, 0, 146, 0, 48, 300, 192, 0, 0, 9,
	48, 824, 107, 48, 0, 0, 0, 161, 314, 0,
	0, 797, 9, 9, 48, 0, 0, 0, 0, 9,
	0, 324, 41, 42, 47, 43, 44, 45, 46, 0,
	48, 48, 0, 0, 0, 0, 48, 0, 9, 0,
	432, 0, 0, 144, 143, 48, 48, 544, 48, 151,
	145, 150, 149, 0, 545, 0, 152, 153, 9, 0,
	0, 0, 0, 0, 9, 9, 0, 0, 161, 176,
	0, 388, 0, 0, 9, 0, 0, 0, 0, 40,
	9, 566, 159, 9, 0, 41, 42, 47, 43, 44,
	45, 46, 572, 161, 9, 155, 154, 156, 0, 73,
	146, 0, 0, 108, 0, 0, 0, 392, 0, 812,
	9, 9, 590, 0, 0, 0, 9, 0, 0, 40,
	0, 0, 0, 601, 0, 9, 9, 161, 9, 193,
	40, 0, 0, 161, 0, 161, 0, 0, 0, 192,
	0, 430, 107, 0, 0, 0, 0, 437, 411, 439,
	0, 144, 143, 267, 267, 0, 0, 151, 145, 150,
	149, 0, 0, 0, 152, 153, 0, 0, 0, 161,
	0, 161, 0, 161, 301, 0, 0, 301, 0, 0,
	0, 0, 0, 159, 0, 159, 0, 159, 41, 42,
	47, 43, 44, 45, 46, 40, 0, 0, 0, 0,
	0, 0, 661, 0, 0, 0, 0, 0, 155, 154,
	156, 0, 665, 146, 0, 192, 0, 0, 0, 0,
	0, 267, 806, 267, 267, 40, 0, 257, 41, 42,
	47, 43, 44, 45, 46, 0, 682, 683, 687, 41,
	42, 47, 43, 44, 45, 46, 0, 0, 0, 0,
	267, 368, 370, 372, 161, 0, 0, 0, 155, 154,
	156, 0, 0, 146, 144, 143, 0, 0, 539, 0,
	151, 145, 150, 149, 709, 0, 0, 152, 153, 40,
	0, 0, 0, 301, 0, 0, 0, 107, 0, 107,
	107, 0, 0, 40, 74, 75, 76, 394, 93, 78,
	49, 0, 0, 0, 41, 42, 47, 43, 44, 45,
	46, 0, 0, 73, 144, 143, 161, 0, 0, 0,
	151, 145, 150, 149, 40, 759, 0, 152, 153, 0,
	582, 49, 0, 0, 41, 42, 47, 43, 44, 45,
	46, 0, 0, 767, 0, 0, 0, 0, 267, 0,
	267, 88, 267, 0, 0, 89, 0, 0, 0, 94,
	0, 0, 86, 82, 161, 0, 0, 0, 0, 0,
	0, 267, 91, 0, 795, 796, 0, 0, 621, 803,
	0, 0, 0, 40, 0, 161, 301, 0, 41, 42,
	47, 43, 44, 45, 46, 0, 161, 0, 0, 638,
	0, 820, 41, 42, 47, 84, 92, 83, 46, 0,
	643, 0, 0, 0, 52, 0, 0, 80, 81, 90,
	98, 40, 74, 75, 76, 0, 93, 78, 49, 0,
	0, 0, 0, 41, 42, 47, 43, 44, 45, 46,
	0, 73, 0, 0, 40, 74, 75, 76, 267, 93,
	78, 49, 0, 0, 0, 0, 161, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 0, 0, 0, 0,
	691, 0, 0, 0, 0, 301, 0, 0, 0, 88,
	301, 0, 0, 89, 0, 0, 0, 94, 0, 0,
	86, 82, 41, 42, 47, 43, 44, 45, 46, 0,
	91, 0, 88, 0, 0, 0, 89, 0, 0, 0,
	94, 201, 0, 86, 82, 0, 0, 0, 0, 40,
	74, 75, 76, 91, 93, 78, 49, 0, 0, 267,
	41, 42, 47, 84, 92, 83, 46, 0, 0, 73,
	0, 0, 0, 316, 0, 80, 81, 90, 98, 301,
	0, 301, 0, 41, 42, 47, 84, 92, 83, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 81,
	90, 98, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 89, 0, 0, 0, 94, 0, 0, 86, 82,
	40, 74, 75, 76, 0, 93, 78, 49, 91, 0,
	0, 267, 0, 0, 0, 0, 0, 0, 301, 0,
	73, 0, 0, 0, 0, 40, 74, 230, 76, 0,
	93, 78, 49, 0, 0, 0, 0, 0, 41, 42,
	47, 319, 320, 318, 321, 73, 0, 0, 0, 0,
	0, 316, 0, 80, 81, 90, 98, 0, 88, 0,
	0, 0, 89, 0, 0, 0, 94, 0, 39, 86,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 0, 0, 88, 0, 0, 0, 89, 0, 0,
	0, 94, 0, 0, 86, 82, 40, 74, 75, 76,
	0, 93, 78, 49, 91, 0, 0, 0, 0, 41,
	42, 47, 84, 92, 83, 46, 73, 0, 0, 0,
	0, 0, 0, 0, 80, 81, 90, 98, 0, 0,
	0, 0, 0, 0, 41, 42, 47, 84, 92, 83,
	46, 0, 0, 0, 0, 0, 52, 0, 0, 80,
	81, 90, 98, 0, 88, 0, 0, 0, 89, 0,
	0, 0, 94, 0, 0, 86, 82, 40, 74, 75,
	76, 0, 93, 78, 49, 91, 0, 0, 155, 154,
	156, 0, 0, 146, 0, 0, 0, 73, 0, 0,
	0, 0, 40, 74, 75, 76, 0, 93, 78, 49,
	0, 0, 0, 0, 0, 41, 42, 47, 84, 92,
	83, 46, 73, 0, 0, 0, 0, 0, 0, 0,
	80, 81, 90, 58, 0, 88, 0, 0, 0, 89,
	0, 0, 0, 94, 144, 143, 86, 82, 0, 0,
	151, 145, 150, 149, 0, 0, 91, 152, 153, 0,
	88, 0, 0, 0, 89, 0, 0, 0, 94, 0,
	0, 86, 82, 40, 0, 0, 0, 0, 0, 0,
	49, 91, 0, 0, 0, 34, 41, 42, 47, 84,
	92, 83, 46, 0, 0, 23, 0, 0, 24, 0,
	0, 80, 81, 90, 98, 0, 0, 0, 0, 0,
	0, 41, 42, 47, 319, 320, 318, 321, 0, 0,
	0, 0, 0, 0, 40, 0, 80, 81, 90, 98,
	0, 49, 0, 0, 0, 0, 34, 0, 0, 0,
	0, 39, 0, 813, 0, 787, 23, 0, 0, 24,
	0, 26, 0, 0, 31, 29, 30, 28, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 33, 282, 283,
	20, 35, 36, 37, 38, 0, 0, 0, 650, 0,
	0, 25, 41, 42, 47, 43, 44, 45, 46, 0,
	0, 40, 39, 0, 737, 0, 649, 0, 49, 0,
	0, 0, 26, 34, 0, 31, 29, 30, 28, 0,
	0, 0, 0, 23, 0, 0, 24, 32, 33, 282,
	283, 0, 35, 36, 37, 38, 0, 0, 0, 650,
	0, 0, 25, 41, 42, 47, 43, 44, 45, 46,
	40, 0, 0, 0, 0, 0, 0, 49, 0, 0,
	0, 0, 34, 0, 0, 0, 0, 0, 0, 39,
	0, 280, 23, 19, 0, 24, 0, 0, 0, 26,
	0, 0, 31, 29, 30, 28, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 33, 282, 283, 20, 35,
	36, 37, 38, 0, 0, 0, 0, 0, 0, 25,
	41, 42, 47, 43, 44, 45, 46, 40, 39, 0,
	786, 0, 787, 0, 49, 0, 0, 0, 26, 34,
	0, 31, 29, 30, 28, 0, 0, 0, 0, 23,
	0, 0, 24, 32, 33, 0, 0, 20, 35, 36,
	37, 38, 0, 0, 0, 650, 0, 0, 25, 41,
	42, 47, 43, 44, 45, 46, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 155, 154,
	156, 0, 0, 146, 0, 39, 0, 648, 0, 649,
	0, 0, 776, 0, 0, 26, 0, 0, 31, 29,
	30, 28, 0, 0, 0, 0, 0, 155, 154, 156,
	32, 33, 146, 0, 0, 35, 36, 37, 38, 0,
	0, 770, 650, 0, 0, 25, 41, 42, 47, 43,
	44, 45, 46, 0, 144, 143, 0, 0, 0, 0,
	151, 145, 150, 149, 155, 154, 156, 152, 153, 146,
	0, 0, 0, 0, 155, 154, 156, 0, 708, 146,
	0, 0, 0, 144, 143, 0, 40, 0, 695, 151,
	145, 150, 149, 49, 0, 0, 152, 153, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 23, 0,
	0, 24, 0, 0, 0, 0, 0, 0, 0, 0,
	144, 143, 0, 0, 0, 0, 151, 145, 150, 149,
	144, 143, 0, 152, 153, 0, 151, 145, 150, 149,
	0, 0, 0, 152, 153, 0, 0, 155, 154, 156,
	0, 0, 146, 0, 39, 0, 18, 0, 19, 0,
	0, 543, 0, 0, 26, 0, 0, 31, 29, 30,
	28, 0, 0, 0, 0, 0, 155, 154, 156, 32,
	33, 146, 0, 20, 35, 36, 37, 38, 0, 0,
	476, 0, 0, 0, 25, 41, 42, 47, 43, 44,
	45, 46, 0, 144, 143, 0, 0, 0, 0, 151,
	145, 150, 149, 155, 154, 156, 152, 153, 146, 0,
	0, 0, 0, 155, 154, 156, 0, 466, 146, 0,
	0, 0, 144, 143, 0, 0, 0, 142, 151, 145,
	150, 149, 155, 154, 156, 152, 153, 146, 0, 0,
	0, 0, 459, 154, 156, 0, 0, 146, 181, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 144,
	143, 0, 0, 0, 0, 151, 145, 150, 149, 144,
	143, 0, 152, 153, 0, 151, 145, 150, 149, 0,
	0, 0, 152, 153, 0, 0, 0, 0, 144, 143,
	0, 0, 0, 0, 151, 145, 150, 149, 144, 143,
	0, 152, 153, 0, 151, 145, 150, 149, 0, 0,
	0, 152, 153,
}
var yyPact = [...]int{

	2532, -1000, 2532, -1000, -1000, 217, 217, 217, 217, 217,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1982, 2053,
	217, 252, 200, 674, 668, 722, 1620, 217, 424, 1679,
	1679, 400, 217, 217, 719, 2053, 747, 2053, 239, 688,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 229, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2609, 1886, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 229,
	-1000, -1000, -55, -72, -1000, -1000, -1000, -1000, -1000, -1000,
	2053, 2053, 199, 195, 192, -1000, 2053, 274, 191, 2053,
	2053, 1679, 190, -1000, -1000, 2628, 55, 556, 1886, -1000,
	649, 706, 1491, 1415, 715, 602, 531, -1000, 527, 2053,
	1679, 1491, 217, -2, 221, 217, 373, -1000, 217, 1679,
	1679, 217, 217, 1679, -1000, -1000, -1000, -1000, 2053, 2053,
	-1000, -1000, 211, 983, -25, 983, 1911, -1000, -8, 1679,
	-1000, 2053, 2532, 2053, 2053, 2053, 544, 558, 584, 2053,
	2053, 2053, 2053, 2053, 2053, 2053, -1000, 2, 138, 143,
	141, 208, 1521, 1740, 357, -1000, -1000, 2053, 531, 531,
	361, 2004, 159, 159, 546, 572, -1000, 830, -1000, 286,
	531, 2267, 1679, 722, 1679, 138, 621, 634, 1491, 89,
	-1000, -1000, -1000, 1272, 58, 710, 1272, 562, 562, 562,
	1815, -1000, 134, -1000, 1139, 124, 665, -1000, 722, 2053,
	-1000, 350, 173, 189, 182, -1000, 217, 217, -1000, -1000,
	705, 2004, 2004, 629, -1000, -1000, 2053, -1000, -1000, 983,
	2053, 688, 234, 2004, 495, 38, -32, -32, 598, 2053,
	159, 2053, 159, 159, -35, -35, -1000, -1000, -1000, 83,
	830, -1000, 2053, -1000, -1000, -1000, -1000, -1000, 2053, -1000,
	-1000, 2053, 1717, 461, 2053, -1000, 1886, -1000, -1000, 159,
	181, 180, 179, 544, -1000, 2053, 425, 2267, -1000, -1000,
	1982, -1000, 217, 217, 453, -1000, -9, 440, 604, 2053,
	2078, 133, 1575, 1491, 1375, 710, 27, -1000, 1426, -1000,
	-1000, -1000, 1272, 644, 2053, -1000, 208, -1000, 208, 208,
	-1000, -10, 701, -1000, 2004, -1000, -1000, -66, 178, 177,
	176, 174, -1000, 1679, 217, 527, 1209, 310, 1375, -1000,
	2004, 527, 1679, 527, 142, 1679, -1000, -1000, 722, 217,
	217, -1000, 983, -1000, 170, 1679, 423, 495, 2532, 2053,
	-1000, -1000, 2638, -1000, -32, -1000, -1000, -1000, 122, 121,
	120, 113, 422, 361, 2053, 2599, 547, 115, -1000, 115,
	-1000, 115, -1000, 396, 112, 486, -1000, 2562, -1000, -1000,
	2267, 2267, -1000, 2053, 109, -1000, -16, 627, 2004, -1000,
	159, 1375, -1000, -1000, 1679, -18, 715, -19, 210, -74,
	-1000, 616, 686, 578, 610, 1272, -1000, -1000, -1000, -1000,
	-1000, 1679, 710, 636, 633, 2004, 566, -1000, -1000, 566,
	1815, 1679, 1740, 531, 531, 531, 2053, 108, -20, -1000,
	217, 711, 1679, 662, 217, 1375, 651, 217, 102, 217,
	699, 101, -21, -1000, -1000, -22, 659, -48, 217, -1000,
	-1000, -1000, 527, 100, 523, 420, 503, -1000, 2533, 2053,
	-1000, -1000, -1000, -1000, -1000, 2004, 2053, 159, 99, -42,
	96, 95, -1000, 327, 269, 217, 2267, 418, 417, 2004,
	-1000, 529, 258, 2078, 254, -1000, -1000, -1000, 94, -45,
	-1000, 710, 1375, 2053, 1272, 609, 578, 593, -1000, 1272,
	-1000, -1000, -1000, -1000, 2053, 2053, -1000, -1000, 93, 2053,
	2053, 1717, 2053, 88, 328, 1679, -1000, 217, -1000, -1000,
	1375, 1375, 86, -47, 2053, -1000, 82, 1679, -1000, 305,
	-1000, 299, 697, 722, 722, 2053, 695, 722, -1000, 81,
	693, 217, 521, 2532, 830, 2004, -1000, -1000, 159, -1000,
	-1000, -1000, 642, -1000, 479, 2532, 484, 483, -1000, -1000,
	-1000, 671, 579, 1375, -1000, -1000, 2004, 1175, 1272, 583,
	1272, 764, 2004, -1000, 322, 74, 68, 67, 63, 59,
	295, -1000, 217, 527, -1000, -1000, -1000, -1000, 711, 1679,
	2004, 217, 217, -1000, 527, 2383, 296, -1000, -1000, -1000,
	659, 2004, 291, 56, -1000, 169, -1000, 217, -1000, -1000,
	165, 416, 479, 2267, 2053, 217, 217, -1000, -1000, -1000,
	159, -1000, -1000, -1000, 2053, 158, 764, 1272, 1175, 155,
	319, 318, 317, 315, 279, 152, 243, -1000, 217, 217,
	-1000, -1000, -1000, 217, 415, 2383, -1000, -1000, 1982, 2053,
	1589, 2383, 2383, 692, 527, -1000, 649, 519, 405, 504,
	-1000, 2460, -1000, -1000, -1000, 2004, 1679, 764, -1000, 324,
	151, 150, 146, 84, 39, 324, 312, -1000, -1000, -1000,
	217, -1000, 2450, 1494, 22, 555, -1000, 983, 404, 402,
	289, 54, 52, 217, 515, 2267, 48, 47, 649, 632,
	324, 324, 324, 324, 324, 44, 11, -1000, 2383, 2200,
	1679, 1679, -1000, 217, 217, 2383, -1000, -1000, -1000, 217,
	-1000, -1000, -1000, -1000, 2053, 37, 36, 29, 24, 9,
	-1000, 324, 457, 397, 2200, -1000, -1000, 1982, -1000, 435,
	432, -1000, -1000, 386, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6, 385, 469, 2383, 2053, 503, 481, -1000, 2413,
	2200, 2200, 217, -1000, 513, 370, -1000, 2384, 503, 217,
	2200, 369, 359, -1000, 217, 512, 2316, -1000, 439, 2383,
	475, 443, -1000, 217, -1000, -1000, 1982, 2053, 358, 439,
	2200, 2053, 217, 217, -1000, 1444, 551, 10, 549, 507,
	356, 497, -1000, 1331, -1000, -1000, 2316, 2149, 1679, 1679,
	217, 506, 2200, 1982, -1000, 430, 429, -1000, 217, -1000,
	1223, 2149, 2149, -1000, 2149,
}
var yyPgo = [...]int{

	0, 9, 28, 2, 95, 106, 17, 372, 863, 861,
	860, 855, 57, 854, 852, 849, 847, 846, 50, 15,
	19, 845, 841, 34, 839, 838, 32, 25, 837, 835,
	833, 832, 831, 1115, 60, 69, 829, 48, 39, 827,
	826, 7, 821, 29, 811, 1101, 806, 55, 56, 58,
	53, 24, 887, 35, 74, 26, 43, 805, 804, 803,
	800, 1280, 799, 798, 797, 790, 730, 603, 789, 788,
	41, 46, 787, 47, 61, 784, 13, 776, 14, 775,
	773, 772, 770, 52, 768, 21, 49, 42, 54, 23,
	37, 764, 760, 759, 36, 758, 6, 45, 22, 16,
	756, 11, 4, 5, 0, 523, 8, 359, 754, 59,
	38, 51, 44, 33, 40, 63, 753, 449, 251,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 6, 6, 7, 7, 8, 8, 9, 9,
	10, 10, 10, 10, 10, 10, 11, 11, 11, 11,
	11, 11, 11, 12, 12, 13, 13, 13, 14, 14,
	14, 15, 15, 15, 15, 16, 16, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 18, 18, 19,
	19, 20, 20, 20, 20, 20, 21, 21, 21, 21,
	21, 22, 22, 22, 22, 23, 24, 24, 25, 26,
	26, 27, 27, 27, 28, 28, 28, 28, 29, 29,
	29, 29, 29, 29, 29, 30, 30, 30, 31, 31,
	31, 31, 31, 32, 32, 32, 33, 34, 34, 34,
	34, 35, 35, 36, 37, 37, 38, 38, 39, 39,
	40, 40, 41, 41, 42, 42, 42, 43, 43, 44,
	44, 45, 45, 46, 46, 47, 47, 48, 48, 48,
	48, 48, 48, 49, 50, 51, 51, 51, 51, 51,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 52, 53, 54, 54, 55, 55, 56,
	56, 57, 57, 58, 58, 59, 59, 59, 60, 60,
	61, 62, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
	63, 64, 64, 64, 64, 64, 64, 64, 65, 65,
	65, 65, 66, 66, 67, 67, 68, 68, 68, 68,
	68, 69, 69, 70, 70, 70, 70, 70, 70, 70,
	70, 71, 72, 72, 73, 73, 74, 74, 74, 75,
	76, 76, 76, 76, 76, 76, 77, 77, 77, 77,
	77, 78, 78, 78, 79, 79, 80, 80, 80, 81,
	82, 82, 83, 83, 84, 84, 85, 85, 86, 86,
	87, 87, 88, 88, 89, 89, 90, 90, 91, 91,
	91, 91, 92, 93, 94, 94, 95, 95, 96, 96,
	97, 97, 98, 98, 99, 99, 100, 100, 101, 101,
	102, 102, 103, 103, 104, 104, 104, 104, 104, 104,
	104, 104, 105, 106, 106, 107, 108, 108, 109, 109,
	110, 110, 111, 111, 112, 112, 113, 113, 114, 114,
	114, 114, 115, 115, 116, 116, 117, 117, 118, 118,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	8, 9, 7, 9, 9, 2, 8, 9, 7, 9,
	9, 2, 3, 2, 2, 8, 9, 1, 8, 9,
	1, 3, 3, 2, 3, 2, 2, 7, 8, 5,
	9, 6, 7, 9, 6, 8, 8, 1, 3, 1,
	3, 0, 1, 1, 2, 2, 6, 3, 3, 4,
	6, 7, 9, 6, 4, 1, 1, 3, 3, 1,
	3, 1, 1, 3, 10, 11, 11, 13, 0, 1,
	1, 1, 1, 2, 2, 5, 6, 3, 5, 3,
	3, 5, 3, 3, 4, 5, 5, 5, 4, 4,
	4, 1, 1, 3, 0, 2, 0, 2, 0, 3,
	0, 2, 0, 3, 0, 3, 4, 0, 2, 0,
	2, 0, 2, 6, 9, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 3, 1,
	3, 2, 4, 1, 1, 0, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 4, 4, 6, 6,
	4, 6, 4, 4, 4, 6, 4, 4, 6, 4,
	2, 3, 3, 3, 3, 3, 2, 2, 3, 3,
	2, 2, 0, 1, 4, 4, 5, 5, 5, 5,
	1, 5, 10, 8, 9, 9, 9, 9, 9, 8,
	10, 2, 0, 3, 1, 1, 1, 2, 3, 1,
	1, 1, 2, 3, 1, 1, 5, 5, 6, 6,
	4, 0, 2, 4, 1, 1, 1, 3, 1, 5,
	0, 1, 4, 2, 0, 2, 1, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 1, 3, 6, 9,
	5, 8, 7, 3, 1, 3, 5, 6, 4, 2,
	0, 2, 4, 2, 0, 2, 4, 2, 0, 2,
	4, 2, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 1, 3, 1, 3,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
	1, 1, 0, 1, 0, 1, 1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -10, -33, -91, -92, -95, -67,
	-17, -15, -21, -22, -28, -16, -31, -32, 74, 76,
	101, -45, -104, 26, 29, 112, 82, -107, 88, 86,
	87, 85, 97, 98, 16, 102, 103, 104, 105, 72,
	4, 113, 114, 116, 117, 118, 119, 115, -105, 11,
	-1, -118, 125, -118, -118, -118, -118, -52, 131, -51,
	-48, -64, -62, -61, -67, -68, -81, -63, -65, -105,
	-107, -30, -104, 24, 5, 6, 7, -49, 10, -50,
	128, 129, 74, 118, 116, -69, 73, -54, 62, 66,
	130, 83, 117, 9, 70, -52, -105, -106, 131, -118,
	-34, 19, 15, 17, -36, -35, 13, -61, 131, 131,
	30, 30, -109, -108, -105, -109, -104, -118, -105, 83,
	30, -104, -104, -29, 89, 90, 31, 32, 91, 92,
	-118, -118, 12, -52, 5, -52, 115, -47, -46, -116,
	25, 122, 78, 121, 120, 127, 69, -111, -117, 129,
	128, 126, 133, 134, 65, 64, 66, -52, -86, -33,
	-66, -45, 136, 131, 136, -52, -52, 131, 131, 131,
	-82, -52, 120, 127, -111, -117, -61, -52, -52, -104,
	131, 80, 63, 135, 63, -86, -41, 38, 20, -88,
	-73, -104, 24, 14, -88, -37, 14, 57, 58, 59,
	-110, 71, -66, -86, -52, -104, -73, -118, 135, 122,
	-118, 83, 30, 106, 107, -118, -104, -104, -118, -118,
	-104, -52, -52, 127, -118, -118, 135, -118, -118, -52,
	6, 135, -104, -52, -1, -52, -52, -52, -111, 67,
	63, 68, 61, 60, -52, -52, -52, -52, -52, -52,
	-52, 132, 135, 132, 132, 132, -104, 6, -110, -104,
	6, -110, -110, -83, 77, -54, 131, -61, -54, 67,
	63, 61, 60, 69, 116, -110, -2, -8, -6, -13,
	74, -12, 99, 100, -104, -106, -105, -104, -42, 44,
	41, -74, -73, 135, 16, -87, -76, -74, -75, -77,
	23, -61, 14, -38, 18, -87, -115, 60, -115, -115,
	-90, -80, -79, -53, -52, -70, 126, -104, 118, 116,
	117, 119, 132, 131, -33, 22, 27, 28, 36, -109,
	-52, 84, 131, 84, 131, 131, -118, -118, 20, -48,
	-86, -118, -52, -47, 22, 131, -97, -96, 79, 75,
	-49, -50, -52, -54, -52, -54, -54, -86, -66, -66,
	-66, -53, -84, -83, 79, -52, -54, 131, -61, 131,
	-61, 131, -61, -111, -66, 81, -2, -52, -118, -118,
	80, 80, -44, 45, -52, -56, -57, -58, -52, -70,
	21, 131, -33, -104, 22, -88, -94, -93, -51, -104,
	-38, -112, 56, -114, 53, 135, 48, 50, 51, 52,
	-104, 22, -87, -39, 39, -52, -35, -34, -35, -35,
	135, 22, 131, 131, 131, 131, 131, -89, -104, -118,
	-33, -18, 131, -104, -51, 131, -51, -33, -89, -33,
	132, -27, -24, -26, -23, -25, -105, -104, -106, -118,
	-118, -118, 131, -89, 81, -97, -96, -1, -52, 64,
	132, 132, 132, 132, 81, -52, 78, 64, -55, -54,
	-55, -55, 86, 63, 132, 76, 78, -2, -2, -52,
	-43, 46, 72, 135, -59, 42, 43, -55, -85, -51,
	-104, -37, 135, 127, 47, -112, -114, -113, 49, 47,
	-87, -104, -38, -40, 40, 41, -90, -104, -66, -110,
	-110, -110, -110, -66, 132, 135, -118, -20, 31, 32,
	33, 34, -19, -18, 35, -118, -85, 37, -118, 132,
	-118, 22, 132, 135, 135, 35, 132, 135, -118, -33,
	132, 74, 81, 78, -52, -52, -54, 132, 135, 132,
	132, 93, 111, -118, -2, -6, 81, 81, -43, 113,
	-56, 114, 132, 135, -38, -94, -52, -76, 47, -113,
	47, -76, -52, -86, 132, -66, -66, -66, -53, -66,
	132, -118, -33, 22, -89, -118, -51, -51, 132, 135,
	-52, 132, -104, -118, 84, 108, 22, -23, -26, -26,
	-105, -52, 22, -27, 132, 22, -118, 74, -1, -55,
	39, -99, -98, 79, 75, 76, 76, -60, 31, 32,
	21, -33, -85, -78, 54, 55, -76, 47, -76, 96,
	132, 132, 132, 132, 132, 96, 110, -118, -33, -20,
	-19, -118, -118, -33, -3, -7, -5, -11, 74, 76,
	109, 108, 108, 132, 131, -118, 131, 81, -99, -98,
	-2, -52, -118, -118, -55, -52, 131, -76, -78, 131,
	96, 96, 96, 96, 96, 131, 114, -118, -118, -118,
	81, -3, -52, -52, -105, -106, -118, -52, -3, -3,
	22, -33, -41, 74, 81, 78, -89, -71, -72, 95,
	131, 131, 131, 131, 131, -71, 96, -118, 78, 80,
	63, 63, -118, 81, 81, 108, 132, 132, -118, 74,
	-2, 132, 132, -41, 41, -71, -71, -71, -71, -71,
	132, 131, -3, -4, -9, -7, -14, 74, -12, -104,
	-104, -118, -118, -3, -118, -86, 132, 132, 132, 132,
	132, -71, -101, -100, 79, 75, -96, 81, -4, -52,
	80, 80, 81, 132, 81, -101, -3, -52, -96, 76,
	78, -4, -4, -118, 74, 81, 78, -118, -4, -7,
	81, 81, -118, 74, -3, -5, 74, 76, -103, -102,
	79, 75, 76, 76, -118, -52, -52, -105, -106, 81,
	-103, -102, -4, -52, -118, -118, 78, 80, 63, 63,
	74, 81, 78, 74, -12, -104, -104, -118, 74, -4,
	-52, 80, 80, -118, 78,
}
var yyDef = [...]int{

	-2, -2, -2, 22, 23, 348, 348, 348, 348, 348,
	14, 15, 16, 17, 18, 19, 20, 21, 0, 0,
	348, 0, 0, 0, 0, 0, 0, 348, 0, 0,
	0, 98, 348, 348, 0, 0, 0, 0, 0, 344,
	314, 315, 316, 317, 318, 319, 320, 321, 0, 322,
	2, 9, 349, 10, 11, 12, 13, 332, -2, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 155, 0, 147, 148, 149, 150, 151, 152,
	0, 0, 0, 319, 317, 230, 270, 332, 0, 0,
	0, 0, 318, 153, 154, 332, 170, 0, 141, 35,
	-2, 0, 0, 0, 124, 0, 330, 122, 141, 222,
	0, 0, 348, 328, 326, 348, 0, 53, 348, 0,
	0, 348, 348, 0, 99, 100, 101, 102, 0, 0,
	55, 56, 0, -2, 348, -2, 348, 142, 145, 0,
	345, 0, -2, 0, 346, 347, 332, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 333, 332, 0, 0,
	0, 0, 0, 222, 0, 216, 217, 222, 330, 330,
	0, -2, 346, 347, 0, 0, 210, 220, 221, 0,
	330, -2, 0, 0, 0, 0, 134, 0, 0, 0,
	282, 244, 245, 0, 0, 126, 0, 342, 342, 342,
	0, 331, 0, 223, -2, 141, 0, 51, 0, 0,
	52, 0, 0, 0, 0, 54, 348, 348, 77, 78,
	0, -2, -2, 0, 109, 110, 0, 112, 113, -2,
	148, 344, 0, 325, 300, 191, -2, -2, 0, 0,
	0, 0, 0, 0, 211, 212, 213, 214, 215, 218,
	219, 173, 0, 175, 190, 225, 156, 158, 222, 157,
	159, 222, 222, 274, 0, 193, 141, 176, 195, 0,
	0, 0, 0, 332, 107, 222, 0, -2, 26, 27,
	0, 47, 348, 348, 0, 324, 323, 0, 139, 0,
	0, 141, 246, 0, 0, 126, -2, 250, 251, 254,
	255, 249, 0, 128, 0, 125, 0, 343, 0, 0,
	123, 286, 266, 268, -2, 265, 174, 155, 319, 317,
	318, 320, 224, 0, 348, 141, 0, 0, 0, 329,
	-2, 141, 0, 141, 0, 0, 79, 84, 0, 348,
	348, 114, -2, 146, 0, 0, 0, 300, -2, 0,
	196, 197, 332, 200, -2, 204, 207, 279, 0, 0,
	0, 0, 0, 273, 0, 332, 0, 141, 202, 141,
	206, 141, 209, 0, 0, 0, 4, 332, 43, 44,
	-2, -2, 116, 0, -2, 133, 179, 185, -2, 184,
	0, 0, 290, 247, 0, 283, 124, 294, 0, 155,
	296, 0, -2, 336, 0, 0, 335, 339, 340, 341,
	252, 0, 126, 130, 0, -2, 118, 121, 119, 120,
	0, 0, 222, 330, 330, 330, 222, 0, 284, 59,
	348, 71, 0, 67, 348, 0, 0, 348, 0, 348,
	0, 0, 91, 92, 86, 89, 85, 0, 348, 108,
	111, 115, 141, 0, 0, 0, 299, 301, 332, 0,
	226, 227, 228, 229, 269, -2, 0, 0, 0, 177,
	0, 0, 105, 0, 231, 348, -2, 0, 0, -2,
	135, 137, 0, 0, 181, 186, 187, 288, 0, 276,
	248, 126, 0, 0, 0, 0, 336, 0, 337, 0,
	281, 253, 297, 117, 0, 0, 287, 267, 0, 222,
	222, 222, 222, 0, -2, 0, 61, 348, 72, 73,
	0, 0, 0, 69, 0, 64, 0, 0, 76, 348,
	83, 0, 0, 0, 0, 0, 0, 0, 80, 0,
	0, 348, 0, -2, 198, -2, 199, 201, 0, 205,
	208, 106, 0, 32, 304, -2, 0, 0, 136, 138,
	180, 0, 141, 0, 292, 295, -2, 261, 0, 0,
	0, 260, -2, 129, 224, 0, 0, 0, 0, 0,
	0, 57, 348, 141, 285, 62, 74, 75, 71, 0,
	-2, 348, 348, 81, 141, -2, 0, 87, 93, 90,
	0, -2, 0, 0, 143, 0, 30, 348, 298, 178,
	0, 0, 304, -2, 0, 348, 348, 182, 188, 189,
	0, 291, 277, 256, 0, 0, 257, 0, 261, 0,
	226, 227, 228, 229, 231, 0, 0, 58, 348, 348,
	70, 65, 66, 348, 0, -2, 24, 25, 0, 0,
	348, -2, -2, 0, 141, 31, 132, 0, 0, 303,
	305, 332, 33, 34, 289, -2, 0, 259, 258, 242,
	0, 0, 0, 0, 0, 242, 0, 60, 63, 82,
	348, 6, 332, 332, 170, 0, 41, -2, 0, 0,
	0, 0, 0, 348, 0, -2, 0, 0, 132, 0,
	242, 242, 242, 242, 242, 0, 0, 94, -2, -2,
	0, 0, 42, 348, 348, -2, 144, 232, 45, 348,
	302, 263, 233, 241, 0, 0, 0, 0, 0, 0,
	239, 242, 308, 0, -2, 28, 29, 0, 50, 0,
	0, 95, 96, 0, 46, 243, 234, 235, 236, 237,
	238, 0, 0, 308, -2, 0, 0, 0, 8, 332,
	-2, -2, 348, 240, 0, 0, 309, 332, 307, 348,
	-2, 0, 0, 97, 348, 0, -2, 38, 312, -2,
	0, 0, 36, 348, 306, -2, 0, 0, 0, 312,
	-2, 0, 348, 348, 37, 332, 332, 170, 0, 0,
	0, 311, 313, 332, 39, 40, -2, -2, 0, 0,
	348, 0, -2, 0, -2, 0, 0, 48, 348, 310,
	332, -2, -2, 49, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 130, 3, 3, 3, 134, 3, 3,
	131, 132, 126, 129, 135, 128, 136, 133, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 125,
	3, 127,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:181
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:186
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:193
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:198
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:205
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:210
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:217
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:222
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:229
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:233
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:237
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:241
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:245
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:249
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:253
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:257
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:261
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:265
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:269
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:273
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:277
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:303
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:307
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:313
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:317
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:323
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:327
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:331
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:335
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 34:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:339
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:343
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:349
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:353
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:357
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:361
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:365
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:369
		{
			yyVAL.statement = Return{Value: NewNullValue()}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:373
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:379
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:383
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:389
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:393
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:397
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:403
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:407
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:411
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:417
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:421
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:425
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:429
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:435
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:439
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:445
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:449
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[7].expression}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:453
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Query: yyDollar[4].expression}
		}
	case 60:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:457
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:461
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Query: yyDollar[5].expression}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:465
		{
			yyVAL.statement = AddColumns{Table: yyDollar[3].expression, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 63:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:469
		{
			yyVAL.statement = AddColumns{Table: yyDollar[3].expression, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:473
		{
			yyVAL.statement = DropColumns{Table: yyDollar[3].expression, Columns: []Expression{yyDollar[5].expression}}
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:477
		{
			yyVAL.statement = DropColumns{Table: yyDollar[3].expression, Columns: yyDollar[6].expressions}
		}
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:481
		{
			yyVAL.statement = RenameColumn{Table: yyDollar[3].expression, Old: yyDollar[5].expression, New: yyDollar[7].identifier}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:487
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:491
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:497
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:501
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:507
		{
			yyVAL.expression = nil
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:511
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:515
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:519
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:523
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:529
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:533
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:537
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:541
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:545
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 81:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:551
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 82:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:555
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:559
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:563
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:569
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:575
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:579
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expression)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:585
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:591
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:595
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:601
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:605
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:609
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:615
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:619
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].expressions, Statements: yyDollar[9].program}
		}
	case 96:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:623
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Statements: yyDollar[9].program}
		}
	case 97:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.y:627
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Parameters: yyDollar[7].expressions, Statements: yyDollar[11].program}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:633
		{
			yyVAL.expression = nil
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:637
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:641
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:645
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:649
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:653
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:657
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:663
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:667
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:671
		{
			yyVAL.expression = CursorAttrebute{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Attrebute: yyDollar[3].token}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:677
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].expression.(PrimitiveType).Value}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:681
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:685
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:689
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:693
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].expression}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:699
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:703
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[3].expression}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:707
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[4].expression, Code: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:713
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:725
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:735
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:744
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:753
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:764
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:768
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:774
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:780
		{
			yyVAL.expression = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:784
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:790
		{
			yyVAL.expression = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:794
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:800
		{
			yyVAL.expression = nil
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:804
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:810
		{
			yyVAL.expression = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:814
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:820
		{
			yyVAL.expression = nil
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:824
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:830
		{
			yyVAL.expression = nil
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:834
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:838
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:844
		{
			yyVAL.expression = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:848
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:854
		{
			yyVAL.expression = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:858
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:864
		{
			yyVAL.expression = nil
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:868
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:874
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 144:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:878
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:884
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:888
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:894
		{
			yyVAL.expression = NewStringValue(yyDollar[1].token.Literal)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:898
		{
			yyVAL.expression = NewIntegerValueFromString(yyDollar[1].token.Literal)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:902
		{
			yyVAL.expression = NewFloatValueFromString(yyDollar[1].token.Literal)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:906
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:910
		{
			yyVAL.expression = NewDatetimeValueFromString(yyDollar[1].token.Literal)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:914
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:920
		{
			yyVAL.expression = NewTernaryValueFromString(yyDollar[1].token.Literal)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:926
		{
			yyVAL.expression = NewNullValueFromString(yyDollar[1].token.Literal)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:932
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, Column: yyDollar[1].identifier}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:936
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:940
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:944
		{
			yyVAL.expression = ColumnNumber{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Number: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:948
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:954
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:958
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:962
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:966
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:970
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:974
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:978
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:982
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:986
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:990
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:994
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:998
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1002
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1006
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1012
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1018
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1022
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1028
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1032
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1038
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1042
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1048
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1052
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1058
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1062
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1068
		{
			yyVAL.token = Token{}
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1072
		{
			yyVAL.token = yyDollar[1].token
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1076
		{
			yyVAL.token = yyDollar[1].token
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1082
		{
			yyVAL.token = yyDollar[1].token
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1086
		{
			yyVAL.token = yyDollar[1].token
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1092
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1098
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1121
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1125
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1129
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1133
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1137
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].expression, Negation: yyDollar[3].token}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1141
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].expression, Negation: yyDollar[3].token}
		}
	case 198:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1145
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1149
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1153
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 201:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1157
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1161
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1165
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1169
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1173
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1177
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1181
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 208:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1185
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1189
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1193
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1199
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1203
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1207
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1211
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1215
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1219
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1223
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1229
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1233
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1237
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1241
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1247
		{
			yyVAL.expressions = nil
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1251
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 224:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1257
		{
			yyVAL.expression = Function{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1261
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1268
		{
			yyVAL.expression = AggregateFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1272
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1276
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1280
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1284
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1290
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 232:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1294
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 233:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1300
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 234:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1304
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 235:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1308
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 236:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1312
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 237:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1316
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 238:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1320
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 239:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1324
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 240:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1328
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1334
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 242:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1340
		{
			yyVAL.expression = nil
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1344
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1350
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1354
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1360
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1364
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1368
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1374
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1380
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1384
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1388
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 253:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1392
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1396
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1400
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1406
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1410
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 258:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1414
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1418
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1422
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1428
		{
			yyVAL.expression = nil
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1432
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1436
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1442
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1446
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1452
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1456
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1460
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1466
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1472
		{
			yyVAL.expression = nil
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1476
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1482
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1486
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1492
		{
			yyVAL.expression = nil
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1496
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1502
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1506
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1512
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1516
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1522
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1526
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1532
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1536
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1542
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1546
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1552
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1556
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 288:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1562
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 289:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1566
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1570
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 291:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1574
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 292:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1580
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1586
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1592
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1596
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 296:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1602
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 297:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1607
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1614
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1618
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1624
		{
			yyVAL.procexpr = nil
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1628
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1634
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1638
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1644
		{
			yyVAL.procexpr = nil
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1648
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1654
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1658
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1664
		{
			yyVAL.procexpr = nil
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1668
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1674
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1678
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1684
		{
			yyVAL.procexpr = nil
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1688
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1694
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1698
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1702
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1706
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1710
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1714
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1718
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1722
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1728
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1734
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1738
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1744
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1750
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1754
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1760
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1764
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1770
		{
			yyVAL.token = Token{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1774
		{
			yyVAL.token = yyDollar[1].token
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1780
		{
			yyVAL.token = Token{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1784
		{
			yyVAL.token = yyDollar[1].token
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1790
		{
			yyVAL.token = Token{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1794
		{
			yyVAL.token = yyDollar[1].token
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1800
		{
			yyVAL.token = Token{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1804
		{
			yyVAL.token = yyDollar[1].token
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1810
		{
			yyVAL.token = Token{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1814
		{
			yyVAL.token = yyDollar[1].token
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1818
		{
			yyVAL.token = yyDollar[1].token
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1822
		{
			yyVAL.token = yyDollar[1].token
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1828
		{
			yyVAL.token = Token{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1832
		{
			yyVAL.token = yyDollar[1].token
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1838
		{
			yyVAL.token = Token{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1842
		{
			yyVAL.token = yyDollar[1].token
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1849
		{
			yyVAL.token = yyDollar[1].token
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1853
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1860
		{
			yyVAL.token = Token{}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1864
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
