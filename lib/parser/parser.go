//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const TIES = 57388
const PERCENT = 57389
const JOIN = 57390
const INNER = 57391
const OUTER = 57392
const LEFT = 57393
const RIGHT = 57394
const FULL = 57395
const CROSS = 57396
const ON = 57397
const USING = 57398
const NATURAL = 57399
const UNION = 57400
const INTERSECT = 57401
const EXCEPT = 57402
const ALL = 57403
const ANY = 57404
const EXISTS = 57405
const IN = 57406
const AND = 57407
const OR = 57408
const NOT = 57409
const BETWEEN = 57410
const LIKE = 57411
const IS = 57412
const NULL = 57413
const NULLS = 57414
const DISTINCT = 57415
const WITH = 57416
const CASE = 57417
const IF = 57418
const ELSEIF = 57419
const WHILE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const DO = 57424
const END = 57425
const DECLARE = 57426
const CURSOR = 57427
const FOR = 57428
const FETCH = 57429
const OPEN = 57430
const CLOSE = 57431
const DISPOSE = 57432
const NEXT = 57433
const PRIOR = 57434
const ABSOLUTE = 57435
const RELATIVE = 57436
const RANGE = 57437
const SEPARATOR = 57438
const PARTITION = 57439
const OVER = 57440
const COMMIT = 57441
const ROLLBACK = 57442
const CONTINUE = 57443
const BREAK = 57444
const EXIT = 57445
const PRINT = 57446
const PRINTF = 57447
const SOURCE = 57448
const FUNCTION = 57449
const BEGIN = 57450
const RETURN = 57451
const VAR = 57452
const COMPARISON_OP = 57453
const STRING_OP = 57454
const SUBSTITUTION_OP = 57455
const UMINUS = 57456
const UPLUS = 57457

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"TIES",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"NULLS",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"BEGIN",
	"RETURN",
	"VAR",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1702

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 116,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 91,
	58, 96,
	59, 96,
	60, 96,
	-2, 107,
	-1, 121,
	64, 293,
	68, 293,
	69, 293,
	-2, 309,
	-1, 123,
	64, 293,
	68, 293,
	69, 293,
	-2, 240,
	-1, 133,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 157,
	79, 233,
	-2, 293,
	-1, 165,
	83, 3,
	-2, 116,
	-1, 195,
	4, 83,
	-2, 293,
	-1, 196,
	4, 84,
	-2, 293,
	-1, 214,
	70, 0,
	111, 0,
	118, 0,
	-2, 163,
	-1, 231,
	96, 107,
	123, 240,
	-2, 293,
	-1, 246,
	77, 3,
	81, 3,
	83, 3,
	-2, 116,
	-1, 265,
	48, 295,
	50, 299,
	-2, 242,
	-1, 283,
	64, 293,
	68, 293,
	69, 293,
	-2, 226,
	-1, 293,
	64, 293,
	68, 293,
	69, 293,
	-2, 288,
	-1, 310,
	83, 1,
	-2, 116,
	-1, 318,
	70, 0,
	111, 0,
	118, 0,
	-2, 172,
	-1, 323,
	96, 107,
	123, 197,
	-2, 293,
	-1, 341,
	83, 3,
	-2, 116,
	-1, 344,
	64, 293,
	68, 293,
	69, 293,
	-2, 112,
	-1, 348,
	64, 293,
	68, 293,
	69, 293,
	-2, 152,
	-1, 361,
	50, 299,
	-2, 295,
	-1, 374,
	64, 293,
	68, 293,
	69, 293,
	-2, 102,
	-1, 410,
	83, 237,
	-2, 293,
	-1, 420,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 422,
	64, 293,
	68, 293,
	69, 293,
	-2, 115,
	-1, 469,
	83, 5,
	-2, 116,
	-1, 473,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 479,
	79, 234,
	81, 234,
	83, 234,
	-2, 293,
	-1, 488,
	77, 1,
	81, 1,
	83, 1,
	-2, 25,
	-1, 498,
	64, 293,
	68, 293,
	69, 293,
	-2, 255,
	-1, 504,
	64, 293,
	68, 293,
	69, 293,
	-2, 106,
	-1, 512,
	64, 293,
	68, 293,
	69, 293,
	-2, 59,
	-1, 519,
	77, 5,
	81, 5,
	83, 5,
	-2, 116,
	-1, 526,
	83, 5,
	-2, 116,
	-1, 537,
	83, 3,
	-2, 116,
	-1, 564,
	64, 293,
	68, 293,
	69, 293,
	-2, 309,
	-1, 577,
	64, 293,
	68, 293,
	69, 293,
	-2, 224,
	-1, 587,
	77, 5,
	81, 5,
	83, 5,
	-2, 116,
	-1, 588,
	83, 7,
	-2, 116,
	-1, 594,
	77, 3,
	81, 3,
	83, 3,
	-2, 116,
	-1, 603,
	77, 7,
	81, 7,
	83, 7,
	-2, 116,
	-1, 618,
	83, 5,
	-2, 116,
	-1, 624,
	83, 7,
	-2, 116,
	-1, 632,
	77, 5,
	81, 5,
	83, 5,
	-2, 116,
	-1, 636,
	77, 1,
	81, 5,
	83, 5,
	-2, 116,
	-1, 639,
	77, 5,
	81, 5,
	83, 5,
	-2, 27,
	-1, 644,
	109, 23,
	-2, 20,
	-1, 649,
	83, 7,
	-2, 116,
	-1, 662,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 663,
	83, 3,
	-2, 116,
	-1, 667,
	77, 7,
	81, 7,
	83, 7,
	-2, 116,
	-1, 669,
	109, 47,
	-2, 44,
	-1, 675,
	83, 3,
	-2, 116,
	-1, 677,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
}

const yyPrivate = 57344

const yyLast = 2370

var yyAct = [...]int{

	65, 24, 658, 24, 616, 546, 647, 581, 168, 401,
	412, 88, 265, 458, 572, 535, 439, 453, 49, 423,
	61, 39, 349, 39, 353, 280, 303, 273, 107, 108,
	264, 245, 209, 1, 459, 41, 362, 266, 431, 345,
	89, 308, 171, 176, 71, 360, 105, 149, 125, 69,
	96, 52, 138, 103, 276, 325, 365, 152, 366, 367,
	368, 363, 250, 376, 361, 381, 153, 145, 144, 147,
	152, 152, 137, 511, 495, 481, 129, 434, 602, 141,
	601, 164, 677, 122, 51, 91, 142, 143, 40, 167,
	426, 134, 395, 379, 173, 173, 141, 167, 140, 139,
	261, 183, 184, 142, 143, 350, 202, 188, 238, 237,
	192, 193, 194, 146, 134, 615, 613, 600, 596, 141,
	136, 140, 139, 569, 568, 38, 142, 143, 203, 160,
	97, 172, 172, 364, 24, 531, 530, 175, 141, 515,
	140, 139, 513, 519, 37, 142, 143, 510, 507, 494,
	186, 484, 482, 229, 39, 480, 2, 97, 37, 93,
	465, 94, 452, 92, 38, 398, 24, 253, 394, 239,
	300, 259, 319, 147, 262, 173, 137, 3, 173, 254,
	38, 291, 286, 269, 271, 228, 39, 227, 255, 584,
	215, 207, 239, 578, 239, 556, 552, 391, 333, 189,
	306, 186, 330, 328, 284, 287, 351, 304, 275, 105,
	208, 99, 234, 102, 435, 91, 197, 146, 134, 309,
	307, 129, 467, 141, 136, 140, 139, 206, 147, 255,
	142, 143, 43, 526, 278, 279, 469, 553, 506, 99,
	321, 131, 292, 387, 583, 478, 406, 24, 298, 297,
	485, 299, 43, 418, 205, 131, 666, 110, 656, 286,
	315, 356, 173, 640, 358, 314, 99, 39, 369, 635,
	301, 626, 146, 173, 123, 114, 115, 417, 337, 159,
	621, 593, 99, 591, 570, 558, 489, 472, 304, 385,
	356, 356, 359, 50, 87, 409, 130, 335, 384, 172,
	399, 336, 304, 371, 357, 675, 624, 618, 389, 121,
	130, 24, 109, 341, 382, 650, 619, 255, 132, 649,
	618, 235, 247, 383, 235, 651, 326, 375, 392, 377,
	378, 39, 408, 631, 539, 112, 113, 116, 117, 148,
	419, 414, 24, 402, 416, 355, 650, 154, 155, 311,
	157, 400, 356, 162, 163, 538, 311, 538, 672, 537,
	310, 430, 39, 62, 26, 173, 26, 665, 642, 135,
	634, 443, 611, 421, 386, 388, 592, 528, 471, 543,
	286, 449, 81, 82, 83, 385, 84, 85, 356, 37,
	425, 195, 196, 182, 493, 442, 304, 433, 438, 444,
	84, 244, 284, 247, 204, 448, 286, 437, 217, 210,
	211, 214, 216, 218, 219, 220, 221, 222, 223, 224,
	225, 24, 468, 147, 415, 664, 461, 286, 231, 451,
	56, 11, 37, 11, 243, 356, 432, 173, 242, 589,
	166, 39, 173, 277, 490, 475, 158, 179, 86, 499,
	440, 550, 487, 502, 503, 501, 283, 356, 356, 497,
	500, 496, 86, 514, 293, 441, 492, 178, 179, 180,
	24, 436, 432, 491, 24, 343, 257, 365, 286, 366,
	367, 368, 363, 547, 548, 361, 428, 429, 598, 24,
	39, 316, 534, 318, 39, 505, 356, 26, 247, 477,
	447, 173, 536, 173, 405, 258, 529, 323, 446, 39,
	327, 373, 385, 549, 169, 551, 462, 532, 460, 355,
	24, 41, 288, 289, 338, 555, 565, 24, 554, 26,
	101, 290, 344, 348, 545, 562, 541, 542, 24, 100,
	39, 508, 509, 128, 89, 516, 470, 39, 38, 374,
	518, 173, 571, 397, 576, 380, 38, 580, 39, 454,
	455, 456, 457, 579, 11, 296, 370, 170, 365, 573,
	366, 367, 368, 363, 263, 274, 361, 488, 260, 304,
	432, 365, 177, 366, 367, 368, 403, 38, 24, 24,
	608, 597, 599, 272, 120, 24, 11, 174, 40, 533,
	559, 410, 476, 124, 24, 595, 38, 566, 39, 39,
	26, 620, 127, 181, 104, 39, 70, 68, 422, 24,
	67, 66, 627, 617, 39, 24, 612, 9, 354, 8,
	630, 7, 324, 24, 156, 58, 281, 24, 282, 39,
	24, 648, 268, 267, 582, 39, 614, 520, 74, 230,
	24, 607, 57, 39, 283, 657, 231, 39, 655, 60,
	39, 53, 59, 24, 24, 670, 607, 89, 24, 529,
	39, 54, 540, 427, 26, 347, 24, 11, 24, 474,
	348, 42, 622, 39, 39, 346, 479, 607, 39, 44,
	45, 46, 47, 48, 247, 607, 39, 520, 39, 628,
	126, 348, 90, 633, 520, 26, 342, 421, 106, 487,
	498, 638, 607, 118, 119, 256, 445, 643, 372, 95,
	559, 504, 16, 63, 111, 4, 669, 14, 659, 13,
	607, 10, 604, 15, 12, 512, 605, 248, 669, 521,
	669, 11, 5, 603, 246, 0, 673, 604, 0, 0,
	0, 247, 348, 0, 633, 0, 638, 0, 0, 0,
	0, 0, 0, 0, 0, 520, 520, 0, 604, 0,
	0, 0, 11, 0, 0, 0, 639, 0, 0, 0,
	0, 520, 0, 0, 26, 187, 0, 0, 0, 190,
	191, 0, 0, 604, 0, 0, 520, 560, 561, 564,
	0, 0, 520, 198, 199, 0, 201, 604, 0, 0,
	520, 604, 0, 574, 644, 0, 0, 520, 0, 604,
	247, 639, 577, 0, 0, 0, 0, 520, 0, 0,
	0, 0, 247, 26, 488, 0, 0, 26, 0, 55,
	644, 644, 0, 0, 0, 520, 0, 76, 0, 0,
	320, 11, 26, 644, 0, 644, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 294, 295, 0, 145, 144, 147,
	21, 623, 137, 26, 0, 0, 0, 0, 0, 0,
	26, 0, 0, 0, 629, 0, 0, 6, 0, 0,
	11, 26, 0, 0, 11, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 0, 11,
	653, 654, 0, 146, 134, 660, 0, 0, 0, 141,
	136, 140, 139, 339, 340, 0, 142, 143, 200, 0,
	0, 0, 0, 674, 0, 151, 0, 0, 0, 0,
	11, 26, 26, 0, 0, 0, 0, 11, 26, 0,
	0, 0, 150, 0, 0, 0, 0, 26, 11, 145,
	144, 147, 0, 0, 137, 0, 0, 0, 0, 390,
	151, 0, 26, 0, 393, 0, 0, 396, 26, 0,
	0, 98, 0, 0, 0, 0, 26, 150, 240, 240,
	26, 0, 0, 26, 0, 0, 236, 241, 0, 0,
	0, 0, 0, 26, 270, 146, 134, 270, 11, 11,
	0, 141, 136, 140, 139, 11, 26, 26, 142, 143,
	200, 26, 0, 0, 11, 0, 0, 0, 0, 26,
	0, 26, 0, 0, 0, 0, 0, 0, 0, 11,
	0, 0, 240, 240, 0, 11, 0, 240, 0, 0,
	312, 313, 0, 11, 0, 317, 0, 11, 0, 0,
	11, 463, 0, 0, 0, 0, 466, 329, 331, 0,
	11, 0, 240, 334, 0, 0, 151, 0, 151, 0,
	332, 0, 0, 11, 11, 0, 0, 0, 11, 0,
	0, 486, 0, 302, 0, 305, 11, 0, 11, 0,
	0, 0, 270, 0, 0, 0, 98, 0, 98, 98,
	151, 0, 0, 0, 0, 0, 38, 81, 82, 83,
	0, 84, 85, 40, 0, 0, 0, 150, 0, 0,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	81, 82, 83, 527, 84, 85, 40, 352, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 240, 0,
	240, 0, 0, 240, 0, 0, 413, 0, 413, 0,
	0, 413, 0, 0, 0, 77, 0, 0, 0, 78,
	240, 0, 0, 86, 0, 232, 0, 75, 413, 557,
	0, 0, 0, 0, 270, 0, 563, 80, 77, 151,
	567, 151, 78, 0, 151, 0, 86, 0, 232, 0,
	75, 575, 0, 0, 0, 0, 150, 0, 150, 0,
	80, 150, 145, 144, 147, 0, 0, 137, 0, 233,
	586, 72, 73, 79, 64, 450, 590, 667, 145, 144,
	147, 0, 0, 137, 0, 240, 0, 0, 0, 0,
	0, 0, 233, 483, 72, 73, 79, 64, 185, 0,
	0, 0, 151, 609, 610, 0, 270, 0, 146, 134,
	0, 270, 0, 0, 141, 136, 140, 139, 0, 464,
	0, 142, 143, 625, 146, 134, 0, 0, 0, 0,
	141, 136, 140, 139, 0, 0, 226, 142, 143, 200,
	0, 0, 0, 637, 0, 0, 641, 0, 0, 0,
	0, 240, 0, 0, 652, 0, 145, 144, 147, 413,
	0, 137, 0, 661, 0, 0, 0, 0, 0, 0,
	270, 0, 270, 663, 0, 0, 0, 671, 151, 0,
	38, 81, 82, 83, 676, 84, 85, 40, 0, 0,
	0, 38, 81, 82, 83, 517, 84, 85, 40, 0,
	0, 0, 146, 134, 0, 151, 0, 0, 141, 136,
	140, 139, 0, 240, 0, 142, 143, 0, 0, 0,
	270, 413, 544, 38, 81, 82, 83, 0, 84, 85,
	40, 0, 0, 0, 0, 0, 0, 213, 212, 77,
	0, 0, 0, 78, 0, 0, 0, 86, 0, 0,
	77, 75, 0, 0, 78, 0, 0, 0, 86, 0,
	0, 80, 75, 38, 81, 82, 83, 151, 84, 85,
	40, 0, 80, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 585, 0, 78, 0, 0, 0,
	86, 0, 0, 424, 75, 72, 73, 79, 64, 0,
	0, 0, 0, 0, 80, 0, 72, 73, 79, 64,
	185, 145, 144, 147, 0, 0, 137, 0, 0, 0,
	425, 0, 77, 0, 0, 0, 78, 0, 0, 0,
	86, 0, 0, 0, 75, 43, 0, 0, 72, 73,
	79, 64, 0, 0, 80, 38, 81, 82, 83, 0,
	84, 85, 40, 0, 0, 0, 0, 146, 134, 0,
	0, 0, 0, 141, 136, 140, 139, 0, 0, 0,
	142, 143, 0, 0, 0, 0, 285, 0, 72, 73,
	79, 64, 0, 38, 81, 82, 83, 0, 84, 85,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 0, 78, 0,
	0, 0, 86, 0, 0, 37, 75, 0, 0, 0,
	0, 0, 38, 81, 82, 83, 80, 84, 85, 40,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 0, 0, 0, 78, 0, 0, 0,
	86, 0, 0, 0, 75, 0, 0, 0, 0, 0,
	72, 73, 79, 64, 80, 145, 144, 147, 0, 0,
	137, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	662, 77, 0, 0, 0, 78, 0, 0, 0, 86,
	0, 0, 0, 75, 0, 0, 322, 0, 72, 73,
	79, 64, 0, 80, 0, 0, 0, 0, 145, 144,
	147, 146, 134, 137, 0, 0, 0, 141, 136, 140,
	139, 0, 0, 636, 142, 143, 145, 144, 147, 0,
	0, 137, 0, 0, 0, 0, 0, 72, 73, 79,
	64, 632, 145, 144, 147, 0, 0, 137, 0, 0,
	0, 0, 0, 0, 146, 134, 0, 594, 0, 0,
	141, 136, 140, 139, 145, 144, 147, 142, 143, 137,
	0, 0, 146, 134, 0, 0, 0, 0, 141, 136,
	140, 139, 145, 144, 147, 142, 143, 137, 146, 134,
	0, 0, 0, 0, 141, 136, 140, 139, 0, 588,
	0, 142, 143, 0, 0, 0, 0, 145, 144, 147,
	146, 134, 137, 0, 0, 43, 141, 136, 140, 139,
	0, 0, 587, 142, 143, 145, 144, 147, 146, 134,
	137, 0, 0, 0, 141, 136, 140, 139, 0, 0,
	473, 142, 143, 145, 144, 147, 0, 0, 137, 0,
	0, 0, 0, 146, 134, 0, 0, 0, 420, 141,
	136, 140, 139, 0, 0, 0, 142, 143, 145, 144,
	147, 146, 134, 137, 0, 0, 0, 141, 136, 140,
	139, 407, 0, 411, 142, 143, 0, 0, 0, 146,
	134, 0, 0, 0, 0, 141, 136, 140, 139, 0,
	0, 0, 142, 143, 0, 0, 0, 0, 145, 144,
	147, 0, 0, 137, 146, 134, 0, 0, 0, 0,
	141, 136, 140, 139, 145, 144, 147, 142, 143, 137,
	0, 0, 0, 0, 145, 144, 147, 0, 0, 137,
	0, 165, 0, 0, 0, 145, 144, 147, 0, 133,
	137, 0, 0, 0, 146, 134, 0, 0, 0, 0,
	141, 136, 140, 139, 404, 144, 147, 142, 143, 137,
	146, 134, 0, 0, 0, 0, 141, 136, 140, 139,
	146, 134, 0, 142, 143, 0, 141, 136, 140, 139,
	0, 146, 134, 142, 143, 0, 0, 141, 136, 140,
	139, 145, 0, 147, 142, 143, 137, 0, 0, 0,
	146, 134, 0, 0, 0, 0, 141, 136, 140, 139,
	0, 0, 0, 142, 143, 38, 81, 82, 83, 0,
	84, 85, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 146, 134, 0,
	38, 0, 0, 141, 136, 140, 139, 40, 0, 0,
	142, 143, 33, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 22, 0, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 38, 0, 0,
	0, 0, 86, 0, 40, 0, 75, 0, 0, 33,
	0, 0, 0, 0, 0, 0, 80, 0, 0, 22,
	0, 0, 23, 0, 0, 0, 0, 0, 0, 0,
	37, 0, 668, 0, 646, 0, 0, 0, 0, 0,
	17, 0, 0, 30, 27, 28, 29, 0, 0, 0,
	72, 73, 79, 64, 0, 31, 32, 251, 252, 20,
	34, 35, 36, 38, 0, 524, 25, 37, 0, 606,
	40, 523, 0, 0, 0, 33, 0, 525, 0, 0,
	30, 27, 28, 29, 0, 22, 0, 0, 23, 0,
	0, 0, 31, 32, 251, 252, 0, 34, 35, 36,
	38, 0, 524, 25, 0, 0, 0, 40, 0, 0,
	0, 0, 33, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 22, 0, 0, 23, 0, 0, 0, 0,
	0, 0, 0, 37, 0, 249, 0, 19, 0, 0,
	0, 0, 0, 17, 0, 0, 30, 27, 28, 29,
	0, 0, 0, 0, 0, 0, 0, 0, 31, 32,
	251, 252, 20, 34, 35, 36, 38, 0, 0, 25,
	37, 0, 645, 40, 646, 0, 0, 0, 33, 0,
	17, 0, 0, 30, 27, 28, 29, 0, 22, 0,
	0, 23, 0, 0, 0, 31, 32, 0, 0, 20,
	34, 35, 36, 38, 0, 524, 25, 0, 0, 0,
	40, 0, 0, 0, 0, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 22, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 37, 0, 522, 0,
	523, 0, 0, 0, 0, 0, 525, 0, 0, 30,
	27, 28, 29, 0, 0, 0, 0, 0, 0, 0,
	0, 31, 32, 0, 0, 0, 34, 35, 36, 0,
	0, 524, 25, 37, 0, 18, 0, 19, 0, 0,
	0, 0, 0, 17, 0, 0, 30, 27, 28, 29,
	0, 0, 0, 0, 0, 0, 0, 0, 31, 32,
	0, 0, 20, 34, 35, 36, 0, 0, 0, 25,
}
var yyPact = [...]int{

	2259, -1000, 2259, -1000, -1000, -1000, 116, 116, 116, 116,
	116, 116, -1000, -1000, -1000, -1000, -1000, 602, 1588, 1588,
	116, 144, 509, 500, 91, 587, 116, 602, 602, 227,
	244, 116, 116, 582, 1588, 1588, 598, 518, -1000, 108,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 211,
	1839, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 108, -1000, -1000, 1511, -56, -1000, -1000, -1000, -1000,
	-1000, -1000, 1588, 1588, -1000, 1588, 161, 89, 1588, 1588,
	602, -1000, -1000, -1000, -1000, -1000, -1000, 1829, 376, -37,
	-1000, 476, 547, 602, 583, 568, 409, 320, -1000, 315,
	602, 602, 1357, 116, -19, 86, -1000, 116, 116, 602,
	602, 602, -1000, -1000, -1000, -1000, 1588, 1588, -1000, -1000,
	98, 1669, 116, 904, 116, -1000, -20, 602, -1000, 1588,
	168, 105, 88, 2259, 1588, 1346, 1991, 356, 344, 1588,
	1588, 1588, 1588, 1588, 1588, 1588, -1000, -1000, 1183, 64,
	62, 117, 602, 1145, -1000, -1000, 242, 1850, 47, 72,
	370, -1000, 106, -1000, 331, 2119, 602, 587, 432, 464,
	602, 562, -26, 552, 160, 579, 557, 160, 382, 382,
	382, 1429, -1000, 83, 495, -1000, 58, -1000, 587, 1588,
	-1000, -1000, 116, 116, 545, 1850, 1850, 377, -1000, -1000,
	1588, -1000, 518, 148, 1850, 315, 602, 315, 77, 279,
	21, 1850, 72, 72, -21, 391, 1588, 72, 1588, -38,
	-38, -1000, -1000, -1000, 1906, 106, -1000, -1000, -1000, -1000,
	49, 812, 1549, -1000, 245, 1588, -1000, 81, 80, 1511,
	-1000, -1000, 72, 76, 356, 218, 2119, -1000, -1000, 1588,
	-1000, 116, 116, 231, -1000, -29, 430, 1588, 1588, 84,
	602, 602, -1000, 602, 557, 7, -1000, 544, -1000, -1000,
	-1000, -1000, 160, 472, 1588, -1000, 117, -1000, 117, 117,
	-1000, -33, 533, 1850, -1000, -1000, -57, 602, 176, 121,
	602, -1000, -1000, 1850, -1000, -1000, 587, 116, -1000, -1000,
	75, 602, 116, 45, -34, 116, 531, 42, 217, 279,
	2259, 1588, -1000, -1000, -1000, -1000, 1869, -1000, -21, -1000,
	463, 150, -1000, 1813, 212, 242, 1588, 1773, 70, -1000,
	70, -1000, 359, 70, -1000, 189, 262, -1000, 1748, -1000,
	-1000, 2119, -1000, 1588, 1416, -1000, -36, 444, 1850, -1000,
	72, 602, -1000, 568, -49, 96, -70, -1000, -1000, -1000,
	423, 532, 400, 417, 160, -1000, -1000, -1000, -1000, -1000,
	602, 557, 468, 459, 1850, 388, -1000, -1000, 388, 1429,
	602, 1122, 39, 528, 602, 483, -1000, 602, 479, 116,
	-1000, 315, 37, -1000, 136, 602, -1000, 128, 524, 302,
	204, 272, -1000, 1730, 1588, 1588, 597, 458, 149, -1000,
	1850, 1588, 32, -51, 29, 72, 28, -1000, 155, 116,
	2119, 203, 1850, -1000, 316, 427, 1588, 322, -1000, -1000,
	-1000, 26, -52, 557, 602, 1588, 160, 412, 400, 405,
	-1000, 160, -1000, -1000, -1000, -1000, 1588, 1588, -1000, -1000,
	140, 25, -1000, -1000, -1000, -1000, 602, 602, 24, -53,
	1588, 19, 602, -1000, 16, 523, -1000, 315, -1000, 2222,
	125, 116, 301, 2259, 106, 13, 12, 1588, 594, 1850,
	-1000, 72, -1000, -1000, -1000, -1000, -1000, 278, 2259, 256,
	-1000, -1000, -1000, 505, 358, 602, -1000, -1000, 1850, 428,
	160, 403, 160, 519, 1850, -1000, 74, 139, -1000, -1000,
	528, 602, 1850, -1000, -1000, -1000, 73, 116, 202, 2222,
	-1000, -1000, 1588, 1588, 1389, 602, 2222, -1000, 116, -1000,
	-1000, -1000, 1, 0, -1000, 201, 278, 2119, 1588, 116,
	-1000, -1000, -1000, 72, -1000, -1000, -1000, 1588, 71, 519,
	160, 428, 147, 67, -1000, -1000, 315, -1000, 116, -1000,
	1712, 1687, 375, -1000, 1669, 225, 200, -1000, -1000, -1000,
	300, 198, 280, -1000, 1647, -1000, -1000, 1850, 602, 519,
	-1000, -5, 476, 447, 147, -6, -1000, 2222, 2053, 602,
	-1000, 116, 116, 296, 2119, -7, -1000, -1000, 1588, -8,
	-1000, 239, 197, 2053, -1000, -1000, 1588, -1000, 224, -1000,
	-1000, 116, -1000, -1000, -1000, -1000, 188, 226, 2222, 1588,
	272, 255, -1000, 1631, 2053, -1000, 294, 186, -1000, 1613,
	272, 116, 2053, 180, 116, 292, 2156, -1000, 238, 2222,
	247, -1000, 116, -1000, -1000, 1588, 1588, 175, 238, 2053,
	1588, 116, -1000, 1570, 1261, 361, 291, 173, 269, -1000,
	1167, -1000, 2156, 2016, 602, 116, 282, 2053, 1588, -1000,
	223, -1000, 116, -1000, 2, 2016, -1000, 2016,
}
var yyPgo = [...]int{

	0, 32, 31, 80, 78, 177, 156, 143, 744, 743,
	742, 739, 62, 737, 736, 734, 733, 731, 34, 13,
	17, 729, 727, 725, 724, 723, 722, 897, 63, 50,
	719, 43, 27, 718, 716, 8, 715, 19, 706, 880,
	700, 48, 51, 84, 274, 847, 10, 39, 685, 675,
	673, 672, 839, 671, 662, 661, 659, 430, 652, 649,
	648, 22, 7, 644, 37, 643, 12, 642, 5, 638,
	636, 635, 634, 55, 632, 38, 47, 30, 42, 26,
	25, 631, 629, 628, 24, 627, 9, 41, 14, 15,
	623, 4, 2, 6, 0, 621, 620, 617, 49, 616,
	44, 20, 11, 363, 614, 53, 613, 52, 45, 16,
	36, 54, 612, 369, 681,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	6, 6, 6, 7, 7, 8, 8, 9, 9, 10,
	10, 10, 10, 10, 11, 11, 11, 11, 11, 11,
	12, 12, 13, 13, 13, 14, 14, 14, 15, 15,
	16, 16, 17, 17, 17, 17, 17, 17, 18, 18,
	19, 19, 20, 20, 20, 20, 20, 21, 21, 21,
	21, 21, 22, 22, 22, 22, 23, 23, 24, 24,
	24, 24, 24, 24, 24, 25, 25, 26, 26, 26,
	26, 27, 28, 28, 28, 28, 29, 29, 30, 31,
	31, 32, 32, 33, 33, 34, 34, 35, 35, 36,
	36, 36, 37, 37, 38, 38, 39, 39, 40, 40,
	41, 41, 42, 42, 42, 42, 42, 42, 43, 43,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 45, 45, 46, 46, 47, 47,
	48, 48, 49, 49, 50, 50, 50, 51, 51, 52,
	53, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	55, 55, 55, 55, 55, 55, 55, 56, 56, 56,
	56, 57, 57, 58, 58, 59, 59, 59, 60, 60,
	60, 60, 61, 61, 62, 63, 63, 64, 64, 64,
	65, 65, 66, 66, 66, 66, 66, 66, 67, 67,
	67, 67, 67, 68, 68, 68, 69, 69, 69, 70,
	70, 71, 72, 72, 73, 73, 74, 74, 75, 75,
	76, 76, 77, 77, 78, 78, 79, 79, 80, 80,
	81, 81, 81, 81, 82, 83, 84, 84, 85, 85,
	86, 86, 87, 87, 88, 88, 89, 89, 90, 90,
	91, 91, 92, 92, 93, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 102, 103, 104, 104, 105,
	105, 106, 106, 107, 107, 108, 108, 109, 109, 110,
	110, 110, 110, 111, 111, 112, 112, 113, 113, 114,
	114,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	9, 7, 9, 2, 8, 9, 7, 9, 2, 3,
	2, 2, 8, 9, 1, 8, 9, 1, 3, 2,
	2, 2, 6, 6, 8, 5, 7, 7, 1, 3,
	1, 3, 0, 1, 1, 2, 2, 6, 3, 3,
	4, 6, 7, 9, 6, 4, 10, 11, 0, 1,
	1, 1, 1, 2, 2, 5, 6, 5, 3, 3,
	3, 5, 5, 4, 4, 4, 1, 1, 3, 0,
	2, 0, 2, 0, 3, 0, 2, 0, 3, 0,
	3, 4, 0, 2, 0, 2, 0, 2, 6, 9,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 1, 1, 3, 1, 3,
	2, 4, 1, 1, 0, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 4, 4, 6, 6, 4,
	6, 4, 4, 4, 6, 4, 4, 6, 4, 2,
	3, 3, 3, 3, 3, 2, 2, 3, 3, 2,
	2, 3, 4, 4, 1, 1, 2, 2, 7, 8,
	7, 8, 7, 8, 2, 0, 3, 1, 2, 3,
	1, 1, 1, 1, 2, 3, 1, 1, 5, 5,
	6, 6, 4, 0, 2, 4, 1, 1, 1, 1,
	3, 5, 0, 1, 4, 2, 0, 2, 1, 3,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	6, 9, 5, 8, 7, 3, 1, 3, 5, 6,
	4, 2, 0, 2, 4, 2, 0, 2, 4, 2,
	0, 2, 4, 2, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	3, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	1, 1, 1, 0, 1, 0, 1, 1, 1, 0,
	1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -23, -10, -27, -81, -82, -85,
	-17, -57, -15, -21, -22, -16, -26, 84, 76, 78,
	103, -39, 26, 29, -94, 110, -103, 88, 89, 90,
	87, 99, 100, 16, 104, 105, 106, 74, 4, -101,
	11, -1, -114, 116, -114, -114, -114, -114, -114, -94,
	-44, -43, -42, -55, -53, -52, -57, -58, -71, -54,
	-56, -101, -103, -25, 122, -94, -95, -96, -97, -98,
	-99, -100, 119, 120, -60, 75, -45, 63, 67, 121,
	85, 5, 6, 7, 9, 10, 71, -44, -102, -101,
	-114, -28, 19, 15, 17, -30, -29, 13, -52, 122,
	30, 30, 122, -105, -104, -101, -114, -94, -94, 85,
	30, -24, 91, 92, 31, 32, 93, 94, -114, -114,
	12, -44, -76, -44, 5, -41, -40, -112, 25, 113,
	85, 30, 107, 80, 112, -113, 118, 70, -107, 120,
	119, 117, 124, 125, 66, 65, 111, 67, -44, -76,
	-27, -39, 127, 122, -44, -44, -72, -44, -113, 118,
	-107, -52, -44, -44, -94, 82, 64, 126, -35, 38,
	20, -78, -64, -94, 14, -78, -31, 14, 58, 59,
	60, -106, 73, -94, -94, 123, -76, -114, 126, 113,
	-114, -114, -94, -94, -94, -44, -44, 118, -114, -114,
	126, -114, 126, -94, -44, 86, 122, 86, 122, -1,
	-44, -44, 62, 61, -44, -107, 68, 64, 69, -44,
	-44, -44, -44, -44, -44, -44, 123, 123, 123, -94,
	-59, -44, 73, 117, -73, 79, -45, 62, 61, 122,
	-52, -45, 68, 64, 70, -2, -8, -6, -13, 76,
	-12, 101, 102, -94, -102, -101, -36, 44, 41, -94,
	16, 126, -94, 22, -77, -66, -64, -65, -67, 23,
	-52, 24, 14, -32, 18, -77, -111, 61, -111, -111,
	-80, -70, -69, -44, -61, 117, -94, 122, 27, 28,
	36, 123, -105, -44, -114, -114, 20, -42, -76, -41,
	22, 122, -27, -79, -94, -27, 123, -102, -87, -86,
	81, 77, -45, -45, -98, -100, -44, -45, -44, 123,
	38, -35, 117, -44, -74, -73, 81, -44, 122, -52,
	122, -52, -45, 122, -52, -107, 83, -2, -44, -114,
	-114, 82, -38, 45, -44, -47, -48, -49, -44, -61,
	21, 122, -27, -84, -83, -43, -94, -78, -94, -32,
	-108, 57, -110, 54, 126, 49, 51, 52, 53, -94,
	22, -77, -33, 39, -44, -29, -28, -29, -29, 126,
	22, 122, -79, -18, 122, -94, -43, 122, -43, -102,
	-114, 122, -79, -114, 123, 126, -114, 22, 123, 83,
	-87, -86, -1, -44, 65, 41, 96, 38, -35, 83,
	-44, 80, -46, -45, -46, 65, -46, 88, 64, 78,
	80, -2, -44, -37, 47, 74, 126, -50, 42, 43,
	-46, -75, -43, -31, 126, 118, 48, -108, -110, -109,
	50, 48, -77, -94, -32, -34, 40, 41, -80, -94,
	123, -76, 123, -20, 31, 32, 33, 34, -19, -18,
	35, -75, 37, -114, -27, 123, -114, 86, -79, 108,
	22, 76, 83, 80, -44, -47, 5, 41, 96, -44,
	123, 126, 123, -45, 123, 95, -114, -2, -6, 83,
	-37, 46, -47, 72, 123, 126, -32, -84, -44, -66,
	48, -109, 48, -66, -44, -76, 98, 123, -43, -43,
	123, 126, -44, 123, -94, 123, 22, -27, -3, -7,
	-5, -11, 76, 78, 109, 84, 108, -114, 76, -1,
	123, 123, -47, 5, -46, -89, -88, 81, 77, 78,
	-51, 31, 32, 21, -27, -75, -68, 55, 56, -66,
	48, -66, 122, 98, -20, -19, 122, -114, 83, -3,
	-44, -44, -102, -114, -44, -94, -3, -114, 123, 123,
	83, -89, -88, -2, -44, -114, -46, -44, 122, -66,
	-68, -62, -63, 97, 122, -27, -114, 80, 82, 64,
	-114, 83, 76, 83, 80, -79, 123, -35, 41, -62,
	123, -3, -4, -9, -7, -14, 76, -12, -94, -114,
	-114, 76, -2, 123, -76, 123, -91, -90, 81, 77,
	-86, 83, -4, -44, 82, -114, 83, -91, -3, -44,
	-86, 78, 80, -4, 76, 83, 80, -114, -4, -7,
	83, -114, 76, -3, -5, 76, 78, -93, -92, 81,
	77, 78, -114, -44, -44, -102, 83, -93, -92, -4,
	-44, -114, 80, 82, 64, 76, 83, 80, 76, -12,
	-94, -114, 76, -4, -44, 82, -114, 80,
}
var yyDef = [...]int{

	-2, -2, -2, 20, 21, 22, 309, 309, 309, 309,
	309, 309, 15, 16, 17, 18, 19, 0, 0, 0,
	309, 0, 0, 0, 0, 0, 309, 0, 0, 0,
	78, 309, 309, 0, 0, 0, 0, 305, 276, 0,
	283, 2, 9, 310, 10, 11, 12, 13, 14, 0,
	293, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 116, 128, 122, 123, 124, 125,
	126, 127, 0, 0, 194, 232, 293, 0, 0, 0,
	0, 277, 278, 279, 280, 281, 282, 293, 0, 140,
	33, -2, 0, 0, 0, 99, 0, 291, 97, 116,
	0, 0, 0, 309, 289, 287, 49, 309, 309, 0,
	0, 0, 79, 80, 81, 82, 0, 0, 50, 51,
	0, -2, 309, -2, 309, 117, 120, 0, 306, 0,
	0, 0, 0, -2, 0, 0, 308, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 307, 294, 293, 0,
	0, 0, 0, 0, 185, 186, 0, -2, 0, 308,
	0, 179, 189, 190, 0, -2, 0, 0, 109, 0,
	0, 0, 244, 207, 0, 0, 101, 0, 303, 303,
	303, 0, 292, 0, 0, 191, 0, 48, 0, 0,
	68, 69, 309, 309, 0, -2, -2, 0, 88, 89,
	0, 90, 305, 0, 286, 116, 0, 116, 0, 262,
	160, 161, 0, 0, -2, 0, 0, 0, 0, 180,
	181, 182, 183, 184, 187, 188, 143, 144, 159, 129,
	0, -2, 0, 195, 236, 0, 162, 0, 0, 116,
	145, 164, 0, 0, 293, 0, -2, 25, 26, 0,
	44, 309, 309, 0, 285, 284, 114, 0, 0, 116,
	0, 0, 208, 0, 101, -2, 212, 213, 216, 217,
	210, 211, 0, 103, 0, 100, 0, 304, 0, 0,
	98, 248, 229, -2, 227, 228, 128, 0, 0, 0,
	0, 192, 290, -2, 70, 75, 0, 309, 241, 121,
	0, 0, 309, 0, 246, 309, 0, 0, 0, 262,
	-2, 0, 173, 176, 165, 166, 293, 169, -2, 193,
	0, 0, 196, -2, 0, 235, 0, 293, 116, 175,
	116, 178, 0, 116, 171, 0, 0, 4, 293, 40,
	41, -2, 91, 0, -2, 108, 148, 154, -2, 153,
	0, 0, 252, 99, 256, 0, 128, 245, 209, 258,
	0, -2, 297, 0, 0, 296, 300, 301, 302, 214,
	0, 101, 105, 0, -2, 93, 96, 94, 95, 0,
	0, 0, 0, 62, 0, 58, 55, 0, 0, 309,
	87, 116, 0, 67, 309, 0, 74, 0, 0, 0,
	0, 261, 263, 293, 0, 0, 0, 0, 0, 231,
	-2, 0, 0, 146, 0, 0, 0, 85, 0, 309,
	-2, 0, -2, 110, 112, 0, 0, 150, 155, 156,
	250, 0, 238, 101, 0, 0, 0, 0, 297, 0,
	298, 0, 243, 215, 259, 92, 0, 0, 249, 230,
	191, 0, 52, 53, 63, 64, 0, 0, 0, 60,
	0, 0, 0, 71, 0, 0, 72, 116, 247, -2,
	0, 309, 0, -2, 167, 108, 0, 0, 0, -2,
	174, 0, 177, 168, 170, 86, 31, 266, -2, 0,
	111, 113, 149, 0, 116, 0, 254, 257, -2, 223,
	0, 0, 0, 222, -2, 104, 0, 192, 65, 66,
	62, 0, -2, 56, 57, 118, 0, 309, 0, -2,
	23, 24, 0, 0, 309, 0, -2, 29, 309, 260,
	198, 200, 108, 0, 147, 0, 266, -2, 0, 309,
	151, 157, 158, 0, 253, 239, 218, 0, 0, 219,
	0, 223, 205, 0, 54, 61, 116, 73, 309, 6,
	293, 293, 0, 38, -2, 0, 0, 30, 199, 201,
	0, 0, 265, 267, 293, 32, 251, -2, 0, 221,
	220, 0, 107, 0, 205, 0, 76, -2, -2, 0,
	39, 309, 309, 0, -2, 0, 202, 204, 0, 0,
	119, 270, 0, -2, 27, 28, 0, 47, 0, 77,
	42, 309, 264, 225, 206, 203, 0, 270, -2, 0,
	0, 0, 8, 293, -2, 43, 0, 0, 271, 293,
	269, 309, -2, 0, 309, 0, -2, 36, 274, -2,
	0, 34, 309, 268, -2, 0, 0, 0, 274, -2,
	0, 309, 35, 293, 293, 0, 0, 0, 273, 275,
	293, 37, -2, -2, 0, 309, 0, -2, 0, -2,
	0, 45, 309, 272, 293, -2, 46, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 121, 3, 3, 3, 125, 3, 3,
	122, 123, 117, 120, 126, 119, 127, 124, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 116,
	3, 118,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:178
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:183
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:190
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:195
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:202
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:207
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:214
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:219
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:226
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:230
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:234
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:238
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:242
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:246
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:250
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:254
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:258
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:262
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:266
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:272
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:276
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:280
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:290
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:300
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:306
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:310
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:316
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:320
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:324
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 32:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:328
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:332
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:338
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:342
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:346
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:350
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:354
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:358
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:364
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:368
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:374
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:378
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:382
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:388
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:392
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:396
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:402
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:406
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:412
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:416
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:422
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:426
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 54:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:430
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:434
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 56:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:438
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:442
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression.(FieldReference), To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:448
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:452
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:458
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:462
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:468
		{
			yyVAL.expression = nil
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:472
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:476
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:480
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:484
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:490
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:494
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:498
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:502
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:506
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:512
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 73:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:516
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:520
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:524
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 76:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:530
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 77:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:534
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:540
		{
			yyVAL.expression = nil
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:544
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:548
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:552
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:556
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:560
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:564
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:570
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:574
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:580
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:584
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:588
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Values: yyDollar[2].expressions}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:592
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].token.Literal}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:598
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:610
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:620
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:629
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:638
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:649
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:653
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:659
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:665
		{
			yyVAL.expression = nil
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:669
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:675
		{
			yyVAL.expression = nil
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:679
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:685
		{
			yyVAL.expression = nil
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:689
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:695
		{
			yyVAL.expression = nil
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:699
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:705
		{
			yyVAL.expression = nil
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:709
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:715
		{
			yyVAL.expression = nil
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:719
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:723
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:729
		{
			yyVAL.expression = nil
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:733
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:739
		{
			yyVAL.expression = nil
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:743
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:749
		{
			yyVAL.expression = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:753
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:759
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 119:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:763
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:769
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:773
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:779
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:783
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:787
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:791
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:795
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:799
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:805
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Column: yyDollar[1].identifier}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:809
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:815
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:819
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:823
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:827
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:831
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:835
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:839
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:843
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:847
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:851
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:855
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:859
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:863
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:867
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:873
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:877
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:883
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:887
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:893
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:897
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:903
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:907
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:913
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:917
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:923
		{
			yyVAL.token = Token{}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:927
		{
			yyVAL.token = yyDollar[1].token
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:931
		{
			yyVAL.token = yyDollar[1].token
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:937
		{
			yyVAL.token = yyDollar[1].token
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:941
		{
			yyVAL.token = yyDollar[1].token
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:947
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:953
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:976
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:980
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:984
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:988
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:992
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:996
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1000
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1004
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1008
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1012
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1016
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1020
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1024
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1028
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1032
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1036
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1040
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1044
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1048
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1054
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1058
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1062
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1066
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1070
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1074
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1078
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1084
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1088
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1092
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1096
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1102
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1106
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1112
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Option: yyDollar[3].expression.(AggregateOption)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1116
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1122
		{
			yyVAL.expression = AggregateOption{Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}}}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1126
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[2].token)}}}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1130
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{yyDollar[2].expression}}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1136
		{
			orderBy := OrderByClause{OrderBy: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Items: yyDollar[6].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: orderBy}
		}
	case 199:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1141
		{
			orderBy := OrderByClause{OrderBy: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Items: yyDollar[7].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: orderBy}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1146
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: yyDollar[4].expression, SeparatorLit: yyDollar[5].token.Literal, Separator: yyDollar[6].token.Literal}
		}
	case 201:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1150
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: yyDollar[5].expression, SeparatorLit: yyDollar[6].token.Literal, Separator: yyDollar[7].token.Literal}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1156
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Over: yyDollar[4].token.Literal, AnalyticClause: yyDollar[6].expression.(AnalyticClause)}
		}
	case 203:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1160
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1166
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1172
		{
			yyVAL.expression = nil
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1176
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1182
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, Alias: yyDollar[2].identifier}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1190
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1196
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1200
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1206
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1210
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1214
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1218
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1222
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1226
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1232
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1236
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1240
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 221:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1244
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1248
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1254
		{
			yyVAL.expression = nil
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1258
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1262
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1268
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1272
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1276
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1282
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1286
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1292
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1298
		{
			yyVAL.expression = nil
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1302
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1308
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1312
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1318
		{
			yyVAL.expression = nil
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1322
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1328
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1332
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1338
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1342
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1348
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1352
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1358
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1362
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1368
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1372
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1378
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1382
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1388
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 251:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1392
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1396
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 253:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1400
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1406
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1412
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression.(FieldReference), Value: yyDollar[3].expression}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1418
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1422
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1428
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1433
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1440
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1444
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1450
		{
			yyVAL.procexpr = nil
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1454
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1460
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1464
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1470
		{
			yyVAL.procexpr = nil
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1474
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1480
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1484
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1490
		{
			yyVAL.procexpr = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1494
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1500
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1504
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1510
		{
			yyVAL.procexpr = nil
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1514
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1520
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1526
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1532
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1538
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1544
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1550
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1556
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1562
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1568
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1572
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1578
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1584
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1588
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1594
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1598
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1604
		{
			yyVAL.token = Token{}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1608
		{
			yyVAL.token = yyDollar[1].token
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1614
		{
			yyVAL.token = Token{}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1618
		{
			yyVAL.token = yyDollar[1].token
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1624
		{
			yyVAL.token = Token{}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1628
		{
			yyVAL.token = yyDollar[1].token
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1634
		{
			yyVAL.token = Token{}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1638
		{
			yyVAL.token = yyDollar[1].token
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1644
		{
			yyVAL.token = Token{}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1648
		{
			yyVAL.token = yyDollar[1].token
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1652
		{
			yyVAL.token = yyDollar[1].token
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1656
		{
			yyVAL.token = yyDollar[1].token
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1662
		{
			yyVAL.token = Token{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1666
		{
			yyVAL.token = yyDollar[1].token
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1672
		{
			yyVAL.token = Token{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1676
		{
			yyVAL.token = yyDollar[1].token
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1683
		{
			yyVAL.token = yyDollar[1].token
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1687
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1694
		{
			yyVAL.token = Token{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1698
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
