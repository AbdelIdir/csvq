//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const TRIGGER = 57447
const FUNCTION = 57448
const AGGREGATE = 57449
const BEGIN = 57450
const RETURN = 57451
const IGNORE = 57452
const WITHIN = 57453
const VAR = 57454
const TIES = 57455
const NULLS = 57456
const ERROR = 57457
const COUNT = 57458
const LISTAGG = 57459
const AGGREGATE_FUNCTION = 57460
const FUNCTION_WITH_INS = 57461
const COMPARISON_OP = 57462
const STRING_OP = 57463
const SUBSTITUTION_OP = 57464
const UMINUS = 57465
const UPLUS = 57466

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"TRIGGER",
	"FUNCTION",
	"AGGREGATE",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"TIES",
	"NULLS",
	"ERROR",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_INS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1887

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 137,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	75, 1,
	79, 1,
	81, 1,
	-2, 137,
	-1, 59,
	132, 216,
	-2, 137,
	-1, 105,
	57, 117,
	58, 117,
	59, 117,
	-2, 128,
	-1, 138,
	63, 332,
	67, 332,
	68, 332,
	-2, 348,
	-1, 140,
	63, 332,
	67, 332,
	68, 332,
	-2, 348,
	-1, 147,
	75, 1,
	79, 1,
	81, 1,
	-2, 137,
	-1, 176,
	77, 265,
	-2, 332,
	-1, 186,
	81, 3,
	-2, 137,
	-1, 211,
	63, 332,
	67, 332,
	68, 332,
	-2, 272,
	-1, 226,
	63, 332,
	67, 332,
	68, 332,
	-2, 99,
	-1, 227,
	63, 332,
	67, 332,
	68, 332,
	-2, 100,
	-1, 234,
	63, 332,
	67, 332,
	68, 332,
	-2, 348,
	-1, 241,
	69, 0,
	120, 0,
	127, 0,
	-2, 186,
	-1, 242,
	69, 0,
	120, 0,
	127, 0,
	-2, 188,
	-1, 282,
	75, 3,
	79, 3,
	81, 3,
	-2, 137,
	-1, 301,
	47, 334,
	49, 338,
	-2, 274,
	-1, 319,
	63, 332,
	67, 332,
	68, 332,
	-2, 258,
	-1, 333,
	63, 332,
	67, 332,
	68, 332,
	-2, 327,
	-1, 345,
	63, 332,
	67, 332,
	68, 332,
	-2, 348,
	-1, 351,
	81, 1,
	-2, 137,
	-1, 357,
	69, 0,
	120, 0,
	127, 0,
	-2, 197,
	-1, 383,
	81, 3,
	-2, 137,
	-1, 384,
	81, 3,
	-2, 137,
	-1, 387,
	63, 332,
	67, 332,
	68, 332,
	-2, 133,
	-1, 391,
	63, 332,
	67, 332,
	68, 332,
	-2, 177,
	-1, 405,
	49, 338,
	-2, 334,
	-1, 418,
	63, 332,
	67, 332,
	68, 332,
	-2, 123,
	-1, 466,
	81, 269,
	-2, 332,
	-1, 477,
	75, 1,
	79, 1,
	81, 1,
	-2, 137,
	-1, 480,
	63, 332,
	67, 332,
	68, 332,
	-2, 136,
	-1, 542,
	75, 1,
	79, 1,
	81, 1,
	-2, 137,
	-1, 544,
	77, 266,
	79, 266,
	81, 266,
	-2, 332,
	-1, 554,
	75, 1,
	79, 1,
	81, 1,
	-2, 26,
	-1, 565,
	63, 332,
	67, 332,
	68, 332,
	-2, 287,
	-1, 571,
	63, 332,
	67, 332,
	68, 332,
	-2, 127,
	-1, 585,
	63, 332,
	67, 332,
	68, 332,
	-2, 64,
	-1, 590,
	81, 5,
	-2, 137,
	-1, 596,
	132, 84,
	135, 84,
	-2, 332,
	-1, 608,
	81, 3,
	-2, 137,
	-1, 636,
	75, 5,
	79, 5,
	81, 5,
	-2, 137,
	-1, 642,
	81, 5,
	-2, 137,
	-1, 643,
	81, 5,
	-2, 137,
	-1, 656,
	63, 332,
	67, 332,
	68, 332,
	-2, 256,
	-1, 676,
	63, 332,
	67, 332,
	68, 332,
	-2, 348,
	-1, 684,
	75, 3,
	79, 3,
	81, 3,
	-2, 137,
	-1, 697,
	75, 5,
	79, 5,
	81, 5,
	-2, 137,
	-1, 698,
	81, 7,
	-2, 137,
	-1, 704,
	81, 5,
	-2, 137,
	-1, 723,
	75, 7,
	79, 7,
	81, 7,
	-2, 137,
	-1, 743,
	81, 5,
	-2, 137,
	-1, 749,
	81, 7,
	-2, 137,
	-1, 750,
	81, 7,
	-2, 137,
	-1, 759,
	75, 5,
	79, 5,
	81, 5,
	-2, 137,
	-1, 765,
	75, 1,
	79, 5,
	81, 5,
	-2, 137,
	-1, 768,
	75, 5,
	79, 5,
	81, 5,
	-2, 28,
	-1, 774,
	109, 24,
	-2, 22,
	-1, 779,
	81, 7,
	-2, 137,
	-1, 795,
	75, 1,
	79, 1,
	81, 1,
	-2, 137,
	-1, 796,
	81, 3,
	-2, 137,
	-1, 801,
	75, 7,
	79, 7,
	81, 7,
	-2, 137,
	-1, 803,
	109, 50,
	-2, 47,
	-1, 810,
	81, 3,
	-2, 137,
	-1, 811,
	81, 3,
	-2, 137,
	-1, 813,
	75, 1,
	79, 1,
	81, 1,
	-2, 137,
}

const yyPrivate = 57344

const yyLast = 2706

var yyAct = [...]int{

	73, 24, 741, 24, 102, 777, 210, 239, 1, 281,
	50, 790, 430, 457, 191, 618, 606, 283, 2, 489,
	2, 522, 650, 721, 301, 444, 469, 121, 517, 442,
	126, 127, 60, 318, 445, 498, 481, 308, 399, 88,
	406, 404, 300, 388, 200, 349, 21, 315, 523, 320,
	80, 78, 194, 142, 205, 297, 110, 61, 117, 366,
	302, 311, 152, 76, 40, 420, 163, 167, 535, 797,
	156, 536, 155, 154, 160, 159, 161, 157, 158, 151,
	307, 425, 156, 305, 197, 120, 167, 105, 813, 157,
	158, 52, 299, 184, 409, 699, 410, 411, 412, 407,
	187, 231, 405, 169, 584, 562, 166, 168, 196, 196,
	190, 393, 167, 547, 533, 207, 196, 532, 516, 493,
	70, 48, 298, 48, 484, 221, 222, 423, 146, 225,
	149, 148, 188, 236, 722, 213, 156, 150, 155, 154,
	101, 188, 720, 157, 158, 237, 119, 119, 24, 123,
	166, 179, 49, 752, 146, 739, 738, 737, 286, 146,
	166, 199, 39, 195, 195, 2, 736, 188, 261, 693,
	264, 208, 188, 41, 42, 47, 43, 44, 45, 46,
	735, 408, 719, 711, 710, 706, 705, 24, 289, 644,
	292, 113, 111, 290, 196, 161, 165, 629, 151, 196,
	628, 298, 196, 627, 626, 235, 322, 625, 39, 599,
	40, 298, 586, 583, 243, 579, 573, 270, 273, 637,
	3, 394, 3, 263, 561, 549, 548, 636, 266, 267,
	74, 262, 105, 265, 148, 268, 546, 539, 343, 156,
	280, 155, 154, 531, 310, 692, 157, 158, 528, 149,
	148, 515, 475, 350, 296, 156, 150, 155, 154, 464,
	463, 691, 157, 158, 360, 313, 314, 271, 48, 462,
	461, 347, 332, 441, 331, 258, 260, 40, 190, 336,
	259, 690, 689, 24, 666, 356, 342, 358, 359, 686,
	346, 660, 379, 657, 354, 353, 322, 271, 396, 196,
	402, 364, 647, 645, 413, 453, 429, 48, 196, 291,
	113, 428, 427, 209, 369, 426, 374, 372, 166, 41,
	42, 47, 43, 44, 45, 46, 335, 370, 431, 434,
	402, 402, 401, 338, 119, 337, 431, 436, 403, 448,
	327, 376, 185, 166, 113, 392, 449, 174, 439, 431,
	415, 398, 24, 173, 195, 172, 116, 161, 494, 458,
	228, 454, 435, 437, 589, 209, 52, 3, 419, 2,
	421, 422, 111, 214, 107, 146, 108, 432, 106, 278,
	348, 166, 141, 166, 24, 24, 41, 42, 47, 43,
	44, 45, 46, 478, 479, 402, 456, 667, 491, 471,
	560, 472, 558, 48, 433, 52, 3, 665, 551, 196,
	470, 177, 470, 704, 470, 502, 630, 166, 178, 166,
	488, 166, 551, 643, 322, 508, 279, 490, 695, 642,
	631, 590, 664, 470, 434, 217, 663, 402, 662, 661,
	624, 688, 550, 800, 492, 334, 497, 496, 153, 788,
	474, 501, 770, 503, 769, 764, 525, 753, 447, 751,
	361, 746, 291, 362, 363, 71, 27, 49, 27, 490,
	703, 507, 48, 473, 702, 683, 669, 377, 24, 648,
	510, 511, 512, 513, 556, 322, 125, 553, 216, 555,
	113, 541, 465, 455, 402, 554, 196, 378, 811, 810,
	166, 196, 3, 780, 48, 48, 750, 779, 545, 749,
	744, 218, 219, 572, 743, 269, 384, 431, 40, 557,
	566, 402, 402, 383, 743, 570, 401, 587, 559, 580,
	563, 782, 564, 568, 392, 781, 609, 180, 74, 124,
	608, 131, 132, 24, 352, 269, 577, 367, 351, 758,
	603, 611, 610, 581, 582, 24, 476, 780, 593, 594,
	2, 352, 50, 402, 609, 807, 598, 592, 196, 40,
	196, 3, 2, 799, 604, 772, 607, 763, 708, 198,
	682, 602, 617, 65, 10, 434, 10, 470, 206, 197,
	540, 24, 621, 39, 623, 490, 483, 615, 48, 129,
	130, 133, 134, 3, 3, 161, 633, 97, 166, 24,
	468, 245, 632, 27, 635, 244, 246, 275, 651, 798,
	700, 274, 509, 196, 649, 189, 514, 41, 42, 47,
	43, 44, 45, 46, 277, 276, 166, 24, 312, 659,
	248, 247, 655, 24, 24, 674, 203, 658, 39, 202,
	203, 204, 27, 447, 595, 470, 499, 447, 431, 622,
	670, 569, 681, 48, 567, 500, 677, 678, 99, 409,
	685, 410, 411, 412, 407, 48, 495, 405, 41, 42,
	47, 43, 44, 45, 46, 24, 409, 386, 410, 411,
	412, 294, 166, 713, 709, 486, 487, 3, 24, 24,
	728, 729, 712, 506, 295, 24, 51, 574, 575, 576,
	578, 48, 505, 53, 54, 55, 56, 57, 211, 605,
	734, 417, 192, 526, 24, 534, 40, 104, 732, 48,
	524, 10, 328, 329, 122, 745, 115, 58, 100, 135,
	136, 330, 613, 614, 24, 754, 197, 114, 27, 145,
	24, 24, 679, 600, 138, 597, 140, 48, 591, 757,
	24, 673, 3, 48, 48, 530, 24, 755, 424, 24,
	10, 341, 193, 603, 3, 309, 201, 137, 162, 778,
	24, 787, 49, 2, 789, 139, 94, 95, 96, 773,
	97, 98, 670, 144, 118, 79, 24, 24, 804, 805,
	170, 171, 24, 77, 75, 48, 176, 742, 8, 182,
	183, 24, 24, 2, 24, 400, 7, 27, 48, 48,
	478, 479, 162, 553, 212, 48, 6, 215, 3, 365,
	220, 554, 175, 223, 224, 41, 42, 47, 43, 44,
	45, 46, 67, 316, 48, 229, 230, 232, 233, 27,
	27, 99, 226, 227, 317, 304, 303, 727, 747, 687,
	234, 86, 66, 69, 48, 238, 10, 240, 241, 242,
	48, 48, 62, 249, 250, 251, 252, 253, 254, 255,
	48, 68, 727, 63, 760, 761, 48, 40, 612, 48,
	518, 519, 520, 521, 767, 485, 390, 786, 389, 143,
	48, 385, 293, 504, 3, 414, 416, 109, 727, 727,
	17, 16, 72, 128, 791, 14, 48, 48, 727, 446,
	443, 13, 48, 12, 319, 9, 724, 15, 339, 340,
	11, 48, 48, 333, 48, 10, 808, 725, 727, 284,
	638, 344, 4, 27, 723, 760, 761, 282, 767, 5,
	0, 724, 0, 0, 345, 803, 694, 0, 0, 0,
	727, 0, 0, 355, 0, 357, 0, 10, 10, 803,
	803, 0, 803, 0, 0, 0, 0, 724, 724, 714,
	715, 716, 717, 718, 0, 774, 0, 768, 368, 0,
	0, 0, 0, 0, 381, 382, 41, 42, 47, 43,
	44, 45, 46, 0, 380, 0, 0, 724, 27, 164,
	740, 0, 0, 387, 391, 774, 774, 0, 0, 0,
	27, 0, 0, 0, 724, 0, 0, 0, 418, 724,
	774, 774, 0, 774, 0, 0, 0, 0, 724, 724,
	409, 768, 410, 411, 412, 407, 619, 620, 405, 450,
	451, 0, 452, 164, 0, 160, 27, 161, 0, 0,
	151, 10, 0, 164, 0, 160, 159, 161, 0, 0,
	151, 459, 0, 0, 27, 0, 0, 0, 482, 0,
	0, 0, 0, 0, 0, 0, 466, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 159, 161, 0,
	0, 151, 27, 0, 483, 480, 0, 0, 27, 27,
	0, 149, 148, 0, 0, 0, 0, 156, 150, 155,
	154, 149, 148, 0, 157, 158, 10, 156, 150, 155,
	154, 0, 0, 256, 157, 158, 257, 0, 10, 0,
	0, 0, 319, 0, 0, 527, 0, 529, 0, 0,
	27, 0, 149, 148, 0, 0, 537, 0, 156, 150,
	155, 154, 0, 27, 27, 157, 158, 0, 0, 0,
	27, 0, 0, 0, 10, 0, 0, 0, 0, 543,
	0, 0, 0, 552, 0, 0, 544, 0, 0, 27,
	0, 0, 10, 0, 160, 159, 161, 0, 0, 151,
	0, 40, 0, 391, 0, 0, 0, 0, 0, 27,
	0, 0, 0, 565, 0, 27, 27, 0, 0, 397,
	10, 164, 0, 0, 571, 27, 10, 10, 0, 0,
	0, 27, 0, 0, 27, 588, 160, 159, 161, 0,
	0, 151, 0, 585, 0, 27, 395, 601, 0, 0,
	149, 148, 64, 596, 0, 0, 156, 150, 155, 154,
	0, 27, 27, 157, 158, 257, 0, 27, 10, 0,
	0, 0, 0, 0, 112, 0, 27, 27, 0, 27,
	0, 10, 10, 0, 438, 0, 440, 0, 10, 0,
	0, 0, 149, 148, 0, 0, 0, 52, 156, 150,
	155, 154, 0, 0, 0, 157, 158, 10, 0, 646,
	41, 42, 47, 43, 44, 45, 46, 653, 654, 0,
	164, 0, 164, 0, 164, 0, 0, 10, 652, 40,
	0, 95, 0, 10, 10, 0, 0, 0, 656, 0,
	0, 668, 181, 10, 0, 0, 0, 0, 675, 10,
	0, 0, 10, 0, 0, 0, 0, 0, 671, 672,
	676, 0, 0, 10, 160, 159, 161, 0, 0, 151,
	0, 0, 0, 0, 0, 0, 696, 0, 801, 10,
	10, 0, 0, 701, 0, 10, 0, 0, 0, 707,
	0, 0, 0, 0, 10, 10, 0, 10, 0, 0,
	0, 0, 0, 538, 0, 0, 0, 0, 0, 730,
	731, 160, 159, 161, 0, 733, 151, 0, 0, 112,
	149, 148, 40, 0, 0, 795, 156, 150, 155, 154,
	272, 272, 0, 157, 158, 0, 0, 0, 41, 42,
	47, 43, 44, 45, 46, 748, 0, 0, 0, 0,
	0, 306, 0, 0, 306, 0, 0, 0, 762, 0,
	0, 0, 0, 756, 0, 766, 0, 149, 148, 0,
	771, 0, 0, 156, 150, 155, 154, 0, 0, 783,
	157, 158, 0, 0, 0, 0, 0, 0, 793, 794,
	0, 0, 0, 0, 784, 785, 0, 0, 272, 792,
	272, 272, 0, 0, 0, 0, 806, 0, 0, 0,
	0, 616, 0, 0, 812, 0, 0, 0, 0, 0,
	0, 809, 0, 0, 0, 0, 0, 272, 371, 373,
	375, 41, 42, 47, 43, 44, 45, 46, 0, 634,
	0, 40, 94, 95, 96, 0, 97, 98, 49, 0,
	0, 0, 160, 159, 161, 0, 0, 151, 0, 0,
	306, 74, 0, 0, 112, 0, 112, 112, 40, 94,
	95, 96, 0, 97, 98, 49, 0, 0, 0, 160,
	159, 161, 0, 0, 151, 0, 0, 0, 74, 0,
	0, 0, 0, 765, 0, 680, 0, 0, 40, 89,
	0, 0, 0, 90, 0, 49, 0, 99, 149, 148,
	87, 83, 0, 0, 156, 150, 155, 154, 0, 0,
	92, 157, 158, 272, 0, 272, 89, 272, 0, 0,
	90, 0, 0, 0, 99, 149, 148, 87, 83, 0,
	0, 156, 150, 155, 154, 0, 272, 92, 157, 158,
	41, 42, 47, 85, 93, 84, 46, 0, 0, 0,
	0, 306, 52, 0, 0, 81, 82, 91, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 41, 42, 47,
	85, 93, 84, 46, 0, 0, 0, 0, 0, 0,
	321, 0, 81, 82, 91, 103, 0, 0, 0, 40,
	94, 95, 96, 0, 97, 98, 49, 41, 42, 47,
	43, 44, 45, 46, 0, 0, 0, 0, 0, 74,
	0, 272, 40, 94, 95, 96, 0, 97, 98, 49,
	0, 0, 0, 160, 159, 161, 0, 0, 151, 0,
	0, 0, 74, 0, 0, 0, 0, 0, 306, 796,
	0, 0, 0, 306, 0, 0, 0, 89, 0, 0,
	0, 90, 0, 0, 0, 99, 206, 0, 87, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 0,
	89, 0, 0, 0, 90, 0, 0, 0, 99, 149,
	148, 87, 83, 0, 0, 156, 150, 155, 154, 0,
	272, 92, 157, 158, 0, 0, 0, 0, 41, 42,
	47, 85, 93, 84, 46, 0, 0, 0, 0, 0,
	306, 0, 306, 81, 82, 91, 103, 0, 0, 0,
	0, 41, 42, 47, 324, 325, 323, 326, 0, 0,
	0, 0, 0, 0, 321, 0, 81, 82, 91, 103,
	40, 94, 95, 96, 0, 97, 98, 49, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 272, 0,
	74, 0, 0, 0, 0, 306, 40, 94, 95, 96,
	0, 97, 98, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 0,
	0, 0, 90, 0, 0, 0, 99, 0, 39, 87,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 0, 0, 0, 89, 0, 0, 0, 90, 0,
	0, 0, 99, 0, 0, 87, 83, 40, 94, 95,
	96, 0, 97, 98, 49, 92, 0, 0, 0, 41,
	42, 47, 85, 93, 84, 46, 0, 74, 0, 0,
	0, 0, 0, 0, 81, 82, 91, 103, 160, 159,
	161, 0, 0, 151, 0, 41, 42, 47, 85, 93,
	84, 46, 759, 0, 0, 0, 0, 0, 0, 0,
	81, 82, 91, 59, 0, 89, 0, 0, 0, 90,
	0, 0, 0, 99, 0, 0, 87, 83, 40, 94,
	95, 96, 0, 97, 98, 49, 92, 0, 0, 0,
	0, 0, 0, 0, 149, 148, 0, 0, 74, 0,
	156, 150, 155, 154, 0, 0, 0, 157, 158, 160,
	159, 161, 0, 0, 151, 0, 41, 42, 47, 85,
	93, 84, 46, 0, 0, 698, 0, 0, 0, 0,
	0, 81, 82, 91, 103, 0, 89, 0, 40, 0,
	90, 0, 0, 0, 99, 49, 0, 87, 83, 0,
	34, 0, 0, 0, 0, 0, 0, 92, 0, 0,
	22, 0, 0, 23, 0, 149, 148, 0, 0, 0,
	0, 156, 150, 155, 154, 0, 0, 0, 157, 158,
	0, 0, 0, 0, 0, 0, 0, 41, 42, 47,
	324, 325, 323, 326, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 82, 91, 103, 39, 0, 802, 0,
	776, 0, 0, 0, 0, 0, 26, 0, 0, 31,
	29, 30, 28, 0, 160, 159, 161, 0, 0, 151,
	0, 32, 33, 287, 288, 20, 35, 36, 37, 38,
	186, 0, 0, 641, 0, 0, 25, 41, 42, 47,
	43, 44, 45, 46, 40, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 22, 0, 0, 23,
	149, 148, 0, 0, 0, 0, 156, 150, 155, 154,
	0, 0, 0, 157, 158, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 39, 0, 726, 22, 640, 0, 23, 0,
	0, 0, 26, 0, 0, 31, 29, 30, 28, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 33, 287,
	288, 0, 35, 36, 37, 38, 0, 0, 0, 641,
	0, 0, 25, 41, 42, 47, 43, 44, 45, 46,
	40, 39, 0, 285, 0, 19, 0, 49, 0, 0,
	0, 26, 34, 0, 31, 29, 30, 28, 0, 0,
	0, 0, 22, 0, 0, 23, 32, 33, 287, 288,
	20, 35, 36, 37, 38, 0, 0, 0, 0, 0,
	0, 25, 41, 42, 47, 43, 44, 45, 46, 40,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 39, 0,
	775, 22, 776, 0, 23, 0, 0, 0, 26, 0,
	0, 31, 29, 30, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 32, 33, 0, 0, 20, 35, 36,
	37, 38, 0, 0, 0, 641, 0, 0, 25, 41,
	42, 47, 43, 44, 45, 46, 0, 39, 0, 639,
	0, 640, 0, 160, 159, 161, 0, 26, 151, 0,
	31, 29, 30, 28, 0, 0, 0, 697, 0, 160,
	159, 161, 32, 33, 151, 0, 0, 35, 36, 37,
	38, 0, 0, 684, 641, 0, 0, 25, 41, 42,
	47, 43, 44, 45, 46, 0, 0, 0, 0, 40,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 149,
	148, 34, 0, 0, 0, 156, 150, 155, 154, 0,
	0, 22, 157, 158, 23, 149, 148, 0, 0, 0,
	0, 156, 150, 155, 154, 0, 0, 0, 157, 158,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 159, 161, 0, 0, 151, 0, 39, 0, 18,
	0, 19, 0, 0, 542, 0, 0, 26, 0, 0,
	31, 29, 30, 28, 0, 0, 0, 0, 0, 160,
	159, 161, 32, 33, 151, 0, 20, 35, 36, 37,
	38, 0, 0, 477, 0, 0, 0, 25, 41, 42,
	47, 43, 44, 45, 46, 0, 149, 148, 0, 0,
	0, 0, 156, 150, 155, 154, 160, 159, 161, 157,
	158, 151, 0, 0, 0, 0, 160, 159, 161, 0,
	467, 151, 0, 0, 0, 149, 148, 0, 0, 0,
	147, 156, 150, 155, 154, 460, 159, 161, 157, 158,
	151, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 148, 0, 0, 0, 0, 156, 150,
	155, 154, 149, 148, 0, 157, 158, 0, 156, 150,
	155, 154, 0, 0, 0, 157, 158, 0, 0, 0,
	0, 149, 148, 0, 0, 0, 0, 156, 150, 155,
	154, 0, 0, 0, 157, 158,
}
var yyPact = [...]int{

	2475, -1000, 2475, -1000, -1000, 241, 241, 241, 241, 241,
	241, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1872, 1943,
	241, 359, 717, 706, 225, 771, 1594, 241, 456, 1418,
	1418, 510, 241, 241, 765, 1943, 780, 1943, 267, 724,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 253, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2552, 1846,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	253, -1000, -1000, -24, -33, -1000, -1000, -1000, -1000, -1000,
	-1000, 1943, 1943, 224, 222, 216, -1000, 1943, 291, 213,
	1943, 1943, 1418, 211, -1000, -1000, -1000, -1000, -1000, -1000,
	2100, 37, 562, 1846, -1000, 684, 752, 722, 565, 762,
	592, 517, -1000, 521, 1418, 722, 1943, 241, 0, 251,
	241, 405, -1000, 241, 1418, 1418, 241, 241, 1418, -1000,
	-1000, -1000, -1000, 1943, 1943, -1000, -1000, 233, 1172, -34,
	1172, 1537, -1000, -2, 1418, -1000, 1943, 2475, 1943, 1943,
	1943, 539, 548, 580, 1943, 1943, 1943, 1943, 1943, 1943,
	1943, -1000, 1001, 143, 148, 144, 179, 1325, 1695, 1325,
	-1000, -1000, 1943, 517, 517, 438, 1488, 166, 166, 554,
	574, -1000, 129, -1000, 310, 517, 2239, 1418, 771, 1418,
	143, 647, 663, 722, 76, -1000, -1000, -1000, 60, 66,
	757, 60, 578, 578, 578, 1718, -1000, 209, 705, 142,
	-1000, 1130, -1000, 771, 1943, -1000, 361, 195, 204, 202,
	-1000, 241, 241, -1000, -1000, 751, 1488, 1488, 781, -1000,
	-1000, 1943, -1000, -1000, 1172, 1943, 724, 249, 1488, 469,
	-56, 113, 113, 598, 1943, 166, 1943, 166, 166, -44,
	-44, -1000, -1000, -1000, 991, 129, -1000, 1943, -1000, -1000,
	-1000, -1000, -1000, 1943, -1000, -1000, 1943, 1564, 468, 1943,
	-1000, 1846, -1000, -1000, 166, 196, 186, 185, 539, -1000,
	1943, 416, 2239, -1000, -1000, 1872, -1000, 241, 241, 443,
	-1000, -3, 436, 642, 1943, 2014, 90, 1197, 722, 514,
	757, 46, -1000, 883, -1000, -1000, -1000, 60, 682, 1943,
	-1000, 179, -1000, 179, 179, -1000, -8, 746, -1000, 1488,
	-1000, -1000, -50, 184, 181, 180, 175, 1418, 273, 206,
	514, -1000, -1000, 1488, 521, 1418, 521, 141, 1418, -1000,
	-1000, 771, 241, 241, -1000, 1172, -1000, 174, 1418, 412,
	469, 2475, 1943, -1000, -1000, 2571, -1000, 113, -1000, -1000,
	-1000, 138, 137, 128, 127, 411, 438, 1943, 2542, 546,
	136, -1000, 136, -1000, 136, -1000, 387, 120, 480, -1000,
	2505, -1000, -1000, 2239, 2239, -1000, 1943, 1032, -1000, -11,
	653, 1488, -1000, 166, 514, -1000, -1000, 1418, -13, 762,
	-16, 231, -69, -1000, 629, 638, 607, 618, 60, -1000,
	-1000, -1000, -1000, -1000, 1418, 757, 672, 662, 1488, 588,
	-1000, -1000, 588, 1718, 1418, 1695, 517, 517, 517, 1943,
	119, -17, 859, 1418, 695, -1000, 514, 686, 241, 116,
	241, 743, 111, -18, -1000, -1000, -21, 690, -64, 241,
	-1000, -1000, -1000, 521, 105, 516, 410, 486, -1000, 2476,
	1943, -1000, -1000, -1000, -1000, -1000, 1488, 1943, 166, 104,
	-22, 94, 93, -1000, 349, 297, 241, 2239, 408, 403,
	1488, -1000, 524, 289, 2014, 286, -1000, -1000, -1000, 92,
	-30, -1000, 757, 514, 1943, 60, 617, 607, 614, -1000,
	60, -1000, -1000, -1000, -1000, 1943, 1943, -1000, -1000, 84,
	1943, 1943, 1564, 1943, 83, -1000, 1418, -1000, -1000, -1000,
	514, 514, 81, -31, 1943, 80, 1418, -1000, 280, -1000,
	323, 736, 771, 771, 1943, 733, 771, -1000, 77, 731,
	241, 507, 2475, 129, 1488, -1000, -1000, 166, -1000, -1000,
	-1000, 680, -1000, 461, 2475, 476, 475, -1000, -1000, -1000,
	711, 576, 514, -1000, -1000, 1488, 992, 60, 612, 60,
	621, 1488, -1000, 344, 75, 72, 71, 68, 65, 320,
	-1000, -1000, -1000, 859, 1418, 1488, -1000, -1000, -1000, 521,
	2355, 321, -1000, -1000, -1000, 690, 1488, 315, 57, -1000,
	172, -1000, 241, -1000, -1000, 171, 398, 461, 2239, 1943,
	241, 241, -1000, -1000, -1000, 166, -1000, -1000, -1000, 1943,
	162, 621, 60, 992, 160, 343, 342, 340, 336, 311,
	153, 283, -1000, -1000, 241, 395, 2355, -1000, -1000, 1872,
	1943, 1537, 2355, 2355, 730, 521, -1000, 684, 506, 394,
	489, -1000, 2385, -1000, -1000, -1000, 1488, 1418, 621, -1000,
	346, 151, 150, 130, 114, 38, 346, 332, -1000, 241,
	-1000, 2369, 1985, 32, 557, -1000, 1172, 393, 389, 305,
	54, 53, 241, 504, 2239, 52, 51, 684, 652, 346,
	346, 346, 346, 346, 50, 11, -1000, 2355, 2190, 1418,
	1418, -1000, 241, 241, 2355, -1000, -1000, -1000, 241, -1000,
	-1000, -1000, -1000, 1943, 48, 34, 25, 24, 23, -1000,
	346, 435, 380, 2190, -1000, -1000, 1872, -1000, 429, 426,
	-1000, -1000, 378, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	21, 376, 445, 2355, 1943, 486, 473, -1000, 1914, 2190,
	2190, 241, -1000, 503, 374, -1000, 1515, 486, 241, 2190,
	373, 371, -1000, 241, 501, 2306, -1000, 428, 2355, 459,
	455, -1000, 241, -1000, -1000, 1872, 1943, 368, 428, 2190,
	1943, 241, 241, -1000, 1347, 1669, 6, 556, 499, 362,
	482, -1000, 1300, -1000, -1000, 2306, 2074, 1418, 1418, 241,
	491, 2190, 1872, -1000, 419, 418, -1000, 241, -1000, 10,
	2074, 2074, -1000, 2074,
}
var yyPgo = [...]int{

	0, 7, 9, 23, 134, 219, 17, 227, 947, 944,
	942, 940, 158, 939, 937, 930, 927, 925, 48, 21,
	28, 923, 921, 34, 920, 919, 25, 29, 915, 913,
	912, 911, 910, 949, 65, 56, 907, 44, 37, 906,
	903, 14, 902, 36, 901, 46, 899, 53, 57, 32,
	718, 33, 39, 26, 43, 898, 896, 895, 888, 1252,
	883, 881, 872, 863, 196, 583, 862, 861, 49, 289,
	859, 55, 60, 856, 24, 855, 15, 854, 843, 842,
	832, 59, 829, 19, 6, 42, 52, 12, 47, 826,
	816, 815, 38, 808, 13, 45, 22, 16, 807, 2,
	11, 5, 0, 804, 63, 803, 51, 795, 50, 120,
	4, 465, 794, 58, 54, 62, 41, 35, 40, 61,
	793, 448, 706,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 6, 6, 7, 7, 8, 8, 9, 9,
	10, 10, 10, 10, 10, 10, 11, 11, 11, 11,
	11, 11, 11, 12, 12, 13, 13, 13, 14, 14,
	14, 15, 15, 15, 15, 16, 16, 17, 17, 17,
	17, 17, 17, 18, 18, 19, 19, 20, 20, 20,
	20, 20, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 23, 24, 24, 25, 26, 26, 27, 27, 27,
	28, 28, 28, 28, 29, 29, 29, 29, 29, 29,
	29, 30, 30, 30, 31, 31, 31, 31, 31, 32,
	32, 32, 33, 34, 34, 34, 34, 35, 35, 36,
	37, 37, 38, 38, 39, 39, 40, 40, 41, 41,
	42, 42, 42, 43, 43, 44, 44, 45, 45, 46,
	46, 47, 47, 48, 48, 48, 48, 48, 48, 49,
	49, 49, 49, 49, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 51, 52,
	52, 53, 53, 54, 54, 55, 55, 56, 56, 57,
	57, 57, 58, 58, 59, 60, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 62, 62, 62, 62, 62,
	62, 62, 63, 63, 63, 63, 64, 64, 65, 65,
	66, 66, 66, 66, 66, 67, 67, 68, 68, 68,
	68, 68, 68, 68, 68, 69, 70, 70, 71, 71,
	72, 72, 72, 73, 74, 74, 74, 74, 74, 74,
	75, 75, 75, 75, 75, 76, 76, 76, 77, 77,
	78, 78, 78, 79, 80, 80, 81, 81, 82, 82,
	83, 83, 84, 84, 85, 85, 86, 86, 87, 87,
	88, 88, 89, 89, 89, 89, 90, 91, 92, 92,
	93, 93, 94, 94, 95, 95, 96, 96, 97, 97,
	98, 98, 99, 99, 100, 100, 101, 101, 102, 102,
	102, 102, 102, 102, 102, 102, 103, 104, 105, 106,
	107, 108, 109, 110, 110, 111, 112, 112, 113, 113,
	114, 114, 115, 115, 116, 116, 117, 117, 118, 118,
	118, 118, 119, 119, 120, 120, 121, 121, 122, 122,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	8, 9, 7, 9, 9, 2, 8, 9, 7, 9,
	9, 2, 3, 2, 2, 8, 9, 1, 8, 9,
	1, 3, 3, 2, 3, 2, 2, 6, 6, 8,
	5, 7, 7, 1, 3, 1, 3, 0, 1, 1,
	2, 2, 6, 3, 3, 4, 6, 7, 9, 6,
	4, 1, 1, 3, 3, 1, 3, 1, 1, 3,
	10, 11, 11, 13, 0, 1, 1, 1, 1, 2,
	2, 5, 6, 3, 5, 3, 3, 5, 3, 3,
	4, 5, 5, 5, 4, 4, 4, 1, 1, 3,
	0, 2, 0, 2, 0, 3, 0, 2, 0, 3,
	0, 3, 4, 0, 2, 0, 2, 0, 2, 6,
	9, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 1, 3,
	1, 1, 3, 1, 3, 2, 4, 1, 1, 0,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	4, 4, 6, 6, 4, 6, 4, 4, 4, 6,
	4, 4, 6, 4, 2, 3, 3, 3, 3, 3,
	2, 2, 3, 3, 2, 2, 0, 1, 4, 4,
	5, 5, 5, 5, 1, 5, 10, 8, 9, 9,
	9, 9, 9, 8, 10, 2, 0, 3, 1, 1,
	1, 2, 3, 1, 1, 1, 2, 3, 1, 1,
	5, 5, 6, 6, 4, 0, 2, 4, 1, 1,
	1, 3, 1, 5, 0, 1, 4, 2, 0, 2,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 6, 9, 5, 8, 7, 3, 1, 3,
	5, 6, 4, 2, 0, 2, 4, 2, 0, 2,
	4, 2, 0, 2, 4, 2, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 1, 3, 1, 3,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
	1, 1, 0, 1, 0, 1, 1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -10, -33, -89, -90, -93, -17,
	-65, -15, -21, -22, -28, -16, -31, -32, 74, 76,
	101, -45, 26, 29, -102, 112, 82, -111, 88, 86,
	87, 85, 97, 98, 16, 102, 103, 104, 105, 72,
	4, 113, 114, 116, 117, 118, 119, 115, -109, 11,
	-1, -122, 125, -122, -122, -122, -122, -122, -50, 131,
	-49, -48, -62, -60, -59, -65, -66, -79, -61, -63,
	-109, -111, -30, -102, 24, -103, -104, -105, -106, -107,
	-108, 128, 129, 74, 118, 116, -67, 73, -52, 62,
	66, 130, 83, 117, 5, 6, 7, 9, 10, 70,
	-50, -109, -110, 131, -122, -34, 19, 15, 17, -36,
	-35, 13, -59, 131, 30, 30, 131, -113, -112, -109,
	-113, -102, -122, -109, 83, 30, -102, -102, -29, 89,
	90, 31, 32, 91, 92, -122, -122, 12, -50, 5,
	-50, 115, -47, -46, -120, 25, 122, 78, 121, 120,
	127, 69, -115, -121, 129, 128, 126, 133, 134, 65,
	64, 66, -50, -84, -33, -64, -45, 136, 131, 136,
	-50, -50, 131, 131, 131, -80, -50, 120, 127, -115,
	-121, -59, -50, -50, -102, 131, 80, 63, 135, 63,
	-84, -41, 38, 20, -86, -71, -102, 24, 14, -86,
	-37, 14, 57, 58, 59, -114, 71, -102, -71, -64,
	-84, -50, -122, 135, 122, -122, 83, 30, 106, 107,
	-122, -102, -102, -122, -122, -102, -50, -50, 127, -122,
	-122, 135, -122, -122, -50, -104, 135, -102, -50, -1,
	-50, -50, -50, -115, 67, 63, 68, 61, 60, -50,
	-50, -50, -50, -50, -50, -50, 132, 135, 132, 132,
	132, -102, -104, -114, -102, -104, -114, -114, -81, 77,
	-52, 131, -59, -52, 67, 63, 61, 60, 69, 116,
	-114, -2, -8, -6, -13, 74, -12, 99, 100, -102,
	-110, -109, -102, -42, 44, 41, -72, -71, 135, 16,
	-85, -74, -72, -73, -75, 23, -59, 14, -38, 18,
	-85, -119, 60, -119, -119, -88, -78, -77, -51, -50,
	-68, 126, -102, 118, 116, 117, 119, 131, 27, 28,
	36, 132, -113, -50, 84, 131, 84, 131, 131, -122,
	-122, 20, -48, -84, -122, -50, -47, 22, 131, -95,
	-94, 79, 75, -106, -108, -50, -52, -50, -52, -52,
	-84, -64, -64, -64, -51, -82, -81, 79, -50, -52,
	131, -59, 131, -59, 131, -59, -115, -64, 81, -2,
	-50, -122, -122, 80, 80, -44, 45, -50, -54, -55,
	-56, -50, -68, 21, 131, -33, -102, 22, -86, -92,
	-91, -49, -102, -38, -116, 56, -118, 53, 135, 48,
	50, 51, 52, -102, 22, -85, -39, 39, -50, -35,
	-34, -35, -35, 135, 22, 131, 131, 131, 131, 131,
	-87, -102, -18, 131, -102, -49, 131, -49, -33, -87,
	-33, 132, -27, -24, -26, -23, -25, -109, -102, -110,
	-122, -122, -122, 131, -87, 81, -95, -94, -1, -50,
	64, 132, 132, 132, 132, 81, -50, 78, 64, -53,
	-52, -53, -53, 86, 63, 132, 76, 78, -2, -2,
	-50, -43, 46, 72, 135, -57, 42, 43, -53, -83,
	-49, -102, -37, 135, 127, 47, -116, -118, -117, 49,
	47, -85, -102, -38, -40, 40, 41, -88, -102, -64,
	-114, -114, -114, -114, -64, 132, 135, -20, 31, 32,
	33, 34, -19, -18, 35, -83, 37, -122, 132, -122,
	22, 132, 135, 135, 35, 132, 135, -122, -33, 132,
	74, 81, 78, -50, -50, -52, 132, 135, 132, 132,
	93, 111, -122, -2, -6, 81, 81, -43, 113, -54,
	114, 132, 135, -38, -92, -50, -74, 47, -117, 47,
	-74, -50, -84, 132, -64, -64, -64, -51, -64, 132,
	-87, -49, -49, 132, 135, -50, 132, -102, -122, 84,
	108, 22, -23, -26, -26, -109, -50, 22, -27, 132,
	22, -122, 74, -1, -53, 39, -97, -96, 79, 75,
	76, 76, -58, 31, 32, 21, -33, -83, -76, 54,
	55, -74, 47, -74, 96, 132, 132, 132, 132, 132,
	96, 110, -20, -19, -33, -3, -7, -5, -11, 74,
	76, 109, 108, 108, 132, 131, -122, 131, 81, -97,
	-96, -2, -50, -122, -122, -53, -50, 131, -74, -76,
	131, 96, 96, 96, 96, 96, 131, 114, -122, 81,
	-3, -50, -50, -109, -110, -122, -50, -3, -3, 22,
	-33, -41, 74, 81, 78, -87, -69, -70, 95, 131,
	131, 131, 131, 131, -69, 96, -122, 78, 80, 63,
	63, -122, 81, 81, 108, 132, 132, -122, 74, -2,
	132, 132, -41, 41, -69, -69, -69, -69, -69, 132,
	131, -3, -4, -9, -7, -14, 74, -12, -102, -102,
	-122, -122, -3, -122, -84, 132, 132, 132, 132, 132,
	-69, -99, -98, 79, 75, -94, 81, -4, -50, 80,
	80, 81, 132, 81, -99, -3, -50, -94, 76, 78,
	-4, -4, -122, 74, 81, 78, -122, -4, -7, 81,
	81, -122, 74, -3, -5, 74, 76, -101, -100, 79,
	75, 76, 76, -122, -50, -50, -109, -110, 81, -101,
	-100, -4, -50, -122, -122, 78, 80, 63, 63, 74,
	81, 78, 74, -12, -102, -102, -122, 74, -4, -50,
	80, 80, -122, 78,
}
var yyDef = [...]int{

	-2, -2, -2, 22, 23, 348, 348, 348, 348, 348,
	348, 15, 16, 17, 18, 19, 20, 21, 0, 0,
	348, 0, 0, 0, 0, 0, 0, 348, 0, 0,
	0, 94, 348, 348, 0, 0, 0, 0, 0, 344,
	308, 309, 310, 311, 312, 313, 314, 315, 0, 322,
	2, 9, 349, 10, 11, 12, 13, 14, 332, -2,
	154, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 149, 0, 143, 144, 145, 146, 147,
	148, 0, 0, 0, 313, 311, 224, 264, 332, 0,
	0, 0, 0, 312, 316, 317, 318, 319, 320, 321,
	332, 164, 0, 137, 35, -2, 0, 0, 0, 120,
	0, 330, 118, 137, 0, 0, 216, 348, 328, 326,
	348, 0, 53, 348, 0, 0, 348, 348, 0, 95,
	96, 97, 98, 0, 0, 55, 56, 0, -2, 348,
	-2, 348, 138, 141, 0, 345, 0, -2, 0, 346,
	347, 332, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 333, 332, 0, 0, 0, 0, 0, 216, 0,
	210, 211, 216, 330, 330, 0, -2, 346, 347, 0,
	0, 204, 214, 215, 0, 330, -2, 0, 0, 0,
	0, 130, 0, 0, 0, 276, 238, 239, 0, 0,
	122, 0, 342, 342, 342, 0, 331, 0, 0, 0,
	217, -2, 51, 0, 0, 52, 0, 0, 0, 0,
	54, 348, 348, 73, 74, 0, -2, -2, 0, 105,
	106, 0, 108, 109, -2, 144, 344, 0, 325, 294,
	185, -2, -2, 0, 0, 0, 0, 0, 0, 205,
	206, 207, 208, 209, 212, 213, 167, 0, 169, 184,
	219, 150, 152, 216, 151, 153, 216, 216, 268, 0,
	187, 137, 170, 189, 0, 0, 0, 0, 332, 103,
	216, 0, -2, 26, 27, 0, 47, 348, 348, 0,
	324, 323, 0, 135, 0, 0, 137, 240, 0, 0,
	122, -2, 244, 245, 248, 249, 243, 0, 124, 0,
	121, 0, 343, 0, 0, 119, 280, 260, 262, -2,
	259, 168, 149, 313, 311, 312, 314, 0, 0, 0,
	0, 218, 329, -2, 137, 0, 137, 0, 0, 75,
	80, 0, 348, 348, 110, -2, 142, 0, 0, 0,
	294, -2, 0, 190, 191, 332, 194, -2, 198, 201,
	273, 0, 0, 0, 0, 0, 267, 0, 332, 0,
	137, 196, 137, 200, 137, 203, 0, 0, 0, 4,
	332, 43, 44, -2, -2, 112, 0, -2, 129, 173,
	179, -2, 178, 0, 0, 284, 241, 0, 277, 120,
	288, 0, 149, 290, 0, -2, 336, 0, 0, 335,
	339, 340, 341, 246, 0, 122, 126, 0, -2, 114,
	117, 115, 116, 0, 0, 216, 330, 330, 330, 216,
	0, 278, 67, 0, 63, 60, 0, 0, 348, 0,
	348, 0, 0, 87, 88, 82, 85, 81, 0, 348,
	104, 107, 111, 137, 0, 0, 0, 293, 295, 332,
	0, 220, 221, 222, 223, 263, -2, 0, 0, 0,
	171, 0, 0, 101, 0, 225, 348, -2, 0, 0,
	-2, 131, 133, 0, 0, 175, 180, 181, 282, 0,
	270, 242, 122, 0, 0, 0, 0, 336, 0, 337,
	0, 275, 247, 291, 113, 0, 0, 281, 261, 0,
	216, 216, 216, 216, 0, 57, 0, 58, 68, 69,
	0, 0, 0, 65, 0, 0, 0, 72, 348, 79,
	0, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	348, 0, -2, 192, -2, 193, 195, 0, 199, 202,
	102, 0, 32, 298, -2, 0, 0, 132, 134, 174,
	0, 137, 0, 286, 289, -2, 255, 0, 0, 0,
	254, -2, 125, 218, 0, 0, 0, 0, 0, 0,
	279, 70, 71, 67, 0, -2, 61, 62, 77, 137,
	-2, 0, 83, 89, 86, 0, -2, 0, 0, 139,
	0, 30, 348, 292, 172, 0, 0, 298, -2, 0,
	348, 348, 176, 182, 183, 0, 285, 271, 250, 0,
	0, 251, 0, 255, 0, 220, 221, 222, 223, 225,
	0, 0, 59, 66, 348, 0, -2, 24, 25, 0,
	0, 348, -2, -2, 0, 137, 31, 128, 0, 0,
	297, 299, 332, 33, 34, 283, -2, 0, 253, 252,
	236, 0, 0, 0, 0, 0, 236, 0, 78, 348,
	6, 332, 332, 164, 0, 41, -2, 0, 0, 0,
	0, 0, 348, 0, -2, 0, 0, 128, 0, 236,
	236, 236, 236, 236, 0, 0, 90, -2, -2, 0,
	0, 42, 348, 348, -2, 140, 226, 45, 348, 296,
	257, 227, 235, 0, 0, 0, 0, 0, 0, 233,
	236, 302, 0, -2, 28, 29, 0, 50, 0, 0,
	91, 92, 0, 46, 237, 228, 229, 230, 231, 232,
	0, 0, 302, -2, 0, 0, 0, 8, 332, -2,
	-2, 348, 234, 0, 0, 303, 332, 301, 348, -2,
	0, 0, 93, 348, 0, -2, 38, 306, -2, 0,
	0, 36, 348, 300, -2, 0, 0, 0, 306, -2,
	0, 348, 348, 37, 332, 332, 164, 0, 0, 0,
	305, 307, 332, 39, 40, -2, -2, 0, 0, 348,
	0, -2, 0, -2, 0, 0, 48, 348, 304, 332,
	-2, -2, 49, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 130, 3, 3, 3, 134, 3, 3,
	131, 132, 126, 129, 135, 128, 136, 133, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 125,
	3, 127,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:192
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:197
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:204
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:209
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:216
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:221
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:228
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:233
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:240
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:244
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:248
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:252
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:256
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:260
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:264
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:268
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:272
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:276
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:280
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:304
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:308
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:314
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:324
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:328
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:334
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:338
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:342
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:346
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 34:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:350
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:354
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:360
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:364
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:368
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:372
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:376
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:380
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:384
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:390
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:394
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:400
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:404
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:408
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:414
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:418
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:422
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:428
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:432
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:436
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:440
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:446
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:450
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:456
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:460
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:464
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:468
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:472
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:476
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression, To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:482
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:486
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:492
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:496
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:502
		{
			yyVAL.expression = nil
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:506
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:510
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:514
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:518
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:524
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:528
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:532
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:536
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:540
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:546
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 78:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:550
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:554
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:558
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:564
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:570
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:574
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expression)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:580
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:586
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:590
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:596
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:600
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:604
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 90:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:610
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 91:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:614
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].expressions, Statements: yyDollar[9].program}
		}
	case 92:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:618
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Statements: yyDollar[9].program}
		}
	case 93:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.y:622
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Parameters: yyDollar[7].expressions, Statements: yyDollar[11].program}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:628
		{
			yyVAL.expression = nil
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:632
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:636
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:640
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:644
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:648
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:652
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:658
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:662
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:666
		{
			yyVAL.expression = CursorAttrebute{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Attrebute: yyDollar[3].token}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:672
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:676
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:680
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:684
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:688
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].expression}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:694
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:698
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[3].expression}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:702
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[4].expression, Code: yyDollar[3].integer}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:708
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:720
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:730
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:739
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:748
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:759
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:763
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:769
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:775
		{
			yyVAL.expression = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:779
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:785
		{
			yyVAL.expression = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:789
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:795
		{
			yyVAL.expression = nil
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:799
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:805
		{
			yyVAL.expression = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:809
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:815
		{
			yyVAL.expression = nil
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:819
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:825
		{
			yyVAL.expression = nil
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:829
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:833
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:839
		{
			yyVAL.expression = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:843
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:849
		{
			yyVAL.expression = nil
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:853
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:859
		{
			yyVAL.expression = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:863
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:869
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 140:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:873
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:879
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:883
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:889
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:893
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:897
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:901
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:905
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:909
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:915
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, Column: yyDollar[1].identifier}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:919
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:923
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:927
		{
			yyVAL.expression = ColumnNumber{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Number: yyDollar[3].integer}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:931
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: yyDollar[3].integer}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:937
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:941
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:945
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:949
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:953
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:957
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:961
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:965
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:969
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:973
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:977
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:981
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:985
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:989
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:995
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1001
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1005
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1011
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1015
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1021
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1025
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1031
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1035
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1041
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1045
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1051
		{
			yyVAL.token = Token{}
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1055
		{
			yyVAL.token = yyDollar[1].token
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1059
		{
			yyVAL.token = yyDollar[1].token
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1065
		{
			yyVAL.token = yyDollar[1].token
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1069
		{
			yyVAL.token = yyDollar[1].token
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1075
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1081
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1104
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1108
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1112
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1116
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1120
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1124
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1128
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1132
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1136
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1140
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1144
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1148
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1152
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1156
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1160
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1164
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 202:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1168
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 203:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1172
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1176
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1182
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1190
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1194
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1198
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1202
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1206
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1212
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1216
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1220
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1224
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1230
		{
			yyVAL.expressions = nil
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1234
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 218:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1240
		{
			yyVAL.expression = Function{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1244
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1251
		{
			yyVAL.expression = AggregateFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1255
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1259
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 223:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1263
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1267
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1273
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 226:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1277
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 227:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1283
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 228:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1287
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 229:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1291
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 230:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1295
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 231:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1299
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 232:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1303
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 233:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1307
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 234:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1311
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1317
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1323
		{
			yyVAL.expression = nil
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1327
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1333
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1337
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1343
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1347
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1351
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1357
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1363
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1367
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1371
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1375
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1379
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1383
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 250:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1389
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1393
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 252:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1397
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1401
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1405
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1411
		{
			yyVAL.expression = nil
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1415
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 257:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1419
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1425
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1429
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1435
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1439
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1443
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1449
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 264:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1455
		{
			yyVAL.expression = nil
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1459
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1465
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1469
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1475
		{
			yyVAL.expression = nil
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1479
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1485
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1489
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1495
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1499
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1505
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1509
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1515
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1519
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1525
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1529
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1535
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1539
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 282:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1545
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 283:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1549
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1553
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 285:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1557
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 286:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1563
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1569
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1575
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1579
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 290:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1585
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 291:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1590
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1597
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1601
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1607
		{
			yyVAL.procexpr = nil
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1611
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1617
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1621
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1627
		{
			yyVAL.procexpr = nil
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1631
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1637
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1641
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1647
		{
			yyVAL.procexpr = nil
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1651
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1657
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1661
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1667
		{
			yyVAL.procexpr = nil
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1671
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1677
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1681
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1685
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1689
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1693
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1697
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1701
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1705
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1711
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1717
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1723
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1729
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1735
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1741
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1747
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1753
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1757
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 325:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1763
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1769
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 327:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1773
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1779
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1783
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1789
		{
			yyVAL.token = Token{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1793
		{
			yyVAL.token = yyDollar[1].token
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1799
		{
			yyVAL.token = Token{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1803
		{
			yyVAL.token = yyDollar[1].token
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1809
		{
			yyVAL.token = Token{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1813
		{
			yyVAL.token = yyDollar[1].token
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1819
		{
			yyVAL.token = Token{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1823
		{
			yyVAL.token = yyDollar[1].token
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1829
		{
			yyVAL.token = Token{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1833
		{
			yyVAL.token = yyDollar[1].token
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1837
		{
			yyVAL.token = yyDollar[1].token
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1841
		{
			yyVAL.token = yyDollar[1].token
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1847
		{
			yyVAL.token = Token{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1851
		{
			yyVAL.token = yyDollar[1].token
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1857
		{
			yyVAL.token = Token{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1861
		{
			yyVAL.token = yyDollar[1].token
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1868
		{
			yyVAL.token = yyDollar[1].token
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1872
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1879
		{
			yyVAL.token = Token{}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1883
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
