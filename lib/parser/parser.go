//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const FUNCTION = 57447
const AGGREGATE = 57448
const BEGIN = 57449
const RETURN = 57450
const IGNORE = 57451
const WITHIN = 57452
const VAR = 57453
const TIES = 57454
const NULLS = 57455
const COUNT = 57456
const LISTAGG = 57457
const AGGREGATE_FUNCTION = 57458
const FUNCTION_WITH_ADDITIONALS = 57459
const COMPARISON_OP = 57460
const STRING_OP = 57461
const SUBSTITUTION_OP = 57462
const UMINUS = 57463
const UPLUS = 57464

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"AGGREGATE",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"TIES",
	"NULLS",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_ADDITIONALS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1806

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 124,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	75, 1,
	79, 1,
	81, 1,
	-2, 124,
	-1, 100,
	57, 104,
	58, 104,
	59, 104,
	-2, 115,
	-1, 133,
	63, 317,
	67, 317,
	68, 317,
	-2, 333,
	-1, 135,
	63, 317,
	67, 317,
	68, 317,
	-2, 333,
	-1, 141,
	75, 1,
	79, 1,
	81, 1,
	-2, 124,
	-1, 168,
	77, 251,
	-2, 317,
	-1, 178,
	81, 3,
	-2, 124,
	-1, 202,
	63, 317,
	67, 317,
	68, 317,
	-2, 258,
	-1, 217,
	63, 317,
	67, 317,
	68, 317,
	-2, 89,
	-1, 218,
	63, 317,
	67, 317,
	68, 317,
	-2, 90,
	-1, 229,
	69, 0,
	118, 0,
	125, 0,
	-2, 173,
	-1, 230,
	69, 0,
	118, 0,
	125, 0,
	-2, 175,
	-1, 269,
	75, 3,
	79, 3,
	81, 3,
	-2, 124,
	-1, 288,
	47, 319,
	49, 323,
	-2, 260,
	-1, 306,
	63, 317,
	67, 317,
	68, 317,
	-2, 244,
	-1, 320,
	63, 317,
	67, 317,
	68, 317,
	-2, 312,
	-1, 336,
	81, 1,
	-2, 124,
	-1, 342,
	69, 0,
	118, 0,
	125, 0,
	-2, 184,
	-1, 368,
	81, 3,
	-2, 124,
	-1, 369,
	81, 3,
	-2, 124,
	-1, 372,
	63, 317,
	67, 317,
	68, 317,
	-2, 120,
	-1, 376,
	63, 317,
	67, 317,
	68, 317,
	-2, 164,
	-1, 390,
	49, 323,
	-2, 319,
	-1, 403,
	63, 317,
	67, 317,
	68, 317,
	-2, 110,
	-1, 445,
	81, 255,
	-2, 317,
	-1, 456,
	75, 1,
	79, 1,
	81, 1,
	-2, 124,
	-1, 459,
	63, 317,
	67, 317,
	68, 317,
	-2, 123,
	-1, 518,
	75, 1,
	79, 1,
	81, 1,
	-2, 124,
	-1, 520,
	77, 252,
	79, 252,
	81, 252,
	-2, 317,
	-1, 530,
	75, 1,
	79, 1,
	81, 1,
	-2, 25,
	-1, 541,
	63, 317,
	67, 317,
	68, 317,
	-2, 273,
	-1, 547,
	63, 317,
	67, 317,
	68, 317,
	-2, 114,
	-1, 562,
	63, 317,
	67, 317,
	68, 317,
	-2, 63,
	-1, 567,
	81, 5,
	-2, 124,
	-1, 580,
	81, 3,
	-2, 124,
	-1, 608,
	75, 5,
	79, 5,
	81, 5,
	-2, 124,
	-1, 614,
	81, 5,
	-2, 124,
	-1, 615,
	81, 5,
	-2, 124,
	-1, 628,
	63, 317,
	67, 317,
	68, 317,
	-2, 242,
	-1, 648,
	63, 317,
	67, 317,
	68, 317,
	-2, 333,
	-1, 656,
	75, 3,
	79, 3,
	81, 3,
	-2, 124,
	-1, 669,
	75, 5,
	79, 5,
	81, 5,
	-2, 124,
	-1, 670,
	81, 7,
	-2, 124,
	-1, 676,
	81, 5,
	-2, 124,
	-1, 695,
	75, 7,
	79, 7,
	81, 7,
	-2, 124,
	-1, 715,
	81, 5,
	-2, 124,
	-1, 721,
	81, 7,
	-2, 124,
	-1, 722,
	81, 7,
	-2, 124,
	-1, 731,
	75, 5,
	79, 5,
	81, 5,
	-2, 124,
	-1, 737,
	75, 1,
	79, 5,
	81, 5,
	-2, 124,
	-1, 740,
	75, 5,
	79, 5,
	81, 5,
	-2, 27,
	-1, 746,
	108, 23,
	-2, 21,
	-1, 751,
	81, 7,
	-2, 124,
	-1, 767,
	75, 1,
	79, 1,
	81, 1,
	-2, 124,
	-1, 768,
	81, 3,
	-2, 124,
	-1, 773,
	75, 7,
	79, 7,
	81, 7,
	-2, 124,
	-1, 775,
	108, 49,
	-2, 46,
	-1, 782,
	81, 3,
	-2, 124,
	-1, 783,
	81, 3,
	-2, 124,
	-1, 785,
	75, 1,
	79, 1,
	81, 1,
	-2, 124,
}

const yyPrivate = 57344

const yyLast = 2613

var yyAct = [...]int{

	70, 23, 749, 23, 268, 270, 2, 436, 2, 762,
	227, 1, 713, 47, 98, 288, 201, 658, 590, 448,
	693, 578, 501, 307, 273, 182, 116, 468, 496, 121,
	122, 477, 415, 622, 305, 373, 384, 20, 391, 302,
	196, 295, 460, 389, 185, 84, 191, 502, 334, 105,
	298, 136, 77, 146, 284, 112, 75, 57, 289, 351,
	73, 769, 671, 410, 160, 287, 405, 394, 160, 395,
	396, 397, 392, 179, 286, 390, 162, 150, 561, 149,
	148, 115, 294, 142, 151, 152, 157, 100, 150, 176,
	149, 148, 161, 538, 523, 151, 152, 160, 511, 56,
	495, 512, 472, 187, 187, 150, 49, 159, 285, 463,
	198, 187, 151, 152, 556, 408, 222, 180, 140, 140,
	212, 213, 224, 204, 216, 46, 378, 724, 205, 332,
	140, 180, 180, 711, 710, 555, 694, 709, 171, 225,
	106, 708, 23, 180, 707, 691, 159, 2, 190, 106,
	683, 102, 393, 103, 5, 101, 682, 186, 186, 678,
	677, 248, 639, 251, 616, 199, 601, 600, 599, 598,
	597, 571, 563, 608, 560, 549, 537, 37, 525, 23,
	276, 524, 279, 522, 515, 187, 66, 45, 692, 45,
	187, 285, 510, 187, 507, 277, 494, 309, 665, 231,
	38, 285, 250, 454, 37, 97, 253, 254, 443, 442,
	441, 114, 114, 440, 118, 257, 260, 318, 267, 292,
	188, 249, 48, 252, 158, 247, 100, 255, 323, 50,
	51, 52, 53, 54, 379, 335, 333, 140, 246, 330,
	664, 663, 99, 283, 426, 300, 301, 662, 661, 117,
	638, 632, 629, 258, 130, 131, 108, 619, 297, 617,
	319, 258, 345, 158, 432, 108, 414, 413, 412, 411,
	23, 359, 357, 322, 364, 157, 331, 329, 355, 341,
	325, 343, 344, 309, 339, 381, 187, 387, 338, 349,
	324, 398, 314, 177, 108, 187, 159, 166, 165, 111,
	473, 219, 49, 603, 265, 536, 377, 354, 39, 40,
	41, 42, 43, 44, 566, 416, 419, 387, 387, 361,
	534, 159, 637, 416, 527, 108, 428, 676, 45, 388,
	383, 615, 614, 155, 416, 203, 527, 23, 206, 427,
	186, 211, 2, 429, 214, 215, 567, 437, 404, 266,
	406, 407, 667, 49, 636, 424, 220, 221, 223, 159,
	400, 159, 635, 417, 634, 45, 433, 278, 633, 23,
	23, 602, 596, 457, 458, 660, 526, 450, 147, 451,
	387, 453, 321, 470, 435, 169, 386, 772, 46, 760,
	208, 114, 170, 159, 187, 159, 742, 159, 467, 783,
	481, 449, 741, 449, 452, 449, 736, 120, 725, 309,
	487, 723, 718, 158, 675, 674, 420, 422, 655, 419,
	641, 620, 387, 532, 449, 126, 127, 531, 517, 476,
	444, 471, 434, 363, 475, 326, 327, 782, 380, 722,
	256, 721, 482, 207, 609, 3, 752, 3, 486, 504,
	751, 489, 490, 491, 492, 369, 45, 23, 368, 480,
	119, 529, 530, 172, 309, 209, 210, 716, 581, 715,
	159, 715, 580, 387, 754, 187, 423, 337, 425, 469,
	187, 336, 753, 124, 125, 128, 129, 377, 752, 256,
	542, 352, 730, 521, 583, 546, 416, 366, 367, 535,
	387, 387, 548, 582, 533, 455, 564, 337, 544, 540,
	158, 278, 158, 539, 158, 278, 581, 779, 771, 23,
	744, 469, 735, 45, 2, 680, 553, 570, 557, 575,
	654, 23, 574, 90, 91, 92, 2, 93, 94, 387,
	516, 47, 587, 576, 187, 37, 187, 67, 26, 462,
	26, 197, 430, 431, 262, 45, 45, 93, 261, 593,
	233, 595, 419, 579, 232, 234, 589, 155, 23, 449,
	447, 770, 386, 672, 181, 159, 264, 263, 236, 235,
	200, 23, 299, 194, 605, 623, 3, 514, 607, 604,
	193, 194, 195, 37, 478, 187, 594, 545, 95, 558,
	559, 621, 543, 479, 159, 474, 371, 627, 281, 23,
	630, 484, 465, 466, 631, 23, 23, 394, 95, 395,
	396, 397, 392, 3, 685, 390, 485, 646, 282, 642,
	416, 577, 402, 449, 183, 649, 650, 394, 469, 395,
	396, 397, 505, 45, 503, 653, 506, 110, 508, 315,
	316, 109, 513, 651, 139, 159, 666, 23, 317, 585,
	586, 681, 657, 497, 498, 499, 500, 572, 569, 568,
	23, 23, 700, 701, 509, 409, 328, 23, 528, 686,
	687, 688, 689, 690, 184, 684, 296, 192, 132, 26,
	46, 134, 588, 138, 113, 699, 23, 704, 76, 278,
	74, 717, 706, 72, 714, 45, 8, 385, 7, 6,
	712, 350, 167, 63, 3, 303, 23, 45, 304, 291,
	699, 606, 23, 23, 290, 729, 26, 726, 659, 38,
	565, 91, 23, 82, 62, 65, 727, 58, 23, 573,
	64, 23, 38, 2, 59, 584, 699, 699, 575, 750,
	464, 375, 23, 761, 45, 374, 699, 137, 745, 370,
	280, 642, 71, 759, 483, 401, 104, 45, 23, 23,
	776, 777, 652, 2, 23, 16, 699, 68, 123, 14,
	13, 3, 12, 23, 23, 9, 23, 457, 458, 15,
	529, 530, 11, 775, 697, 45, 271, 618, 699, 645,
	610, 45, 45, 4, 695, 625, 626, 775, 775, 269,
	775, 0, 0, 3, 3, 0, 0, 26, 0, 0,
	61, 10, 0, 10, 0, 0, 0, 0, 0, 640,
	0, 346, 719, 0, 347, 348, 647, 39, 40, 41,
	42, 43, 44, 45, 696, 0, 0, 0, 362, 0,
	39, 40, 41, 42, 43, 44, 45, 45, 732, 733,
	0, 0, 0, 45, 668, 0, 0, 421, 739, 696,
	0, 673, 0, 0, 0, 38, 0, 679, 0, 0,
	0, 0, 45, 0, 26, 0, 0, 0, 763, 0,
	0, 0, 0, 0, 202, 696, 696, 702, 703, 0,
	0, 3, 45, 705, 0, 740, 38, 0, 45, 45,
	780, 0, 55, 96, 0, 0, 26, 26, 45, 732,
	733, 0, 739, 0, 45, 696, 71, 45, 0, 133,
	0, 135, 0, 0, 0, 758, 0, 0, 45, 0,
	0, 0, 696, 0, 0, 0, 734, 696, 0, 0,
	0, 0, 0, 738, 45, 45, 696, 696, 743, 740,
	45, 0, 10, 3, 156, 0, 0, 755, 0, 45,
	45, 0, 45, 163, 164, 3, 765, 766, 168, 0,
	0, 174, 175, 39, 40, 41, 42, 43, 44, 0,
	0, 488, 0, 0, 778, 493, 154, 153, 155, 10,
	418, 145, 784, 0, 26, 0, 0, 0, 461, 0,
	0, 0, 0, 0, 39, 40, 41, 42, 43, 44,
	0, 0, 38, 217, 218, 3, 154, 153, 155, 0,
	0, 145, 189, 0, 462, 226, 38, 228, 229, 230,
	0, 0, 188, 237, 238, 239, 240, 241, 242, 243,
	143, 142, 0, 0, 399, 0, 150, 144, 149, 148,
	0, 0, 244, 151, 152, 245, 26, 0, 0, 0,
	550, 551, 552, 554, 0, 0, 0, 0, 26, 0,
	143, 142, 0, 0, 0, 0, 150, 144, 149, 148,
	10, 306, 0, 151, 152, 0, 0, 0, 0, 0,
	320, 3, 0, 394, 0, 395, 396, 397, 392, 591,
	592, 390, 0, 0, 0, 26, 0, 0, 154, 153,
	155, 0, 0, 145, 0, 0, 0, 340, 26, 342,
	39, 40, 41, 42, 43, 44, 0, 0, 154, 153,
	155, 38, 0, 145, 39, 40, 41, 42, 43, 44,
	0, 353, 785, 60, 0, 0, 26, 10, 0, 0,
	0, 188, 26, 26, 0, 0, 0, 365, 0, 0,
	0, 0, 143, 142, 107, 0, 372, 376, 150, 144,
	149, 148, 746, 0, 0, 151, 152, 245, 0, 10,
	10, 403, 143, 142, 0, 0, 0, 0, 150, 144,
	149, 148, 0, 0, 26, 151, 152, 0, 0, 0,
	0, 0, 746, 746, 0, 0, 0, 26, 26, 0,
	0, 0, 0, 0, 26, 0, 0, 746, 746, 154,
	746, 155, 438, 0, 145, 0, 0, 0, 0, 173,
	0, 0, 0, 26, 0, 0, 0, 445, 0, 39,
	40, 41, 42, 43, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 26, 0, 0, 459, 0, 0, 26,
	26, 0, 0, 0, 0, 0, 0, 10, 0, 26,
	0, 0, 0, 143, 142, 26, 0, 0, 26, 150,
	144, 149, 148, 154, 153, 155, 151, 152, 145, 26,
	0, 0, 0, 306, 0, 0, 0, 773, 0, 154,
	153, 155, 0, 107, 145, 26, 26, 0, 0, 0,
	0, 26, 0, 259, 259, 768, 0, 0, 0, 0,
	26, 26, 0, 26, 519, 0, 0, 0, 0, 10,
	0, 520, 0, 293, 0, 0, 293, 143, 142, 0,
	0, 10, 0, 150, 144, 149, 148, 0, 376, 0,
	151, 152, 0, 143, 142, 0, 0, 0, 541, 150,
	144, 149, 148, 0, 0, 0, 151, 152, 0, 547,
	155, 0, 0, 145, 0, 0, 0, 259, 10, 259,
	259, 38, 0, 0, 0, 0, 0, 0, 562, 0,
	0, 10, 0, 0, 0, 154, 153, 155, 0, 382,
	145, 38, 0, 0, 0, 259, 356, 358, 360, 767,
	154, 153, 155, 0, 0, 145, 0, 0, 0, 10,
	0, 0, 143, 142, 737, 10, 10, 0, 150, 144,
	149, 148, 0, 0, 0, 151, 152, 0, 293, 0,
	0, 0, 107, 0, 107, 107, 38, 0, 0, 143,
	142, 0, 0, 46, 0, 150, 144, 149, 148, 0,
	0, 0, 151, 152, 143, 142, 624, 10, 0, 0,
	150, 144, 149, 148, 0, 0, 628, 151, 152, 0,
	10, 10, 0, 0, 0, 0, 0, 10, 0, 39,
	40, 41, 42, 43, 44, 0, 643, 644, 648, 259,
	0, 259, 0, 259, 0, 0, 10, 0, 0, 39,
	40, 41, 42, 43, 44, 0, 0, 0, 0, 0,
	0, 0, 259, 0, 0, 0, 10, 0, 0, 0,
	0, 0, 10, 10, 0, 0, 0, 293, 0, 0,
	0, 0, 10, 0, 0, 0, 0, 0, 10, 0,
	0, 10, 0, 0, 39, 40, 41, 42, 43, 44,
	0, 0, 10, 0, 0, 0, 0, 0, 0, 38,
	90, 91, 92, 0, 93, 94, 46, 0, 10, 10,
	0, 0, 0, 720, 10, 0, 0, 0, 0, 71,
	0, 259, 0, 10, 10, 0, 10, 0, 0, 0,
	0, 728, 0, 0, 38, 90, 91, 92, 0, 93,
	94, 46, 0, 0, 0, 0, 0, 0, 293, 0,
	0, 0, 0, 293, 71, 0, 0, 85, 0, 0,
	0, 86, 756, 757, 0, 95, 0, 764, 83, 0,
	38, 90, 91, 92, 0, 93, 94, 46, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 781,
	71, 0, 85, 0, 0, 0, 86, 259, 0, 0,
	95, 0, 0, 83, 0, 0, 0, 39, 40, 81,
	89, 80, 44, 88, 0, 0, 0, 293, 49, 293,
	0, 78, 79, 87, 69, 0, 0, 0, 85, 0,
	0, 0, 86, 0, 0, 0, 95, 197, 0, 83,
	0, 0, 39, 40, 81, 89, 80, 44, 0, 88,
	0, 0, 0, 0, 308, 0, 78, 79, 87, 69,
	0, 259, 0, 0, 38, 90, 91, 92, 293, 93,
	94, 46, 0, 0, 0, 0, 0, 0, 39, 40,
	81, 89, 80, 44, 71, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 87, 69, 0, 0, 0, 38,
	90, 91, 92, 0, 93, 94, 46, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 71,
	0, 0, 85, 0, 0, 0, 86, 0, 0, 0,
	95, 0, 0, 83, 38, 90, 91, 92, 0, 93,
	94, 46, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 71, 0, 0, 85, 0, 0,
	0, 86, 0, 0, 0, 95, 0, 37, 83, 0,
	0, 0, 39, 40, 311, 312, 310, 313, 88, 0,
	0, 0, 0, 0, 308, 0, 78, 79, 87, 69,
	0, 0, 85, 0, 0, 0, 86, 0, 0, 0,
	95, 0, 0, 83, 0, 0, 0, 39, 40, 81,
	89, 80, 44, 88, 0, 0, 0, 0, 0, 0,
	0, 78, 79, 87, 69, 0, 0, 0, 38, 90,
	91, 92, 0, 93, 94, 46, 0, 0, 0, 0,
	0, 0, 39, 40, 81, 89, 80, 44, 71, 154,
	153, 155, 0, 0, 145, 0, 78, 79, 87, 69,
	154, 153, 155, 731, 0, 145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 38, 0, 0, 0,
	0, 0, 0, 46, 0, 0, 85, 0, 33, 0,
	86, 0, 0, 0, 95, 0, 0, 83, 21, 0,
	0, 22, 0, 143, 142, 0, 0, 88, 0, 150,
	144, 149, 148, 0, 143, 142, 151, 152, 0, 49,
	150, 144, 149, 148, 0, 0, 0, 151, 152, 0,
	0, 0, 0, 0, 0, 0, 39, 40, 311, 312,
	310, 313, 0, 0, 37, 0, 774, 0, 748, 0,
	78, 79, 87, 69, 25, 0, 38, 30, 28, 29,
	27, 0, 0, 46, 0, 0, 0, 0, 33, 31,
	32, 274, 275, 19, 34, 35, 36, 0, 21, 0,
	613, 22, 0, 24, 39, 40, 41, 42, 43, 44,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 46, 0, 0, 0, 0, 33, 0, 0,
	0, 0, 0, 0, 37, 0, 698, 21, 612, 0,
	22, 0, 0, 0, 25, 0, 0, 30, 28, 29,
	27, 0, 0, 0, 0, 0, 0, 0, 0, 31,
	32, 274, 275, 0, 34, 35, 36, 0, 0, 0,
	613, 0, 0, 24, 39, 40, 41, 42, 43, 44,
	0, 0, 0, 37, 0, 272, 0, 18, 0, 154,
	153, 155, 0, 25, 145, 0, 30, 28, 29, 27,
	0, 0, 0, 0, 0, 670, 0, 0, 31, 32,
	274, 275, 19, 34, 35, 36, 154, 153, 155, 0,
	0, 145, 24, 39, 40, 41, 42, 43, 44, 0,
	669, 154, 153, 155, 0, 0, 145, 0, 0, 0,
	0, 0, 0, 143, 142, 656, 0, 0, 0, 150,
	144, 149, 148, 154, 153, 155, 151, 152, 145, 0,
	0, 0, 0, 0, 0, 0, 0, 518, 0, 0,
	143, 142, 0, 0, 0, 0, 150, 144, 149, 148,
	0, 0, 0, 151, 152, 143, 142, 0, 0, 0,
	0, 150, 144, 149, 148, 154, 153, 155, 151, 152,
	145, 0, 0, 0, 0, 0, 0, 143, 142, 456,
	0, 0, 0, 150, 144, 149, 148, 154, 153, 155,
	151, 152, 145, 0, 0, 0, 0, 154, 153, 155,
	0, 446, 145, 0, 0, 0, 0, 154, 153, 155,
	0, 0, 145, 178, 0, 0, 0, 0, 0, 143,
	142, 141, 0, 0, 0, 150, 144, 149, 148, 0,
	0, 38, 151, 152, 0, 0, 0, 0, 46, 0,
	0, 143, 142, 33, 0, 0, 0, 150, 144, 149,
	148, 143, 142, 21, 151, 152, 22, 150, 144, 149,
	148, 143, 142, 0, 151, 152, 0, 150, 144, 149,
	148, 0, 0, 0, 151, 152, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 153, 155, 0, 0, 145, 0, 37,
	0, 747, 0, 748, 0, 0, 0, 0, 0, 25,
	0, 0, 30, 28, 29, 27, 439, 153, 155, 0,
	0, 145, 0, 0, 31, 32, 0, 0, 19, 34,
	35, 36, 0, 0, 0, 613, 0, 0, 24, 39,
	40, 41, 42, 43, 44, 0, 143, 142, 0, 0,
	38, 0, 150, 144, 149, 148, 0, 46, 0, 151,
	152, 0, 33, 0, 0, 0, 0, 0, 0, 0,
	143, 142, 21, 0, 0, 22, 150, 144, 149, 148,
	0, 0, 0, 151, 152, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 38,
	0, 0, 0, 0, 0, 0, 46, 0, 0, 0,
	0, 33, 0, 0, 0, 0, 0, 0, 37, 0,
	611, 21, 612, 0, 22, 0, 0, 0, 25, 0,
	0, 30, 28, 29, 27, 0, 0, 0, 0, 0,
	0, 0, 0, 31, 32, 0, 0, 0, 34, 35,
	36, 0, 0, 0, 613, 0, 0, 24, 39, 40,
	41, 42, 43, 44, 0, 0, 0, 37, 0, 17,
	0, 18, 0, 0, 0, 0, 0, 25, 0, 0,
	30, 28, 29, 27, 0, 0, 0, 0, 0, 0,
	0, 0, 31, 32, 0, 0, 19, 34, 35, 36,
	0, 0, 0, 0, 0, 0, 24, 39, 40, 41,
	42, 43, 44,
}
var yyPact = [...]int{

	2495, -1000, 2495, -1000, -1000, 179, 179, 179, 179, 179,
	179, -1000, -1000, -1000, -1000, -1000, -1000, 1810, 1810, 179,
	136, 621, 617, 170, 679, 1452, 179, 377, 1407, 1407,
	394, 179, 179, 676, 1810, 686, 1810, 629, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 117, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2243, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 117, -1000, -1000, 1775,
	-37, -58, -1000, -1000, -1000, -1000, -1000, -1000, 1810, 1810,
	169, 168, -1000, 1810, 267, 165, 1810, 1810, 1407, 164,
	-1000, -1000, -1000, -1000, -1000, -1000, 2233, 10, 511, -1000,
	596, 664, 1137, 1018, 673, 533, 480, -1000, 473, 1407,
	1137, 1810, 179, -10, 8, 179, 360, -1000, 179, 1407,
	1407, 179, 179, 1407, -1000, -1000, -1000, -1000, 1810, 1810,
	-1000, -1000, 176, 1876, -17, 1876, -1000, -11, 1407, -1000,
	1810, 2495, 1810, 1810, 1810, 501, 497, 518, 1810, 1810,
	1810, 1810, 1810, 1810, 1810, -1000, 932, 108, 95, 127,
	725, 1646, 725, -1000, -1000, 480, 480, 363, 2328, 124,
	124, 491, 516, -1000, 1314, -1000, 235, 480, 2081, 1407,
	679, 1407, 564, 587, 1137, 58, -1000, -1000, -1000, 196,
	68, 668, 196, 522, 522, 522, 1740, -1000, 163, 622,
	87, -1000, 1054, -1000, 679, 1810, -1000, 298, 144, 161,
	151, -1000, 179, 179, -1000, -1000, 656, 2328, 2328, 528,
	-1000, -1000, 1810, -1000, 629, 107, 2328, 402, -47, -36,
	-36, 548, 1810, 124, 1810, 124, 124, -19, -19, -1000,
	-1000, -1000, 1165, 1314, -1000, 1810, -1000, -1000, -1000, -1000,
	1810, -1000, -1000, 1810, 1610, 412, 1810, -1000, 1775, -1000,
	-1000, 124, 149, 143, 142, 501, -1000, 1810, 352, 2081,
	-1000, -1000, 1810, -1000, 179, 179, 378, -1000, -16, 375,
	561, 1810, 1904, 105, 1387, 1137, 902, 668, 19, -1000,
	1032, -1000, -1000, -1000, 196, 593, 1810, -1000, 127, -1000,
	127, 127, -1000, -18, 653, -1000, 2328, -1000, -1000, -66,
	140, 139, 138, 137, 1407, 871, 738, 902, -1000, -1000,
	2328, 473, 1407, 473, 114, 1407, -1000, -1000, 679, 179,
	179, -1000, 135, 1407, 351, 402, 2495, 1810, -1000, -1000,
	2352, -1000, -36, -1000, -1000, -1000, 83, 80, 79, 78,
	349, 363, 1810, 2223, 506, 132, -1000, 132, -1000, 132,
	-1000, 318, 73, 429, -1000, 2201, -1000, -1000, 2081, 2081,
	-1000, 1810, 962, -1000, -24, 570, 2328, -1000, 124, 902,
	-1000, -1000, 1407, -25, 673, -31, 175, -70, -1000, 558,
	589, 545, 556, 196, -1000, -1000, -1000, -1000, -1000, 1407,
	668, 571, 585, 2328, 525, -1000, -1000, 525, 1740, 1407,
	1646, 480, 480, 480, 1810, 66, -33, 632, 1407, 609,
	-1000, 902, 605, 179, 64, 179, 652, 62, -32, 179,
	-1000, -1000, 473, 54, 466, 347, 432, -1000, 2159, 1810,
	-1000, -1000, -1000, -1000, -1000, 2328, 1810, 124, 53, -39,
	51, 48, -1000, 283, 214, 179, 2081, 346, 342, 2328,
	-1000, 477, 208, 1904, 192, -1000, -1000, -1000, 46, -40,
	-1000, 668, 902, 1810, 196, 555, 545, 550, -1000, 196,
	-1000, -1000, -1000, -1000, 1810, 1810, -1000, -1000, 45, 1810,
	1810, 1610, 1810, 5, -1000, 1407, -1000, -1000, -1000, 902,
	902, 44, -55, 1810, 42, 1407, -1000, 230, -1000, 239,
	647, 646, 679, -1000, 41, 645, 179, 458, 2495, 1314,
	2328, -1000, -1000, 124, -1000, -1000, -1000, 592, -1000, 393,
	2495, 427, 418, -1000, -1000, -1000, 628, 521, 902, -1000,
	-1000, 2328, 1055, 196, 549, 196, 569, 2328, -1000, 276,
	40, 39, 38, 37, 36, 275, 190, -1000, -1000, -1000,
	632, 1407, 2328, -1000, -1000, -1000, 473, 2446, 225, 224,
	34, -1000, 130, -1000, 179, -1000, -1000, 128, 340, 393,
	2081, 1810, 179, 179, -1000, -1000, -1000, 124, -1000, -1000,
	-1000, 1810, 123, 569, 196, 1055, 122, 272, 268, 266,
	258, 226, 121, 32, -1000, -1000, 179, 339, 2446, -1000,
	-1000, 1810, 1810, 1575, 2446, 2446, 631, 473, -1000, 596,
	456, 337, 441, -1000, 2137, -1000, -1000, -1000, 2328, 1407,
	569, -1000, 280, 119, 118, 112, 111, 69, 280, 256,
	-1000, 179, -1000, 2122, 2095, -1, 510, -1000, 1876, 334,
	333, 220, 30, 29, 179, 451, 2081, 26, 20, 596,
	583, 280, 280, 280, 280, 280, 15, 59, -1000, 2446,
	2032, 1407, 1407, -1000, 179, 179, 2446, -1000, -1000, -1000,
	179, -1000, -1000, -1000, -1000, 1810, 14, 11, 7, 4,
	3, -1000, 280, 392, 331, 2032, -1000, -1000, 1810, -1000,
	361, 359, -1000, -1000, 330, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -3, 327, 390, 2446, 1810, 432, 416, -1000,
	1865, 2032, 2032, 179, -1000, 448, 325, -1000, 1356, 432,
	179, 2032, 321, 315, -1000, 179, 446, 2327, -1000, 371,
	2446, 406, 398, -1000, 179, -1000, -1000, 1810, 1810, 308,
	371, 2032, 1810, 179, 179, -1000, 1341, 1245, -2, 508,
	444, 306, 413, -1000, 1229, -1000, -1000, 2327, 1952, 1407,
	1407, 179, 443, 2032, 1810, -1000, 357, 319, -1000, 179,
	-1000, 1074, 1952, 1952, -1000, 1952,
}
var yyPgo = [...]int{

	0, 10, 4, 20, 136, 444, 5, 173, 809, 804,
	803, 800, 24, 796, 794, 792, 789, 785, 47, 22,
	28, 782, 780, 779, 778, 777, 775, 154, 66, 49,
	766, 46, 41, 765, 764, 25, 760, 42, 759, 37,
	757, 51, 57, 99, 894, 34, 45, 19, 35, 755,
	751, 750, 745, 1153, 744, 740, 737, 735, 580, 820,
	734, 733, 23, 17, 728, 54, 58, 724, 15, 719,
	18, 718, 715, 713, 712, 59, 711, 27, 16, 65,
	44, 32, 39, 709, 708, 707, 36, 706, 7, 48,
	33, 21, 704, 12, 9, 2, 0, 703, 60, 700,
	56, 698, 52, 186, 14, 547, 694, 55, 40, 53,
	43, 31, 38, 50, 693, 378, 222,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 7, 7, 8, 8, 9, 9, 10,
	10, 10, 10, 10, 10, 11, 11, 11, 11, 11,
	11, 11, 12, 12, 13, 13, 13, 14, 14, 14,
	15, 15, 15, 15, 16, 16, 17, 17, 17, 17,
	17, 17, 18, 18, 19, 19, 20, 20, 20, 20,
	20, 21, 21, 21, 21, 21, 22, 22, 22, 22,
	23, 23, 23, 23, 24, 24, 24, 24, 24, 24,
	24, 25, 25, 25, 26, 26, 26, 26, 26, 27,
	28, 28, 28, 28, 29, 29, 30, 31, 31, 32,
	32, 33, 33, 34, 34, 35, 35, 36, 36, 36,
	37, 37, 38, 38, 39, 39, 40, 40, 41, 41,
	42, 42, 42, 42, 42, 42, 43, 43, 43, 43,
	43, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 45, 46, 46, 47, 47,
	48, 48, 49, 49, 50, 50, 51, 51, 51, 52,
	52, 53, 54, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 56, 56, 56, 56, 56, 56, 56, 57,
	57, 57, 57, 58, 58, 59, 60, 60, 60, 60,
	60, 61, 61, 62, 62, 62, 62, 62, 62, 62,
	62, 63, 64, 64, 65, 65, 66, 66, 66, 67,
	68, 68, 68, 68, 68, 68, 69, 69, 69, 69,
	69, 70, 70, 70, 71, 71, 72, 72, 72, 73,
	74, 74, 75, 75, 76, 76, 77, 77, 78, 78,
	79, 79, 80, 80, 81, 81, 82, 82, 83, 83,
	83, 83, 84, 85, 86, 86, 87, 87, 88, 88,
	89, 89, 90, 90, 91, 91, 92, 92, 93, 93,
	94, 94, 95, 95, 96, 96, 96, 96, 96, 96,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 104,
	105, 106, 106, 107, 107, 108, 108, 109, 109, 110,
	110, 111, 111, 112, 112, 112, 112, 113, 113, 114,
	114, 115, 115, 116, 116,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	9, 7, 9, 9, 2, 8, 9, 7, 9, 9,
	2, 3, 2, 2, 8, 9, 1, 8, 9, 1,
	3, 3, 2, 3, 2, 2, 6, 6, 8, 5,
	7, 7, 1, 3, 1, 3, 0, 1, 1, 2,
	2, 6, 3, 3, 4, 6, 7, 9, 6, 4,
	10, 11, 11, 13, 0, 1, 1, 1, 1, 2,
	2, 5, 6, 3, 5, 3, 3, 5, 3, 5,
	5, 4, 4, 4, 1, 1, 3, 0, 2, 0,
	2, 0, 3, 0, 2, 0, 3, 0, 3, 4,
	0, 2, 0, 2, 0, 2, 6, 9, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 1, 3, 1, 1, 3,
	1, 3, 2, 4, 1, 1, 0, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 4, 4, 6,
	6, 4, 6, 4, 4, 4, 6, 4, 4, 6,
	4, 2, 3, 3, 3, 3, 3, 2, 2, 3,
	3, 2, 2, 0, 1, 4, 5, 5, 5, 5,
	1, 5, 10, 8, 9, 9, 9, 9, 9, 8,
	10, 2, 0, 3, 1, 1, 1, 2, 3, 1,
	1, 1, 2, 3, 1, 1, 5, 5, 6, 6,
	4, 0, 2, 4, 1, 1, 1, 3, 1, 5,
	0, 1, 4, 2, 0, 2, 1, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 1, 3, 6, 9,
	5, 8, 7, 3, 1, 3, 5, 6, 4, 2,
	0, 2, 4, 2, 0, 2, 4, 2, 0, 2,
	4, 2, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 1, 3, 1, 3, 0, 1, 0, 1, 0,
	1, 0, 1, 0, 1, 1, 1, 0, 1, 0,
	1, 1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -10, -27, -83, -84, -87, -17,
	-59, -15, -21, -22, -23, -16, -26, 74, 76, 101,
	-39, 26, 29, -96, 111, 82, -105, 88, 86, 87,
	85, 97, 98, 16, 102, 103, 104, 72, 4, 112,
	113, 114, 115, 116, 117, -103, 11, -1, -116, 123,
	-116, -116, -116, -116, -116, -44, -43, -42, -56, -54,
	-53, -59, -60, -73, -55, -57, -103, -105, -25, 129,
	-96, 24, -97, -98, -99, -100, -101, -102, 126, 127,
	116, 114, -61, 73, -46, 62, 66, 128, 83, 115,
	5, 6, 7, 9, 10, 70, -44, -103, -104, -116,
	-28, 19, 15, 17, -30, -29, 13, -53, 129, 30,
	30, 129, -107, -106, -103, -107, -96, -116, -103, 83,
	30, -96, -96, -24, 89, 90, 31, 32, 91, 92,
	-116, -116, 12, -44, 5, -44, -41, -40, -114, 25,
	120, 78, 119, 118, 125, 69, -109, -115, 127, 126,
	124, 131, 132, 65, 64, 66, -44, -78, -27, -39,
	134, 129, 134, -44, -44, 129, 129, -74, -44, 118,
	125, -109, -115, -53, -44, -44, -96, 129, 80, 63,
	133, 63, -35, 38, 20, -80, -65, -96, 24, 14,
	-80, -31, 14, 57, 58, 59, -108, 71, -96, -65,
	-58, -78, -44, -116, 133, 120, -116, 83, 30, 105,
	106, -116, -96, -96, -116, -116, -96, -44, -44, 125,
	-116, -116, 133, -116, 133, -96, -44, -1, -44, -44,
	-44, -109, 67, 63, 68, 61, 60, -44, -44, -44,
	-44, -44, -44, -44, 130, 133, 130, 130, -96, -98,
	-108, -96, -98, -108, -108, -75, 77, -46, 129, -53,
	-46, 67, 63, 61, 60, 69, 114, -108, -2, -8,
	-6, -13, 74, -12, 99, 100, -96, -104, -103, -96,
	-36, 44, 41, -66, -65, 133, 16, -79, -68, -66,
	-67, -69, 23, -53, 14, -32, 18, -79, -113, 60,
	-113, -113, -82, -72, -71, -45, -44, -62, 124, -96,
	116, 114, 115, 117, 129, 27, 28, 36, 130, -107,
	-44, 84, 129, 84, 129, 129, -116, -116, 20, -42,
	-78, -41, 22, 129, -89, -88, 79, 75, -100, -102,
	-44, -46, -44, -46, -46, -78, -58, -58, -58, -45,
	-76, -75, 79, -44, -46, 129, -53, 129, -53, 129,
	-53, -109, -58, 81, -2, -44, -116, -116, 80, 80,
	-38, 45, -44, -48, -49, -50, -44, -62, 21, 129,
	-27, -96, 22, -80, -86, -85, -43, -96, -32, -110,
	56, -112, 53, 133, 48, 50, 51, 52, -96, 22,
	-79, -33, 39, -44, -29, -28, -29, -29, 133, 22,
	129, 129, 129, 129, 129, -81, -96, -18, 129, -96,
	-43, 129, -43, -27, -81, -27, 130, -104, -96, -104,
	-116, -116, 129, -81, 81, -89, -88, -1, -44, 64,
	130, 130, 130, 130, 81, -44, 78, 64, -47, -46,
	-47, -47, 86, 63, 130, 76, 78, -2, -2, -44,
	-37, 46, 72, 133, -51, 42, 43, -47, -77, -43,
	-96, -31, 133, 125, 47, -110, -112, -111, 49, 47,
	-79, -96, -32, -34, 40, 41, -82, -96, -58, -108,
	-108, -108, -108, -58, 130, 133, -20, 31, 32, 33,
	34, -19, -18, 35, -77, 37, -116, 130, -116, 22,
	130, 130, 133, -116, -27, 130, 74, 81, 78, -44,
	-44, -46, 130, 133, 130, 130, 93, 110, -116, -2,
	-6, 81, 81, -37, 112, -48, 113, 130, 133, -32,
	-86, -44, -68, 47, -111, 47, -68, -44, -78, 130,
	-58, -58, -58, -45, -58, 130, 109, -81, -43, -43,
	130, 133, -44, 130, -96, -116, 84, 107, 22, 22,
	-104, 130, 22, -116, 74, -1, -47, 39, -91, -90,
	79, 75, 76, 76, -52, 31, 32, 21, -27, -77,
	-70, 54, 55, -68, 47, -68, 96, 130, 130, 130,
	130, 130, 96, 113, -20, -19, -27, -3, -7, -5,
	-11, 74, 76, 108, 107, 107, 130, 129, -116, 129,
	81, -91, -90, -2, -44, -116, -116, -47, -44, 129,
	-68, -70, 129, 96, 96, 96, 96, 96, 129, 130,
	-116, 81, -3, -44, -44, -103, -104, -116, -44, -3,
	-3, 22, -27, -35, 74, 81, 78, -81, -63, -64,
	95, 129, 129, 129, 129, 129, -63, 96, -116, 78,
	80, 63, 63, -116, 81, 81, 107, 130, 130, -116,
	74, -2, 130, 130, -35, 41, -63, -63, -63, -63,
	-63, 130, 129, -3, -4, -9, -7, -14, 74, -12,
	-96, -96, -116, -116, -3, -116, -78, 130, 130, 130,
	130, 130, -63, -93, -92, 79, 75, -88, 81, -4,
	-44, 80, 80, 81, 130, 81, -93, -3, -44, -88,
	76, 78, -4, -4, -116, 74, 81, 78, -116, -4,
	-7, 81, 81, -116, 74, -3, -5, 74, 76, -95,
	-94, 79, 75, 76, 76, -116, -44, -44, -103, -104,
	81, -95, -94, -4, -44, -116, -116, 78, 80, 63,
	63, 74, 81, 78, 74, -12, -96, -96, -116, 74,
	-4, -44, 80, 80, -116, 78,
}
var yyDef = [...]int{

	-2, -2, -2, 21, 22, 333, 333, 333, 333, 333,
	333, 15, 16, 17, 18, 19, 20, 0, 0, 333,
	0, 0, 0, 0, 0, 0, 333, 0, 0, 0,
	84, 333, 333, 0, 0, 0, 0, 329, 294, 295,
	296, 297, 298, 299, 300, 0, 307, 2, 9, 334,
	10, 11, 12, 13, 14, 317, 141, 142, 143, 144,
	145, 146, 147, 148, 149, 150, 151, 152, 153, 124,
	136, 0, 130, 131, 132, 133, 134, 135, 0, 0,
	299, 297, 210, 250, 317, 0, 0, 0, 0, 298,
	301, 302, 303, 304, 305, 306, 317, 151, 0, 34,
	-2, 0, 0, 0, 107, 0, 315, 105, 124, 0,
	0, 203, 333, 313, 311, 333, 0, 52, 333, 0,
	0, 333, 333, 0, 85, 86, 87, 88, 0, 0,
	54, 55, 0, -2, 333, -2, 125, 128, 0, 330,
	0, -2, 0, 331, 332, 317, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 318, 317, 0, 0, 0,
	0, 203, 0, 197, 198, 315, 315, 0, -2, 331,
	332, 0, 0, 191, 201, 202, 0, 315, -2, 0,
	0, 0, 117, 0, 0, 0, 262, 224, 225, 0,
	0, 109, 0, 327, 327, 327, 0, 316, 0, 0,
	0, 204, -2, 50, 0, 0, 51, 0, 0, 0,
	0, 53, 333, 333, 72, 73, 0, -2, -2, 0,
	95, 96, 0, 98, 329, 0, 310, 280, 172, -2,
	-2, 0, 0, 0, 0, 0, 0, 192, 193, 194,
	195, 196, 199, 200, 154, 0, 156, 171, 137, 139,
	203, 138, 140, 203, 203, 254, 0, 174, 124, 157,
	176, 0, 0, 0, 0, 317, 93, 203, 0, -2,
	25, 26, 0, 46, 333, 333, 0, 309, 308, 0,
	122, 0, 0, 124, 226, 0, 0, 109, -2, 230,
	231, 234, 235, 229, 0, 111, 0, 108, 0, 328,
	0, 0, 106, 266, 246, 248, -2, 245, 155, 136,
	299, 297, 298, 300, 0, 0, 0, 0, 205, 314,
	-2, 124, 0, 124, 0, 0, 74, 79, 0, 333,
	333, 129, 0, 0, 0, 280, -2, 0, 177, 178,
	317, 181, -2, 185, 188, 259, 0, 0, 0, 0,
	0, 253, 0, 317, 0, 124, 183, 124, 187, 124,
	190, 0, 0, 0, 4, 317, 42, 43, -2, -2,
	99, 0, -2, 116, 160, 166, -2, 165, 0, 0,
	270, 227, 0, 263, 107, 274, 0, 136, 276, 0,
	-2, 321, 0, 0, 320, 324, 325, 326, 232, 0,
	109, 113, 0, -2, 101, 104, 102, 103, 0, 0,
	203, 315, 315, 315, 203, 0, 264, 66, 0, 62,
	59, 0, 0, 333, 0, 333, 0, 0, 0, 333,
	94, 97, 124, 0, 0, 0, 279, 281, 317, 0,
	206, 207, 208, 209, 249, -2, 0, 0, 0, 158,
	0, 0, 91, 0, 211, 333, -2, 0, 0, -2,
	118, 120, 0, 0, 162, 167, 168, 268, 0, 256,
	228, 109, 0, 0, 0, 0, 321, 0, 322, 0,
	261, 233, 277, 100, 0, 0, 267, 247, 0, 203,
	203, 203, 203, 0, 56, 0, 57, 67, 68, 0,
	0, 0, 64, 0, 0, 0, 71, 333, 78, 0,
	0, 0, 0, 75, 0, 0, 333, 0, -2, 179,
	-2, 180, 182, 0, 186, 189, 92, 0, 31, 284,
	-2, 0, 0, 119, 121, 161, 0, 124, 0, 272,
	275, -2, 241, 0, 0, 0, 240, -2, 112, 205,
	0, 0, 0, 0, 0, 0, 0, 265, 69, 70,
	66, 0, -2, 60, 61, 76, 124, -2, 0, 0,
	0, 126, 0, 29, 333, 278, 159, 0, 0, 284,
	-2, 0, 333, 333, 163, 169, 170, 0, 271, 257,
	236, 0, 0, 237, 0, 241, 0, 206, 207, 208,
	209, 211, 0, 0, 58, 65, 333, 0, -2, 23,
	24, 0, 0, 333, -2, -2, 0, 124, 30, 115,
	0, 0, 283, 285, 317, 32, 33, 269, -2, 0,
	239, 238, 222, 0, 0, 0, 0, 0, 222, 0,
	77, 333, 6, 317, 317, 151, 0, 40, -2, 0,
	0, 0, 0, 0, 333, 0, -2, 0, 0, 115,
	0, 222, 222, 222, 222, 222, 0, 0, 80, -2,
	-2, 0, 0, 41, 333, 333, -2, 127, 212, 44,
	333, 282, 243, 213, 221, 0, 0, 0, 0, 0,
	0, 219, 222, 288, 0, -2, 27, 28, 0, 49,
	0, 0, 81, 82, 0, 45, 223, 214, 215, 216,
	217, 218, 0, 0, 288, -2, 0, 0, 0, 8,
	317, -2, -2, 333, 220, 0, 0, 289, 317, 287,
	333, -2, 0, 0, 83, 333, 0, -2, 37, 292,
	-2, 0, 0, 35, 333, 286, -2, 0, 0, 0,
	292, -2, 0, 333, 333, 36, 317, 317, 151, 0,
	0, 0, 291, 293, 317, 38, 39, -2, -2, 0,
	0, 333, 0, -2, 0, -2, 0, 0, 47, 333,
	290, 317, -2, -2, 48, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 128, 3, 3, 3, 132, 3, 3,
	129, 130, 124, 127, 133, 126, 134, 131, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 123,
	3, 125,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:184
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:189
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:196
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:201
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:208
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:213
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:220
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:225
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:232
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:236
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:240
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:244
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:248
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:252
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:256
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:260
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:264
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:268
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:272
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:276
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:302
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:306
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:312
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:316
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:322
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:326
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:330
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 32:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:334
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:338
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:342
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:348
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 36:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:352
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:356
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 38:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:360
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:364
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:368
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:372
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:378
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:382
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:388
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 45:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:392
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:396
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:402
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 48:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:406
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:410
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:416
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:420
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:424
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:428
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:434
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:438
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:444
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:448
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:452
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:456
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 60:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:460
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:464
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression, To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:470
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:474
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:480
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:484
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:490
		{
			yyVAL.expression = nil
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:494
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:498
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:502
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:506
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:512
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:516
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:520
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:524
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:528
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 76:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:534
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 77:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:538
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:542
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:546
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 80:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:552
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 81:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:556
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 82:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:560
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Statements: yyDollar[9].program}
		}
	case 83:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.y:564
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Parameters: yyDollar[7].variables, Statements: yyDollar[11].program}
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:570
		{
			yyVAL.expression = nil
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:574
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:578
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:582
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:586
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:590
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:594
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:600
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:604
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:608
		{
			yyVAL.expression = CursorAttrebute{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Attrebute: yyDollar[3].token}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:614
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:618
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:622
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:626
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:630
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].expression}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:636
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:648
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:658
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:667
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:676
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:687
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:691
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:697
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:703
		{
			yyVAL.expression = nil
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:707
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:713
		{
			yyVAL.expression = nil
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:717
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:723
		{
			yyVAL.expression = nil
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:727
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:733
		{
			yyVAL.expression = nil
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:737
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:743
		{
			yyVAL.expression = nil
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:747
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:753
		{
			yyVAL.expression = nil
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:757
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:761
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:767
		{
			yyVAL.expression = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:771
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:777
		{
			yyVAL.expression = nil
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:781
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:787
		{
			yyVAL.expression = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:791
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 126:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:797
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 127:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:801
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:807
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:811
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:817
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:821
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:825
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:829
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:833
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:837
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:843
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, Column: yyDollar[1].identifier}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:847
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:851
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:855
		{
			yyVAL.expression = ColumnNumber{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Number: yyDollar[3].integer}
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:859
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: yyDollar[3].integer}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:865
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:869
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:873
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:877
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:881
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:885
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:889
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:893
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:897
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:901
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:905
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:909
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:913
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:917
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:923
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:929
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:933
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:939
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:943
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:949
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:953
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:959
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:963
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:969
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:973
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:979
		{
			yyVAL.token = Token{}
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:983
		{
			yyVAL.token = yyDollar[1].token
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:987
		{
			yyVAL.token = yyDollar[1].token
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:993
		{
			yyVAL.token = yyDollar[1].token
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:997
		{
			yyVAL.token = yyDollar[1].token
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1003
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1009
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1032
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1036
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1040
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1044
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1048
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1052
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1056
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1060
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1064
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 182:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1068
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1072
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1076
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1080
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1084
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1088
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1092
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1096
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1100
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1104
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1110
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1114
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1118
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1122
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1126
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1130
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1134
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1140
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1144
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1148
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1152
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 203:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1158
		{
			yyVAL.expressions = nil
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1162
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1168
		{
			yyVAL.expression = Function{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 206:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1174
		{
			yyVAL.expression = AggregateFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 207:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1178
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1182
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 209:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1190
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1196
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 212:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1200
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 213:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1206
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 214:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1210
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 215:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1214
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 216:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1218
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 217:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1222
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 218:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1226
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 219:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1230
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 220:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1234
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1240
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1246
		{
			yyVAL.expression = nil
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1250
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1256
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1260
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1266
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1270
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1274
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1280
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1286
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1290
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1294
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1298
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1302
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1306
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1312
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1316
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 238:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1320
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 239:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1324
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 240:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1328
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 241:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1334
		{
			yyVAL.expression = nil
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1338
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1342
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1348
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1352
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1358
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1362
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1366
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1372
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 250:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1378
		{
			yyVAL.expression = nil
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1382
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1388
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1392
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1398
		{
			yyVAL.expression = nil
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1402
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1408
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1412
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1418
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1422
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1428
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1432
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1438
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1442
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1448
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1452
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1458
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1462
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 268:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1468
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 269:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1472
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 270:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1476
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 271:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1480
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 272:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1486
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1492
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1498
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1502
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 276:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1508
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 277:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1513
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1520
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1524
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 280:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1530
		{
			yyVAL.procexpr = nil
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1534
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1540
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1544
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1550
		{
			yyVAL.procexpr = nil
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1554
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1560
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1564
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1570
		{
			yyVAL.procexpr = nil
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1574
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1580
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1584
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1590
		{
			yyVAL.procexpr = nil
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1594
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1600
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1604
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1608
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1612
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1616
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1620
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1624
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1630
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1636
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1642
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1648
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1654
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1660
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1666
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1672
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1676
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 310:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1682
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1688
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1692
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1698
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1702
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 315:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1708
		{
			yyVAL.token = Token{}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1712
		{
			yyVAL.token = yyDollar[1].token
		}
	case 317:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1718
		{
			yyVAL.token = Token{}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1722
		{
			yyVAL.token = yyDollar[1].token
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1728
		{
			yyVAL.token = Token{}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1732
		{
			yyVAL.token = yyDollar[1].token
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1738
		{
			yyVAL.token = Token{}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1742
		{
			yyVAL.token = yyDollar[1].token
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1748
		{
			yyVAL.token = Token{}
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1752
		{
			yyVAL.token = yyDollar[1].token
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1756
		{
			yyVAL.token = yyDollar[1].token
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1760
		{
			yyVAL.token = yyDollar[1].token
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1766
		{
			yyVAL.token = Token{}
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1770
		{
			yyVAL.token = yyDollar[1].token
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1776
		{
			yyVAL.token = Token{}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1780
		{
			yyVAL.token = yyDollar[1].token
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1787
		{
			yyVAL.token = yyDollar[1].token
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1791
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1798
		{
			yyVAL.token = Token{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1802
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
