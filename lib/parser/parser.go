//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const TRIGGER = 57447
const FUNCTION = 57448
const AGGREGATE = 57449
const BEGIN = 57450
const RETURN = 57451
const IGNORE = 57452
const WITHIN = 57453
const VAR = 57454
const OPTIONAL = 57455
const TIES = 57456
const NULLS = 57457
const ERROR = 57458
const COUNT = 57459
const LISTAGG = 57460
const AGGREGATE_FUNCTION = 57461
const FUNCTION_WITH_ADDITIONALS = 57462
const COMPARISON_OP = 57463
const STRING_OP = 57464
const SUBSTITUTION_OP = 57465
const UMINUS = 57466
const UPLUS = 57467

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"TRIGGER",
	"FUNCTION",
	"AGGREGATE",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"OPTIONAL",
	"TIES",
	"NULLS",
	"ERROR",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_ADDITIONALS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1853

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 132,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	75, 1,
	79, 1,
	81, 1,
	-2, 132,
	-1, 103,
	57, 112,
	58, 112,
	59, 112,
	-2, 123,
	-1, 136,
	63, 326,
	67, 326,
	68, 326,
	-2, 342,
	-1, 138,
	63, 326,
	67, 326,
	68, 326,
	-2, 342,
	-1, 145,
	75, 1,
	79, 1,
	81, 1,
	-2, 132,
	-1, 172,
	77, 259,
	-2, 326,
	-1, 182,
	81, 3,
	-2, 132,
	-1, 206,
	63, 326,
	67, 326,
	68, 326,
	-2, 266,
	-1, 221,
	63, 326,
	67, 326,
	68, 326,
	-2, 94,
	-1, 222,
	63, 326,
	67, 326,
	68, 326,
	-2, 95,
	-1, 229,
	63, 326,
	67, 326,
	68, 326,
	-2, 342,
	-1, 236,
	69, 0,
	121, 0,
	128, 0,
	-2, 181,
	-1, 237,
	69, 0,
	121, 0,
	128, 0,
	-2, 183,
	-1, 276,
	75, 3,
	79, 3,
	81, 3,
	-2, 132,
	-1, 295,
	47, 328,
	49, 332,
	-2, 268,
	-1, 313,
	63, 326,
	67, 326,
	68, 326,
	-2, 252,
	-1, 327,
	63, 326,
	67, 326,
	68, 326,
	-2, 321,
	-1, 339,
	63, 326,
	67, 326,
	68, 326,
	-2, 342,
	-1, 345,
	81, 1,
	-2, 132,
	-1, 351,
	69, 0,
	121, 0,
	128, 0,
	-2, 192,
	-1, 377,
	81, 3,
	-2, 132,
	-1, 378,
	81, 3,
	-2, 132,
	-1, 381,
	63, 326,
	67, 326,
	68, 326,
	-2, 128,
	-1, 385,
	63, 326,
	67, 326,
	68, 326,
	-2, 172,
	-1, 399,
	49, 332,
	-2, 328,
	-1, 412,
	63, 326,
	67, 326,
	68, 326,
	-2, 118,
	-1, 457,
	81, 263,
	-2, 326,
	-1, 468,
	75, 1,
	79, 1,
	81, 1,
	-2, 132,
	-1, 471,
	63, 326,
	67, 326,
	68, 326,
	-2, 131,
	-1, 532,
	75, 1,
	79, 1,
	81, 1,
	-2, 132,
	-1, 534,
	77, 260,
	79, 260,
	81, 260,
	-2, 326,
	-1, 544,
	75, 1,
	79, 1,
	81, 1,
	-2, 26,
	-1, 555,
	63, 326,
	67, 326,
	68, 326,
	-2, 281,
	-1, 561,
	63, 326,
	67, 326,
	68, 326,
	-2, 122,
	-1, 576,
	63, 326,
	67, 326,
	68, 326,
	-2, 64,
	-1, 581,
	81, 5,
	-2, 132,
	-1, 584,
	133, 82,
	136, 82,
	-2, 326,
	-1, 596,
	81, 3,
	-2, 132,
	-1, 624,
	75, 5,
	79, 5,
	81, 5,
	-2, 132,
	-1, 630,
	81, 5,
	-2, 132,
	-1, 631,
	81, 5,
	-2, 132,
	-1, 644,
	63, 326,
	67, 326,
	68, 326,
	-2, 250,
	-1, 664,
	63, 326,
	67, 326,
	68, 326,
	-2, 342,
	-1, 672,
	75, 3,
	79, 3,
	81, 3,
	-2, 132,
	-1, 685,
	75, 5,
	79, 5,
	81, 5,
	-2, 132,
	-1, 686,
	81, 7,
	-2, 132,
	-1, 692,
	81, 5,
	-2, 132,
	-1, 711,
	75, 7,
	79, 7,
	81, 7,
	-2, 132,
	-1, 731,
	81, 5,
	-2, 132,
	-1, 737,
	81, 7,
	-2, 132,
	-1, 738,
	81, 7,
	-2, 132,
	-1, 747,
	75, 5,
	79, 5,
	81, 5,
	-2, 132,
	-1, 753,
	75, 1,
	79, 5,
	81, 5,
	-2, 132,
	-1, 756,
	75, 5,
	79, 5,
	81, 5,
	-2, 28,
	-1, 762,
	109, 24,
	-2, 22,
	-1, 767,
	81, 7,
	-2, 132,
	-1, 783,
	75, 1,
	79, 1,
	81, 1,
	-2, 132,
	-1, 784,
	81, 3,
	-2, 132,
	-1, 789,
	75, 7,
	79, 7,
	81, 7,
	-2, 132,
	-1, 791,
	109, 50,
	-2, 47,
	-1, 798,
	81, 3,
	-2, 132,
	-1, 799,
	81, 3,
	-2, 132,
	-1, 801,
	75, 1,
	79, 1,
	81, 1,
	-2, 132,
}

const yyPrivate = 57344

const yyLast = 2567

var yyAct = [...]int{

	73, 24, 765, 24, 778, 101, 729, 280, 709, 234,
	1, 606, 50, 295, 186, 424, 513, 277, 2, 508,
	2, 205, 480, 594, 638, 448, 59, 119, 489, 275,
	124, 125, 436, 312, 382, 472, 302, 393, 314, 343,
	294, 309, 400, 195, 398, 460, 514, 291, 140, 80,
	200, 189, 78, 115, 60, 305, 296, 360, 108, 76,
	625, 3, 150, 3, 414, 525, 785, 164, 526, 419,
	146, 158, 157, 159, 164, 154, 149, 153, 152, 165,
	118, 166, 155, 156, 164, 801, 103, 301, 293, 687,
	154, 21, 180, 575, 161, 552, 183, 155, 156, 740,
	403, 674, 404, 405, 406, 401, 191, 191, 399, 154,
	52, 153, 152, 202, 191, 537, 155, 156, 69, 48,
	226, 48, 523, 216, 217, 710, 144, 220, 147, 146,
	507, 484, 292, 475, 154, 148, 153, 152, 100, 184,
	417, 155, 156, 232, 117, 117, 24, 121, 184, 144,
	175, 231, 208, 190, 190, 40, 144, 570, 194, 49,
	727, 203, 184, 2, 163, 255, 109, 258, 105, 184,
	106, 387, 104, 726, 299, 192, 158, 157, 159, 725,
	569, 149, 724, 24, 283, 708, 286, 723, 402, 191,
	284, 707, 784, 699, 191, 698, 694, 191, 624, 230,
	693, 316, 655, 163, 632, 52, 3, 617, 292, 292,
	616, 615, 238, 614, 613, 587, 257, 577, 574, 563,
	260, 261, 39, 551, 256, 539, 259, 538, 103, 262,
	536, 529, 274, 147, 146, 522, 519, 304, 506, 154,
	148, 153, 152, 3, 466, 290, 155, 156, 337, 159,
	455, 454, 149, 453, 307, 308, 39, 452, 109, 330,
	344, 341, 326, 325, 48, 41, 42, 47, 43, 44,
	45, 46, 254, 253, 354, 681, 680, 24, 336, 679,
	340, 435, 388, 111, 678, 111, 677, 161, 348, 5,
	316, 347, 390, 191, 396, 358, 654, 648, 407, 645,
	265, 48, 191, 285, 147, 146, 373, 329, 635, 633,
	154, 148, 153, 152, 444, 209, 265, 155, 156, 423,
	395, 422, 425, 428, 396, 396, 421, 117, 386, 420,
	425, 397, 368, 439, 366, 370, 364, 3, 332, 331,
	190, 440, 409, 425, 392, 433, 24, 321, 181, 111,
	429, 431, 170, 169, 114, 449, 485, 163, 445, 223,
	580, 159, 162, 2, 413, 144, 415, 416, 40, 426,
	139, 342, 619, 272, 550, 548, 653, 111, 24, 24,
	541, 692, 163, 631, 447, 630, 581, 683, 74, 396,
	652, 541, 482, 651, 650, 48, 649, 618, 212, 612,
	676, 162, 52, 191, 540, 151, 3, 469, 470, 493,
	328, 465, 462, 788, 463, 481, 173, 49, 316, 499,
	163, 273, 163, 174, 776, 758, 757, 752, 428, 731,
	741, 396, 739, 479, 464, 734, 123, 483, 3, 3,
	691, 690, 488, 492, 487, 799, 494, 671, 657, 798,
	438, 211, 636, 516, 285, 546, 163, 481, 163, 498,
	163, 545, 531, 456, 48, 446, 129, 130, 372, 24,
	501, 502, 503, 504, 213, 214, 316, 738, 41, 42,
	47, 43, 44, 45, 46, 396, 544, 191, 40, 122,
	768, 737, 191, 176, 767, 732, 48, 48, 543, 731,
	556, 378, 597, 346, 377, 560, 596, 345, 425, 547,
	549, 395, 396, 396, 386, 263, 770, 558, 578, 562,
	553, 769, 554, 571, 127, 128, 131, 132, 263, 3,
	361, 746, 599, 24, 598, 467, 163, 567, 572, 573,
	768, 346, 591, 597, 795, 24, 787, 760, 751, 696,
	2, 670, 590, 396, 50, 162, 583, 530, 191, 586,
	191, 39, 2, 603, 40, 204, 474, 201, 595, 159,
	459, 609, 786, 611, 96, 605, 428, 688, 185, 481,
	389, 240, 24, 592, 74, 239, 241, 48, 198, 306,
	623, 269, 621, 3, 620, 268, 490, 24, 41, 42,
	47, 43, 44, 45, 46, 3, 271, 270, 243, 242,
	610, 191, 70, 27, 39, 27, 427, 380, 432, 637,
	434, 559, 557, 647, 646, 24, 639, 197, 198, 199,
	491, 24, 24, 658, 662, 98, 486, 477, 478, 665,
	666, 288, 438, 163, 701, 438, 425, 497, 289, 643,
	669, 48, 496, 593, 162, 411, 162, 3, 162, 187,
	517, 673, 524, 48, 515, 113, 93, 94, 95, 112,
	96, 97, 163, 24, 41, 42, 47, 43, 44, 45,
	46, 403, 143, 404, 405, 406, 24, 24, 716, 717,
	700, 667, 430, 24, 715, 588, 51, 601, 602, 585,
	48, 720, 697, 53, 54, 55, 56, 57, 582, 322,
	323, 521, 24, 418, 335, 48, 188, 102, 324, 715,
	303, 196, 135, 722, 120, 163, 87, 49, 137, 133,
	134, 98, 24, 3, 528, 733, 142, 742, 24, 24,
	743, 116, 79, 48, 77, 715, 715, 661, 24, 48,
	48, 75, 730, 8, 24, 715, 682, 24, 27, 745,
	766, 394, 761, 591, 7, 658, 6, 359, 24, 777,
	775, 2, 171, 66, 310, 715, 311, 298, 297, 702,
	703, 704, 705, 706, 24, 24, 792, 793, 675, 85,
	24, 48, 791, 65, 68, 27, 61, 715, 67, 24,
	24, 2, 24, 62, 48, 48, 791, 791, 600, 791,
	728, 48, 207, 476, 762, 210, 384, 383, 215, 544,
	141, 218, 219, 355, 379, 287, 356, 357, 469, 470,
	48, 543, 495, 224, 225, 227, 228, 735, 410, 107,
	371, 604, 17, 16, 762, 762, 71, 126, 14, 40,
	48, 509, 510, 511, 512, 437, 48, 48, 13, 762,
	762, 206, 762, 748, 749, 12, 48, 408, 9, 15,
	622, 11, 48, 755, 403, 48, 404, 405, 406, 401,
	58, 99, 399, 774, 713, 712, 48, 278, 626, 27,
	4, 711, 276, 779, 0, 0, 0, 136, 0, 138,
	264, 267, 48, 48, 0, 0, 0, 0, 48, 0,
	712, 40, 0, 333, 334, 796, 0, 48, 48, 0,
	48, 193, 0, 668, 748, 749, 338, 755, 0, 64,
	10, 192, 10, 40, 160, 0, 712, 712, 0, 0,
	0, 0, 0, 167, 168, 0, 756, 0, 172, 0,
	0, 178, 179, 192, 0, 0, 0, 0, 27, 41,
	42, 47, 43, 44, 45, 46, 712, 350, 0, 352,
	353, 0, 0, 0, 0, 0, 0, 0, 375, 376,
	0, 0, 0, 712, 0, 500, 0, 0, 712, 505,
	27, 27, 0, 221, 222, 363, 0, 712, 712, 0,
	756, 229, 0, 0, 0, 0, 233, 0, 235, 236,
	237, 0, 0, 0, 244, 245, 246, 247, 248, 249,
	250, 41, 42, 47, 43, 44, 45, 46, 0, 0,
	0, 0, 0, 441, 442, 0, 443, 0, 0, 0,
	0, 0, 0, 41, 42, 47, 43, 44, 45, 46,
	0, 0, 158, 157, 159, 0, 0, 149, 0, 0,
	0, 0, 313, 0, 0, 0, 0, 564, 565, 566,
	568, 327, 0, 0, 0, 10, 0, 40, 93, 94,
	95, 27, 96, 97, 49, 0, 0, 0, 0, 0,
	0, 461, 339, 461, 0, 461, 0, 74, 0, 0,
	0, 349, 0, 351, 0, 0, 0, 0, 0, 147,
	146, 0, 10, 0, 461, 154, 148, 153, 152, 0,
	0, 251, 155, 156, 252, 362, 0, 0, 0, 518,
	0, 520, 0, 0, 0, 88, 0, 527, 0, 89,
	0, 374, 0, 98, 0, 27, 86, 40, 0, 94,
	381, 385, 0, 0, 0, 0, 91, 27, 40, 0,
	0, 0, 0, 0, 542, 412, 0, 0, 158, 157,
	159, 0, 0, 149, 0, 403, 391, 404, 405, 406,
	401, 607, 608, 399, 0, 0, 535, 41, 42, 47,
	84, 92, 83, 46, 27, 0, 0, 0, 0, 52,
	0, 0, 81, 82, 90, 72, 10, 0, 450, 27,
	0, 0, 0, 0, 0, 0, 579, 0, 0, 0,
	0, 0, 0, 457, 0, 147, 146, 589, 473, 0,
	0, 154, 148, 153, 152, 0, 0, 27, 155, 156,
	252, 0, 471, 27, 27, 0, 158, 157, 159, 0,
	0, 149, 0, 0, 474, 0, 0, 41, 42, 47,
	43, 44, 45, 46, 461, 0, 63, 0, 41, 42,
	47, 43, 44, 45, 46, 10, 0, 0, 0, 313,
	0, 0, 0, 0, 0, 27, 0, 634, 110, 0,
	0, 0, 0, 40, 0, 641, 642, 0, 27, 27,
	49, 0, 0, 147, 146, 27, 0, 10, 10, 154,
	148, 153, 152, 533, 0, 0, 155, 156, 0, 656,
	534, 0, 0, 0, 27, 0, 663, 0, 0, 0,
	461, 0, 0, 0, 0, 0, 0, 385, 0, 40,
	0, 0, 0, 0, 27, 0, 0, 555, 0, 0,
	27, 27, 0, 0, 684, 177, 0, 0, 561, 0,
	27, 689, 0, 0, 0, 0, 27, 695, 158, 27,
	159, 0, 0, 149, 0, 0, 0, 576, 0, 0,
	27, 0, 0, 0, 0, 0, 584, 718, 719, 0,
	0, 0, 0, 721, 0, 0, 27, 27, 10, 0,
	0, 0, 27, 41, 42, 47, 43, 44, 45, 46,
	0, 27, 27, 0, 27, 0, 0, 40, 93, 94,
	95, 0, 96, 97, 49, 147, 146, 0, 0, 0,
	110, 154, 148, 153, 152, 0, 750, 74, 155, 156,
	266, 266, 0, 754, 0, 0, 0, 0, 759, 41,
	42, 47, 43, 44, 45, 46, 0, 771, 0, 640,
	300, 0, 10, 300, 0, 0, 781, 782, 0, 644,
	0, 0, 0, 0, 10, 88, 0, 0, 0, 89,
	0, 0, 0, 98, 794, 0, 86, 0, 0, 659,
	660, 664, 800, 0, 0, 0, 91, 0, 0, 158,
	157, 159, 0, 0, 149, 0, 0, 266, 0, 266,
	266, 10, 0, 789, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 10, 41, 42, 47,
	84, 92, 83, 46, 0, 266, 365, 367, 369, 0,
	315, 0, 81, 82, 90, 72, 0, 158, 157, 159,
	0, 0, 149, 0, 10, 0, 147, 146, 0, 0,
	10, 10, 154, 148, 153, 152, 0, 0, 300, 155,
	156, 0, 110, 0, 110, 110, 736, 0, 40, 93,
	94, 95, 0, 96, 97, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 744, 0, 0, 0, 74, 0,
	0, 0, 10, 0, 147, 146, 0, 0, 0, 52,
	154, 148, 153, 152, 0, 10, 10, 155, 156, 0,
	0, 0, 10, 0, 0, 772, 773, 0, 0, 0,
	780, 266, 0, 266, 0, 266, 88, 0, 0, 0,
	89, 10, 0, 0, 98, 201, 0, 86, 0, 0,
	0, 0, 797, 0, 266, 0, 0, 91, 0, 0,
	0, 10, 0, 0, 0, 0, 0, 10, 10, 300,
	0, 0, 0, 0, 0, 0, 0, 10, 0, 0,
	0, 0, 0, 10, 0, 0, 10, 0, 41, 42,
	47, 84, 92, 83, 46, 0, 0, 10, 0, 0,
	0, 0, 0, 81, 82, 90, 72, 0, 0, 0,
	0, 0, 0, 10, 10, 0, 0, 0, 0, 10,
	0, 0, 158, 157, 159, 0, 266, 149, 10, 10,
	0, 10, 40, 93, 94, 95, 783, 96, 97, 49,
	0, 0, 158, 157, 159, 0, 0, 149, 0, 0,
	0, 0, 74, 300, 0, 0, 753, 0, 300, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 40, 93, 94, 95, 0, 96, 97, 49, 147,
	146, 0, 0, 0, 0, 154, 148, 153, 152, 0,
	88, 74, 155, 156, 89, 0, 0, 0, 98, 147,
	146, 86, 0, 0, 266, 154, 148, 153, 152, 0,
	0, 91, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 300, 0, 300, 0, 0, 88,
	0, 0, 0, 89, 0, 0, 0, 98, 0, 39,
	86, 0, 41, 42, 47, 318, 319, 317, 320, 0,
	91, 158, 157, 159, 0, 315, 149, 81, 82, 90,
	72, 0, 0, 0, 0, 747, 0, 0, 0, 0,
	266, 0, 0, 40, 93, 94, 95, 300, 96, 97,
	49, 41, 42, 47, 84, 92, 83, 46, 0, 0,
	158, 157, 159, 74, 0, 149, 81, 82, 90, 72,
	40, 93, 94, 95, 685, 96, 97, 49, 147, 146,
	0, 0, 0, 0, 154, 148, 153, 152, 0, 0,
	74, 155, 156, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 89, 0, 0, 0, 98,
	0, 0, 86, 0, 0, 0, 0, 147, 146, 0,
	0, 0, 91, 154, 148, 153, 152, 0, 88, 0,
	155, 156, 89, 0, 0, 0, 98, 0, 40, 86,
	0, 0, 0, 0, 0, 49, 0, 0, 0, 91,
	34, 0, 0, 41, 42, 47, 84, 92, 83, 46,
	22, 0, 0, 23, 0, 0, 0, 0, 81, 82,
	90, 72, 0, 0, 0, 0, 0, 0, 0, 0,
	41, 42, 47, 318, 319, 317, 320, 40, 0, 0,
	0, 0, 0, 0, 49, 81, 82, 90, 72, 34,
	0, 0, 0, 0, 0, 0, 39, 0, 790, 22,
	764, 0, 23, 0, 0, 0, 26, 0, 0, 31,
	29, 30, 28, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 33, 281, 282, 20, 35, 36, 37, 38,
	0, 0, 0, 629, 0, 0, 25, 0, 41, 42,
	47, 43, 44, 45, 46, 39, 0, 714, 0, 628,
	0, 158, 157, 159, 0, 26, 149, 0, 31, 29,
	30, 28, 0, 0, 0, 0, 0, 686, 0, 0,
	32, 33, 281, 282, 40, 35, 36, 37, 38, 0,
	0, 49, 629, 0, 0, 25, 34, 41, 42, 47,
	43, 44, 45, 46, 0, 0, 22, 0, 0, 23,
	0, 0, 0, 0, 0, 0, 0, 0, 147, 146,
	0, 0, 0, 0, 154, 148, 153, 152, 0, 0,
	0, 155, 156, 40, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 39, 0, 279, 22, 19, 0, 23, 0,
	0, 0, 26, 0, 0, 31, 29, 30, 28, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 33, 281,
	282, 20, 35, 36, 37, 38, 0, 0, 0, 0,
	0, 0, 25, 0, 41, 42, 47, 43, 44, 45,
	46, 39, 0, 763, 0, 764, 0, 158, 157, 159,
	0, 26, 149, 0, 31, 29, 30, 28, 158, 157,
	159, 672, 0, 149, 0, 0, 32, 33, 40, 0,
	20, 35, 36, 37, 38, 49, 0, 0, 629, 0,
	34, 25, 0, 41, 42, 47, 43, 44, 45, 46,
	22, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 147, 146, 0, 0, 0, 0,
	154, 148, 153, 152, 0, 147, 146, 155, 156, 40,
	0, 154, 148, 153, 152, 0, 49, 0, 155, 156,
	0, 34, 0, 0, 0, 0, 39, 0, 627, 0,
	628, 22, 0, 0, 23, 0, 26, 0, 0, 31,
	29, 30, 28, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 33, 0, 0, 0, 35, 36, 37, 38,
	0, 0, 0, 629, 0, 0, 25, 0, 41, 42,
	47, 43, 44, 45, 46, 0, 0, 39, 0, 18,
	0, 19, 0, 158, 157, 159, 0, 26, 149, 0,
	31, 29, 30, 28, 0, 0, 0, 532, 0, 158,
	157, 159, 32, 33, 149, 0, 20, 35, 36, 37,
	38, 0, 0, 468, 0, 0, 0, 25, 0, 41,
	42, 47, 43, 44, 45, 46, 0, 0, 158, 157,
	159, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	147, 146, 458, 0, 0, 0, 154, 148, 153, 152,
	158, 157, 159, 155, 156, 149, 147, 146, 0, 0,
	0, 0, 154, 148, 153, 152, 182, 0, 0, 155,
	156, 0, 0, 158, 157, 159, 0, 0, 149, 0,
	0, 0, 0, 0, 0, 147, 146, 145, 0, 0,
	0, 154, 148, 153, 152, 451, 157, 159, 155, 156,
	149, 0, 0, 0, 0, 0, 0, 147, 146, 0,
	0, 0, 0, 154, 148, 153, 152, 0, 0, 0,
	155, 156, 0, 0, 0, 0, 0, 0, 0, 0,
	147, 146, 0, 0, 0, 0, 154, 148, 153, 152,
	0, 0, 0, 155, 156, 0, 0, 0, 0, 0,
	0, 0, 147, 146, 0, 0, 0, 0, 154, 148,
	153, 152, 0, 0, 0, 155, 156,
}
var yyPact = [...]int{

	2305, -1000, 2305, -1000, -1000, 79, 79, 79, 79, 79,
	79, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1869, 1869,
	79, 153, 639, 635, 222, 716, 1289, 79, 406, 1335,
	1335, 435, 79, 79, 710, 1869, 723, 1869, 254, 657,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 242, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2409, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 242,
	-1000, -1000, 1767, -53, -56, -1000, -1000, -1000, -1000, -1000,
	-1000, 1869, 1869, 221, 220, -1000, 1869, 295, 217, 1869,
	1869, 1335, 216, -1000, -1000, -1000, -1000, -1000, -1000, 2386,
	33, 515, -1000, 621, 696, 929, 907, 707, 570, 496,
	-1000, 489, 1335, 929, 1869, 79, 16, 192, 79, 368,
	-1000, 79, 1335, 1335, 79, 79, 1335, -1000, -1000, -1000,
	-1000, 1869, 1869, -1000, -1000, 231, 1483, -16, 1483, 1073,
	-1000, 15, 1335, -1000, 1869, 2305, 1869, 1869, 1869, 503,
	518, 548, 1869, 1869, 1869, 1869, 1869, 1869, 1869, -1000,
	988, 140, 139, 245, 1143, 1574, 1143, -1000, -1000, 496,
	496, 438, 2184, 168, 168, 528, 546, -1000, 183, -1000,
	304, 496, 2110, 1335, 716, 1335, 597, 607, 929, 72,
	-1000, -1000, -1000, 151, 73, 702, 151, 529, 529, 529,
	1728, -1000, 215, 682, 130, -1000, 1104, -1000, 716, 1869,
	-1000, 326, 175, 207, 206, -1000, 79, 79, -1000, -1000,
	694, 2184, 2184, 661, -1000, -1000, 1869, -1000, -1000, 1483,
	1869, 657, 239, 2184, 428, -18, -52, -52, 565, 1869,
	168, 1869, 168, 168, -37, -37, -1000, -1000, -1000, 1304,
	183, -1000, 1869, -1000, -1000, -1000, -1000, 1869, -1000, -1000,
	1869, 1413, 451, 1869, -1000, 1767, -1000, -1000, 168, 204,
	202, 200, 503, -1000, 1869, 387, 2110, -1000, -1000, 1869,
	-1000, 79, 79, 424, -1000, 12, 421, 572, 1869, 1896,
	150, 1154, 929, 364, 702, 52, -1000, 845, -1000, -1000,
	-1000, 151, 616, 1869, -1000, 245, -1000, 245, 245, -1000,
	4, 691, -1000, 2184, -1000, -1000, -63, 197, 194, 189,
	187, 1335, 484, 560, 364, -1000, -1000, 2184, 489, 1335,
	489, 148, 1335, -1000, -1000, 716, 79, 79, -1000, 1483,
	-1000, 182, 1335, 384, 428, 2305, 1869, -1000, -1000, 2431,
	-1000, -52, -1000, -1000, -1000, 124, 120, 118, 117, 382,
	438, 1869, 2364, 506, 184, -1000, 184, -1000, 184, -1000,
	348, 111, 459, -1000, 2335, -1000, -1000, 2110, 2110, -1000,
	1869, 1182, -1000, -3, 595, 2184, -1000, 168, 364, -1000,
	-1000, 1335, -4, 707, -5, 228, -70, -1000, 589, 633,
	547, 583, 151, -1000, -1000, -1000, -1000, -1000, 1335, 702,
	612, 606, 2184, 530, -1000, -1000, 530, 1728, 1335, 1574,
	496, 496, 496, 1869, 105, -6, 820, 1335, 629, -1000,
	364, 623, 79, 103, 79, 689, 102, -14, 627, -68,
	79, -1000, -1000, -1000, 489, 98, 483, 381, 466, -1000,
	2319, 1869, -1000, -1000, -1000, -1000, -1000, 2184, 1869, 168,
	97, -21, 94, 92, -1000, 311, 269, 79, 2110, 380,
	374, 2184, -1000, 494, 261, 1896, 259, -1000, -1000, -1000,
	90, -41, -1000, 702, 364, 1869, 151, 575, 547, 574,
	-1000, 151, -1000, -1000, -1000, -1000, 1869, 1869, -1000, -1000,
	86, 1869, 1869, 1413, 1869, 47, -1000, 1335, -1000, -1000,
	-1000, 364, 364, 85, -43, 1869, 84, 1335, -1000, 276,
	-1000, 278, 686, 716, 1869, 677, 716, -1000, 82, 673,
	79, 478, 2305, 183, 2184, -1000, -1000, 168, -1000, -1000,
	-1000, 614, -1000, 427, 2305, 458, 456, -1000, -1000, -1000,
	666, 542, 364, -1000, -1000, 2184, 1127, 151, 563, 151,
	826, 2184, -1000, 303, 81, 80, 78, 77, 74, 301,
	257, -1000, -1000, -1000, 820, 1335, 2184, -1000, -1000, -1000,
	489, 2254, 277, -1000, 2184, 275, 71, -1000, 177, -1000,
	79, -1000, -1000, 176, 371, 427, 2110, 1869, 79, 79,
	-1000, -1000, -1000, 168, -1000, -1000, -1000, 1869, 167, 826,
	151, 1127, 165, 300, 298, 297, 294, 280, 164, 69,
	-1000, -1000, 79, 367, 2254, -1000, -1000, 1869, 1869, 1073,
	2254, 2254, 669, 489, -1000, 621, 477, 366, 468, -1000,
	2173, -1000, -1000, -1000, 2184, 1335, 826, -1000, 305, 154,
	152, 147, 144, 143, 305, 291, -1000, 79, -1000, 1826,
	2027, 26, 514, -1000, 1483, 360, 359, 273, 67, 63,
	79, 475, 2110, 62, 60, 621, 603, 305, 305, 305,
	305, 305, 58, 53, -1000, 2254, 2013, 1335, 1335, -1000,
	79, 79, 2254, -1000, -1000, -1000, 79, -1000, -1000, -1000,
	-1000, 1869, 54, 49, 46, 40, 27, -1000, 305, 420,
	354, 2013, -1000, -1000, 1869, -1000, 411, 397, -1000, -1000,
	351, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -34, 349,
	350, 2254, 1869, 466, 455, -1000, 1787, 2013, 2013, 79,
	-1000, 474, 346, -1000, 1678, 466, 79, 2013, 345, 344,
	-1000, 79, 473, 2159, -1000, 415, 2254, 445, 440, -1000,
	79, -1000, -1000, 1869, 1869, 343, 415, 2013, 1869, 79,
	79, -1000, 1658, 112, 3, 509, 472, 332, 465, -1000,
	1435, -1000, -1000, 2159, 1964, 1335, 1335, 79, 470, 2013,
	1869, -1000, 369, 365, -1000, 79, -1000, 7, 1964, 1964,
	-1000, 1964,
}
var yyPgo = [...]int{

	0, 9, 29, 8, 125, 60, 17, 198, 892, 891,
	890, 888, 7, 887, 884, 871, 869, 868, 46, 16,
	19, 865, 858, 855, 32, 848, 847, 846, 843, 842,
	289, 64, 58, 839, 43, 36, 838, 832, 14, 825,
	35, 824, 91, 820, 48, 54, 26, 861, 33, 726,
	45, 34, 817, 816, 813, 808, 1266, 803, 798, 796,
	794, 565, 929, 793, 789, 38, 101, 788, 47, 56,
	778, 13, 777, 11, 776, 774, 773, 772, 57, 767,
	22, 21, 40, 51, 15, 41, 766, 764, 761, 37,
	753, 25, 39, 24, 23, 752, 6, 4, 2, 0,
	751, 59, 744, 52, 742, 49, 118, 5, 612, 741,
	53, 50, 62, 44, 28, 42, 55, 736, 405, 696,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 6, 6, 7, 7, 8, 8, 9, 9,
	10, 10, 10, 10, 10, 10, 11, 11, 11, 11,
	11, 11, 11, 12, 12, 13, 13, 13, 14, 14,
	14, 15, 15, 15, 15, 16, 16, 17, 17, 17,
	17, 17, 17, 18, 18, 19, 19, 20, 20, 20,
	20, 20, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 23, 23, 24, 24, 25, 25, 25, 25, 26,
	26, 26, 26, 26, 26, 26, 27, 27, 27, 28,
	28, 28, 28, 28, 29, 29, 29, 30, 31, 31,
	31, 31, 32, 32, 33, 34, 34, 35, 35, 36,
	36, 37, 37, 38, 38, 39, 39, 39, 40, 40,
	41, 41, 42, 42, 43, 43, 44, 44, 45, 45,
	45, 45, 45, 45, 46, 46, 46, 46, 46, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 48, 49, 49, 50, 50, 51, 51,
	52, 52, 53, 53, 54, 54, 54, 55, 55, 56,
	57, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	59, 59, 59, 59, 59, 59, 59, 60, 60, 60,
	60, 61, 61, 62, 63, 63, 63, 63, 63, 64,
	64, 65, 65, 65, 65, 65, 65, 65, 65, 66,
	67, 67, 68, 68, 69, 69, 69, 70, 71, 71,
	71, 71, 71, 71, 72, 72, 72, 72, 72, 73,
	73, 73, 74, 74, 75, 75, 75, 76, 77, 77,
	78, 78, 79, 79, 80, 80, 81, 81, 82, 82,
	83, 83, 84, 84, 85, 85, 86, 86, 86, 86,
	87, 88, 89, 89, 90, 90, 91, 91, 92, 92,
	93, 93, 94, 94, 95, 95, 96, 96, 97, 97,
	98, 98, 99, 99, 99, 99, 99, 99, 99, 99,
	100, 101, 102, 103, 104, 105, 106, 107, 107, 108,
	109, 109, 110, 110, 111, 111, 112, 112, 113, 113,
	114, 114, 115, 115, 115, 115, 116, 116, 117, 117,
	118, 118, 119, 119,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	8, 9, 7, 9, 9, 2, 8, 9, 7, 9,
	9, 2, 3, 2, 2, 8, 9, 1, 8, 9,
	1, 3, 3, 2, 3, 2, 2, 6, 6, 8,
	5, 7, 7, 1, 3, 1, 3, 0, 1, 1,
	2, 2, 6, 3, 3, 4, 6, 7, 9, 6,
	4, 1, 3, 1, 3, 10, 11, 11, 13, 0,
	1, 1, 1, 1, 2, 2, 5, 6, 3, 5,
	3, 3, 5, 3, 3, 4, 5, 5, 5, 4,
	4, 4, 1, 1, 3, 0, 2, 0, 2, 0,
	3, 0, 2, 0, 3, 0, 3, 4, 0, 2,
	0, 2, 0, 2, 6, 9, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 1, 3, 1, 3,
	2, 4, 1, 1, 0, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 4, 4, 6, 6, 4,
	6, 4, 4, 4, 6, 4, 4, 6, 4, 2,
	3, 3, 3, 3, 3, 2, 2, 3, 3, 2,
	2, 0, 1, 4, 5, 5, 5, 5, 1, 5,
	10, 8, 9, 9, 9, 9, 9, 8, 10, 2,
	0, 3, 1, 1, 1, 2, 3, 1, 1, 1,
	2, 3, 1, 1, 5, 5, 6, 6, 4, 0,
	2, 4, 1, 1, 1, 3, 1, 5, 0, 1,
	4, 2, 0, 2, 1, 3, 1, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 6, 9, 5, 8,
	7, 3, 1, 3, 5, 6, 4, 2, 0, 2,
	4, 2, 0, 2, 4, 2, 0, 2, 4, 2,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	1, 3, 1, 3, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 1, 1, 1, 0, 1, 0, 1,
	1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -10, -30, -86, -87, -90, -17,
	-62, -15, -21, -22, -25, -16, -28, -29, 74, 76,
	101, -42, 26, 29, -99, 112, 82, -108, 88, 86,
	87, 85, 97, 98, 16, 102, 103, 104, 105, 72,
	4, 114, 115, 117, 118, 119, 120, 116, -106, 11,
	-1, -119, 126, -119, -119, -119, -119, -119, -47, -46,
	-45, -59, -57, -56, -62, -63, -76, -58, -60, -106,
	-108, -27, 132, -99, 24, -100, -101, -102, -103, -104,
	-105, 129, 130, 119, 117, -64, 73, -49, 62, 66,
	131, 83, 118, 5, 6, 7, 9, 10, 70, -47,
	-106, -107, -119, -31, 19, 15, 17, -33, -32, 13,
	-56, 132, 30, 30, 132, -110, -109, -106, -110, -99,
	-119, -106, 83, 30, -99, -99, -26, 89, 90, 31,
	32, 91, 92, -119, -119, 12, -47, 5, -47, 116,
	-44, -43, -117, 25, 123, 78, 122, 121, 128, 69,
	-112, -118, 130, 129, 127, 134, 135, 65, 64, 66,
	-47, -81, -30, -42, 137, 132, 137, -47, -47, 132,
	132, -77, -47, 121, 128, -112, -118, -56, -47, -47,
	-99, 132, 80, 63, 136, 63, -38, 38, 20, -83,
	-68, -99, 24, 14, -83, -34, 14, 57, 58, 59,
	-111, 71, -99, -68, -61, -81, -47, -119, 136, 123,
	-119, 83, 30, 106, 107, -119, -99, -99, -119, -119,
	-99, -47, -47, 128, -119, -119, 136, -119, -119, -47,
	-101, 136, -99, -47, -1, -47, -47, -47, -112, 67,
	63, 68, 61, 60, -47, -47, -47, -47, -47, -47,
	-47, 133, 136, 133, 133, -99, -101, -111, -99, -101,
	-111, -111, -78, 77, -49, 132, -56, -49, 67, 63,
	61, 60, 69, 117, -111, -2, -8, -6, -13, 74,
	-12, 99, 100, -99, -107, -106, -99, -39, 44, 41,
	-69, -68, 136, 16, -82, -71, -69, -70, -72, 23,
	-56, 14, -35, 18, -82, -116, 60, -116, -116, -85,
	-75, -74, -48, -47, -65, 127, -99, 119, 117, 118,
	120, 132, 27, 28, 36, 133, -110, -47, 84, 132,
	84, 132, 132, -119, -119, 20, -45, -81, -119, -47,
	-44, 22, 132, -92, -91, 79, 75, -103, -105, -47,
	-49, -47, -49, -49, -81, -61, -61, -61, -48, -79,
	-78, 79, -47, -49, 132, -56, 132, -56, 132, -56,
	-112, -61, 81, -2, -47, -119, -119, 80, 80, -41,
	45, -47, -51, -52, -53, -47, -65, 21, 132, -30,
	-99, 22, -83, -89, -88, -46, -99, -35, -113, 56,
	-115, 53, 136, 48, 50, 51, 52, -99, 22, -82,
	-36, 39, -47, -32, -31, -32, -32, 136, 22, 132,
	132, 132, 132, 132, -84, -99, -18, 132, -99, -46,
	132, -46, -30, -84, -30, 133, -24, -23, -106, -99,
	-107, -119, -119, -119, 132, -84, 81, -92, -91, -1,
	-47, 64, 133, 133, 133, 133, 81, -47, 78, 64,
	-50, -49, -50, -50, 86, 63, 133, 76, 78, -2,
	-2, -47, -40, 46, 72, 136, -54, 42, 43, -50,
	-80, -46, -99, -34, 136, 128, 47, -113, -115, -114,
	49, 47, -82, -99, -35, -37, 40, 41, -85, -99,
	-61, -111, -111, -111, -111, -61, 133, 136, -20, 31,
	32, 33, 34, -19, -18, 35, -80, 37, -119, 133,
	-119, 22, 133, 136, 35, 133, 136, -119, -30, 133,
	74, 81, 78, -47, -47, -49, 133, 136, 133, 133,
	93, 111, -119, -2, -6, 81, 81, -40, 114, -51,
	115, 133, 136, -35, -89, -47, -71, 47, -114, 47,
	-71, -47, -81, 133, -61, -61, -61, -48, -61, 133,
	110, -84, -46, -46, 133, 136, -47, 133, -99, -119,
	84, 108, 22, -24, -47, 22, -24, 133, 22, -119,
	74, -1, -50, 39, -94, -93, 79, 75, 76, 76,
	-55, 31, 32, 21, -30, -80, -73, 54, 55, -71,
	47, -71, 96, 133, 133, 133, 133, 133, 96, 115,
	-20, -19, -30, -3, -7, -5, -11, 74, 76, 109,
	108, 108, 133, 132, -119, 132, 81, -94, -93, -2,
	-47, -119, -119, -50, -47, 132, -71, -73, 132, 96,
	96, 96, 96, 96, 132, 133, -119, 81, -3, -47,
	-47, -106, -107, -119, -47, -3, -3, 22, -30, -38,
	74, 81, 78, -84, -66, -67, 95, 132, 132, 132,
	132, 132, -66, 96, -119, 78, 80, 63, 63, -119,
	81, 81, 108, 133, 133, -119, 74, -2, 133, 133,
	-38, 41, -66, -66, -66, -66, -66, 133, 132, -3,
	-4, -9, -7, -14, 74, -12, -99, -99, -119, -119,
	-3, -119, -81, 133, 133, 133, 133, 133, -66, -96,
	-95, 79, 75, -91, 81, -4, -47, 80, 80, 81,
	133, 81, -96, -3, -47, -91, 76, 78, -4, -4,
	-119, 74, 81, 78, -119, -4, -7, 81, 81, -119,
	74, -3, -5, 74, 76, -98, -97, 79, 75, 76,
	76, -119, -47, -47, -106, -107, 81, -98, -97, -4,
	-47, -119, -119, 78, 80, 63, 63, 74, 81, 78,
	74, -12, -99, -99, -119, 74, -4, -47, 80, 80,
	-119, 78,
}
var yyDef = [...]int{

	-2, -2, -2, 22, 23, 342, 342, 342, 342, 342,
	342, 15, 16, 17, 18, 19, 20, 21, 0, 0,
	342, 0, 0, 0, 0, 0, 0, 342, 0, 0,
	0, 89, 342, 342, 0, 0, 0, 0, 0, 338,
	302, 303, 304, 305, 306, 307, 308, 309, 0, 316,
	2, 9, 343, 10, 11, 12, 13, 14, 326, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 132, 144, 0, 138, 139, 140, 141, 142,
	143, 0, 0, 307, 305, 218, 258, 326, 0, 0,
	0, 0, 306, 310, 311, 312, 313, 314, 315, 326,
	159, 0, 35, -2, 0, 0, 0, 115, 0, 324,
	113, 132, 0, 0, 211, 342, 322, 320, 342, 0,
	53, 342, 0, 0, 342, 342, 0, 90, 91, 92,
	93, 0, 0, 55, 56, 0, -2, 342, -2, 342,
	133, 136, 0, 339, 0, -2, 0, 340, 341, 326,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 327,
	326, 0, 0, 0, 0, 211, 0, 205, 206, 324,
	324, 0, -2, 340, 341, 0, 0, 199, 209, 210,
	0, 324, -2, 0, 0, 0, 125, 0, 0, 0,
	270, 232, 233, 0, 0, 117, 0, 336, 336, 336,
	0, 325, 0, 0, 0, 212, -2, 51, 0, 0,
	52, 0, 0, 0, 0, 54, 342, 342, 73, 74,
	0, -2, -2, 0, 100, 101, 0, 103, 104, -2,
	139, 338, 0, 319, 288, 180, -2, -2, 0, 0,
	0, 0, 0, 0, 200, 201, 202, 203, 204, 207,
	208, 162, 0, 164, 179, 145, 147, 211, 146, 148,
	211, 211, 262, 0, 182, 132, 165, 184, 0, 0,
	0, 0, 326, 98, 211, 0, -2, 26, 27, 0,
	47, 342, 342, 0, 318, 317, 0, 130, 0, 0,
	132, 234, 0, 0, 117, -2, 238, 239, 242, 243,
	237, 0, 119, 0, 116, 0, 337, 0, 0, 114,
	274, 254, 256, -2, 253, 163, 144, 307, 305, 306,
	308, 0, 0, 0, 0, 213, 323, -2, 132, 0,
	132, 0, 0, 75, 80, 0, 342, 342, 105, -2,
	137, 0, 0, 0, 288, -2, 0, 185, 186, 326,
	189, -2, 193, 196, 267, 0, 0, 0, 0, 0,
	261, 0, 326, 0, 132, 191, 132, 195, 132, 198,
	0, 0, 0, 4, 326, 43, 44, -2, -2, 107,
	0, -2, 124, 168, 174, -2, 173, 0, 0, 278,
	235, 0, 271, 115, 282, 0, 144, 284, 0, -2,
	330, 0, 0, 329, 333, 334, 335, 240, 0, 117,
	121, 0, -2, 109, 112, 110, 111, 0, 0, 211,
	324, 324, 324, 211, 0, 272, 67, 0, 63, 60,
	0, 0, 342, 0, 342, 0, 0, 83, 81, 0,
	342, 99, 102, 106, 132, 0, 0, 0, 287, 289,
	326, 0, 214, 215, 216, 217, 257, -2, 0, 0,
	0, 166, 0, 0, 96, 0, 219, 342, -2, 0,
	0, -2, 126, 128, 0, 0, 170, 175, 176, 276,
	0, 264, 236, 117, 0, 0, 0, 0, 330, 0,
	331, 0, 269, 241, 285, 108, 0, 0, 275, 255,
	0, 211, 211, 211, 211, 0, 57, 0, 58, 68,
	69, 0, 0, 0, 65, 0, 0, 0, 72, 342,
	79, 0, 0, 0, 0, 0, 0, 76, 0, 0,
	342, 0, -2, 187, -2, 188, 190, 0, 194, 197,
	97, 0, 32, 292, -2, 0, 0, 127, 129, 169,
	0, 132, 0, 280, 283, -2, 249, 0, 0, 0,
	248, -2, 120, 213, 0, 0, 0, 0, 0, 0,
	0, 273, 70, 71, 67, 0, -2, 61, 62, 77,
	132, -2, 0, 84, -2, 0, 0, 134, 0, 30,
	342, 286, 167, 0, 0, 292, -2, 0, 342, 342,
	171, 177, 178, 0, 279, 265, 244, 0, 0, 245,
	0, 249, 0, 214, 215, 216, 217, 219, 0, 0,
	59, 66, 342, 0, -2, 24, 25, 0, 0, 342,
	-2, -2, 0, 132, 31, 123, 0, 0, 291, 293,
	326, 33, 34, 277, -2, 0, 247, 246, 230, 0,
	0, 0, 0, 0, 230, 0, 78, 342, 6, 326,
	326, 159, 0, 41, -2, 0, 0, 0, 0, 0,
	342, 0, -2, 0, 0, 123, 0, 230, 230, 230,
	230, 230, 0, 0, 85, -2, -2, 0, 0, 42,
	342, 342, -2, 135, 220, 45, 342, 290, 251, 221,
	229, 0, 0, 0, 0, 0, 0, 227, 230, 296,
	0, -2, 28, 29, 0, 50, 0, 0, 86, 87,
	0, 46, 231, 222, 223, 224, 225, 226, 0, 0,
	296, -2, 0, 0, 0, 8, 326, -2, -2, 342,
	228, 0, 0, 297, 326, 295, 342, -2, 0, 0,
	88, 342, 0, -2, 38, 300, -2, 0, 0, 36,
	342, 294, -2, 0, 0, 0, 300, -2, 0, 342,
	342, 37, 326, 326, 159, 0, 0, 0, 299, 301,
	326, 39, 40, -2, -2, 0, 0, 342, 0, -2,
	0, -2, 0, 0, 48, 342, 298, 326, -2, -2,
	49, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 131, 3, 3, 3, 135, 3, 3,
	132, 133, 127, 130, 136, 129, 137, 134, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 126,
	3, 128,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:189
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:194
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:201
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:206
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:213
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:218
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:225
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:230
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:237
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:241
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:245
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:249
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:253
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:257
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:261
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:265
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:269
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:273
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:277
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:281
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:285
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:291
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:295
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:301
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:305
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:311
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:315
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:321
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:325
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:331
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:335
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:339
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:343
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 34:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:347
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:351
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:357
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:361
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:365
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:369
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:373
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:377
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:381
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:387
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:391
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:397
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:401
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:405
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:411
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:415
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:419
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:425
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:429
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:433
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:437
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:443
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:447
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:453
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:457
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:461
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:465
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:469
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:473
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression, To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:479
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:483
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:489
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:493
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:499
		{
			yyVAL.expression = nil
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:503
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:507
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:511
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:515
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:521
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:525
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:529
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:533
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:537
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:543
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 78:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:547
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:551
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:555
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:561
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:565
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:571
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:575
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:581
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 86:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:585
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].expressions, Statements: yyDollar[9].program}
		}
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:589
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Statements: yyDollar[9].program}
		}
	case 88:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.y:593
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Parameters: yyDollar[7].expressions, Statements: yyDollar[11].program}
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:599
		{
			yyVAL.expression = nil
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:603
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:607
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:611
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:615
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:619
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:623
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:629
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 97:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:633
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:637
		{
			yyVAL.expression = CursorAttrebute{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Attrebute: yyDollar[3].token}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:643
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:647
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:651
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:655
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:659
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].expression}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:665
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:669
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[3].expression}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:673
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[4].expression, Code: yyDollar[3].integer}
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:679
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:691
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:701
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:710
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:719
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:730
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:734
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:740
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:746
		{
			yyVAL.expression = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:750
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:756
		{
			yyVAL.expression = nil
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:760
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:766
		{
			yyVAL.expression = nil
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:770
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:776
		{
			yyVAL.expression = nil
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:780
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:786
		{
			yyVAL.expression = nil
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:790
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:796
		{
			yyVAL.expression = nil
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:800
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:804
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:810
		{
			yyVAL.expression = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:814
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:820
		{
			yyVAL.expression = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:824
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:830
		{
			yyVAL.expression = nil
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:834
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 134:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:840
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 135:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:844
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:850
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:854
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:860
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:864
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:868
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:872
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:876
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:880
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:886
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, Column: yyDollar[1].identifier}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:890
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:894
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:898
		{
			yyVAL.expression = ColumnNumber{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Number: yyDollar[3].integer}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:902
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: yyDollar[3].integer}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:908
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:912
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:916
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:920
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:924
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:928
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:932
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:936
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:940
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:944
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:948
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:952
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:956
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:960
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:966
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:972
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:976
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:982
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:986
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:992
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:996
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1002
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1006
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1012
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1016
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 174:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1022
		{
			yyVAL.token = Token{}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1026
		{
			yyVAL.token = yyDollar[1].token
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1030
		{
			yyVAL.token = yyDollar[1].token
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1036
		{
			yyVAL.token = yyDollar[1].token
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1040
		{
			yyVAL.token = yyDollar[1].token
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1046
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1052
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1075
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1079
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1083
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1087
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1091
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1095
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1099
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1103
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1107
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1111
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1115
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1119
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1123
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1127
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1131
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1135
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1139
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1143
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1147
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1153
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1157
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1161
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1165
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1169
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1173
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1177
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1183
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1187
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1191
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1195
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1201
		{
			yyVAL.expressions = nil
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1205
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1211
		{
			yyVAL.expression = Function{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 214:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1217
		{
			yyVAL.expression = AggregateFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1221
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 216:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1225
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 217:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1229
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1233
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1239
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 220:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1243
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 221:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1249
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 222:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1253
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 223:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1257
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 224:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1261
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 225:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1265
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 226:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1269
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 227:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1273
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 228:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1277
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1283
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1289
		{
			yyVAL.expression = nil
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1293
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1299
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1303
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1309
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1313
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1317
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1323
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1329
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1333
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1337
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1341
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1345
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1349
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1355
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 245:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1359
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 246:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1363
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 247:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1367
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 248:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1371
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1377
		{
			yyVAL.expression = nil
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1381
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1385
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1391
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1395
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 254:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1401
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1405
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1409
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1415
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1421
		{
			yyVAL.expression = nil
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1425
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1431
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1435
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1441
		{
			yyVAL.expression = nil
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1445
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1451
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1455
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1461
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1465
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1471
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1475
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1481
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1485
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 272:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1491
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1495
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1501
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1505
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1511
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 277:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1515
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1519
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 279:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1523
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 280:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1529
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1535
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1541
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1545
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 284:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1551
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 285:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1556
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1563
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1567
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1573
		{
			yyVAL.procexpr = nil
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1577
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1583
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1587
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1593
		{
			yyVAL.procexpr = nil
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1597
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1603
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1607
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1613
		{
			yyVAL.procexpr = nil
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1617
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1623
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1627
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1633
		{
			yyVAL.procexpr = nil
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1637
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1643
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1647
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1651
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1655
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1659
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1663
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1667
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1671
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1677
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1683
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1689
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1695
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1701
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1707
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1713
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1719
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1723
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1729
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1735
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 321:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1739
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1745
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1749
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1755
		{
			yyVAL.token = Token{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1759
		{
			yyVAL.token = yyDollar[1].token
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1765
		{
			yyVAL.token = Token{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1769
		{
			yyVAL.token = yyDollar[1].token
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1775
		{
			yyVAL.token = Token{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1779
		{
			yyVAL.token = yyDollar[1].token
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1785
		{
			yyVAL.token = Token{}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1789
		{
			yyVAL.token = yyDollar[1].token
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1795
		{
			yyVAL.token = Token{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1799
		{
			yyVAL.token = yyDollar[1].token
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1803
		{
			yyVAL.token = yyDollar[1].token
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1807
		{
			yyVAL.token = yyDollar[1].token
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1813
		{
			yyVAL.token = Token{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1817
		{
			yyVAL.token = yyDollar[1].token
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1823
		{
			yyVAL.token = Token{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1827
		{
			yyVAL.token = yyDollar[1].token
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1834
		{
			yyVAL.token = yyDollar[1].token
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1838
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1845
		{
			yyVAL.token = Token{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1849
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
