//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const FUNCTION = 57447
const BEGIN = 57448
const RETURN = 57449
const IGNORE = 57450
const WITHIN = 57451
const VAR = 57452
const TIES = 57453
const NULLS = 57454
const COUNT = 57455
const LISTAGG = 57456
const AGGREGATE_FUNCTION = 57457
const FUNCTION_WITH_ADDITIONALS = 57458
const COMPARISON_OP = 57459
const STRING_OP = 57460
const SUBSTITUTION_OP = 57461
const UMINUS = 57462
const UPLUS = 57463

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"TIES",
	"NULLS",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_ADDITIONALS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1778

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 119,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	75, 1,
	79, 1,
	81, 1,
	-2, 119,
	-1, 100,
	57, 99,
	58, 99,
	59, 99,
	-2, 110,
	-1, 133,
	63, 310,
	67, 310,
	68, 310,
	-2, 326,
	-1, 141,
	75, 1,
	79, 1,
	81, 1,
	-2, 119,
	-1, 167,
	77, 244,
	-2, 310,
	-1, 177,
	81, 3,
	-2, 119,
	-1, 200,
	63, 310,
	67, 310,
	68, 310,
	-2, 251,
	-1, 214,
	63, 310,
	67, 310,
	68, 310,
	-2, 85,
	-1, 215,
	63, 310,
	67, 310,
	68, 310,
	-2, 86,
	-1, 226,
	69, 0,
	117, 0,
	124, 0,
	-2, 168,
	-1, 227,
	69, 0,
	117, 0,
	124, 0,
	-2, 170,
	-1, 264,
	75, 3,
	79, 3,
	81, 3,
	-2, 119,
	-1, 282,
	47, 312,
	49, 316,
	-2, 253,
	-1, 300,
	63, 310,
	67, 310,
	68, 310,
	-2, 237,
	-1, 314,
	63, 310,
	67, 310,
	68, 310,
	-2, 305,
	-1, 329,
	81, 1,
	-2, 119,
	-1, 335,
	69, 0,
	117, 0,
	124, 0,
	-2, 179,
	-1, 360,
	81, 3,
	-2, 119,
	-1, 363,
	63, 310,
	67, 310,
	68, 310,
	-2, 115,
	-1, 367,
	63, 310,
	67, 310,
	68, 310,
	-2, 159,
	-1, 381,
	49, 316,
	-2, 312,
	-1, 394,
	63, 310,
	67, 310,
	68, 310,
	-2, 105,
	-1, 434,
	81, 248,
	-2, 310,
	-1, 445,
	75, 1,
	79, 1,
	81, 1,
	-2, 119,
	-1, 447,
	63, 310,
	67, 310,
	68, 310,
	-2, 118,
	-1, 503,
	75, 1,
	79, 1,
	81, 1,
	-2, 119,
	-1, 505,
	77, 245,
	79, 245,
	81, 245,
	-2, 310,
	-1, 515,
	75, 1,
	79, 1,
	81, 1,
	-2, 25,
	-1, 525,
	63, 310,
	67, 310,
	68, 310,
	-2, 266,
	-1, 531,
	63, 310,
	67, 310,
	68, 310,
	-2, 109,
	-1, 545,
	63, 310,
	67, 310,
	68, 310,
	-2, 61,
	-1, 550,
	81, 5,
	-2, 119,
	-1, 561,
	81, 3,
	-2, 119,
	-1, 587,
	75, 5,
	79, 5,
	81, 5,
	-2, 119,
	-1, 593,
	81, 5,
	-2, 119,
	-1, 604,
	63, 310,
	67, 310,
	68, 310,
	-2, 235,
	-1, 622,
	63, 310,
	67, 310,
	68, 310,
	-2, 326,
	-1, 628,
	75, 3,
	79, 3,
	81, 3,
	-2, 119,
	-1, 640,
	75, 5,
	79, 5,
	81, 5,
	-2, 119,
	-1, 641,
	81, 7,
	-2, 119,
	-1, 662,
	75, 7,
	79, 7,
	81, 7,
	-2, 119,
	-1, 678,
	81, 5,
	-2, 119,
	-1, 684,
	81, 7,
	-2, 119,
	-1, 692,
	75, 5,
	79, 5,
	81, 5,
	-2, 119,
	-1, 696,
	75, 1,
	79, 5,
	81, 5,
	-2, 119,
	-1, 699,
	75, 5,
	79, 5,
	81, 5,
	-2, 27,
	-1, 704,
	107, 23,
	-2, 21,
	-1, 709,
	81, 7,
	-2, 119,
	-1, 722,
	75, 1,
	79, 1,
	81, 1,
	-2, 119,
	-1, 723,
	81, 3,
	-2, 119,
	-1, 727,
	75, 7,
	79, 7,
	81, 7,
	-2, 119,
	-1, 729,
	107, 47,
	-2, 44,
	-1, 735,
	81, 3,
	-2, 119,
	-1, 737,
	75, 1,
	79, 1,
	81, 1,
	-2, 119,
}

const yyPrivate = 57344

const yyLast = 2287

var yyAct = [...]int{

	70, 23, 707, 23, 263, 426, 676, 2, 180, 718,
	224, 1, 97, 47, 488, 406, 559, 630, 199, 570,
	483, 599, 364, 456, 465, 56, 116, 299, 301, 121,
	122, 448, 437, 282, 289, 382, 281, 380, 375, 296,
	189, 327, 489, 57, 183, 112, 278, 77, 292, 160,
	283, 150, 105, 146, 75, 396, 660, 343, 151, 152,
	136, 150, 161, 149, 148, 544, 194, 200, 151, 152,
	84, 115, 288, 73, 522, 385, 100, 386, 387, 388,
	383, 49, 401, 381, 280, 55, 96, 160, 157, 175,
	111, 219, 268, 142, 369, 160, 661, 587, 150, 140,
	149, 148, 133, 185, 185, 151, 152, 539, 508, 482,
	196, 185, 179, 460, 154, 153, 155, 279, 451, 145,
	209, 210, 399, 179, 213, 221, 202, 685, 538, 46,
	106, 674, 102, 673, 103, 672, 101, 156, 170, 222,
	671, 658, 23, 651, 650, 37, 162, 163, 188, 184,
	184, 167, 646, 645, 173, 174, 659, 197, 614, 384,
	580, 245, 247, 3, 579, 578, 577, 143, 142, 552,
	546, 543, 533, 150, 144, 149, 148, 521, 23, 271,
	151, 152, 242, 185, 38, 265, 510, 106, 185, 509,
	279, 185, 272, 507, 500, 303, 214, 215, 497, 228,
	279, 370, 37, 494, 20, 481, 443, 432, 223, 431,
	225, 226, 227, 430, 312, 100, 234, 235, 236, 237,
	238, 239, 240, 325, 251, 66, 45, 291, 45, 244,
	328, 249, 250, 277, 246, 248, 243, 636, 323, 253,
	256, 294, 295, 262, 98, 108, 317, 417, 313, 635,
	114, 114, 634, 118, 633, 613, 608, 605, 254, 254,
	322, 338, 300, 596, 594, 23, 422, 67, 26, 356,
	26, 314, 265, 157, 159, 405, 332, 303, 341, 372,
	185, 378, 324, 331, 404, 389, 403, 402, 351, 185,
	316, 39, 40, 41, 42, 43, 44, 333, 349, 335,
	347, 334, 108, 336, 337, 368, 377, 318, 409, 407,
	410, 378, 378, 159, 308, 353, 379, 407, 176, 108,
	345, 165, 164, 111, 374, 391, 184, 407, 346, 326,
	23, 418, 415, 461, 419, 357, 411, 413, 216, 155,
	427, 549, 423, 363, 367, 395, 49, 397, 398, 203,
	140, 582, 408, 520, 518, 512, 612, 593, 394, 550,
	198, 23, 638, 611, 610, 446, 609, 45, 265, 512,
	425, 378, 206, 581, 458, 576, 632, 511, 315, 49,
	147, 442, 439, 726, 440, 185, 716, 700, 46, 695,
	168, 469, 686, 681, 644, 627, 457, 169, 428, 735,
	303, 475, 455, 45, 441, 273, 616, 120, 597, 26,
	410, 516, 434, 378, 502, 433, 459, 464, 438, 463,
	438, 468, 438, 678, 424, 205, 470, 355, 114, 710,
	447, 684, 360, 709, 61, 10, 491, 10, 457, 474,
	438, 252, 252, 344, 679, 26, 23, 207, 678, 711,
	514, 562, 303, 515, 330, 561, 691, 563, 329, 159,
	119, 378, 444, 185, 710, 171, 330, 300, 185, 477,
	478, 479, 562, 732, 519, 725, 702, 694, 648, 626,
	368, 517, 159, 407, 555, 501, 377, 378, 378, 528,
	45, 567, 532, 547, 523, 37, 526, 504, 540, 524,
	450, 530, 195, 505, 23, 261, 536, 506, 155, 93,
	436, 258, 541, 542, 556, 257, 23, 724, 642, 367,
	159, 178, 159, 378, 260, 259, 47, 293, 185, 525,
	185, 192, 26, 90, 91, 92, 560, 93, 94, 466,
	531, 557, 37, 574, 273, 410, 569, 273, 457, 233,
	232, 23, 159, 529, 159, 45, 159, 527, 545, 584,
	467, 573, 23, 575, 583, 462, 600, 230, 362, 265,
	95, 229, 231, 453, 454, 185, 10, 598, 275, 438,
	653, 473, 48, 191, 192, 193, 45, 276, 23, 50,
	51, 52, 53, 54, 23, 607, 472, 26, 95, 558,
	603, 393, 99, 181, 620, 625, 407, 586, 606, 117,
	339, 340, 10, 492, 130, 131, 155, 490, 110, 145,
	109, 629, 385, 354, 386, 387, 388, 159, 26, 23,
	601, 637, 139, 649, 565, 566, 265, 553, 438, 604,
	652, 23, 23, 667, 617, 551, 309, 310, 496, 400,
	623, 654, 655, 656, 657, 311, 321, 182, 618, 619,
	622, 290, 190, 23, 132, 46, 680, 143, 142, 135,
	134, 45, 670, 150, 144, 149, 148, 675, 138, 23,
	151, 152, 113, 76, 687, 23, 690, 74, 5, 484,
	485, 486, 487, 23, 72, 201, 677, 23, 204, 10,
	23, 208, 8, 376, 211, 212, 7, 556, 708, 6,
	23, 717, 342, 26, 588, 166, 217, 218, 220, 715,
	63, 297, 298, 23, 23, 730, 159, 285, 23, 45,
	284, 265, 631, 683, 666, 688, 23, 82, 23, 663,
	446, 45, 514, 265, 62, 515, 65, 689, 58, 64,
	59, 588, 564, 703, 159, 666, 617, 588, 158, 682,
	663, 452, 476, 366, 10, 365, 480, 38, 137, 91,
	361, 26, 274, 713, 714, 471, 45, 666, 720, 392,
	104, 693, 663, 26, 16, 666, 68, 45, 123, 698,
	699, 14, 319, 320, 13, 10, 734, 158, 12, 159,
	9, 15, 666, 11, 588, 588, 719, 663, 664, 266,
	126, 127, 589, 45, 4, 662, 729, 98, 26, 45,
	666, 663, 264, 0, 733, 663, 588, 0, 729, 26,
	729, 0, 693, 663, 698, 699, 0, 0, 534, 535,
	537, 385, 588, 386, 387, 388, 383, 0, 588, 381,
	0, 0, 358, 359, 45, 26, 588, 0, 0, 0,
	704, 26, 38, 588, 0, 0, 45, 45, 124, 125,
	128, 129, 0, 588, 39, 40, 41, 42, 43, 44,
	10, 286, 186, 0, 0, 0, 704, 704, 45, 0,
	0, 588, 0, 0, 0, 60, 26, 0, 0, 704,
	0, 704, 0, 0, 45, 420, 421, 0, 26, 26,
	45, 0, 0, 0, 0, 0, 107, 0, 45, 0,
	0, 0, 45, 38, 0, 45, 0, 0, 0, 0,
	26, 0, 98, 0, 0, 45, 449, 0, 10, 0,
	38, 390, 0, 158, 0, 0, 26, 0, 45, 45,
	10, 0, 26, 45, 154, 153, 155, 0, 373, 145,
	26, 45, 450, 45, 26, 0, 371, 26, 0, 39,
	40, 41, 42, 43, 44, 0, 0, 26, 0, 0,
	38, 172, 0, 0, 0, 10, 108, 0, 0, 0,
	26, 26, 0, 0, 0, 26, 10, 493, 0, 495,
	71, 0, 498, 26, 414, 26, 416, 143, 142, 0,
	0, 0, 0, 150, 144, 149, 148, 0, 0, 0,
	151, 152, 10, 0, 0, 0, 0, 513, 10, 0,
	39, 40, 41, 42, 43, 44, 158, 0, 158, 0,
	158, 154, 153, 155, 0, 0, 145, 39, 40, 41,
	42, 43, 44, 0, 385, 107, 386, 387, 388, 383,
	571, 572, 381, 10, 255, 255, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 10, 10, 548, 0, 0,
	0, 0, 0, 287, 554, 0, 287, 39, 40, 41,
	42, 43, 44, 0, 143, 142, 0, 10, 0, 0,
	150, 144, 149, 148, 412, 0, 241, 151, 152, 242,
	0, 499, 0, 10, 0, 0, 0, 0, 0, 10,
	154, 153, 155, 0, 0, 145, 255, 10, 255, 255,
	0, 10, 0, 0, 10, 0, 723, 0, 595, 0,
	0, 0, 0, 0, 10, 0, 602, 0, 0, 0,
	0, 0, 0, 255, 348, 350, 352, 10, 10, 0,
	0, 0, 10, 0, 0, 0, 0, 0, 615, 0,
	10, 0, 10, 143, 142, 621, 0, 0, 0, 150,
	144, 149, 148, 0, 287, 0, 151, 152, 107, 0,
	107, 107, 0, 0, 0, 154, 153, 155, 0, 639,
	145, 0, 38, 0, 0, 643, 0, 0, 0, 647,
	568, 0, 187, 38, 90, 91, 92, 0, 93, 94,
	46, 0, 186, 0, 0, 0, 0, 668, 0, 0,
	0, 669, 0, 71, 0, 0, 0, 0, 585, 0,
	0, 0, 0, 255, 0, 255, 0, 255, 143, 142,
	0, 0, 0, 49, 150, 144, 149, 148, 0, 0,
	0, 151, 152, 0, 0, 255, 0, 0, 0, 0,
	0, 85, 0, 0, 697, 86, 0, 701, 0, 95,
	287, 0, 83, 624, 0, 712, 0, 0, 154, 153,
	155, 0, 88, 145, 721, 0, 0, 0, 38, 90,
	91, 92, 737, 93, 94, 46, 0, 0, 731, 39,
	40, 41, 42, 43, 44, 736, 0, 0, 71, 0,
	39, 40, 81, 89, 80, 44, 0, 0, 0, 0,
	0, 49, 255, 0, 78, 79, 87, 69, 0, 0,
	0, 143, 142, 0, 0, 0, 0, 150, 144, 149,
	148, 0, 0, 0, 151, 152, 85, 0, 287, 0,
	86, 0, 0, 287, 95, 0, 0, 83, 38, 90,
	91, 92, 0, 93, 94, 46, 0, 88, 0, 0,
	0, 0, 154, 153, 155, 0, 0, 145, 71, 0,
	0, 0, 38, 90, 91, 92, 727, 93, 94, 46,
	0, 0, 0, 0, 255, 39, 40, 81, 89, 80,
	44, 38, 71, 0, 0, 0, 0, 302, 0, 78,
	79, 87, 69, 287, 0, 287, 85, 0, 0, 0,
	86, 71, 0, 0, 95, 143, 142, 83, 0, 0,
	0, 150, 144, 149, 148, 38, 0, 88, 151, 152,
	85, 0, 0, 0, 86, 0, 0, 0, 95, 0,
	37, 83, 0, 255, 0, 186, 0, 0, 0, 0,
	287, 88, 0, 0, 0, 39, 40, 305, 306, 304,
	307, 0, 0, 154, 153, 155, 0, 302, 145, 78,
	79, 87, 69, 0, 0, 0, 0, 722, 0, 39,
	40, 81, 89, 80, 44, 38, 90, 91, 92, 0,
	93, 94, 46, 78, 79, 87, 69, 0, 39, 40,
	41, 42, 43, 44, 0, 71, 0, 38, 90, 91,
	92, 0, 93, 94, 46, 0, 143, 142, 0, 0,
	0, 0, 150, 144, 149, 148, 0, 71, 0, 151,
	152, 0, 39, 40, 41, 42, 43, 44, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 86, 0, 0,
	0, 95, 0, 0, 83, 38, 0, 0, 0, 0,
	0, 38, 46, 0, 88, 85, 0, 33, 46, 86,
	38, 0, 0, 95, 0, 0, 83, 21, 0, 0,
	22, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 39, 40, 81, 89, 80, 44, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 87, 69,
	0, 0, 0, 0, 39, 40, 305, 306, 304, 307,
	0, 0, 0, 37, 0, 728, 0, 706, 78, 79,
	87, 69, 0, 25, 38, 0, 30, 28, 29, 27,
	0, 46, 0, 0, 0, 0, 33, 0, 31, 32,
	269, 270, 19, 34, 35, 36, 21, 0, 592, 22,
	0, 24, 39, 40, 41, 42, 43, 44, 39, 40,
	41, 42, 43, 44, 0, 0, 0, 39, 40, 41,
	42, 43, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 154, 153, 155, 0, 0,
	145, 0, 37, 0, 665, 0, 591, 0, 0, 696,
	0, 0, 25, 0, 0, 30, 28, 29, 27, 0,
	0, 154, 153, 155, 0, 0, 145, 31, 32, 269,
	270, 0, 34, 35, 36, 692, 0, 592, 0, 0,
	24, 39, 40, 41, 42, 43, 44, 0, 143, 142,
	0, 38, 0, 0, 150, 144, 149, 148, 46, 0,
	0, 151, 152, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 21, 143, 142, 22, 0, 0, 0,
	150, 144, 149, 148, 0, 0, 0, 151, 152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 154, 153, 155, 0, 0, 145, 0, 37,
	0, 267, 0, 18, 0, 0, 0, 0, 641, 25,
	0, 0, 30, 28, 29, 27, 0, 0, 154, 153,
	155, 0, 0, 145, 31, 32, 269, 270, 19, 34,
	35, 36, 640, 0, 0, 0, 0, 24, 39, 40,
	41, 42, 43, 44, 0, 143, 142, 0, 0, 0,
	0, 150, 144, 149, 148, 154, 153, 155, 151, 152,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 628,
	0, 143, 142, 0, 0, 0, 0, 150, 144, 149,
	148, 154, 153, 155, 151, 152, 145, 0, 0, 0,
	0, 154, 153, 155, 0, 503, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 445, 0, 0, 143, 142,
	0, 0, 0, 0, 150, 144, 149, 148, 154, 153,
	155, 151, 152, 145, 0, 0, 0, 0, 0, 0,
	0, 0, 435, 0, 143, 142, 0, 0, 0, 0,
	150, 144, 149, 148, 143, 142, 0, 151, 152, 0,
	150, 144, 149, 148, 154, 153, 155, 151, 152, 145,
	0, 0, 0, 0, 154, 153, 155, 0, 0, 145,
	177, 143, 142, 0, 0, 0, 0, 150, 144, 149,
	148, 154, 153, 155, 151, 152, 145, 38, 0, 0,
	0, 0, 0, 0, 46, 141, 0, 0, 0, 33,
	0, 0, 0, 0, 0, 0, 0, 143, 142, 21,
	0, 0, 22, 150, 144, 149, 148, 143, 142, 0,
	151, 152, 0, 150, 144, 149, 148, 0, 0, 0,
	151, 152, 0, 0, 143, 142, 0, 0, 0, 0,
	150, 144, 149, 148, 0, 0, 0, 151, 152, 429,
	153, 155, 0, 0, 145, 37, 0, 705, 0, 706,
	0, 0, 0, 0, 0, 25, 38, 0, 30, 28,
	29, 27, 0, 46, 0, 0, 0, 0, 33, 0,
	31, 32, 0, 0, 19, 34, 35, 36, 21, 0,
	592, 22, 0, 24, 39, 40, 41, 42, 43, 44,
	0, 0, 143, 142, 0, 0, 0, 0, 150, 144,
	149, 148, 0, 0, 0, 151, 152, 38, 0, 0,
	0, 0, 0, 0, 46, 0, 0, 0, 0, 33,
	0, 0, 0, 0, 37, 0, 590, 0, 591, 21,
	0, 0, 22, 0, 25, 0, 0, 30, 28, 29,
	27, 0, 0, 0, 0, 0, 0, 0, 0, 31,
	32, 0, 0, 0, 34, 35, 36, 0, 0, 592,
	0, 0, 24, 39, 40, 41, 42, 43, 44, 154,
	0, 155, 0, 0, 145, 37, 0, 17, 0, 18,
	0, 0, 0, 0, 0, 25, 0, 0, 30, 28,
	29, 27, 0, 0, 0, 0, 0, 0, 0, 0,
	31, 32, 0, 0, 19, 34, 35, 36, 0, 0,
	0, 0, 0, 24, 39, 40, 41, 42, 43, 44,
	0, 0, 143, 142, 0, 0, 0, 0, 150, 144,
	149, 148, 0, 0, 0, 151, 152,
}
var yyPact = [...]int{

	2153, -1000, 2153, -1000, -1000, 224, 224, 224, 224, 224,
	224, -1000, -1000, -1000, -1000, -1000, -1000, 1501, 1501, 224,
	117, 590, 588, 195, 654, 1577, 224, 377, 1586, 1586,
	779, 224, 224, 652, 1501, 665, 664, 607, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 231, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1957, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 231, -1000, -1000, 1388,
	-38, -71, -1000, -1000, -1000, -1000, -1000, -1000, 1501, 1501,
	194, 193, -1000, 1501, 273, 191, 1501, 1501, 1586, 190,
	-1000, -1000, -1000, -1000, -1000, -1000, 1930, 458, -20, -1000,
	565, 637, 1441, 1198, 648, 526, 431, -1000, 423, 1586,
	1441, 1501, 224, -6, 230, 224, 342, -1000, 224, 1586,
	1586, 224, 224, 1586, -1000, -1000, -1000, -1000, 1501, 1501,
	-1000, -1000, 214, 1131, -41, 224, -1000, -7, 1586, -1000,
	1501, 2153, 1501, 1501, 1501, 442, 504, 489, 1501, 1501,
	1501, 1501, 1501, 1501, 1501, -1000, 977, 107, 100, 174,
	763, 763, -1000, -1000, 431, 431, 365, 1940, 131, 131,
	448, 464, -1000, 550, -1000, 436, 431, 1767, 1586, 654,
	534, 546, 1441, 68, -1000, -1000, -1000, 858, 58, 643,
	858, 467, 467, 467, 1364, -1000, 186, 619, 85, -1000,
	50, -1000, 654, 1501, -1000, 294, 162, 179, -1000, 224,
	224, -1000, -1000, 636, 1940, 1940, 528, -1000, -1000, 1501,
	-1000, 607, 201, 1940, 379, -62, -25, -25, 500, 1501,
	131, 1501, 131, 131, -72, -72, -1000, -1000, -1000, 2155,
	550, -1000, 1501, -1000, -1000, -1000, -1000, -1000, -1000, 1501,
	1294, 364, 1501, -1000, 1388, -1000, -1000, 131, 172, 170,
	160, 442, 1501, 346, 1767, -1000, -1000, 1501, -1000, 224,
	224, 352, -1000, -9, 523, 1501, 1523, 73, 936, 1441,
	1407, 643, 27, -1000, 919, -1000, -1000, -1000, 858, 562,
	1501, -1000, 174, -1000, 174, 174, -1000, -10, 627, -1000,
	1940, -1000, -1000, -46, 159, 158, 156, 147, 1586, 180,
	976, 1407, -1000, -1000, 1940, 423, 1586, 423, 118, -1000,
	-1000, 654, 224, 224, -1000, 138, 1586, 343, 379, 2153,
	1501, -1000, -1000, 2025, -1000, -25, -1000, -1000, -1000, 84,
	80, 78, 334, 365, 1501, 1894, 446, 130, -1000, 130,
	-1000, 130, -1000, 318, 77, 386, -1000, 1867, -1000, -1000,
	1767, -1000, 1501, 890, -1000, -14, 531, 1940, -1000, 131,
	1407, -1000, -1000, 1586, -15, 648, -19, 209, -84, -1000,
	518, 574, 490, 513, 858, -1000, -1000, -1000, -1000, -1000,
	1586, 643, 556, 540, 1940, 473, -1000, -1000, 473, 1364,
	1586, 1501, 431, 431, 431, 1501, 76, -23, 658, 1586,
	582, -1000, 1407, 576, 224, 74, 224, 626, 69, 224,
	-1000, -1000, 423, 65, 411, 333, 391, -1000, 1857, 1501,
	-1000, -1000, -1000, -1000, 1940, 1501, 131, 64, -24, 60,
	57, -1000, 284, 246, 224, 1767, 330, 1940, -1000, 428,
	243, 1523, 241, -1000, -1000, -1000, 48, -58, -1000, 643,
	1407, 1501, 858, 510, 490, 506, -1000, 858, -1000, -1000,
	-1000, -1000, 1501, 1501, -1000, -1000, 43, 1501, 1294, 1501,
	-1, -1000, 1586, -1000, -1000, -1000, 1407, 1407, 42, -67,
	1501, 41, 1586, -1000, 257, -1000, 253, 623, -1000, 40,
	615, 224, 410, 2153, 550, 1940, -1000, -1000, 131, -1000,
	-1000, -1000, 560, -1000, 376, 2153, 381, -1000, -1000, -1000,
	603, 470, 1407, -1000, -1000, 1940, 1006, 858, 496, 858,
	793, 1940, -1000, 279, 37, 36, 35, 31, 277, 239,
	-1000, -1000, -1000, 658, 1586, 1940, -1000, -1000, -1000, 423,
	2102, 251, -1000, 136, -1000, 224, -1000, -1000, 135, 327,
	376, 1767, 1501, 224, -1000, -1000, -1000, 131, -1000, -1000,
	-1000, 1501, 129, 793, 858, 1006, 128, 270, 268, 267,
	260, 127, 29, -1000, -1000, 224, 325, 2102, -1000, -1000,
	1501, 1501, 1209, 2102, 423, -1000, 565, 405, 314, 397,
	-1000, 1831, -1000, -1000, 1940, 1586, 793, -1000, 281, 126,
	124, 121, 109, 281, 266, -1000, 224, -1000, 1794, 1768,
	455, -1000, 1131, 313, 24, 23, 224, 404, 1767, 15,
	14, 565, 539, 281, 281, 281, 281, 12, 28, -1000,
	2102, 1650, 1586, -1000, 224, -1000, -1000, -1000, 224, -1000,
	-1000, -1000, -1000, 1501, 11, 6, 4, 2, -1000, 281,
	369, 312, 1650, -1000, -1000, 1501, -1000, 351, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -2, 311, 344, 2102, 1501,
	391, 380, -1000, 1677, 1650, -1000, 403, 308, -1000, 1651,
	391, 224, 1650, 306, 224, 402, 2023, -1000, 354, 2102,
	373, -1000, 224, -1000, -1000, 1501, 1501, 305, 354, 1650,
	1501, 224, -1000, 1419, 1056, 454, 401, 302, 389, -1000,
	1318, -1000, 2023, 1571, 1586, 224, 399, 1650, 1501, -1000,
	319, -1000, 224, -1000, 1224, 1571, -1000, 1571,
}
var yyPgo = [...]int{

	0, 10, 4, 56, 96, 163, 7, 97, 822, 815,
	814, 812, 92, 809, 808, 803, 801, 800, 42, 14,
	20, 798, 794, 791, 788, 786, 784, 688, 55, 52,
	780, 40, 34, 779, 775, 8, 772, 31, 770, 204,
	768, 60, 43, 25, 67, 27, 70, 32, 22, 765,
	763, 761, 752, 895, 750, 749, 748, 746, 360, 434,
	744, 737, 28, 17, 732, 46, 50, 730, 33, 727,
	19, 722, 721, 720, 715, 57, 712, 23, 18, 36,
	44, 15, 39, 709, 706, 703, 38, 702, 5, 41,
	21, 16, 696, 6, 9, 2, 0, 694, 73, 687,
	54, 683, 47, 225, 12, 267, 682, 45, 66, 53,
	37, 24, 35, 48, 678, 380, 582,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 7, 7, 8, 8, 9, 9, 10,
	10, 10, 10, 10, 11, 11, 11, 11, 11, 11,
	12, 12, 13, 13, 13, 14, 14, 14, 15, 15,
	15, 15, 16, 16, 17, 17, 17, 17, 17, 17,
	18, 18, 19, 19, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 22, 22, 22, 22, 23, 23,
	24, 24, 24, 24, 24, 24, 24, 25, 25, 26,
	26, 26, 26, 26, 27, 28, 28, 28, 28, 29,
	29, 30, 31, 31, 32, 32, 33, 33, 34, 34,
	35, 35, 36, 36, 36, 37, 37, 38, 38, 39,
	39, 40, 40, 41, 41, 42, 42, 42, 42, 42,
	42, 43, 43, 43, 43, 43, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	45, 46, 46, 47, 47, 48, 48, 49, 49, 50,
	50, 51, 51, 51, 52, 52, 53, 54, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 56, 56, 56,
	56, 56, 56, 56, 57, 57, 57, 57, 58, 58,
	59, 60, 60, 60, 60, 61, 61, 62, 62, 62,
	62, 62, 62, 62, 63, 64, 64, 65, 65, 66,
	66, 66, 67, 68, 68, 68, 68, 68, 68, 69,
	69, 69, 69, 69, 70, 70, 70, 71, 71, 72,
	72, 72, 73, 74, 74, 75, 75, 76, 76, 77,
	77, 78, 78, 79, 79, 80, 80, 81, 81, 82,
	82, 83, 83, 83, 83, 84, 85, 86, 86, 87,
	87, 88, 88, 89, 89, 90, 90, 91, 91, 92,
	92, 93, 93, 94, 94, 95, 95, 96, 96, 96,
	96, 96, 96, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 104, 105, 106, 106, 107, 107, 108, 108,
	109, 109, 110, 110, 111, 111, 112, 112, 112, 112,
	113, 113, 114, 114, 115, 115, 116, 116,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	9, 7, 9, 2, 8, 9, 7, 9, 2, 3,
	2, 2, 8, 9, 1, 8, 9, 1, 3, 3,
	2, 3, 2, 2, 6, 6, 8, 5, 7, 7,
	1, 3, 1, 3, 0, 1, 1, 2, 2, 6,
	3, 3, 4, 6, 7, 9, 6, 4, 10, 11,
	0, 1, 1, 1, 1, 2, 2, 5, 6, 5,
	3, 3, 5, 3, 5, 5, 4, 4, 4, 1,
	1, 3, 0, 2, 0, 2, 0, 3, 0, 2,
	0, 3, 0, 3, 4, 0, 2, 0, 2, 0,
	2, 6, 9, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 3, 1, 1, 3, 1, 3, 2, 4, 1,
	1, 0, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 4, 4, 6, 6, 4, 6, 4, 4,
	4, 6, 4, 4, 6, 4, 2, 3, 3, 3,
	3, 3, 2, 2, 3, 3, 2, 2, 0, 1,
	4, 5, 5, 5, 1, 5, 10, 8, 9, 9,
	9, 9, 8, 10, 2, 0, 3, 1, 1, 1,
	2, 3, 1, 1, 1, 2, 3, 1, 1, 5,
	5, 6, 6, 4, 0, 2, 4, 1, 1, 1,
	3, 1, 5, 0, 1, 4, 2, 0, 2, 1,
	3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
	3, 6, 9, 5, 8, 7, 3, 1, 3, 5,
	6, 4, 2, 0, 2, 4, 2, 0, 2, 4,
	2, 0, 2, 4, 2, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 3, 0, 1,
	0, 1, 0, 1, 0, 1, 0, 1, 1, 1,
	0, 1, 0, 1, 1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -10, -27, -83, -84, -87, -17,
	-59, -15, -21, -22, -23, -16, -26, 74, 76, 101,
	-39, 26, 29, -96, 110, 82, -105, 88, 86, 87,
	85, 97, 98, 16, 102, 103, 104, 72, 4, 111,
	112, 113, 114, 115, 116, -103, 11, -1, -116, 122,
	-116, -116, -116, -116, -116, -44, -43, -42, -56, -54,
	-53, -59, -60, -73, -55, -57, -103, -105, -25, 128,
	-96, 24, -97, -98, -99, -100, -101, -102, 125, 126,
	115, 113, -61, 73, -46, 62, 66, 127, 83, 114,
	5, 6, 7, 9, 10, 70, -44, -104, -103, -116,
	-28, 19, 15, 17, -30, -29, 13, -53, 128, 30,
	30, 128, -107, -106, -103, -107, -96, -116, -103, 83,
	30, -96, -96, -24, 89, 90, 31, 32, 91, 92,
	-116, -116, 12, -44, 5, 5, -41, -40, -114, 25,
	119, 78, 118, 117, 124, 69, -109, -115, 126, 125,
	123, 130, 131, 65, 64, 66, -44, -78, -27, -39,
	133, 133, -44, -44, 128, 128, -74, -44, 117, 124,
	-109, -115, -53, -44, -44, -96, 128, 80, 63, 132,
	-35, 38, 20, -80, -65, -96, 24, 14, -80, -31,
	14, 57, 58, 59, -108, 71, -96, -65, -58, -78,
	-44, -116, 132, 119, -116, 83, 30, 105, -116, -96,
	-96, -116, -116, -96, -44, -44, 124, -116, -116, 132,
	-116, 132, -96, -44, -1, -44, -44, -44, -109, 67,
	63, 68, 61, 60, -44, -44, -44, -44, -44, -44,
	-44, 129, 132, 129, 129, -96, -98, -96, -98, -108,
	-108, -75, 77, -46, 128, -53, -46, 67, 63, 61,
	60, 69, -108, -2, -8, -6, -13, 74, -12, 99,
	100, -96, -104, -103, -36, 44, 41, -66, -65, 132,
	16, -79, -68, -66, -67, -69, 23, -53, 14, -32,
	18, -79, -113, 60, -113, -113, -82, -72, -71, -45,
	-44, -62, 123, -96, 115, 113, 114, 116, 128, 27,
	28, 36, 129, -107, -44, 84, 128, 84, 128, -116,
	-116, 20, -42, -78, -41, 22, 128, -89, -88, 79,
	75, -100, -102, -44, -46, -44, -46, -46, -78, -58,
	-58, -45, -76, -75, 79, -44, -46, 128, -53, 128,
	-53, 128, -53, -109, -58, 81, -2, -44, -116, -116,
	80, -38, 45, -44, -48, -49, -50, -44, -62, 21,
	128, -27, -96, 22, -80, -86, -85, -43, -96, -32,
	-110, 56, -112, 53, 132, 48, 50, 51, 52, -96,
	22, -79, -33, 39, -44, -29, -28, -29, -29, 132,
	22, 128, 128, 128, 128, 128, -81, -96, -18, 128,
	-96, -43, 128, -43, -27, -81, -27, 129, -104, -104,
	-116, -116, 128, -81, 81, -89, -88, -1, -44, 64,
	129, 129, 129, 81, -44, 78, 64, -47, -46, -47,
	-47, 86, 63, 129, 76, 78, -2, -44, -37, 46,
	72, 132, -51, 42, 43, -47, -77, -43, -96, -31,
	132, 124, 47, -110, -112, -111, 49, 47, -79, -96,
	-32, -34, 40, 41, -82, -96, -58, -108, -108, -108,
	-58, 129, 132, -20, 31, 32, 33, 34, -19, -18,
	35, -77, 37, -116, 129, -116, 22, 129, -116, -27,
	129, 74, 81, 78, -44, -44, -46, 129, 132, 129,
	129, 93, 109, -116, -2, -6, 81, -37, 111, -48,
	112, 129, 132, -32, -86, -44, -68, 47, -111, 47,
	-68, -44, -78, 129, -58, -58, -45, -58, 129, 108,
	-81, -43, -43, 129, 132, -44, 129, -96, -116, 84,
	106, 22, 129, 22, -116, 74, -1, -47, 39, -91,
	-90, 79, 75, 76, -52, 31, 32, 21, -27, -77,
	-70, 54, 55, -68, 47, -68, 96, 129, 129, 129,
	129, 96, 112, -20, -19, -27, -3, -7, -5, -11,
	74, 76, 107, 106, 128, -116, 128, 81, -91, -90,
	-2, -44, -116, -47, -44, 128, -68, -70, 128, 96,
	96, 96, 96, 128, 129, -116, 81, -3, -44, -44,
	-104, -116, -44, -3, -27, -35, 74, 81, 78, -81,
	-63, -64, 95, 128, 128, 128, 128, -63, 96, -116,
	78, 80, 63, -116, 81, 129, 129, -116, 74, -2,
	129, 129, -35, 41, -63, -63, -63, -63, 129, 128,
	-3, -4, -9, -7, -14, 74, -12, -96, -116, -116,
	-78, 129, 129, 129, 129, -63, -93, -92, 79, 75,
	-88, 81, -4, -44, 80, 129, 81, -93, -3, -44,
	-88, 76, 78, -4, 74, 81, 78, -116, -4, -7,
	81, -116, 74, -3, -5, 74, 76, -95, -94, 79,
	75, 76, -116, -44, -44, -104, 81, -95, -94, -4,
	-44, -116, 78, 80, 63, 74, 81, 78, 74, -12,
	-96, -116, 74, -4, -44, 80, -116, 78,
}
var yyDef = [...]int{

	-2, -2, -2, 21, 22, 326, 326, 326, 326, 326,
	326, 15, 16, 17, 18, 19, 20, 0, 0, 326,
	0, 0, 0, 0, 0, 0, 326, 0, 0, 0,
	80, 326, 326, 0, 0, 0, 0, 322, 287, 288,
	289, 290, 291, 292, 293, 0, 300, 2, 9, 327,
	10, 11, 12, 13, 14, 310, 136, 137, 138, 139,
	140, 141, 142, 143, 144, 145, 146, 147, 148, 119,
	131, 0, 125, 126, 127, 128, 129, 130, 0, 0,
	292, 290, 204, 243, 310, 0, 0, 0, 0, 291,
	294, 295, 296, 297, 298, 299, 310, 0, 146, 33,
	-2, 0, 0, 0, 102, 0, 308, 100, 119, 0,
	0, 198, 326, 306, 304, 326, 0, 50, 326, 0,
	0, 326, 326, 0, 81, 82, 83, 84, 0, 0,
	52, 53, 0, -2, 326, 326, 120, 123, 0, 323,
	0, -2, 0, 324, 325, 310, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 310, 0, 0, 0,
	0, 0, 192, 193, 308, 308, 0, -2, 324, 325,
	0, 0, 186, 196, 197, 0, 308, -2, 0, 0,
	112, 0, 0, 0, 255, 217, 218, 0, 0, 104,
	0, 320, 320, 320, 0, 309, 0, 0, 0, 199,
	-2, 48, 0, 0, 49, 0, 0, 0, 51, 326,
	326, 70, 71, 0, -2, -2, 0, 90, 91, 0,
	93, 322, 0, 303, 273, 167, -2, -2, 0, 0,
	0, 0, 0, 0, 187, 188, 189, 190, 191, 194,
	195, 149, 0, 151, 166, 132, 134, 133, 135, 198,
	198, 247, 0, 169, 119, 152, 171, 0, 0, 0,
	0, 310, 198, 0, -2, 25, 26, 0, 44, 326,
	326, 0, 302, 301, 117, 0, 0, 119, 219, 0,
	0, 104, -2, 223, 224, 227, 228, 222, 0, 106,
	0, 103, 0, 321, 0, 0, 101, 259, 239, 241,
	-2, 238, 150, 131, 292, 290, 291, 293, 0, 0,
	0, 0, 200, 307, -2, 119, 0, 119, 0, 72,
	77, 0, 326, 326, 124, 0, 0, 0, 273, -2,
	0, 172, 173, 310, 176, -2, 180, 183, 252, 0,
	0, 0, 0, 246, 0, 310, 0, 119, 178, 119,
	182, 119, 185, 0, 0, 0, 4, 310, 40, 41,
	-2, 94, 0, -2, 111, 155, 161, -2, 160, 0,
	0, 263, 220, 0, 256, 102, 267, 0, 131, 269,
	0, -2, 314, 0, 0, 313, 317, 318, 319, 225,
	0, 104, 108, 0, -2, 96, 99, 97, 98, 0,
	0, 198, 308, 308, 308, 198, 0, 257, 64, 0,
	60, 57, 0, 0, 326, 0, 326, 0, 0, 326,
	89, 92, 119, 0, 0, 0, 272, 274, 310, 0,
	201, 202, 203, 242, -2, 0, 0, 0, 153, 0,
	0, 87, 0, 205, 326, -2, 0, -2, 113, 115,
	0, 0, 157, 162, 163, 261, 0, 249, 221, 104,
	0, 0, 0, 0, 314, 0, 315, 0, 254, 226,
	270, 95, 0, 0, 260, 240, 0, 198, 198, 198,
	0, 54, 0, 55, 65, 66, 0, 0, 0, 62,
	0, 0, 0, 69, 326, 76, 0, 0, 73, 0,
	0, 326, 0, -2, 174, -2, 175, 177, 0, 181,
	184, 88, 0, 31, 277, -2, 0, 114, 116, 156,
	0, 119, 0, 265, 268, -2, 234, 0, 0, 0,
	233, -2, 107, 200, 0, 0, 0, 0, 0, 0,
	258, 67, 68, 64, 0, -2, 58, 59, 74, 119,
	-2, 0, 121, 0, 29, 326, 271, 154, 0, 0,
	277, -2, 0, 326, 158, 164, 165, 0, 264, 250,
	229, 0, 0, 230, 0, 234, 0, 201, 202, 203,
	205, 0, 0, 56, 63, 326, 0, -2, 23, 24,
	0, 0, 326, -2, 119, 30, 110, 0, 0, 276,
	278, 310, 32, 262, -2, 0, 232, 231, 215, 0,
	0, 0, 0, 215, 0, 75, 326, 6, 310, 310,
	0, 38, -2, 0, 0, 0, 326, 0, -2, 0,
	0, 110, 0, 215, 215, 215, 215, 0, 0, 78,
	-2, -2, 0, 39, 326, 122, 206, 42, 326, 275,
	236, 207, 214, 0, 0, 0, 0, 0, 212, 215,
	281, 0, -2, 27, 28, 0, 47, 0, 79, 43,
	216, 208, 209, 210, 211, 0, 0, 281, -2, 0,
	0, 0, 8, 310, -2, 213, 0, 0, 282, 310,
	280, 326, -2, 0, 326, 0, -2, 36, 285, -2,
	0, 34, 326, 279, -2, 0, 0, 0, 285, -2,
	0, 326, 35, 310, 310, 0, 0, 0, 284, 286,
	310, 37, -2, -2, 0, 326, 0, -2, 0, -2,
	0, 45, 326, 283, 310, -2, 46, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 127, 3, 3, 3, 131, 3, 3,
	128, 129, 123, 126, 132, 125, 133, 130, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 122,
	3, 124,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:184
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:189
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:196
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:201
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:208
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:213
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:220
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:225
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:232
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:236
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:240
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:244
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:248
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:252
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:256
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:260
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:264
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:268
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:272
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:276
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:302
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:306
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:312
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:316
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:322
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:326
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:330
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 32:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:334
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:338
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:344
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:348
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:352
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:356
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:360
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:364
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:370
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:374
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:380
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:384
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:388
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:394
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:398
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:402
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:408
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:412
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:416
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:420
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:426
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:430
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:436
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:440
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:444
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:448
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:452
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:456
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression, To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:462
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:466
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:472
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:476
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:482
		{
			yyVAL.expression = nil
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:486
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:490
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:494
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:498
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:504
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:508
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:512
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:516
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 73:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:520
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:526
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:530
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:534
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:538
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 78:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:544
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 79:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:548
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:554
		{
			yyVAL.expression = nil
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:558
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:562
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:566
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:570
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:574
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:578
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:584
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:588
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:594
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:598
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:602
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:606
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:610
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].token.Literal}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:616
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:628
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:638
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:647
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:656
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:667
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:671
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:677
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:683
		{
			yyVAL.expression = nil
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:687
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:693
		{
			yyVAL.expression = nil
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:697
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:703
		{
			yyVAL.expression = nil
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:707
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:713
		{
			yyVAL.expression = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:717
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:723
		{
			yyVAL.expression = nil
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:727
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:733
		{
			yyVAL.expression = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:737
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:741
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:747
		{
			yyVAL.expression = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:751
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:757
		{
			yyVAL.expression = nil
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:761
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:767
		{
			yyVAL.expression = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:771
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:777
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 122:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:781
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:787
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:791
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:797
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:801
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:805
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:809
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:813
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:817
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:823
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Column: yyDollar[1].identifier}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:827
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:831
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:835
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Number: yyDollar[3].integer}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:839
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: yyDollar[3].integer}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:845
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:849
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:853
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:857
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:861
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:865
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:869
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:873
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:877
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:881
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:885
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:889
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:893
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:897
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:903
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:909
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:913
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:919
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:923
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:929
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:933
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:939
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:943
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:949
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:953
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:959
		{
			yyVAL.token = Token{}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:963
		{
			yyVAL.token = yyDollar[1].token
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:967
		{
			yyVAL.token = yyDollar[1].token
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:973
		{
			yyVAL.token = yyDollar[1].token
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:977
		{
			yyVAL.token = yyDollar[1].token
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:983
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:989
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1012
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1016
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1020
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1024
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1028
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1032
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1036
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1040
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1044
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1048
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1052
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1056
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1060
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 181:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1064
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1068
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1072
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1076
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1080
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1084
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1090
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1094
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1098
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1102
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1106
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1110
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1114
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1120
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1124
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1128
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1132
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1138
		{
			yyVAL.expressions = nil
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1142
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1148
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1154
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1158
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1162
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1166
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1172
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 206:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1176
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1182
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 208:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 209:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1190
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 210:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1194
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 211:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1198
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 212:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1202
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 213:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1206
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1212
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 215:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1218
		{
			yyVAL.expression = nil
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1222
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1228
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1232
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1238
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1242
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1246
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1252
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1258
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1262
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1266
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1270
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1274
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1278
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1284
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1288
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1292
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 232:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1296
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 233:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1300
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 234:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1306
		{
			yyVAL.expression = nil
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1310
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1314
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1320
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1324
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1330
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1334
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1338
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1344
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1350
		{
			yyVAL.expression = nil
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1354
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1360
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1364
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 247:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1370
		{
			yyVAL.expression = nil
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1374
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1380
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1384
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1390
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1394
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1400
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1404
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1410
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1414
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1420
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1424
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1430
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1434
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 261:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1440
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 262:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1444
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 263:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1448
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 264:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1452
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 265:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1458
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1464
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1470
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1474
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1480
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 270:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1485
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1492
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1496
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1502
		{
			yyVAL.procexpr = nil
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1506
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1512
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1516
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1522
		{
			yyVAL.procexpr = nil
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1526
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1532
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1536
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1542
		{
			yyVAL.procexpr = nil
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1546
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1552
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1556
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 285:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1562
		{
			yyVAL.procexpr = nil
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1566
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1572
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1576
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1580
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1584
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1588
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1592
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1596
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1602
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1608
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1614
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1620
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1626
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1632
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1638
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1644
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1648
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1654
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1660
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 305:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1664
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1670
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1674
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1680
		{
			yyVAL.token = Token{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1684
		{
			yyVAL.token = yyDollar[1].token
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1690
		{
			yyVAL.token = Token{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1694
		{
			yyVAL.token = yyDollar[1].token
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1700
		{
			yyVAL.token = Token{}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1704
		{
			yyVAL.token = yyDollar[1].token
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1710
		{
			yyVAL.token = Token{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1714
		{
			yyVAL.token = yyDollar[1].token
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1720
		{
			yyVAL.token = Token{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1724
		{
			yyVAL.token = yyDollar[1].token
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1728
		{
			yyVAL.token = yyDollar[1].token
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1732
		{
			yyVAL.token = yyDollar[1].token
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1738
		{
			yyVAL.token = Token{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1742
		{
			yyVAL.token = yyDollar[1].token
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1748
		{
			yyVAL.token = Token{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1752
		{
			yyVAL.token = yyDollar[1].token
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1759
		{
			yyVAL.token = yyDollar[1].token
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1763
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1770
		{
			yyVAL.token = Token{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1774
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
