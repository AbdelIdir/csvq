//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const TIES = 57388
const PERCENT = 57389
const JOIN = 57390
const INNER = 57391
const OUTER = 57392
const LEFT = 57393
const RIGHT = 57394
const FULL = 57395
const CROSS = 57396
const ON = 57397
const USING = 57398
const NATURAL = 57399
const UNION = 57400
const INTERSECT = 57401
const EXCEPT = 57402
const ALL = 57403
const ANY = 57404
const EXISTS = 57405
const IN = 57406
const AND = 57407
const OR = 57408
const NOT = 57409
const BETWEEN = 57410
const LIKE = 57411
const IS = 57412
const NULL = 57413
const NULLS = 57414
const DISTINCT = 57415
const WITH = 57416
const CASE = 57417
const IF = 57418
const ELSEIF = 57419
const WHILE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const DO = 57424
const END = 57425
const DECLARE = 57426
const CURSOR = 57427
const FOR = 57428
const FETCH = 57429
const OPEN = 57430
const CLOSE = 57431
const DISPOSE = 57432
const NEXT = 57433
const PRIOR = 57434
const ABSOLUTE = 57435
const RELATIVE = 57436
const RANGE = 57437
const SEPARATOR = 57438
const PARTITION = 57439
const OVER = 57440
const COMMIT = 57441
const ROLLBACK = 57442
const CONTINUE = 57443
const BREAK = 57444
const EXIT = 57445
const PRINT = 57446
const PRINTF = 57447
const SOURCE = 57448
const FUNCTION = 57449
const BEGIN = 57450
const RETURN = 57451
const VAR = 57452
const COMPARISON_OP = 57453
const STRING_OP = 57454
const SUBSTITUTION_OP = 57455

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"TIES",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"NULLS",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"BEGIN",
	"RETURN",
	"VAR",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"'='",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'('",
	"')'",
	"','",
	"'.'",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1713

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 103,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	77, 1,
	81, 1,
	83, 1,
	-2, 103,
	-1, 95,
	58, 83,
	59, 83,
	60, 83,
	-2, 94,
	-1, 124,
	64, 294,
	68, 294,
	69, 294,
	-2, 310,
	-1, 126,
	64, 294,
	68, 294,
	69, 294,
	-2, 222,
	-1, 136,
	77, 1,
	81, 1,
	83, 1,
	-2, 103,
	-1, 158,
	79, 217,
	-2, 294,
	-1, 168,
	83, 3,
	-2, 103,
	-1, 197,
	4, 51,
	-2, 294,
	-1, 198,
	4, 52,
	-2, 294,
	-1, 213,
	70, 0,
	111, 0,
	114, 0,
	-2, 148,
	-1, 214,
	70, 0,
	111, 0,
	114, 0,
	-2, 150,
	-1, 233,
	96, 94,
	121, 222,
	-2, 294,
	-1, 248,
	77, 3,
	81, 3,
	83, 3,
	-2, 103,
	-1, 267,
	48, 296,
	50, 300,
	-2, 224,
	-1, 285,
	64, 294,
	68, 294,
	69, 294,
	-2, 210,
	-1, 295,
	64, 294,
	68, 294,
	69, 294,
	-2, 289,
	-1, 310,
	83, 1,
	-2, 103,
	-1, 316,
	70, 0,
	111, 0,
	114, 0,
	-2, 159,
	-1, 323,
	96, 94,
	121, 181,
	-2, 294,
	-1, 341,
	83, 3,
	-2, 103,
	-1, 344,
	64, 294,
	68, 294,
	69, 294,
	-2, 99,
	-1, 348,
	64, 294,
	68, 294,
	69, 294,
	-2, 139,
	-1, 361,
	50, 300,
	-2, 296,
	-1, 374,
	64, 294,
	68, 294,
	69, 294,
	-2, 89,
	-1, 410,
	83, 219,
	-2, 294,
	-1, 420,
	77, 1,
	81, 1,
	83, 1,
	-2, 103,
	-1, 422,
	64, 294,
	68, 294,
	69, 294,
	-2, 102,
	-1, 468,
	83, 5,
	-2, 103,
	-1, 472,
	77, 1,
	81, 1,
	83, 1,
	-2, 103,
	-1, 478,
	79, 232,
	81, 232,
	83, 232,
	-2, 294,
	-1, 487,
	77, 1,
	81, 1,
	83, 1,
	-2, 28,
	-1, 497,
	64, 294,
	68, 294,
	69, 294,
	-2, 239,
	-1, 503,
	64, 294,
	68, 294,
	69, 294,
	-2, 93,
	-1, 511,
	64, 294,
	68, 294,
	69, 294,
	-2, 248,
	-1, 518,
	77, 5,
	81, 5,
	83, 5,
	-2, 103,
	-1, 525,
	83, 5,
	-2, 103,
	-1, 536,
	83, 3,
	-2, 103,
	-1, 563,
	64, 294,
	68, 294,
	69, 294,
	-2, 310,
	-1, 576,
	64, 294,
	68, 294,
	69, 294,
	-2, 208,
	-1, 586,
	77, 5,
	81, 5,
	83, 5,
	-2, 103,
	-1, 587,
	83, 7,
	-2, 103,
	-1, 593,
	77, 3,
	81, 3,
	83, 3,
	-2, 103,
	-1, 602,
	77, 7,
	81, 7,
	83, 7,
	-2, 103,
	-1, 617,
	83, 5,
	-2, 103,
	-1, 623,
	83, 7,
	-2, 103,
	-1, 631,
	77, 5,
	81, 5,
	83, 5,
	-2, 103,
	-1, 635,
	77, 1,
	81, 5,
	83, 5,
	-2, 103,
	-1, 638,
	77, 5,
	81, 5,
	83, 5,
	-2, 30,
	-1, 643,
	109, 26,
	-2, 23,
	-1, 648,
	83, 7,
	-2, 103,
	-1, 661,
	77, 1,
	81, 1,
	83, 1,
	-2, 103,
	-1, 662,
	83, 3,
	-2, 103,
	-1, 666,
	77, 7,
	81, 7,
	83, 7,
	-2, 103,
	-1, 668,
	109, 73,
	-2, 70,
	-1, 674,
	83, 3,
	-2, 103,
	-1, 676,
	77, 1,
	81, 1,
	83, 1,
	-2, 103,
}

const yyPrivate = 57344

const yyLast = 2012

var yyAct = [...]int{

	71, 27, 152, 27, 92, 646, 657, 580, 303, 600,
	211, 1, 615, 44, 453, 545, 171, 534, 401, 413,
	431, 55, 2, 571, 423, 349, 345, 458, 362, 439,
	360, 111, 112, 113, 267, 353, 282, 252, 275, 179,
	459, 125, 268, 174, 308, 58, 77, 266, 100, 141,
	128, 107, 75, 278, 325, 46, 381, 41, 376, 155,
	365, 155, 366, 367, 368, 363, 156, 510, 361, 155,
	132, 3, 494, 149, 148, 150, 271, 273, 140, 170,
	481, 434, 426, 95, 165, 395, 247, 41, 84, 85,
	87, 518, 88, 89, 43, 379, 350, 137, 176, 176,
	143, 144, 145, 146, 147, 186, 187, 101, 170, 189,
	101, 263, 97, 601, 98, 196, 96, 43, 204, 138,
	137, 191, 139, 143, 144, 145, 146, 147, 614, 583,
	161, 205, 46, 364, 612, 599, 595, 27, 568, 567,
	175, 175, 178, 530, 529, 514, 81, 512, 509, 40,
	82, 506, 493, 483, 90, 482, 231, 480, 79, 189,
	143, 144, 145, 146, 147, 465, 41, 452, 83, 27,
	255, 398, 40, 103, 261, 256, 394, 264, 176, 41,
	319, 176, 145, 146, 147, 288, 300, 293, 230, 229,
	215, 249, 84, 85, 87, 351, 88, 89, 209, 86,
	577, 239, 555, 70, 551, 298, 391, 46, 333, 304,
	286, 45, 236, 95, 103, 307, 331, 103, 239, 47,
	48, 49, 50, 51, 52, 53, 54, 306, 277, 126,
	309, 329, 208, 289, 210, 94, 280, 281, 103, 106,
	435, 110, 199, 294, 192, 297, 121, 122, 132, 27,
	321, 56, 91, 85, 87, 299, 525, 468, 90, 552,
	582, 288, 313, 356, 176, 505, 358, 124, 312, 150,
	369, 249, 477, 406, 484, 176, 466, 207, 134, 74,
	418, 665, 387, 134, 301, 117, 118, 655, 639, 634,
	304, 385, 356, 356, 625, 384, 335, 620, 382, 674,
	151, 389, 304, 86, 417, 359, 175, 357, 592, 158,
	392, 27, 164, 159, 73, 590, 160, 569, 557, 190,
	488, 402, 371, 193, 194, 195, 471, 375, 409, 377,
	378, 383, 399, 133, 336, 337, 200, 201, 133, 203,
	408, 623, 27, 341, 617, 115, 116, 119, 120, 197,
	198, 415, 356, 416, 400, 135, 649, 618, 142, 57,
	648, 617, 206, 86, 249, 176, 167, 212, 213, 214,
	430, 443, 237, 221, 222, 223, 224, 225, 226, 227,
	288, 449, 650, 537, 451, 385, 233, 536, 356, 237,
	438, 326, 437, 433, 67, 42, 304, 42, 311, 671,
	630, 166, 310, 538, 467, 286, 288, 419, 461, 649,
	444, 311, 442, 537, 285, 664, 448, 93, 641, 633,
	610, 27, 295, 591, 527, 470, 542, 288, 421, 40,
	425, 185, 474, 492, 88, 356, 217, 176, 246, 162,
	216, 218, 176, 487, 150, 412, 314, 24, 316, 489,
	504, 243, 663, 491, 588, 242, 169, 356, 356, 68,
	29, 279, 29, 513, 323, 339, 340, 327, 500, 27,
	496, 498, 495, 27, 245, 244, 502, 288, 517, 40,
	182, 338, 440, 528, 220, 219, 549, 501, 27, 344,
	348, 181, 182, 183, 499, 356, 90, 441, 44, 436,
	176, 533, 176, 531, 490, 343, 374, 486, 259, 390,
	535, 385, 428, 429, 393, 544, 597, 396, 154, 27,
	476, 447, 405, 260, 553, 564, 27, 561, 558, 62,
	14, 42, 14, 446, 548, 565, 550, 27, 554, 373,
	519, 403, 172, 462, 365, 460, 366, 367, 368, 363,
	176, 154, 361, 570, 540, 541, 410, 105, 104, 249,
	131, 515, 575, 42, 469, 257, 579, 365, 397, 366,
	367, 368, 380, 422, 290, 291, 296, 41, 304, 454,
	455, 456, 457, 292, 578, 173, 594, 27, 27, 607,
	519, 598, 41, 276, 27, 370, 29, 519, 596, 262,
	613, 463, 123, 27, 41, 257, 180, 274, 43, 285,
	265, 233, 80, 109, 177, 532, 249, 475, 27, 619,
	127, 41, 355, 572, 27, 606, 130, 627, 29, 626,
	184, 485, 27, 108, 473, 348, 27, 76, 629, 27,
	606, 478, 72, 42, 647, 642, 528, 616, 558, 27,
	654, 386, 388, 656, 13, 154, 348, 154, 519, 519,
	6, 606, 27, 27, 669, 497, 14, 27, 12, 606,
	11, 10, 9, 354, 519, 27, 503, 27, 8, 603,
	611, 7, 526, 324, 157, 249, 606, 154, 64, 519,
	511, 257, 283, 284, 603, 519, 270, 249, 14, 487,
	668, 269, 581, 519, 606, 42, 348, 643, 29, 154,
	519, 432, 668, 78, 668, 603, 621, 232, 63, 66,
	519, 59, 65, 638, 60, 539, 427, 347, 556, 346,
	129, 153, 342, 643, 643, 562, 42, 632, 519, 566,
	603, 258, 445, 372, 99, 637, 643, 432, 643, 19,
	574, 559, 560, 563, 603, 604, 250, 520, 603, 5,
	69, 421, 658, 486, 153, 114, 603, 573, 638, 585,
	29, 4, 238, 241, 17, 589, 576, 154, 14, 154,
	672, 154, 16, 18, 15, 602, 248, 0, 632, 0,
	637, 0, 0, 0, 355, 0, 0, 0, 0, 0,
	0, 29, 608, 609, 365, 0, 366, 367, 368, 363,
	546, 547, 361, 0, 0, 42, 507, 508, 41, 84,
	85, 87, 624, 88, 89, 43, 0, 0, 0, 0,
	315, 0, 317, 318, 0, 622, 0, 0, 0, 154,
	14, 149, 636, 150, 0, 640, 140, 0, 628, 0,
	0, 0, 0, 651, 432, 328, 0, 0, 0, 0,
	0, 0, 660, 42, 0, 0, 0, 42, 302, 0,
	305, 14, 0, 0, 652, 653, 670, 81, 320, 659,
	29, 82, 42, 675, 0, 90, 0, 138, 137, 79,
	139, 143, 144, 145, 146, 147, 0, 673, 0, 83,
	153, 0, 0, 0, 0, 149, 148, 150, 0, 0,
	140, 0, 0, 42, 154, 0, 0, 93, 0, 0,
	42, 0, 352, 0, 0, 0, 0, 0, 29, 0,
	86, 42, 29, 0, 70, 188, 0, 0, 0, 0,
	0, 154, 414, 0, 414, 0, 414, 29, 0, 0,
	14, 138, 137, 0, 139, 143, 144, 145, 146, 147,
	0, 0, 202, 414, 0, 0, 0, 0, 41, 84,
	85, 87, 0, 88, 89, 43, 0, 0, 29, 0,
	0, 42, 42, 0, 0, 29, 0, 0, 42, 0,
	153, 61, 153, 0, 153, 0, 29, 42, 14, 0,
	0, 0, 14, 154, 0, 0, 0, 0, 0, 0,
	0, 0, 42, 0, 0, 0, 102, 14, 42, 0,
	0, 0, 0, 0, 0, 479, 42, 81, 0, 41,
	42, 82, 0, 42, 0, 90, 43, 234, 0, 79,
	93, 36, 0, 42, 0, 0, 29, 29, 14, 83,
	0, 25, 464, 29, 26, 14, 42, 42, 0, 0,
	0, 42, 29, 0, 0, 0, 14, 0, 0, 42,
	0, 42, 0, 163, 0, 0, 0, 29, 0, 0,
	86, 235, 0, 29, 70, 450, 0, 0, 0, 0,
	0, 29, 0, 150, 414, 29, 140, 0, 29, 40,
	0, 21, 0, 22, 0, 0, 0, 0, 29, 20,
	0, 0, 33, 30, 31, 32, 14, 14, 0, 0,
	0, 29, 29, 14, 34, 35, 29, 516, 23, 37,
	38, 39, 14, 0, 29, 28, 29, 138, 137, 0,
	139, 143, 144, 145, 146, 147, 102, 14, 0, 0,
	0, 240, 240, 14, 543, 414, 0, 0, 0, 0,
	0, 14, 0, 0, 0, 14, 0, 0, 14, 272,
	0, 0, 272, 0, 0, 0, 0, 0, 14, 41,
	84, 85, 87, 0, 88, 89, 43, 0, 0, 0,
	0, 14, 14, 0, 0, 0, 14, 0, 0, 0,
	0, 0, 0, 0, 14, 0, 14, 0, 0, 240,
	0, 240, 240, 0, 0, 0, 584, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 149, 148,
	150, 0, 0, 140, 240, 330, 332, 334, 81, 0,
	0, 0, 82, 0, 0, 0, 90, 0, 234, 0,
	79, 41, 84, 85, 87, 0, 88, 89, 43, 0,
	83, 0, 0, 0, 0, 0, 272, 0, 0, 0,
	102, 0, 102, 102, 138, 137, 0, 139, 143, 144,
	145, 146, 147, 0, 228, 202, 0, 0, 0, 0,
	0, 86, 235, 0, 0, 70, 188, 0, 41, 84,
	85, 87, 0, 88, 89, 43, 0, 0, 0, 0,
	81, 0, 0, 0, 82, 0, 0, 0, 90, 0,
	0, 240, 79, 240, 0, 240, 0, 0, 41, 84,
	85, 87, 83, 88, 89, 43, 0, 0, 0, 0,
	0, 0, 240, 0, 41, 84, 85, 87, 0, 88,
	89, 43, 0, 0, 0, 0, 272, 81, 0, 0,
	0, 82, 0, 86, 287, 90, 0, 70, 40, 79,
	149, 148, 150, 0, 0, 140, 0, 0, 0, 83,
	0, 0, 0, 0, 0, 0, 0, 81, 0, 0,
	0, 82, 0, 0, 0, 90, 0, 0, 0, 79,
	0, 0, 0, 81, 240, 0, 0, 82, 0, 83,
	86, 90, 0, 0, 70, 79, 138, 137, 0, 139,
	143, 144, 145, 146, 147, 83, 0, 202, 272, 0,
	41, 0, 0, 272, 149, 148, 150, 43, 0, 140,
	86, 322, 36, 0, 70, 0, 0, 0, 0, 676,
	0, 0, 25, 0, 0, 26, 86, 0, 0, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 240, 0, 0, 0, 0, 424, 0,
	138, 137, 0, 139, 143, 144, 145, 146, 147, 0,
	0, 272, 0, 272, 0, 0, 149, 148, 150, 41,
	40, 140, 667, 0, 645, 425, 43, 149, 148, 150,
	20, 36, 140, 33, 30, 31, 32, 0, 0, 0,
	0, 25, 666, 0, 26, 34, 35, 253, 254, 23,
	37, 38, 39, 0, 240, 523, 28, 0, 0, 0,
	0, 272, 138, 137, 0, 139, 143, 144, 145, 146,
	147, 0, 0, 138, 137, 0, 139, 143, 144, 145,
	146, 147, 0, 149, 148, 150, 0, 0, 140, 40,
	0, 605, 0, 522, 0, 0, 149, 148, 150, 524,
	662, 140, 33, 30, 31, 32, 0, 149, 148, 150,
	0, 661, 140, 0, 34, 35, 253, 254, 0, 37,
	38, 39, 635, 0, 523, 28, 149, 148, 150, 138,
	137, 140, 139, 143, 144, 145, 146, 147, 0, 0,
	0, 631, 138, 137, 0, 139, 143, 144, 145, 146,
	147, 0, 0, 138, 137, 0, 139, 143, 144, 145,
	146, 147, 41, 0, 0, 0, 149, 148, 150, 43,
	0, 140, 138, 137, 36, 139, 143, 144, 145, 146,
	147, 593, 0, 0, 25, 0, 0, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 137, 0, 139, 143, 144, 145, 146,
	147, 0, 0, 0, 149, 148, 150, 0, 0, 140,
	0, 0, 40, 0, 251, 0, 22, 0, 149, 148,
	150, 587, 20, 140, 0, 33, 30, 31, 32, 0,
	149, 148, 150, 586, 407, 140, 0, 34, 35, 253,
	254, 23, 37, 38, 39, 472, 0, 0, 28, 0,
	138, 137, 0, 139, 143, 144, 145, 146, 147, 0,
	0, 149, 148, 150, 138, 137, 140, 139, 143, 144,
	145, 146, 147, 149, 148, 150, 138, 137, 140, 139,
	143, 144, 145, 146, 147, 149, 148, 150, 420, 0,
	140, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	411, 149, 148, 150, 0, 0, 140, 138, 137, 0,
	139, 143, 144, 145, 146, 147, 0, 0, 168, 138,
	137, 0, 139, 143, 144, 145, 146, 147, 149, 148,
	150, 138, 137, 140, 139, 143, 144, 145, 146, 147,
	0, 0, 0, 136, 149, 148, 150, 138, 137, 140,
	139, 143, 144, 145, 146, 147, 0, 404, 148, 150,
	0, 41, 140, 0, 0, 0, 0, 0, 43, 0,
	0, 0, 0, 36, 138, 137, 0, 139, 143, 144,
	145, 146, 147, 25, 0, 0, 26, 0, 0, 0,
	138, 137, 0, 139, 143, 144, 145, 146, 147, 0,
	0, 0, 0, 138, 137, 41, 139, 143, 144, 145,
	146, 147, 43, 0, 0, 0, 0, 36, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 25, 0, 0,
	26, 40, 0, 644, 0, 645, 0, 0, 0, 0,
	0, 20, 0, 0, 33, 30, 31, 32, 0, 0,
	0, 0, 0, 0, 0, 0, 34, 35, 0, 0,
	23, 37, 38, 39, 0, 0, 523, 28, 0, 0,
	0, 0, 0, 0, 0, 40, 0, 521, 0, 522,
	0, 0, 0, 0, 0, 524, 0, 0, 33, 30,
	31, 32, 0, 0, 0, 0, 0, 0, 0, 0,
	34, 35, 0, 0, 0, 37, 38, 39, 0, 0,
	523, 28,
}
var yyPact = [...]int{

	1025, -1000, 1025, -1000, -1000, -1000, -69, -69, -69, -69,
	-69, -69, -69, -69, -69, -1000, -1000, -1000, -1000, -1000,
	617, 1340, 1340, -69, 97, 528, 527, 119, 602, -69,
	617, 617, 617, 254, -69, -69, 590, 1340, 1340, 615,
	535, -1000, 135, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 248, 1763, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 135, -1000, -1000,
	1294, -54, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1340,
	202, 118, 1340, 617, -1000, -1000, 247, -1000, -1000, -1000,
	-1000, 1736, 392, -43, -1000, 504, 565, 617, 600, 592,
	433, 358, -1000, 355, 617, 617, 814, -69, -1, 131,
	-1000, -69, -69, -69, 617, -1000, -1000, -1000, -1000, 1340,
	1340, -1000, -1000, 128, 8, -69, 1305, -69, -1000, -4,
	617, -1000, 1340, 191, 112, 114, 1025, 1340, 1340, 1340,
	377, 372, 423, 1340, 1340, 1340, 1340, 1340, 1340, 1340,
	-1000, 1163, 68, 67, 94, 617, 1175, 293, 1779, 81,
	81, 387, 413, -1000, 1026, 368, -1000, -1000, 1638, 617,
	597, 464, 482, 617, 583, -11, 588, 53, 593, 575,
	53, 400, 400, 400, 1247, -1000, 113, 547, -1000, 66,
	-1000, 602, 1340, -1000, -1000, -1000, 556, 1779, 1779, 187,
	-1000, -1000, 1340, -1000, 535, 164, 1779, 355, 617, 355,
	106, 321, 45, -15, -15, 425, 1340, 81, 1340, 81,
	81, 65, 65, -1000, -1000, -1000, 776, 1026, -1000, -1000,
	-1000, -1000, 59, 840, 1324, -1000, 310, 1340, -1000, 1294,
	-1000, -1000, 81, 111, 96, 88, 377, 251, 1638, -1000,
	-1000, 1340, -1000, -69, -69, 261, -1000, -14, 460, 1340,
	1340, 75, 617, 617, -1000, 617, 575, 11, -1000, 573,
	-1000, -1000, -1000, -1000, 53, 500, 1340, -1000, 94, -1000,
	94, 94, -1000, -27, 550, 1779, -1000, -1000, -64, 617,
	175, 162, 617, -1000, -1000, 1779, 597, -69, -1000, -1000,
	86, 617, -69, 55, -37, -69, 546, 50, 249, 321,
	1025, 1340, -1000, -1000, 1792, -1000, -15, -1000, -1000, -1000,
	481, 177, -1000, 1696, 245, 293, 1340, 1720, 380, 98,
	-1000, 98, -1000, 98, -1000, 216, 329, -1000, 1708, -1000,
	-1000, 1638, -1000, 1340, 1431, -1000, -40, 470, 1779, -1000,
	81, 617, -1000, 592, -41, 126, -62, -1000, -1000, -1000,
	451, 518, 432, 449, 53, -1000, -1000, -1000, -1000, -1000,
	617, 575, 493, 480, 1779, 421, -1000, -1000, 421, 1247,
	617, 964, 46, 548, 617, 510, -1000, 617, 506, -69,
	-1000, 355, 44, -1000, 190, 617, -1000, 149, 542, 349,
	243, 334, -1000, 1665, 1340, 1340, 612, 479, 176, -1000,
	1779, 1340, 81, 36, -42, 34, 32, -1000, 179, -69,
	1638, 237, 1779, -1000, 356, 458, 1340, 361, -1000, -1000,
	-1000, 31, -50, 575, 617, 1340, 53, 446, 432, 439,
	-1000, 53, -1000, -1000, -1000, -1000, 1340, 1340, -1000, -1000,
	167, 30, -1000, -1000, -1000, -1000, 617, 617, 27, -55,
	1340, 26, 617, -1000, 24, 539, 355, -1000, 1901, 148,
	-69, 348, 1025, 1026, 23, 22, 1340, 610, 1779, -1000,
	-1000, 81, -1000, -1000, -1000, -1000, 306, 1025, 325, -1000,
	-1000, -1000, 523, 405, 617, -1000, -1000, 1779, 755, 53,
	438, 53, 495, 1779, -1000, 84, 161, -1000, -1000, 548,
	617, 1779, -1000, -1000, -1000, 82, -69, 235, 1901, -1000,
	-1000, 1340, 1340, 83, 617, 1901, -1000, -69, -1000, -1000,
	-1000, 18, 17, -1000, 234, 306, 1638, 1340, -69, -1000,
	-1000, -1000, 81, -1000, -1000, -1000, 1340, 80, 495, 53,
	755, 163, 9, -1000, -1000, 355, -1000, -69, -1000, 1653,
	1639, 390, -1000, 8, 253, 232, -1000, -1000, -1000, 347,
	225, 336, -1000, 1581, -1000, -1000, 1779, 617, 495, -1000,
	15, 504, 475, 163, 14, -1000, 1901, 1495, 617, -1000,
	-69, -69, 344, 1638, 13, -1000, -1000, 1340, 7, -1000,
	280, 214, 1495, -1000, -1000, 1340, -1000, 259, -1000, -1000,
	-69, -1000, -1000, -1000, -1000, 211, 263, 1901, 1340, 334,
	322, -1000, 1541, 1495, -1000, 343, 206, -1000, 1522, 334,
	-69, 1495, 205, -69, 342, 1857, -1000, 279, 1901, 304,
	-1000, -69, -1000, -1000, 1340, 1340, 204, 279, 1495, 1340,
	-69, -1000, 1511, 1498, 388, 339, 198, 332, -1000, 1442,
	-1000, 1857, 1426, 617, -69, 323, 1495, 1340, -1000, 217,
	-1000, -69, -1000, 1369, 1426, -1000, 1426,
}
var yyPgo = [...]int{

	0, 10, 86, 9, 113, 71, 22, 91, 786, 785,
	784, 783, 782, 774, 771, 765, 760, 759, 757, 37,
	756, 755, 749, 660, 58, 48, 744, 39, 38, 743,
	742, 16, 741, 24, 732, 447, 730, 50, 45, 359,
	229, 612, 19, 26, 729, 727, 726, 725, 991, 724,
	722, 721, 719, 529, 718, 717, 713, 25, 7, 702,
	42, 701, 34, 696, 15, 693, 692, 688, 684, 683,
	20, 2, 47, 43, 8, 36, 54, 681, 678, 673,
	35, 672, 671, 670, 40, 27, 14, 668, 654, 18,
	44, 23, 17, 647, 12, 6, 5, 0, 642, 314,
	279, 52, 637, 46, 394, 4, 459, 633, 51, 630,
	49, 30, 29, 28, 53, 626, 358, 211,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 6, 7, 7, 8, 8,
	9, 9, 10, 10, 11, 11, 12, 12, 12, 12,
	12, 13, 13, 13, 14, 14, 15, 15, 15, 15,
	15, 15, 15, 16, 16, 17, 17, 17, 17, 17,
	18, 18, 18, 18, 18, 18, 19, 19, 20, 20,
	20, 21, 21, 21, 22, 22, 22, 22, 23, 24,
	24, 24, 24, 25, 25, 26, 27, 27, 28, 28,
	29, 29, 30, 30, 31, 31, 32, 32, 32, 33,
	33, 34, 34, 35, 35, 36, 36, 37, 37, 38,
	38, 38, 38, 38, 38, 39, 39, 40, 40, 40,
	40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
	40, 41, 41, 42, 42, 43, 43, 44, 44, 45,
	45, 46, 46, 46, 47, 47, 48, 49, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 51, 51, 51,
	51, 51, 52, 52, 52, 53, 53, 54, 54, 55,
	55, 55, 56, 56, 56, 56, 57, 57, 58, 59,
	59, 60, 60, 60, 61, 61, 62, 62, 62, 62,
	62, 62, 63, 63, 63, 63, 63, 64, 64, 64,
	65, 65, 65, 66, 66, 67, 68, 68, 69, 69,
	70, 70, 71, 71, 72, 72, 73, 73, 74, 74,
	75, 75, 76, 76, 77, 77, 77, 77, 78, 79,
	80, 80, 81, 81, 82, 83, 83, 84, 84, 85,
	85, 86, 86, 86, 86, 86, 87, 87, 88, 89,
	89, 90, 90, 91, 91, 92, 92, 93, 93, 94,
	94, 95, 95, 96, 96, 97, 98, 99, 99, 100,
	100, 101, 102, 103, 104, 105, 105, 106, 107, 107,
	108, 108, 109, 109, 110, 110, 111, 111, 112, 112,
	113, 113, 113, 113, 114, 114, 115, 115, 116, 116,
	117, 117,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 2, 2, 2, 6, 3, 3, 3,
	6, 6, 9, 6, 10, 11, 0, 1, 1, 1,
	1, 2, 2, 5, 6, 8, 9, 7, 9, 2,
	8, 9, 7, 9, 2, 3, 2, 2, 8, 9,
	1, 8, 9, 1, 5, 3, 3, 3, 5, 5,
	4, 4, 4, 1, 1, 3, 0, 2, 0, 2,
	0, 3, 0, 2, 0, 3, 0, 3, 4, 0,
	2, 0, 2, 0, 2, 6, 9, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 1, 1, 3, 1, 3, 2, 4, 1,
	1, 0, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 4, 4, 6, 6, 4, 6, 4, 4,
	4, 6, 4, 4, 6, 4, 2, 3, 3, 3,
	3, 3, 3, 3, 2, 3, 4, 4, 1, 1,
	2, 2, 7, 8, 7, 8, 7, 8, 2, 0,
	3, 1, 2, 3, 1, 1, 1, 1, 2, 3,
	1, 1, 5, 5, 6, 6, 4, 0, 2, 4,
	1, 1, 1, 1, 3, 5, 0, 1, 0, 2,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 4, 2, 6, 9, 5, 8, 7, 3,
	1, 3, 5, 6, 6, 6, 8, 1, 3, 1,
	3, 0, 1, 1, 2, 2, 5, 7, 7, 4,
	2, 0, 2, 4, 2, 0, 2, 4, 2, 0,
	2, 4, 2, 0, 2, 1, 1, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 3, 3, 1, 3,
	1, 3, 0, 1, 0, 1, 0, 1, 0, 1,
	0, 1, 1, 1, 0, 1, 0, 1, 1, 1,
	0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -14, -17, -23, -77, -78, -81,
	-82, -83, -87, -88, -53, -10, -12, -13, -11, -22,
	84, 76, 78, 103, -35, 26, 29, -97, 110, -106,
	88, 89, 90, 87, 99, 100, 16, 104, 105, 106,
	74, 4, -104, 11, -1, -117, 124, -117, -117, -117,
	-117, -117, -117, -117, -117, -97, -40, -39, -38, -51,
	-49, -48, -53, -54, -67, -50, -52, -104, -106, -16,
	120, -97, -98, -99, -100, -101, -102, -103, -56, 75,
	-41, 63, 67, 85, 5, 6, 116, 7, 9, 10,
	71, -40, -105, -104, -117, -24, 19, 15, 17, -26,
	-25, 13, -48, 120, 30, 30, 120, -108, -107, 11,
	-117, -97, -97, -97, -15, 91, 92, 31, 32, 93,
	94, -117, -117, 12, -40, -71, -40, 5, -37, -36,
	-115, 25, 113, 85, 30, 107, 80, 112, 111, 114,
	70, -110, -116, 115, 116, 117, 118, 119, 66, 65,
	67, -40, -71, -23, -35, 123, 120, -68, -40, 111,
	114, -110, -116, -48, -40, -97, -99, -100, 82, 64,
	122, -31, 38, 20, -73, -60, -97, 14, -73, -27,
	14, 58, 59, 60, -109, 73, -97, -97, 121, -71,
	-117, 122, 113, -117, -117, -117, -97, -40, -40, 114,
	-117, -117, 122, -117, 122, -97, -40, 86, 120, 86,
	120, -1, -40, -40, -40, -110, 68, 64, 69, 62,
	61, -40, -40, -40, -40, -40, -40, -40, 121, 121,
	121, -97, -55, -40, 73, 117, -76, 79, -41, 120,
	-48, -41, 68, 64, 62, 61, 70, -2, -8, -6,
	-20, 76, -19, 101, 102, -97, -105, -104, -32, 44,
	41, -97, 16, 122, -97, 22, -72, -62, -60, -61,
	-63, 23, -48, 24, 14, -28, 18, -72, -114, 61,
	-114, -114, -75, -66, -65, -40, -57, 117, -97, 120,
	27, 28, 36, 121, -108, -40, 20, -38, -71, -37,
	22, 120, -23, -74, -97, -23, 121, -105, -90, -89,
	81, 77, -101, -103, -40, -41, -40, -41, -41, 121,
	38, -31, 117, -40, -69, -76, 81, -40, -41, 120,
	-48, 120, -48, 120, -48, -110, 83, -2, -40, -117,
	-117, 82, -34, 45, -40, -43, -44, -45, -40, -57,
	21, 120, -23, -80, -79, -39, -97, -73, -97, -28,
	-111, 57, -113, 54, 122, 49, 51, 52, 53, -97,
	22, -72, -29, 39, -40, -25, -24, -25, -25, 122,
	22, 120, -74, -84, 120, -97, -39, 120, -39, -105,
	-117, 120, -74, -117, 121, 122, -117, 22, 121, 83,
	-90, -89, -1, -40, 65, 41, 96, 38, -31, 83,
	-40, 80, 65, -42, -41, -42, -42, 88, 64, 78,
	80, -2, -40, -33, 47, 74, 122, -46, 42, 43,
	-42, -70, -39, -27, 122, 114, 48, -111, -113, -112,
	50, 48, -72, -97, -28, -30, 40, 41, -75, -97,
	121, -71, 121, -86, 31, 32, 33, 34, -85, -84,
	35, -70, 37, -117, -23, 121, 86, -74, 108, 22,
	76, 83, 80, -40, -43, 5, 41, 96, -40, -41,
	121, 122, 121, 121, 95, -117, -2, -6, 83, -33,
	46, -43, 72, 121, 122, -28, -80, -40, -62, 48,
	-112, 48, -62, -40, -71, 98, 121, -39, -39, 121,
	122, -40, 121, -97, 121, 22, -23, -3, -7, -5,
	-18, 76, 78, 109, 84, 108, -117, 76, -1, 121,
	121, -43, 5, -42, -92, -91, 81, 77, 78, -47,
	31, 32, 21, -23, -70, -64, 55, 56, -62, 48,
	-62, 120, 98, -86, -85, 120, -117, 83, -3, -40,
	-40, -105, -117, -40, -97, -3, -117, 121, 121, 83,
	-92, -91, -2, -40, -117, -42, -40, 120, -62, -64,
	-58, -59, 97, 120, -23, -117, 80, 82, 64, -117,
	83, 76, 83, 80, -74, 121, -31, 41, -58, 121,
	-3, -4, -9, -7, -21, 76, -19, -97, -117, -117,
	76, -2, 121, -71, 121, -94, -93, 81, 77, -89,
	83, -4, -40, 82, -117, 83, -94, -3, -40, -89,
	78, 80, -4, 76, 83, 80, -117, -4, -7, 83,
	-117, 76, -3, -5, 76, 78, -96, -95, 81, 77,
	78, -117, -40, -40, -105, 83, -96, -95, -4, -40,
	-117, 80, 82, 64, 76, 83, 80, 76, -19, -97,
	-117, 76, -4, -40, 82, -117, 80,
}
var yyDef = [...]int{

	-2, -2, -2, 23, 24, 25, 310, 310, 310, 310,
	310, 310, 310, 310, 310, 18, 19, 20, 21, 22,
	0, 0, 0, 310, 0, 0, 0, 0, 0, 310,
	0, 0, 0, 46, 310, 310, 0, 0, 0, 0,
	306, 275, 0, 284, 2, 9, 311, 10, 11, 12,
	13, 14, 15, 16, 17, 0, 294, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
	103, 115, 109, 110, 111, 112, 113, 114, 178, 216,
	294, 0, 0, 0, 276, 277, 0, 279, 281, 282,
	283, 294, 0, 127, 59, -2, 0, 0, 0, 86,
	0, 292, 84, 103, 0, 0, 0, 310, 290, 288,
	33, 310, 310, 310, 0, 47, 48, 49, 50, 0,
	0, 34, 35, 0, -2, 310, -2, 310, 104, 107,
	0, 307, 0, 0, 0, 0, -2, 0, 308, 309,
	294, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	295, 294, 0, 0, 0, 0, 0, 0, -2, 308,
	309, 0, 0, 166, 174, 0, 278, 280, -2, 0,
	0, 96, 0, 0, 0, 226, 191, 0, 0, 88,
	0, 304, 304, 304, 0, 293, 0, 0, 175, 0,
	32, 0, 0, 37, 38, 39, 0, -2, -2, 0,
	75, 76, 0, 77, 306, 0, 287, 103, 0, 103,
	0, 261, 147, -2, -2, 0, 0, 0, 0, 0,
	0, 167, 168, 169, 170, 171, 172, 173, 130, 131,
	146, 116, 0, -2, 0, 179, 218, 0, 149, 103,
	132, 151, 0, 0, 0, 0, 294, 0, -2, 28,
	29, 0, 70, 310, 310, 0, 286, 285, 101, 0,
	0, 103, 0, 0, 192, 0, 88, -2, 196, 197,
	200, 201, 194, 195, 0, 90, 0, 87, 0, 305,
	0, 0, 85, 230, 213, -2, 211, 212, 115, 0,
	0, 0, 0, 176, 291, -2, 0, 310, 223, 108,
	0, 0, 310, 0, 228, 310, 0, 0, 0, 261,
	-2, 0, 152, 153, 294, 156, -2, 160, 163, 177,
	0, 0, 180, -2, 0, 233, 0, 294, 0, 103,
	158, 103, 162, 103, 165, 0, 0, 4, 294, 66,
	67, -2, 78, 0, -2, 95, 135, 141, -2, 140,
	0, 0, 236, 86, 240, 0, 115, 227, 193, 242,
	0, -2, 298, 0, 0, 297, 301, 302, 303, 198,
	0, 88, 92, 0, -2, 80, 83, 81, 82, 0,
	0, 0, 0, 251, 0, 247, 256, 0, 0, 310,
	74, 103, 0, 36, 41, 0, 43, 0, 0, 0,
	0, 260, 262, 294, 0, 0, 0, 0, 0, 215,
	-2, 0, 0, 0, 133, 0, 0, 53, 0, 310,
	-2, 0, -2, 97, 99, 0, 0, 137, 142, 143,
	234, 0, 220, 88, 0, 0, 0, 0, 298, 0,
	299, 0, 225, 199, 243, 79, 0, 0, 231, 214,
	175, 0, 244, 245, 252, 253, 0, 0, 0, 249,
	0, 0, 0, 40, 0, 0, 103, 229, -2, 0,
	310, 0, -2, 154, 95, 0, 0, 0, -2, 155,
	157, 0, 161, 164, 54, 57, 265, -2, 0, 98,
	100, 136, 0, 103, 0, 238, 241, -2, 207, 0,
	0, 0, 206, -2, 91, 0, 176, 254, 255, 251,
	0, -2, 257, 258, 105, 0, 310, 0, -2, 26,
	27, 0, 0, 310, 0, -2, 55, 310, 259, 182,
	184, 95, 0, 134, 0, 265, -2, 0, 310, 138,
	144, 145, 0, 237, 221, 202, 0, 0, 203, 0,
	207, 189, 0, 246, 250, 103, 42, 310, 6, 294,
	294, 0, 64, -2, 0, 0, 56, 183, 185, 0,
	0, 264, 266, 294, 58, 235, -2, 0, 205, 204,
	0, 94, 0, 189, 0, 44, -2, -2, 0, 65,
	310, 310, 0, -2, 0, 186, 188, 0, 0, 106,
	269, 0, -2, 30, 31, 0, 73, 0, 45, 68,
	310, 263, 209, 190, 187, 0, 269, -2, 0, 0,
	0, 8, 294, -2, 69, 0, 0, 270, 294, 268,
	310, -2, 0, 310, 0, -2, 62, 273, -2, 0,
	60, 310, 267, -2, 0, 0, 0, 273, -2, 0,
	310, 61, 294, 294, 0, 0, 0, 272, 274, 294,
	63, -2, -2, 0, 310, 0, -2, 0, -2, 0,
	71, 310, 271, 294, -2, 72, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 119, 3, 3,
	120, 121, 117, 115, 122, 116, 123, 118, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 124,
	3, 114,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:178
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:183
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:190
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:195
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:202
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:207
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:214
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:219
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:226
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:230
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:234
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:238
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:242
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:246
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:250
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:254
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:258
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:262
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:266
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:270
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:274
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:278
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:284
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:302
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:308
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:312
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:318
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:322
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:328
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:332
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:338
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:342
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:348
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:352
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:356
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:360
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[2].identifier}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:364
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:370
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:374
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:378
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 44:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:384
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 45:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:388
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 46:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:394
		{
			yyVAL.expression = nil
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:398
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:402
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:406
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:410
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:414
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:418
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 53:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:424
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:428
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 55:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:434
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 56:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:438
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:442
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 58:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:446
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:450
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:456
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 61:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:460
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:464
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 63:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:468
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:472
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:476
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:482
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:486
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 68:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:492
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 69:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:496
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:500
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 71:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:506
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 72:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:510
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:514
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:520
		{
			yyVAL.statement = SetFlag{Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:524
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:528
		{
			yyVAL.statement = Printf{Values: yyDollar[2].expressions}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:532
		{
			yyVAL.statement = Source{FilePath: yyDollar[2].token.Literal}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:538
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 79:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:550
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:560
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:569
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:578
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:589
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:593
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:599
		{
			yyVAL.expression = SelectClause{Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:605
		{
			yyVAL.expression = nil
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:609
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:615
		{
			yyVAL.expression = nil
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:619
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:625
		{
			yyVAL.expression = nil
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:629
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 92:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:635
		{
			yyVAL.expression = nil
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:639
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 94:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:645
		{
			yyVAL.expression = nil
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:649
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 96:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:655
		{
			yyVAL.expression = nil
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:659
		{
			yyVAL.expression = LimitClause{Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:663
		{
			yyVAL.expression = LimitClause{Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:669
		{
			yyVAL.expression = nil
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:673
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:679
		{
			yyVAL.expression = nil
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:683
		{
			yyVAL.expression = OffsetClause{Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:689
		{
			yyVAL.expression = nil
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:693
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 105:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:699
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 106:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:703
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Columns: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:709
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:713
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:719
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:723
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:727
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:731
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:735
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:739
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:745
		{
			yyVAL.expression = FieldReference{Column: yyDollar[1].identifier}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:749
		{
			yyVAL.expression = FieldReference{View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:755
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:759
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:763
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:767
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:771
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:775
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:779
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:783
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:787
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:791
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:795
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:799
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:803
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:807
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:813
		{
			yyVAL.expression = RowValue{Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:817
		{
			yyVAL.expression = RowValue{Value: yyDollar[1].expression}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:823
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:827
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:833
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:837
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:843
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:847
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:853
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:857
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:863
		{
			yyVAL.token = Token{}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:867
		{
			yyVAL.token = yyDollar[1].token
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:871
		{
			yyVAL.token = yyDollar[1].token
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:877
		{
			yyVAL.token = yyDollar[1].token
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:881
		{
			yyVAL.token = yyDollar[1].token
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:887
		{
			yyVAL.expression = Subquery{Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:893
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:916
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:920
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:924
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:928
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:932
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:936
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 154:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:940
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 155:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:944
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:948
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 157:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:952
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:956
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:960
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:964
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:968
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:972
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:976
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 164:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:980
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:984
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:988
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:994
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:998
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1002
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1006
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1010
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1016
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1020
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1024
		{
			yyVAL.expression = Logic{LHS: nil, Operator: yyDollar[1].token, RHS: yyDollar[2].expression}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1030
		{
			yyVAL.expression = Function{Name: yyDollar[1].identifier.Literal}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1034
		{
			yyVAL.expression = Function{Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1040
		{
			yyVAL.expression = AggregateFunction{Name: yyDollar[1].identifier.Literal, Option: yyDollar[3].expression.(AggregateOption)}
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1044
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1050
		{
			yyVAL.expression = AggregateOption{Args: []Expression{AllColumns{}}}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1054
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{AllColumns{}}}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1058
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{yyDollar[2].expression}}
		}
	case 182:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1064
		{
			orderBy := OrderByClause{OrderBy: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Items: yyDollar[6].expressions}
			yyVAL.expression = GroupConcat{GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: orderBy}
		}
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1069
		{
			orderBy := OrderByClause{OrderBy: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Items: yyDollar[7].expressions}
			yyVAL.expression = GroupConcat{GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: orderBy}
		}
	case 184:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1074
		{
			yyVAL.expression = GroupConcat{GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: yyDollar[4].expression, SeparatorLit: yyDollar[5].token.Literal, Separator: yyDollar[6].token.Literal}
		}
	case 185:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1078
		{
			yyVAL.expression = GroupConcat{GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: yyDollar[5].expression, SeparatorLit: yyDollar[6].token.Literal, Separator: yyDollar[7].token.Literal}
		}
	case 186:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1084
		{
			yyVAL.expression = AnalyticFunction{Name: yyDollar[1].identifier.Literal, Over: yyDollar[4].token.Literal, AnalyticClause: yyDollar[6].expression.(AnalyticClause)}
		}
	case 187:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1088
		{
			yyVAL.expression = AnalyticFunction{Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1094
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1100
		{
			yyVAL.expression = nil
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1104
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1110
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1114
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, Alias: yyDollar[2].identifier}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1118
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1124
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1128
		{
			yyVAL.expression = Stdin{Stdin: yyDollar[1].token.Literal}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1134
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1138
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1142
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1146
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1150
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1154
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1160
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 203:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1164
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 204:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1168
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 205:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1172
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 206:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1176
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1182
		{
			yyVAL.expression = nil
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1190
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1196
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1200
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1204
		{
			yyVAL.expression = AllColumns{}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1210
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1214
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1220
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 216:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1226
		{
			yyVAL.expression = nil
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1230
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 218:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1236
		{
			yyVAL.expression = nil
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1240
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1246
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1250
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1256
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1260
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1266
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1270
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1276
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1280
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1286
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 229:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1290
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1296
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1300
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1306
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1310
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 234:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1316
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 235:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1320
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1324
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 237:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1328
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1334
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1340
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression.(FieldReference), Value: yyDollar[3].expression}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1346
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1350
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1356
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 243:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1361
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 244:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1368
		{
			yyVAL.expression = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 245:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1374
		{
			yyVAL.expression = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 246:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1378
		{
			yyVAL.expression = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1384
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1388
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1394
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1398
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1404
		{
			yyVAL.expression = nil
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1408
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1412
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1416
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1420
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 256:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1426
		{
			yyVAL.expression = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1430
		{
			yyVAL.expression = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 258:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1436
		{
			yyVAL.expression = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression.(FieldReference), To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1442
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1446
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 261:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1452
		{
			yyVAL.procexpr = nil
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1456
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1462
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1466
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1472
		{
			yyVAL.procexpr = nil
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1476
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1482
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1486
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1492
		{
			yyVAL.procexpr = nil
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1496
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1502
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1506
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1512
		{
			yyVAL.procexpr = nil
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1516
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1522
		{
			yyVAL.identifier = Identifier{Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1528
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1534
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1538
		{
			i := yyDollar[2].integer.Value() * -1
			yyVAL.integer = NewInteger(i)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1545
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1549
		{
			f := yyDollar[2].float.Value() * -1
			yyVAL.float = NewFloat(f)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1556
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1562
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1568
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1574
		{
			yyVAL.variable = Variable{Name: yyDollar[1].token.Literal}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1580
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1584
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1590
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1596
		{
			yyVAL.expression = VariableAssignment{Name: yyDollar[1].token.Literal}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1600
		{
			yyVAL.expression = VariableAssignment{Name: yyDollar[1].token.Literal, Value: yyDollar[3].expression}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1606
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1610
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1616
		{
			yyVAL.token = Token{}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1620
		{
			yyVAL.token = yyDollar[1].token
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1626
		{
			yyVAL.token = Token{}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1630
		{
			yyVAL.token = yyDollar[1].token
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1636
		{
			yyVAL.token = Token{}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1640
		{
			yyVAL.token = yyDollar[1].token
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1646
		{
			yyVAL.token = Token{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1650
		{
			yyVAL.token = yyDollar[1].token
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1656
		{
			yyVAL.token = Token{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1660
		{
			yyVAL.token = yyDollar[1].token
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1664
		{
			yyVAL.token = yyDollar[1].token
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1668
		{
			yyVAL.token = yyDollar[1].token
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1674
		{
			yyVAL.token = Token{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1678
		{
			yyVAL.token = yyDollar[1].token
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1684
		{
			yyVAL.token = Token{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1688
		{
			yyVAL.token = yyDollar[1].token
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1695
		{
			yyVAL.token = yyDollar[1].token
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1699
		{
			yyVAL.token = Token{Token: COMPARISON_OP, Literal: string('=')}
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1705
		{
			yyVAL.token = Token{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1709
		{
			yyVAL.token = Token{Token: ';', Literal: string(';')}
		}
	}
	goto yystack /* stack new state and value */
}
