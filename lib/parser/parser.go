//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const FUNCTION = 57447
const AGGREGATE = 57448
const BEGIN = 57449
const RETURN = 57450
const IGNORE = 57451
const WITHIN = 57452
const VAR = 57453
const TIES = 57454
const NULLS = 57455
const COUNT = 57456
const LISTAGG = 57457
const AGGREGATE_FUNCTION = 57458
const FUNCTION_WITH_ADDITIONALS = 57459
const COMPARISON_OP = 57460
const STRING_OP = 57461
const SUBSTITUTION_OP = 57462
const UMINUS = 57463
const UPLUS = 57464

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"AGGREGATE",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"TIES",
	"NULLS",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_ADDITIONALS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1802

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 123,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	75, 1,
	79, 1,
	81, 1,
	-2, 123,
	-1, 100,
	57, 103,
	58, 103,
	59, 103,
	-2, 114,
	-1, 133,
	63, 316,
	67, 316,
	68, 316,
	-2, 332,
	-1, 135,
	63, 316,
	67, 316,
	68, 316,
	-2, 332,
	-1, 141,
	75, 1,
	79, 1,
	81, 1,
	-2, 123,
	-1, 168,
	77, 250,
	-2, 316,
	-1, 178,
	81, 3,
	-2, 123,
	-1, 202,
	63, 316,
	67, 316,
	68, 316,
	-2, 257,
	-1, 217,
	63, 316,
	67, 316,
	68, 316,
	-2, 88,
	-1, 218,
	63, 316,
	67, 316,
	68, 316,
	-2, 89,
	-1, 229,
	69, 0,
	118, 0,
	125, 0,
	-2, 172,
	-1, 230,
	69, 0,
	118, 0,
	125, 0,
	-2, 174,
	-1, 269,
	75, 3,
	79, 3,
	81, 3,
	-2, 123,
	-1, 288,
	47, 318,
	49, 322,
	-2, 259,
	-1, 306,
	63, 316,
	67, 316,
	68, 316,
	-2, 243,
	-1, 320,
	63, 316,
	67, 316,
	68, 316,
	-2, 311,
	-1, 336,
	81, 1,
	-2, 123,
	-1, 342,
	69, 0,
	118, 0,
	125, 0,
	-2, 183,
	-1, 368,
	81, 3,
	-2, 123,
	-1, 369,
	81, 3,
	-2, 123,
	-1, 372,
	63, 316,
	67, 316,
	68, 316,
	-2, 119,
	-1, 376,
	63, 316,
	67, 316,
	68, 316,
	-2, 163,
	-1, 390,
	49, 322,
	-2, 318,
	-1, 403,
	63, 316,
	67, 316,
	68, 316,
	-2, 109,
	-1, 445,
	81, 254,
	-2, 316,
	-1, 456,
	75, 1,
	79, 1,
	81, 1,
	-2, 123,
	-1, 459,
	63, 316,
	67, 316,
	68, 316,
	-2, 122,
	-1, 517,
	75, 1,
	79, 1,
	81, 1,
	-2, 123,
	-1, 519,
	77, 251,
	79, 251,
	81, 251,
	-2, 316,
	-1, 529,
	75, 1,
	79, 1,
	81, 1,
	-2, 25,
	-1, 540,
	63, 316,
	67, 316,
	68, 316,
	-2, 272,
	-1, 546,
	63, 316,
	67, 316,
	68, 316,
	-2, 113,
	-1, 561,
	63, 316,
	67, 316,
	68, 316,
	-2, 63,
	-1, 566,
	81, 5,
	-2, 123,
	-1, 578,
	81, 3,
	-2, 123,
	-1, 606,
	75, 5,
	79, 5,
	81, 5,
	-2, 123,
	-1, 612,
	81, 5,
	-2, 123,
	-1, 613,
	81, 5,
	-2, 123,
	-1, 625,
	63, 316,
	67, 316,
	68, 316,
	-2, 241,
	-1, 645,
	63, 316,
	67, 316,
	68, 316,
	-2, 332,
	-1, 652,
	75, 3,
	79, 3,
	81, 3,
	-2, 123,
	-1, 665,
	75, 5,
	79, 5,
	81, 5,
	-2, 123,
	-1, 666,
	81, 7,
	-2, 123,
	-1, 690,
	75, 7,
	79, 7,
	81, 7,
	-2, 123,
	-1, 709,
	81, 5,
	-2, 123,
	-1, 715,
	81, 7,
	-2, 123,
	-1, 716,
	81, 7,
	-2, 123,
	-1, 724,
	75, 5,
	79, 5,
	81, 5,
	-2, 123,
	-1, 729,
	75, 1,
	79, 5,
	81, 5,
	-2, 123,
	-1, 732,
	75, 5,
	79, 5,
	81, 5,
	-2, 27,
	-1, 738,
	108, 23,
	-2, 21,
	-1, 743,
	81, 7,
	-2, 123,
	-1, 759,
	75, 1,
	79, 1,
	81, 1,
	-2, 123,
	-1, 760,
	81, 3,
	-2, 123,
	-1, 765,
	75, 7,
	79, 7,
	81, 7,
	-2, 123,
	-1, 767,
	108, 49,
	-2, 46,
	-1, 774,
	81, 3,
	-2, 123,
	-1, 775,
	81, 3,
	-2, 123,
	-1, 777,
	75, 1,
	79, 1,
	81, 1,
	-2, 123,
}

const yyPrivate = 57344

const yyLast = 2485

var yyAct = [...]int{

	70, 23, 688, 23, 754, 741, 98, 436, 182, 270,
	2, 707, 2, 415, 588, 654, 201, 20, 448, 268,
	501, 619, 576, 305, 496, 468, 116, 477, 288, 121,
	122, 307, 56, 373, 227, 1, 460, 47, 384, 302,
	391, 295, 389, 191, 502, 334, 284, 77, 75, 57,
	351, 112, 105, 298, 185, 289, 136, 287, 196, 146,
	73, 410, 761, 160, 294, 162, 160, 405, 154, 153,
	155, 286, 150, 145, 149, 148, 84, 115, 560, 151,
	152, 473, 537, 5, 522, 495, 157, 159, 100, 176,
	667, 161, 607, 3, 142, 3, 160, 179, 472, 150,
	285, 149, 148, 187, 187, 150, 151, 152, 378, 463,
	198, 187, 151, 152, 46, 66, 45, 49, 45, 140,
	212, 213, 143, 142, 216, 408, 159, 222, 150, 144,
	149, 148, 180, 180, 97, 151, 152, 245, 224, 225,
	114, 114, 23, 118, 171, 204, 717, 140, 705, 186,
	186, 2, 555, 158, 140, 704, 703, 199, 190, 37,
	180, 248, 702, 251, 219, 701, 394, 180, 395, 396,
	397, 392, 686, 554, 390, 678, 677, 673, 672, 23,
	276, 636, 279, 285, 599, 187, 598, 277, 285, 597,
	187, 596, 158, 187, 595, 569, 273, 309, 154, 153,
	155, 562, 559, 145, 548, 231, 106, 536, 102, 524,
	103, 523, 101, 521, 514, 511, 379, 106, 255, 510,
	250, 249, 507, 252, 253, 254, 494, 100, 454, 443,
	442, 37, 441, 426, 3, 335, 267, 440, 332, 330,
	283, 318, 247, 246, 687, 323, 257, 260, 300, 301,
	297, 393, 143, 142, 661, 660, 319, 45, 150, 144,
	149, 148, 345, 49, 244, 151, 152, 245, 689, 329,
	23, 3, 659, 658, 606, 157, 159, 657, 349, 339,
	338, 331, 635, 309, 629, 381, 187, 387, 258, 364,
	322, 398, 626, 258, 45, 187, 278, 616, 614, 432,
	414, 159, 413, 412, 411, 359, 357, 355, 325, 324,
	341, 314, 343, 344, 377, 416, 419, 387, 387, 386,
	114, 177, 108, 416, 108, 361, 428, 166, 165, 388,
	111, 427, 186, 108, 416, 429, 424, 23, 354, 159,
	383, 159, 158, 155, 205, 333, 2, 433, 140, 420,
	422, 404, 400, 406, 407, 601, 265, 565, 535, 533,
	417, 526, 3, 613, 612, 566, 663, 380, 634, 23,
	23, 437, 633, 159, 632, 159, 450, 159, 451, 38,
	387, 435, 526, 470, 208, 45, 631, 200, 457, 458,
	630, 600, 594, 656, 187, 169, 49, 467, 525, 71,
	481, 266, 170, 453, 321, 423, 46, 425, 147, 309,
	487, 764, 469, 752, 734, 67, 26, 733, 26, 419,
	728, 775, 387, 718, 712, 120, 452, 671, 471, 3,
	670, 476, 449, 475, 449, 774, 449, 207, 651, 158,
	278, 158, 482, 158, 278, 638, 617, 504, 486, 531,
	159, 480, 45, 530, 469, 449, 716, 23, 516, 209,
	210, 3, 3, 444, 309, 434, 529, 363, 715, 489,
	490, 491, 492, 387, 369, 187, 528, 38, 119, 744,
	187, 368, 710, 743, 45, 45, 709, 39, 40, 41,
	42, 43, 44, 172, 709, 377, 416, 534, 532, 256,
	387, 387, 547, 541, 543, 386, 563, 746, 545, 556,
	579, 539, 745, 538, 578, 552, 513, 337, 23, 744,
	256, 336, 352, 723, 520, 581, 580, 2, 455, 337,
	23, 579, 557, 558, 771, 763, 736, 727, 387, 2,
	675, 574, 650, 187, 572, 187, 515, 37, 38, 3,
	577, 462, 573, 197, 159, 585, 262, 26, 189, 447,
	261, 419, 93, 587, 47, 155, 762, 23, 188, 605,
	469, 591, 45, 593, 668, 181, 126, 127, 299, 23,
	194, 603, 478, 159, 602, 39, 40, 41, 42, 43,
	44, 264, 263, 187, 26, 592, 38, 544, 620, 449,
	618, 542, 418, 46, 624, 479, 37, 23, 628, 639,
	3, 236, 235, 23, 23, 646, 647, 643, 474, 371,
	586, 627, 3, 95, 233, 649, 281, 416, 232, 234,
	465, 466, 159, 45, 124, 125, 128, 129, 346, 680,
	653, 347, 348, 485, 282, 45, 193, 194, 195, 604,
	484, 662, 575, 23, 402, 362, 39, 40, 41, 42,
	43, 44, 449, 183, 679, 505, 23, 23, 695, 696,
	503, 3, 676, 681, 682, 683, 684, 685, 110, 315,
	316, 109, 45, 139, 570, 26, 61, 10, 317, 10,
	328, 23, 583, 584, 45, 568, 711, 700, 648, 497,
	498, 499, 500, 706, 39, 40, 41, 42, 43, 44,
	23, 394, 720, 395, 396, 397, 23, 23, 567, 722,
	719, 509, 45, 409, 184, 23, 642, 296, 45, 45,
	23, 192, 737, 23, 132, 639, 742, 46, 394, 2,
	395, 396, 397, 392, 23, 3, 390, 751, 753, 134,
	138, 113, 26, 76, 202, 74, 72, 708, 8, 385,
	23, 23, 768, 769, 573, 7, 23, 6, 45, 2,
	350, 167, 55, 96, 63, 23, 23, 303, 23, 304,
	291, 45, 45, 290, 26, 26, 655, 529, 82, 133,
	62, 135, 65, 58, 457, 458, 64, 528, 488, 59,
	582, 464, 493, 48, 375, 374, 45, 137, 370, 280,
	50, 51, 52, 53, 54, 483, 401, 104, 16, 38,
	68, 123, 738, 99, 156, 45, 14, 13, 10, 12,
	117, 45, 45, 163, 164, 130, 131, 399, 168, 9,
	45, 174, 175, 15, 11, 45, 692, 271, 45, 608,
	4, 690, 738, 738, 269, 0, 750, 0, 0, 45,
	0, 0, 0, 694, 0, 10, 0, 738, 738, 0,
	738, 0, 26, 0, 0, 45, 45, 549, 550, 551,
	553, 45, 0, 217, 218, 0, 0, 694, 0, 0,
	45, 45, 0, 45, 0, 226, 0, 228, 229, 230,
	0, 0, 0, 237, 238, 239, 240, 241, 242, 243,
	0, 0, 694, 694, 0, 0, 203, 0, 0, 206,
	0, 694, 211, 0, 461, 214, 215, 39, 40, 41,
	42, 43, 44, 26, 0, 0, 0, 220, 221, 223,
	694, 691, 154, 153, 155, 26, 0, 145, 0, 0,
	462, 306, 0, 0, 0, 0, 10, 767, 0, 713,
	320, 0, 694, 0, 0, 691, 0, 0, 0, 0,
	0, 767, 767, 0, 767, 38, 0, 0, 0, 0,
	0, 0, 26, 0, 725, 726, 0, 340, 0, 342,
	691, 691, 0, 731, 26, 188, 143, 142, 0, 732,
	0, 0, 150, 144, 149, 148, 0, 0, 0, 151,
	152, 353, 755, 0, 0, 0, 326, 327, 691, 0,
	0, 0, 26, 10, 0, 0, 0, 365, 26, 26,
	0, 0, 0, 0, 772, 691, 372, 376, 0, 0,
	691, 38, 0, 725, 726, 0, 731, 0, 0, 691,
	691, 403, 732, 0, 0, 10, 10, 0, 0, 382,
	154, 153, 155, 0, 0, 145, 0, 0, 26, 0,
	0, 90, 91, 92, 777, 93, 94, 0, 366, 367,
	0, 26, 26, 39, 40, 41, 42, 43, 44, 0,
	0, 0, 438, 0, 0, 0, 0, 0, 38, 90,
	91, 92, 0, 93, 94, 46, 26, 445, 0, 0,
	0, 0, 0, 0, 143, 142, 0, 0, 71, 0,
	150, 144, 149, 148, 0, 26, 459, 151, 152, 0,
	0, 26, 26, 430, 431, 0, 95, 0, 0, 0,
	26, 0, 0, 10, 0, 26, 0, 0, 26, 39,
	40, 41, 42, 43, 44, 0, 85, 0, 60, 26,
	86, 0, 0, 306, 95, 0, 0, 83, 0, 0,
	0, 0, 0, 38, 0, 26, 26, 88, 0, 107,
	46, 26, 0, 0, 0, 33, 0, 0, 0, 0,
	26, 26, 0, 26, 518, 21, 0, 0, 22, 0,
	0, 519, 0, 0, 10, 0, 39, 40, 81, 89,
	80, 44, 0, 0, 0, 0, 10, 49, 376, 0,
	78, 79, 87, 69, 0, 0, 0, 506, 540, 508,
	0, 0, 0, 512, 0, 154, 153, 155, 0, 546,
	145, 37, 0, 766, 173, 740, 0, 0, 0, 765,
	0, 25, 0, 10, 30, 28, 29, 27, 561, 527,
	0, 0, 0, 0, 0, 10, 31, 32, 274, 275,
	19, 34, 35, 36, 0, 0, 0, 611, 38, 0,
	24, 39, 40, 41, 42, 43, 44, 0, 0, 143,
	142, 0, 0, 10, 0, 150, 144, 149, 148, 10,
	10, 0, 151, 152, 0, 0, 0, 154, 153, 155,
	0, 564, 145, 0, 0, 0, 38, 0, 107, 571,
	0, 0, 0, 760, 0, 0, 0, 0, 259, 259,
	0, 0, 0, 0, 621, 292, 188, 0, 0, 10,
	0, 0, 0, 0, 625, 0, 0, 0, 293, 0,
	0, 293, 10, 10, 0, 0, 0, 0, 38, 0,
	0, 143, 142, 0, 640, 641, 645, 150, 144, 149,
	148, 0, 0, 0, 151, 152, 615, 10, 71, 155,
	0, 0, 145, 0, 622, 623, 39, 40, 41, 42,
	43, 44, 259, 0, 259, 259, 10, 0, 38, 0,
	91, 0, 10, 10, 0, 0, 0, 0, 637, 0,
	0, 10, 0, 0, 0, 644, 10, 0, 0, 10,
	259, 356, 358, 360, 39, 40, 41, 42, 43, 44,
	10, 143, 142, 0, 0, 0, 0, 150, 144, 149,
	148, 108, 664, 0, 151, 152, 10, 10, 714, 669,
	0, 0, 10, 293, 674, 0, 0, 107, 0, 107,
	107, 10, 10, 0, 10, 721, 39, 40, 41, 42,
	43, 44, 0, 0, 697, 698, 0, 0, 0, 699,
	0, 0, 0, 421, 0, 38, 90, 91, 92, 0,
	93, 94, 46, 0, 748, 749, 0, 0, 0, 756,
	0, 0, 0, 0, 0, 71, 39, 40, 41, 42,
	43, 44, 0, 0, 259, 0, 259, 0, 259, 0,
	0, 773, 0, 0, 0, 0, 0, 730, 0, 0,
	0, 735, 0, 0, 0, 0, 0, 259, 0, 0,
	747, 0, 0, 85, 0, 0, 0, 86, 0, 757,
	758, 95, 293, 394, 83, 395, 396, 397, 392, 589,
	590, 390, 0, 0, 88, 0, 0, 770, 0, 0,
	0, 0, 0, 0, 0, 776, 0, 0, 0, 0,
	0, 0, 38, 90, 91, 92, 0, 93, 94, 46,
	0, 0, 0, 39, 40, 81, 89, 80, 44, 0,
	0, 0, 71, 0, 0, 308, 259, 78, 79, 87,
	69, 0, 0, 0, 0, 0, 0, 38, 90, 91,
	92, 0, 93, 94, 46, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 0, 0, 0, 71, 293, 0,
	85, 0, 0, 0, 86, 0, 0, 0, 95, 197,
	0, 83, 38, 90, 91, 92, 0, 93, 94, 46,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 85, 0, 0, 0, 86,
	0, 259, 0, 95, 0, 0, 83, 0, 0, 0,
	39, 40, 81, 89, 80, 44, 88, 0, 0, 0,
	0, 293, 0, 293, 78, 79, 87, 69, 0, 0,
	85, 0, 0, 0, 86, 0, 0, 0, 95, 0,
	37, 83, 0, 0, 0, 39, 40, 311, 312, 310,
	313, 88, 0, 0, 0, 0, 0, 308, 0, 78,
	79, 87, 69, 0, 259, 0, 0, 38, 90, 91,
	92, 293, 93, 94, 46, 0, 0, 0, 0, 0,
	39, 40, 81, 89, 80, 44, 0, 71, 154, 153,
	155, 0, 0, 145, 78, 79, 87, 69, 0, 0,
	0, 0, 38, 90, 91, 92, 0, 93, 94, 46,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 71, 0, 0, 85, 0, 0, 0, 86,
	0, 0, 0, 95, 0, 0, 83, 0, 0, 154,
	153, 155, 143, 142, 145, 0, 88, 49, 150, 144,
	149, 148, 0, 759, 0, 151, 152, 0, 0, 0,
	85, 0, 38, 0, 86, 0, 0, 0, 95, 46,
	0, 83, 0, 0, 33, 39, 40, 81, 89, 80,
	44, 88, 0, 0, 21, 0, 0, 22, 0, 78,
	79, 87, 69, 143, 142, 0, 0, 0, 0, 150,
	144, 149, 148, 0, 0, 0, 151, 152, 0, 0,
	39, 40, 311, 312, 310, 313, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 87, 69, 0, 0,
	37, 0, 693, 0, 610, 0, 154, 153, 155, 0,
	25, 145, 0, 30, 28, 29, 27, 0, 0, 0,
	729, 0, 0, 0, 0, 31, 32, 274, 275, 0,
	34, 35, 36, 154, 153, 155, 611, 0, 145, 24,
	39, 40, 41, 42, 43, 44, 0, 724, 0, 0,
	38, 0, 0, 0, 0, 0, 0, 46, 0, 0,
	143, 142, 33, 0, 0, 0, 150, 144, 149, 148,
	0, 0, 21, 151, 152, 22, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 143, 142, 0,
	0, 0, 0, 150, 144, 149, 148, 0, 0, 0,
	151, 152, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 154, 153, 155, 0, 0, 145, 0, 37, 0,
	272, 0, 18, 0, 0, 0, 0, 666, 25, 0,
	0, 30, 28, 29, 27, 0, 0, 154, 153, 155,
	0, 0, 145, 31, 32, 274, 275, 19, 34, 35,
	36, 665, 0, 0, 0, 0, 0, 24, 39, 40,
	41, 42, 43, 44, 0, 143, 142, 0, 0, 0,
	0, 150, 144, 149, 148, 154, 153, 155, 151, 152,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 652,
	0, 143, 142, 0, 0, 0, 0, 150, 144, 149,
	148, 154, 153, 155, 151, 152, 145, 0, 0, 0,
	0, 154, 153, 155, 0, 517, 145, 0, 0, 0,
	0, 0, 0, 0, 0, 456, 154, 153, 155, 143,
	142, 145, 0, 0, 0, 150, 144, 149, 148, 0,
	446, 0, 151, 152, 154, 153, 155, 0, 0, 145,
	0, 0, 0, 0, 0, 143, 142, 0, 0, 0,
	178, 150, 144, 149, 148, 143, 142, 0, 151, 152,
	0, 150, 144, 149, 148, 0, 0, 0, 151, 152,
	143, 142, 0, 0, 0, 0, 150, 144, 149, 148,
	0, 0, 0, 151, 152, 154, 153, 155, 143, 142,
	145, 38, 0, 0, 150, 144, 149, 148, 46, 141,
	0, 151, 152, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 21, 0, 0, 22, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 143,
	142, 0, 0, 0, 0, 150, 144, 149, 148, 0,
	0, 0, 151, 152, 0, 154, 153, 155, 0, 37,
	145, 739, 0, 740, 0, 439, 153, 155, 0, 25,
	145, 38, 30, 28, 29, 27, 0, 0, 46, 0,
	0, 0, 0, 33, 31, 32, 0, 0, 19, 34,
	35, 36, 0, 21, 0, 611, 22, 0, 24, 39,
	40, 41, 42, 43, 44, 0, 0, 0, 0, 143,
	142, 0, 0, 0, 0, 150, 144, 149, 148, 143,
	142, 0, 151, 152, 0, 150, 144, 149, 148, 0,
	0, 0, 151, 152, 0, 38, 0, 0, 0, 37,
	0, 609, 46, 610, 0, 0, 0, 33, 0, 25,
	0, 0, 30, 28, 29, 27, 0, 21, 0, 0,
	22, 0, 0, 0, 31, 32, 0, 0, 0, 34,
	35, 36, 0, 0, 0, 611, 0, 0, 24, 39,
	40, 41, 42, 43, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 154, 0, 155, 0,
	0, 145, 0, 37, 0, 17, 0, 18, 0, 0,
	0, 0, 0, 25, 0, 0, 30, 28, 29, 27,
	0, 0, 0, 0, 0, 0, 0, 0, 31, 32,
	0, 0, 19, 34, 35, 36, 0, 0, 0, 0,
	0, 0, 24, 39, 40, 41, 42, 43, 44, 0,
	143, 142, 0, 0, 0, 0, 150, 144, 149, 148,
	0, 0, 0, 151, 152,
}
var yyPact = [...]int{

	2351, -1000, 2351, -1000, -1000, 140, 140, 140, 140, 140,
	140, -1000, -1000, -1000, -1000, -1000, -1000, 1743, 1743, 140,
	193, 651, 648, 201, 726, 592, 140, 395, 1274, 1274,
	545, 140, 140, 722, 1743, 744, 1743, 658, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 228, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2141, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 228, -1000, -1000, 1648,
	-38, -69, -1000, -1000, -1000, -1000, -1000, -1000, 1743, 1743,
	199, 198, -1000, 1743, 277, 195, 1743, 1743, 1274, 192,
	-1000, -1000, -1000, -1000, -1000, -1000, 2090, 34, 512, -1000,
	625, 704, 971, 544, 717, 589, 482, -1000, 475, 1274,
	971, 1743, 140, 12, 224, 140, 354, -1000, 140, 1274,
	1274, 140, 140, 1274, -1000, -1000, -1000, -1000, 1743, 1743,
	-1000, -1000, 39, 1704, -6, 1704, -1000, 5, 1274, -1000,
	1743, 2351, 1743, 1743, 1743, 499, 561, 551, 1743, 1743,
	1743, 1743, 1743, 1743, 1743, -1000, 134, 113, 112, 204,
	1394, 1578, 1394, -1000, -1000, 482, 482, 422, 2211, 164,
	164, 493, 531, -1000, 1313, -1000, 287, 482, 1956, 1274,
	726, 1274, 582, 603, 971, 55, -1000, -1000, -1000, 1312,
	50, 709, 1312, 518, 518, 518, 1613, -1000, 182, 652,
	111, -1000, 4, -1000, 726, 1743, -1000, 320, 161, 180,
	179, -1000, 140, 140, -1000, -1000, 670, 2211, 2211, 1066,
	-1000, -1000, 1743, -1000, 658, 216, 2211, 442, -52, -25,
	-25, 553, 1743, 164, 1743, 164, 164, -19, -19, -1000,
	-1000, -1000, 2352, 1313, -1000, 1743, -1000, -1000, -1000, -1000,
	1743, -1000, -1000, 1743, 1481, 443, 1743, -1000, 1648, -1000,
	-1000, 164, 178, 177, 176, 499, -1000, 1743, 386, 1956,
	-1000, -1000, 1743, -1000, 140, 140, 401, -1000, 0, 394,
	574, 1743, 1778, 87, 1037, 971, 375, 709, 118, -1000,
	815, -1000, -1000, -1000, 1312, 615, 1743, -1000, 204, -1000,
	204, 204, -1000, -8, 701, -1000, 2211, -1000, -1000, -68,
	175, 174, 173, 171, 1274, 473, 1354, 375, -1000, -1000,
	2211, 475, 1274, 475, 103, 1274, -1000, -1000, 726, 140,
	140, -1000, 170, 1274, 384, 442, 2351, 1743, -1000, -1000,
	2221, -1000, -25, -1000, -1000, -1000, 107, 102, 100, 99,
	382, 422, 1743, 2072, 495, 159, -1000, 159, -1000, 159,
	-1000, 340, 98, 452, -1000, 2057, -1000, -1000, 1956, 1956,
	-1000, 1743, 878, -1000, -24, 588, 2211, -1000, 164, 375,
	-1000, -1000, 1274, -33, 717, -35, -44, -71, -1000, 571,
	663, 533, 558, 1312, -1000, -1000, -1000, -1000, -1000, 1274,
	709, 610, 602, 2211, 522, -1000, -1000, 522, 1613, 1274,
	1578, 482, 482, 482, 1743, 96, -48, 668, 1274, 635,
	-1000, 375, 628, 140, 92, 140, 699, 89, 85, 140,
	-1000, -1000, 475, 84, 472, 377, 454, -1000, 2047, 1743,
	-1000, -1000, -1000, -1000, -1000, 2211, 1743, 164, 83, -49,
	81, 79, -1000, 305, 251, 140, 1956, 372, 368, 2211,
	-1000, 479, 247, 1778, 245, -1000, -1000, -1000, 77, -51,
	-1000, 709, 375, 1743, 1312, 554, 533, 550, -1000, 1312,
	-1000, -1000, -1000, -1000, 1743, 1743, -1000, -1000, 74, 1743,
	1743, 1481, 1743, 43, -1000, 1274, -1000, -1000, -1000, 375,
	375, 72, -55, 1743, 71, 1274, -1000, 273, -1000, 258,
	696, 673, -1000, 65, 662, 140, 470, 2351, 1313, 2211,
	-1000, -1000, 164, -1000, -1000, -1000, 613, -1000, 435, 2351,
	450, 449, -1000, -1000, -1000, 661, 534, 375, -1000, -1000,
	2211, 1505, 1312, 548, 1312, 690, 2211, -1000, 296, 64,
	61, 59, 56, 54, 295, 242, -1000, -1000, -1000, 668,
	1274, 2211, -1000, -1000, -1000, 475, 2287, 257, 256, -1000,
	169, -1000, 140, -1000, -1000, 168, 365, 435, 1956, 1743,
	140, 140, -1000, -1000, -1000, 164, -1000, -1000, -1000, 1743,
	163, 690, 1312, 1505, 155, 294, 290, 278, 276, 272,
	153, 51, -1000, -1000, 140, 364, 2287, -1000, -1000, 1743,
	1743, 1094, 2287, 2287, 475, -1000, 625, 468, 357, 456,
	-1000, 2021, -1000, -1000, -1000, 2211, 1274, 690, -1000, 298,
	148, 144, 143, 126, 125, 298, 270, -1000, 140, -1000,
	1983, 1957, 27, 511, -1000, 1704, 349, 346, 48, 47,
	140, 466, 1956, 46, 45, 625, 598, 298, 298, 298,
	298, 298, 42, 115, -1000, 2287, 1838, 1274, 1274, -1000,
	140, 140, -1000, -1000, -1000, 140, -1000, -1000, -1000, -1000,
	1743, 35, 32, 26, 25, 18, -1000, 298, 407, 343,
	1838, -1000, -1000, 1743, -1000, 388, 376, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 16, 342, 415, 2287,
	1743, 454, 447, -1000, 1879, 1838, 1838, -1000, 463, 339,
	-1000, 1852, 454, 140, 1838, 336, 333, 140, 462, 2207,
	-1000, 404, 2287, 436, 431, -1000, 140, -1000, -1000, 1743,
	1743, 332, 404, 1838, 1743, 140, 140, -1000, 1755, 1243,
	-1, 503, 461, 330, 444, -1000, 1171, -1000, -1000, 2207,
	1169, 1274, 1274, 140, 460, 1838, 1743, -1000, 355, 341,
	-1000, 140, -1000, 996, 1169, 1169, -1000, 1169,
}
var yyPgo = [...]int{

	0, 34, 19, 2, 268, 92, 9, 274, 854, 851,
	850, 849, 196, 847, 846, 844, 843, 839, 44, 20,
	24, 829, 827, 826, 821, 820, 818, 83, 67, 52,
	817, 43, 41, 816, 815, 8, 809, 36, 808, 17,
	807, 56, 49, 32, 754, 23, 76, 18, 33, 805,
	804, 801, 800, 1158, 799, 796, 793, 792, 387, 686,
	790, 788, 31, 15, 786, 46, 55, 783, 28, 780,
	14, 779, 777, 774, 771, 50, 770, 25, 16, 57,
	54, 13, 39, 767, 765, 759, 38, 758, 7, 45,
	21, 22, 757, 11, 4, 5, 0, 756, 60, 755,
	48, 753, 47, 115, 6, 415, 751, 51, 58, 59,
	42, 27, 40, 53, 750, 408, 803,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 7, 7, 8, 8, 9, 9, 10,
	10, 10, 10, 10, 10, 11, 11, 11, 11, 11,
	11, 11, 12, 12, 13, 13, 13, 14, 14, 14,
	15, 15, 15, 15, 16, 16, 17, 17, 17, 17,
	17, 17, 18, 18, 19, 19, 20, 20, 20, 20,
	20, 21, 21, 21, 21, 21, 22, 22, 22, 22,
	23, 23, 23, 24, 24, 24, 24, 24, 24, 24,
	25, 25, 25, 26, 26, 26, 26, 26, 27, 28,
	28, 28, 28, 29, 29, 30, 31, 31, 32, 32,
	33, 33, 34, 34, 35, 35, 36, 36, 36, 37,
	37, 38, 38, 39, 39, 40, 40, 41, 41, 42,
	42, 42, 42, 42, 42, 43, 43, 43, 43, 43,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 45, 46, 46, 47, 47, 48,
	48, 49, 49, 50, 50, 51, 51, 51, 52, 52,
	53, 54, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 55, 55, 55, 55, 55, 55, 55, 55, 55,
	55, 56, 56, 56, 56, 56, 56, 56, 57, 57,
	57, 57, 58, 58, 59, 60, 60, 60, 60, 60,
	61, 61, 62, 62, 62, 62, 62, 62, 62, 62,
	63, 64, 64, 65, 65, 66, 66, 66, 67, 68,
	68, 68, 68, 68, 68, 69, 69, 69, 69, 69,
	70, 70, 70, 71, 71, 72, 72, 72, 73, 74,
	74, 75, 75, 76, 76, 77, 77, 78, 78, 79,
	79, 80, 80, 81, 81, 82, 82, 83, 83, 83,
	83, 84, 85, 86, 86, 87, 87, 88, 88, 89,
	89, 90, 90, 91, 91, 92, 92, 93, 93, 94,
	94, 95, 95, 96, 96, 96, 96, 96, 96, 96,
	97, 98, 99, 100, 101, 102, 103, 104, 104, 105,
	106, 106, 107, 107, 108, 108, 109, 109, 110, 110,
	111, 111, 112, 112, 112, 112, 113, 113, 114, 114,
	115, 115, 116, 116,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	9, 7, 9, 9, 2, 8, 9, 7, 9, 9,
	2, 3, 2, 2, 8, 9, 1, 8, 9, 1,
	3, 3, 2, 3, 2, 2, 6, 6, 8, 5,
	7, 7, 1, 3, 1, 3, 0, 1, 1, 2,
	2, 6, 3, 3, 4, 6, 7, 9, 6, 4,
	10, 11, 11, 0, 1, 1, 1, 1, 2, 2,
	5, 6, 3, 5, 3, 3, 5, 3, 5, 5,
	4, 4, 4, 1, 1, 3, 0, 2, 0, 2,
	0, 3, 0, 2, 0, 3, 0, 3, 4, 0,
	2, 0, 2, 0, 2, 6, 9, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 3, 1,
	3, 2, 4, 1, 1, 0, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 4, 4, 6, 6,
	4, 6, 4, 4, 4, 6, 4, 4, 6, 4,
	2, 3, 3, 3, 3, 3, 2, 2, 3, 3,
	2, 2, 0, 1, 4, 5, 5, 5, 5, 1,
	5, 10, 8, 9, 9, 9, 9, 9, 8, 10,
	2, 0, 3, 1, 1, 1, 2, 3, 1, 1,
	1, 2, 3, 1, 1, 5, 5, 6, 6, 4,
	0, 2, 4, 1, 1, 1, 3, 1, 5, 0,
	1, 4, 2, 0, 2, 1, 3, 1, 3, 1,
	3, 1, 3, 1, 3, 1, 3, 6, 9, 5,
	8, 7, 3, 1, 3, 5, 6, 4, 2, 0,
	2, 4, 2, 0, 2, 4, 2, 0, 2, 4,
	2, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	1, 3, 1, 3, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 1, 1, 1, 0, 1, 0, 1,
	1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -10, -27, -83, -84, -87, -17,
	-59, -15, -21, -22, -23, -16, -26, 74, 76, 101,
	-39, 26, 29, -96, 111, 82, -105, 88, 86, 87,
	85, 97, 98, 16, 102, 103, 104, 72, 4, 112,
	113, 114, 115, 116, 117, -103, 11, -1, -116, 123,
	-116, -116, -116, -116, -116, -44, -43, -42, -56, -54,
	-53, -59, -60, -73, -55, -57, -103, -105, -25, 129,
	-96, 24, -97, -98, -99, -100, -101, -102, 126, 127,
	116, 114, -61, 73, -46, 62, 66, 128, 83, 115,
	5, 6, 7, 9, 10, 70, -44, -103, -104, -116,
	-28, 19, 15, 17, -30, -29, 13, -53, 129, 30,
	30, 129, -107, -106, -103, -107, -96, -116, -103, 83,
	30, -96, -96, -24, 89, 90, 31, 32, 91, 92,
	-116, -116, 12, -44, 5, -44, -41, -40, -114, 25,
	120, 78, 119, 118, 125, 69, -109, -115, 127, 126,
	124, 131, 132, 65, 64, 66, -44, -78, -27, -39,
	134, 129, 134, -44, -44, 129, 129, -74, -44, 118,
	125, -109, -115, -53, -44, -44, -96, 129, 80, 63,
	133, 63, -35, 38, 20, -80, -65, -96, 24, 14,
	-80, -31, 14, 57, 58, 59, -108, 71, -96, -65,
	-58, -78, -44, -116, 133, 120, -116, 83, 30, 105,
	106, -116, -96, -96, -116, -116, -96, -44, -44, 125,
	-116, -116, 133, -116, 133, -96, -44, -1, -44, -44,
	-44, -109, 67, 63, 68, 61, 60, -44, -44, -44,
	-44, -44, -44, -44, 130, 133, 130, 130, -96, -98,
	-108, -96, -98, -108, -108, -75, 77, -46, 129, -53,
	-46, 67, 63, 61, 60, 69, 114, -108, -2, -8,
	-6, -13, 74, -12, 99, 100, -96, -104, -103, -96,
	-36, 44, 41, -66, -65, 133, 16, -79, -68, -66,
	-67, -69, 23, -53, 14, -32, 18, -79, -113, 60,
	-113, -113, -82, -72, -71, -45, -44, -62, 124, -96,
	116, 114, 115, 117, 129, 27, 28, 36, 130, -107,
	-44, 84, 129, 84, 129, 129, -116, -116, 20, -42,
	-78, -41, 22, 129, -89, -88, 79, 75, -100, -102,
	-44, -46, -44, -46, -46, -78, -58, -58, -58, -45,
	-76, -75, 79, -44, -46, 129, -53, 129, -53, 129,
	-53, -109, -58, 81, -2, -44, -116, -116, 80, 80,
	-38, 45, -44, -48, -49, -50, -44, -62, 21, 129,
	-27, -96, 22, -80, -86, -85, -43, -96, -32, -110,
	56, -112, 53, 133, 48, 50, 51, 52, -96, 22,
	-79, -33, 39, -44, -29, -28, -29, -29, 133, 22,
	129, 129, 129, 129, 129, -81, -96, -18, 129, -96,
	-43, 129, -43, -27, -81, -27, 130, -104, -96, -104,
	-116, -116, 129, -81, 81, -89, -88, -1, -44, 64,
	130, 130, 130, 130, 81, -44, 78, 64, -47, -46,
	-47, -47, 86, 63, 130, 76, 78, -2, -2, -44,
	-37, 46, 72, 133, -51, 42, 43, -47, -77, -43,
	-96, -31, 133, 125, 47, -110, -112, -111, 49, 47,
	-79, -96, -32, -34, 40, 41, -82, -96, -58, -108,
	-108, -108, -108, -58, 130, 133, -20, 31, 32, 33,
	34, -19, -18, 35, -77, 37, -116, 130, -116, 22,
	130, 130, -116, -27, 130, 74, 81, 78, -44, -44,
	-46, 130, 133, 130, 130, 93, 110, -116, -2, -6,
	81, 81, -37, 112, -48, 113, 130, 133, -32, -86,
	-44, -68, 47, -111, 47, -68, -44, -78, 130, -58,
	-58, -58, -45, -58, 130, 109, -81, -43, -43, 130,
	133, -44, 130, -96, -116, 84, 107, 22, 22, 130,
	22, -116, 74, -1, -47, 39, -91, -90, 79, 75,
	76, 76, -52, 31, 32, 21, -27, -77, -70, 54,
	55, -68, 47, -68, 96, 130, 130, 130, 130, 130,
	96, 113, -20, -19, -27, -3, -7, -5, -11, 74,
	76, 108, 107, 107, 129, -116, 129, 81, -91, -90,
	-2, -44, -116, -116, -47, -44, 129, -68, -70, 129,
	96, 96, 96, 96, 96, 129, 130, -116, 81, -3,
	-44, -44, -103, -104, -116, -44, -3, -3, -27, -35,
	74, 81, 78, -81, -63, -64, 95, 129, 129, 129,
	129, 129, -63, 96, -116, 78, 80, 63, 63, -116,
	81, 81, 130, 130, -116, 74, -2, 130, 130, -35,
	41, -63, -63, -63, -63, -63, 130, 129, -3, -4,
	-9, -7, -14, 74, -12, -96, -96, -116, -116, -116,
	-78, 130, 130, 130, 130, 130, -63, -93, -92, 79,
	75, -88, 81, -4, -44, 80, 80, 130, 81, -93,
	-3, -44, -88, 76, 78, -4, -4, 74, 81, 78,
	-116, -4, -7, 81, 81, -116, 74, -3, -5, 74,
	76, -95, -94, 79, 75, 76, 76, -116, -44, -44,
	-103, -104, 81, -95, -94, -4, -44, -116, -116, 78,
	80, 63, 63, 74, 81, 78, 74, -12, -96, -96,
	-116, 74, -4, -44, 80, 80, -116, 78,
}
var yyDef = [...]int{

	-2, -2, -2, 21, 22, 332, 332, 332, 332, 332,
	332, 15, 16, 17, 18, 19, 20, 0, 0, 332,
	0, 0, 0, 0, 0, 0, 332, 0, 0, 0,
	83, 332, 332, 0, 0, 0, 0, 328, 293, 294,
	295, 296, 297, 298, 299, 0, 306, 2, 9, 333,
	10, 11, 12, 13, 14, 316, 140, 141, 142, 143,
	144, 145, 146, 147, 148, 149, 150, 151, 152, 123,
	135, 0, 129, 130, 131, 132, 133, 134, 0, 0,
	298, 296, 209, 249, 316, 0, 0, 0, 0, 297,
	300, 301, 302, 303, 304, 305, 316, 150, 0, 34,
	-2, 0, 0, 0, 106, 0, 314, 104, 123, 0,
	0, 202, 332, 312, 310, 332, 0, 52, 332, 0,
	0, 332, 332, 0, 84, 85, 86, 87, 0, 0,
	54, 55, 0, -2, 332, -2, 124, 127, 0, 329,
	0, -2, 0, 330, 331, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 317, 316, 0, 0, 0,
	0, 202, 0, 196, 197, 314, 314, 0, -2, 330,
	331, 0, 0, 190, 200, 201, 0, 314, -2, 0,
	0, 0, 116, 0, 0, 0, 261, 223, 224, 0,
	0, 108, 0, 326, 326, 326, 0, 315, 0, 0,
	0, 203, -2, 50, 0, 0, 51, 0, 0, 0,
	0, 53, 332, 332, 72, 73, 0, -2, -2, 0,
	94, 95, 0, 97, 328, 0, 309, 279, 171, -2,
	-2, 0, 0, 0, 0, 0, 0, 191, 192, 193,
	194, 195, 198, 199, 153, 0, 155, 170, 136, 138,
	202, 137, 139, 202, 202, 253, 0, 173, 123, 156,
	175, 0, 0, 0, 0, 316, 92, 202, 0, -2,
	25, 26, 0, 46, 332, 332, 0, 308, 307, 0,
	121, 0, 0, 123, 225, 0, 0, 108, -2, 229,
	230, 233, 234, 228, 0, 110, 0, 107, 0, 327,
	0, 0, 105, 265, 245, 247, -2, 244, 154, 135,
	298, 296, 297, 299, 0, 0, 0, 0, 204, 313,
	-2, 123, 0, 123, 0, 0, 74, 79, 0, 332,
	332, 128, 0, 0, 0, 279, -2, 0, 176, 177,
	316, 180, -2, 184, 187, 258, 0, 0, 0, 0,
	0, 252, 0, 316, 0, 123, 182, 123, 186, 123,
	189, 0, 0, 0, 4, 316, 42, 43, -2, -2,
	98, 0, -2, 115, 159, 165, -2, 164, 0, 0,
	269, 226, 0, 262, 106, 273, 0, 135, 275, 0,
	-2, 320, 0, 0, 319, 323, 324, 325, 231, 0,
	108, 112, 0, -2, 100, 103, 101, 102, 0, 0,
	202, 314, 314, 314, 202, 0, 263, 66, 0, 62,
	59, 0, 0, 332, 0, 332, 0, 0, 0, 332,
	93, 96, 123, 0, 0, 0, 278, 280, 316, 0,
	205, 206, 207, 208, 248, -2, 0, 0, 0, 157,
	0, 0, 90, 0, 210, 332, -2, 0, 0, -2,
	117, 119, 0, 0, 161, 166, 167, 267, 0, 255,
	227, 108, 0, 0, 0, 0, 320, 0, 321, 0,
	260, 232, 276, 99, 0, 0, 266, 246, 0, 202,
	202, 202, 202, 0, 56, 0, 57, 67, 68, 0,
	0, 0, 64, 0, 0, 0, 71, 332, 78, 0,
	0, 0, 75, 0, 0, 332, 0, -2, 178, -2,
	179, 181, 0, 185, 188, 91, 0, 31, 283, -2,
	0, 0, 118, 120, 160, 0, 123, 0, 271, 274,
	-2, 240, 0, 0, 0, 239, -2, 111, 204, 0,
	0, 0, 0, 0, 0, 0, 264, 69, 70, 66,
	0, -2, 60, 61, 76, 123, -2, 0, 0, 125,
	0, 29, 332, 277, 158, 0, 0, 283, -2, 0,
	332, 332, 162, 168, 169, 0, 270, 256, 235, 0,
	0, 236, 0, 240, 0, 205, 206, 207, 208, 210,
	0, 0, 58, 65, 332, 0, -2, 23, 24, 0,
	0, 332, -2, -2, 123, 30, 114, 0, 0, 282,
	284, 316, 32, 33, 268, -2, 0, 238, 237, 221,
	0, 0, 0, 0, 0, 221, 0, 77, 332, 6,
	316, 316, 150, 0, 40, -2, 0, 0, 0, 0,
	332, 0, -2, 0, 0, 114, 0, 221, 221, 221,
	221, 221, 0, 0, 80, -2, -2, 0, 0, 41,
	332, 332, 126, 211, 44, 332, 281, 242, 212, 220,
	0, 0, 0, 0, 0, 0, 218, 221, 287, 0,
	-2, 27, 28, 0, 49, 0, 0, 81, 82, 45,
	222, 213, 214, 215, 216, 217, 0, 0, 287, -2,
	0, 0, 0, 8, 316, -2, -2, 219, 0, 0,
	288, 316, 286, 332, -2, 0, 0, 332, 0, -2,
	37, 291, -2, 0, 0, 35, 332, 285, -2, 0,
	0, 0, 291, -2, 0, 332, 332, 36, 316, 316,
	150, 0, 0, 0, 290, 292, 316, 38, 39, -2,
	-2, 0, 0, 332, 0, -2, 0, -2, 0, 0,
	47, 332, 289, 316, -2, -2, 48, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 128, 3, 3, 3, 132, 3, 3,
	129, 130, 124, 127, 133, 126, 134, 131, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 123,
	3, 125,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:184
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:189
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:196
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:201
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:208
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:213
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:220
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:225
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:232
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:236
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:240
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:244
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:248
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:252
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:256
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:260
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:264
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:268
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:272
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:276
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:296
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:302
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:306
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:312
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:316
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:322
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:326
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:330
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 32:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:334
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:338
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:342
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:348
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 36:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:352
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:356
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 38:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:360
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:364
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:368
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:372
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:378
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:382
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:388
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 45:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:392
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:396
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:402
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 48:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:406
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:410
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:416
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:420
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:424
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:428
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:434
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:438
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 56:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:444
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:448
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:452
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:456
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 60:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:460
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:464
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression, To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:470
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:474
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:480
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:484
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:490
		{
			yyVAL.expression = nil
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:494
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:498
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:502
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:506
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:512
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:516
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:520
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:524
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:528
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 76:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:534
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 77:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:538
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:542
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:546
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 80:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:552
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 81:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:556
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 82:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:560
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Parameter: yyDollar[5].identifier, Statements: yyDollar[9].program}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:566
		{
			yyVAL.expression = nil
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:570
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:574
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:578
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:582
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:586
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:590
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:596
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 91:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:600
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:604
		{
			yyVAL.expression = CursorAttrebute{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Attrebute: yyDollar[3].token}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:610
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:614
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:618
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:622
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:626
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].expression}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:632
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:644
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:654
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:663
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:672
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:683
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:687
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:693
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:699
		{
			yyVAL.expression = nil
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:703
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:709
		{
			yyVAL.expression = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:713
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:719
		{
			yyVAL.expression = nil
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:723
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:729
		{
			yyVAL.expression = nil
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:733
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:739
		{
			yyVAL.expression = nil
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:743
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:749
		{
			yyVAL.expression = nil
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:753
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:757
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:763
		{
			yyVAL.expression = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:767
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:773
		{
			yyVAL.expression = nil
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:777
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:783
		{
			yyVAL.expression = nil
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:787
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:793
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 126:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:797
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:803
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:807
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:813
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:817
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:821
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:825
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:829
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:833
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:839
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, Column: yyDollar[1].identifier}
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:843
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:847
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:851
		{
			yyVAL.expression = ColumnNumber{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Number: yyDollar[3].integer}
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:855
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: yyDollar[3].integer}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:861
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:865
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:869
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:873
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:877
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:881
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:885
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:889
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:893
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:897
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:901
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:905
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:909
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:913
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:919
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:925
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:929
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:935
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:939
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:945
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:949
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:955
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:959
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:965
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:969
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:975
		{
			yyVAL.token = Token{}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:979
		{
			yyVAL.token = yyDollar[1].token
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:983
		{
			yyVAL.token = yyDollar[1].token
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:989
		{
			yyVAL.token = yyDollar[1].token
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:993
		{
			yyVAL.token = yyDollar[1].token
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:999
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1005
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1028
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1032
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1036
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1040
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1044
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1048
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1052
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1056
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1060
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 181:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1064
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1068
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 183:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1072
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1076
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1080
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1084
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1088
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1092
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1096
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1100
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1106
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1110
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1114
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1118
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1122
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1126
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1130
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1136
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1140
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1144
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1148
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1154
		{
			yyVAL.expressions = nil
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1158
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1164
		{
			yyVAL.expression = Function{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 205:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1170
		{
			yyVAL.expression = AggregateFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 206:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1174
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 207:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1178
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 208:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1182
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1192
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 211:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1196
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 212:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1202
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 213:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1206
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 214:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1210
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 215:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1214
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 216:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1218
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 217:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1222
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 218:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1226
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 219:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1230
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1236
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1242
		{
			yyVAL.expression = nil
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1246
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1252
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1256
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1262
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1266
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1270
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1276
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1282
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1286
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1290
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1294
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1298
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1302
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 235:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1308
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 236:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1312
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 237:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1316
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 238:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1320
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1324
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1330
		{
			yyVAL.expression = nil
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1334
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1338
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1344
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1348
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1354
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1358
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1362
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1368
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1374
		{
			yyVAL.expression = nil
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1378
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 251:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1384
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1388
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 253:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1394
		{
			yyVAL.expression = nil
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1398
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1404
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1408
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1414
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1418
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1424
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1428
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1434
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1438
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1444
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1448
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 265:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1454
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1458
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 267:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1464
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 268:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1468
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1472
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 270:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1476
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 271:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1482
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1488
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1494
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1498
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1504
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 276:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1509
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1516
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1520
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 279:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1526
		{
			yyVAL.procexpr = nil
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1530
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1536
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1540
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 283:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1546
		{
			yyVAL.procexpr = nil
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1550
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1556
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1560
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 287:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1566
		{
			yyVAL.procexpr = nil
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1570
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1576
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1580
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1586
		{
			yyVAL.procexpr = nil
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1590
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1596
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1600
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1604
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1608
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1612
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1616
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1620
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1626
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1632
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1638
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1644
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1650
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1656
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1662
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1668
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1672
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1678
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1684
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 311:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1688
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1694
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1698
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1704
		{
			yyVAL.token = Token{}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1708
		{
			yyVAL.token = yyDollar[1].token
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1714
		{
			yyVAL.token = Token{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1718
		{
			yyVAL.token = yyDollar[1].token
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1724
		{
			yyVAL.token = Token{}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1728
		{
			yyVAL.token = yyDollar[1].token
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1734
		{
			yyVAL.token = Token{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1738
		{
			yyVAL.token = yyDollar[1].token
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1744
		{
			yyVAL.token = Token{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1748
		{
			yyVAL.token = yyDollar[1].token
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1752
		{
			yyVAL.token = yyDollar[1].token
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1756
		{
			yyVAL.token = yyDollar[1].token
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1762
		{
			yyVAL.token = Token{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1766
		{
			yyVAL.token = yyDollar[1].token
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1772
		{
			yyVAL.token = Token{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1776
		{
			yyVAL.token = yyDollar[1].token
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1783
		{
			yyVAL.token = yyDollar[1].token
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1787
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1794
		{
			yyVAL.token = Token{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1798
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
