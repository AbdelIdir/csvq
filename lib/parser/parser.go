//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const TIES = 57388
const PERCENT = 57389
const JOIN = 57390
const INNER = 57391
const OUTER = 57392
const LEFT = 57393
const RIGHT = 57394
const FULL = 57395
const CROSS = 57396
const ON = 57397
const USING = 57398
const NATURAL = 57399
const UNION = 57400
const INTERSECT = 57401
const EXCEPT = 57402
const ALL = 57403
const ANY = 57404
const EXISTS = 57405
const IN = 57406
const AND = 57407
const OR = 57408
const NOT = 57409
const BETWEEN = 57410
const LIKE = 57411
const IS = 57412
const NULL = 57413
const NULLS = 57414
const DISTINCT = 57415
const WITH = 57416
const CASE = 57417
const IF = 57418
const ELSEIF = 57419
const WHILE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const DO = 57424
const END = 57425
const DECLARE = 57426
const CURSOR = 57427
const FOR = 57428
const FETCH = 57429
const OPEN = 57430
const CLOSE = 57431
const DISPOSE = 57432
const NEXT = 57433
const PRIOR = 57434
const ABSOLUTE = 57435
const RELATIVE = 57436
const RANGE = 57437
const SEPARATOR = 57438
const PARTITION = 57439
const OVER = 57440
const COMMIT = 57441
const ROLLBACK = 57442
const CONTINUE = 57443
const BREAK = 57444
const EXIT = 57445
const PRINT = 57446
const PRINTF = 57447
const SOURCE = 57448
const FUNCTION = 57449
const BEGIN = 57450
const RETURN = 57451
const VAR = 57452
const COMPARISON_OP = 57453
const STRING_OP = 57454
const SUBSTITUTION_OP = 57455
const UMINUS = 57456
const UPLUS = 57457

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"TIES",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"NULLS",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"BEGIN",
	"RETURN",
	"VAR",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1703

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 116,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 91,
	58, 96,
	59, 96,
	60, 96,
	-2, 107,
	-1, 121,
	64, 293,
	68, 293,
	69, 293,
	-2, 309,
	-1, 123,
	64, 293,
	68, 293,
	69, 293,
	-2, 240,
	-1, 133,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 157,
	79, 233,
	-2, 293,
	-1, 166,
	83, 3,
	-2, 116,
	-1, 196,
	4, 83,
	-2, 293,
	-1, 197,
	4, 84,
	-2, 293,
	-1, 212,
	70, 0,
	111, 0,
	118, 0,
	-2, 161,
	-1, 213,
	70, 0,
	111, 0,
	118, 0,
	-2, 163,
	-1, 232,
	96, 107,
	123, 240,
	-2, 293,
	-1, 247,
	77, 3,
	81, 3,
	83, 3,
	-2, 116,
	-1, 266,
	48, 295,
	50, 299,
	-2, 242,
	-1, 284,
	64, 293,
	68, 293,
	69, 293,
	-2, 226,
	-1, 294,
	64, 293,
	68, 293,
	69, 293,
	-2, 288,
	-1, 311,
	83, 1,
	-2, 116,
	-1, 317,
	70, 0,
	111, 0,
	118, 0,
	-2, 172,
	-1, 324,
	96, 107,
	123, 197,
	-2, 293,
	-1, 342,
	83, 3,
	-2, 116,
	-1, 345,
	64, 293,
	68, 293,
	69, 293,
	-2, 112,
	-1, 349,
	64, 293,
	68, 293,
	69, 293,
	-2, 152,
	-1, 362,
	50, 299,
	-2, 295,
	-1, 375,
	64, 293,
	68, 293,
	69, 293,
	-2, 102,
	-1, 411,
	83, 237,
	-2, 293,
	-1, 421,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 423,
	64, 293,
	68, 293,
	69, 293,
	-2, 115,
	-1, 470,
	83, 5,
	-2, 116,
	-1, 474,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 480,
	79, 234,
	81, 234,
	83, 234,
	-2, 293,
	-1, 489,
	77, 1,
	81, 1,
	83, 1,
	-2, 25,
	-1, 499,
	64, 293,
	68, 293,
	69, 293,
	-2, 255,
	-1, 505,
	64, 293,
	68, 293,
	69, 293,
	-2, 106,
	-1, 513,
	64, 293,
	68, 293,
	69, 293,
	-2, 59,
	-1, 520,
	77, 5,
	81, 5,
	83, 5,
	-2, 116,
	-1, 527,
	83, 5,
	-2, 116,
	-1, 538,
	83, 3,
	-2, 116,
	-1, 565,
	64, 293,
	68, 293,
	69, 293,
	-2, 309,
	-1, 578,
	64, 293,
	68, 293,
	69, 293,
	-2, 224,
	-1, 588,
	77, 5,
	81, 5,
	83, 5,
	-2, 116,
	-1, 589,
	83, 7,
	-2, 116,
	-1, 595,
	77, 3,
	81, 3,
	83, 3,
	-2, 116,
	-1, 604,
	77, 7,
	81, 7,
	83, 7,
	-2, 116,
	-1, 619,
	83, 5,
	-2, 116,
	-1, 625,
	83, 7,
	-2, 116,
	-1, 633,
	77, 5,
	81, 5,
	83, 5,
	-2, 116,
	-1, 637,
	77, 1,
	81, 5,
	83, 5,
	-2, 116,
	-1, 640,
	77, 5,
	81, 5,
	83, 5,
	-2, 27,
	-1, 645,
	109, 23,
	-2, 20,
	-1, 650,
	83, 7,
	-2, 116,
	-1, 663,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
	-1, 664,
	83, 3,
	-2, 116,
	-1, 668,
	77, 7,
	81, 7,
	83, 7,
	-2, 116,
	-1, 670,
	109, 47,
	-2, 44,
	-1, 676,
	83, 3,
	-2, 116,
	-1, 678,
	77, 1,
	81, 1,
	83, 1,
	-2, 116,
}

const yyPrivate = 57344

const yyLast = 2318

var yyAct = [...]int{

	65, 24, 648, 24, 246, 603, 210, 1, 659, 41,
	617, 88, 602, 582, 169, 414, 547, 149, 49, 454,
	274, 304, 459, 536, 424, 76, 432, 573, 107, 108,
	266, 363, 402, 354, 440, 350, 281, 265, 361, 346,
	309, 177, 460, 267, 71, 96, 69, 125, 138, 103,
	52, 172, 277, 122, 326, 377, 366, 152, 367, 368,
	369, 364, 134, 382, 362, 2, 153, 142, 152, 141,
	140, 152, 512, 496, 143, 144, 321, 91, 142, 129,
	142, 165, 141, 140, 483, 143, 144, 143, 144, 97,
	251, 435, 168, 427, 174, 174, 396, 61, 39, 380,
	39, 184, 185, 146, 145, 147, 168, 262, 137, 203,
	193, 194, 195, 189, 616, 40, 351, 89, 614, 601,
	187, 597, 570, 105, 569, 160, 532, 531, 204, 516,
	301, 514, 38, 365, 24, 511, 508, 173, 173, 495,
	485, 484, 146, 145, 147, 482, 176, 137, 466, 135,
	134, 270, 272, 230, 453, 142, 136, 141, 140, 399,
	395, 37, 143, 144, 201, 38, 320, 24, 254, 37,
	38, 187, 260, 292, 229, 263, 174, 228, 520, 174,
	255, 585, 579, 287, 237, 240, 214, 208, 135, 134,
	238, 557, 553, 392, 142, 136, 141, 140, 99, 436,
	227, 143, 144, 201, 334, 332, 330, 91, 305, 238,
	288, 235, 209, 99, 102, 198, 276, 352, 285, 299,
	190, 308, 97, 207, 93, 3, 94, 307, 92, 43,
	302, 39, 248, 279, 280, 129, 554, 527, 468, 293,
	470, 507, 316, 310, 318, 319, 584, 322, 24, 298,
	99, 300, 338, 147, 479, 407, 206, 425, 486, 314,
	287, 313, 357, 174, 39, 359, 256, 329, 43, 370,
	667, 419, 657, 641, 174, 146, 145, 147, 131, 636,
	137, 131, 110, 388, 426, 627, 360, 105, 385, 305,
	386, 357, 357, 676, 336, 418, 622, 158, 594, 592,
	571, 114, 115, 305, 159, 559, 173, 256, 490, 390,
	383, 372, 24, 248, 358, 473, 410, 400, 403, 337,
	625, 135, 134, 376, 393, 378, 379, 142, 136, 141,
	140, 99, 384, 130, 143, 144, 130, 109, 651, 409,
	620, 342, 650, 24, 619, 39, 619, 422, 416, 652,
	417, 401, 236, 357, 327, 132, 415, 236, 415, 632,
	415, 112, 113, 116, 117, 539, 174, 431, 540, 538,
	312, 651, 444, 420, 311, 312, 539, 415, 673, 139,
	666, 287, 450, 643, 635, 612, 386, 593, 529, 357,
	472, 544, 37, 445, 439, 256, 434, 305, 426, 183,
	452, 438, 494, 443, 245, 147, 413, 287, 248, 39,
	84, 665, 123, 590, 167, 462, 285, 449, 469, 216,
	278, 242, 24, 215, 217, 241, 488, 441, 287, 244,
	243, 50, 87, 219, 218, 180, 357, 551, 174, 481,
	39, 503, 501, 174, 37, 442, 476, 121, 492, 366,
	491, 367, 368, 369, 364, 497, 161, 362, 357, 357,
	62, 26, 437, 26, 515, 344, 506, 493, 500, 498,
	258, 24, 86, 504, 502, 24, 447, 148, 599, 287,
	478, 530, 448, 519, 406, 154, 155, 489, 157, 259,
	24, 163, 164, 179, 180, 181, 41, 357, 374, 535,
	429, 430, 174, 366, 174, 367, 368, 369, 170, 415,
	81, 82, 83, 386, 84, 85, 537, 463, 533, 39,
	461, 24, 101, 546, 542, 543, 100, 566, 24, 196,
	197, 555, 550, 560, 552, 556, 563, 289, 290, 24,
	567, 128, 205, 574, 517, 471, 291, 211, 212, 213,
	398, 381, 174, 220, 221, 222, 223, 224, 225, 226,
	577, 572, 455, 456, 457, 458, 232, 38, 39, 581,
	415, 297, 39, 51, 38, 171, 86, 275, 21, 120,
	305, 261, 580, 38, 40, 371, 178, 39, 273, 24,
	24, 609, 264, 175, 26, 284, 24, 534, 598, 600,
	613, 596, 477, 294, 248, 24, 124, 38, 127, 182,
	623, 104, 70, 56, 11, 68, 11, 615, 39, 67,
	24, 66, 89, 618, 9, 39, 24, 26, 315, 628,
	317, 634, 629, 355, 24, 621, 39, 8, 24, 639,
	7, 24, 325, 151, 530, 156, 324, 58, 649, 328,
	644, 24, 658, 560, 631, 282, 660, 283, 269, 656,
	268, 248, 583, 339, 24, 24, 671, 74, 231, 24,
	57, 345, 349, 60, 674, 53, 59, 24, 151, 24,
	608, 422, 634, 488, 639, 54, 39, 39, 375, 541,
	428, 348, 347, 39, 126, 608, 521, 343, 257, 446,
	373, 42, 39, 95, 16, 63, 111, 4, 26, 44,
	45, 46, 47, 48, 14, 13, 608, 39, 10, 15,
	12, 606, 90, 39, 608, 404, 249, 522, 106, 5,
	248, 39, 604, 118, 119, 39, 247, 0, 39, 0,
	411, 608, 248, 0, 489, 89, 521, 11, 39, 0,
	0, 0, 0, 521, 0, 670, 0, 423, 0, 608,
	0, 39, 39, 0, 0, 0, 39, 670, 605, 670,
	0, 0, 26, 0, 39, 0, 39, 0, 0, 0,
	11, 0, 0, 605, 0, 151, 0, 151, 0, 0,
	0, 0, 0, 284, 0, 232, 0, 6, 0, 0,
	0, 0, 0, 26, 605, 188, 0, 0, 0, 191,
	192, 0, 640, 0, 521, 521, 0, 151, 475, 349,
	0, 0, 0, 199, 200, 480, 202, 0, 0, 605,
	521, 0, 0, 0, 0, 356, 0, 0, 0, 151,
	349, 0, 0, 605, 0, 521, 0, 605, 0, 499,
	0, 521, 0, 0, 0, 605, 0, 640, 0, 521,
	505, 11, 150, 645, 387, 389, 521, 0, 146, 145,
	147, 0, 0, 137, 513, 0, 521, 0, 0, 0,
	0, 0, 26, 0, 0, 0, 0, 0, 0, 645,
	645, 349, 0, 0, 521, 295, 296, 150, 0, 0,
	0, 0, 645, 0, 645, 0, 0, 0, 0, 151,
	0, 151, 0, 151, 135, 134, 0, 0, 0, 0,
	142, 136, 141, 140, 0, 11, 433, 143, 144, 201,
	0, 26, 0, 0, 0, 26, 561, 562, 565, 0,
	0, 0, 0, 146, 145, 147, 0, 0, 137, 0,
	26, 0, 575, 0, 340, 341, 11, 0, 678, 0,
	0, 578, 433, 0, 146, 145, 147, 0, 0, 137,
	366, 151, 367, 368, 369, 364, 548, 549, 362, 668,
	0, 26, 0, 0, 0, 0, 0, 0, 26, 135,
	134, 0, 0, 0, 0, 142, 136, 141, 140, 26,
	391, 0, 143, 144, 303, 394, 306, 0, 397, 356,
	135, 134, 0, 0, 0, 0, 142, 136, 141, 140,
	624, 0, 0, 143, 144, 0, 0, 0, 0, 55,
	0, 509, 510, 630, 0, 11, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 0, 26,
	26, 98, 0, 0, 0, 0, 26, 0, 353, 654,
	655, 0, 0, 0, 661, 26, 0, 0, 0, 0,
	433, 0, 0, 0, 151, 0, 0, 0, 0, 0,
	26, 0, 675, 0, 11, 0, 26, 0, 11, 0,
	0, 0, 464, 0, 26, 0, 0, 467, 26, 0,
	0, 26, 0, 11, 146, 145, 147, 162, 0, 137,
	0, 26, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 664, 487, 0, 26, 26, 0, 0, 150, 26,
	150, 0, 150, 0, 11, 0, 151, 26, 0, 26,
	146, 11, 147, 0, 0, 137, 0, 0, 0, 0,
	135, 134, 11, 0, 0, 0, 142, 136, 141, 140,
	0, 0, 0, 143, 144, 0, 0, 0, 0, 0,
	146, 145, 147, 0, 528, 137, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 663, 135, 134, 239, 239,
	465, 0, 142, 136, 141, 140, 0, 0, 0, 143,
	144, 0, 11, 11, 0, 271, 0, 0, 271, 11,
	0, 0, 0, 0, 0, 0, 135, 134, 11, 0,
	558, 0, 142, 136, 141, 140, 0, 564, 0, 143,
	144, 568, 0, 11, 0, 0, 0, 0, 0, 11,
	0, 0, 576, 0, 0, 0, 239, 11, 239, 239,
	0, 11, 0, 0, 11, 0, 0, 0, 0, 0,
	0, 587, 0, 0, 11, 0, 518, 591, 0, 0,
	0, 239, 331, 333, 335, 0, 0, 11, 11, 0,
	0, 0, 11, 0, 0, 0, 0, 0, 0, 0,
	11, 0, 11, 545, 610, 611, 0, 0, 0, 0,
	0, 0, 0, 271, 0, 0, 0, 98, 0, 98,
	98, 0, 0, 0, 626, 38, 81, 82, 83, 0,
	84, 85, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 638, 0, 0, 642, 0, 0,
	0, 38, 81, 82, 83, 653, 84, 85, 40, 0,
	0, 0, 0, 0, 662, 586, 0, 0, 0, 0,
	239, 0, 239, 0, 239, 0, 0, 0, 672, 0,
	0, 0, 0, 0, 77, 677, 0, 0, 78, 0,
	0, 239, 86, 0, 233, 0, 75, 0, 0, 0,
	0, 0, 0, 0, 0, 271, 80, 0, 0, 0,
	77, 0, 0, 0, 78, 0, 0, 0, 86, 0,
	233, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 0, 234, 0,
	72, 73, 79, 64, 451, 38, 81, 82, 83, 0,
	84, 85, 40, 239, 38, 81, 82, 83, 0, 84,
	85, 40, 0, 0, 234, 0, 72, 73, 79, 64,
	186, 0, 0, 0, 0, 0, 0, 271, 0, 0,
	0, 0, 271, 0, 0, 0, 38, 81, 82, 83,
	0, 84, 85, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 0, 0, 0, 78, 0,
	0, 0, 86, 77, 0, 0, 75, 78, 0, 0,
	0, 86, 0, 239, 0, 75, 80, 38, 81, 82,
	83, 0, 84, 85, 40, 80, 0, 0, 0, 0,
	0, 271, 0, 271, 0, 77, 0, 0, 0, 78,
	0, 0, 0, 86, 0, 0, 0, 75, 0, 0,
	72, 73, 79, 64, 186, 0, 43, 80, 0, 72,
	73, 79, 64, 0, 0, 0, 0, 0, 0, 0,
	146, 145, 147, 0, 239, 137, 77, 0, 0, 0,
	78, 271, 0, 0, 86, 637, 0, 37, 75, 286,
	0, 72, 73, 79, 64, 0, 0, 0, 80, 38,
	81, 82, 83, 0, 84, 85, 40, 0, 38, 81,
	82, 83, 0, 84, 85, 40, 135, 134, 0, 0,
	0, 0, 142, 136, 141, 140, 0, 0, 0, 143,
	144, 0, 72, 73, 79, 64, 0, 0, 146, 145,
	147, 0, 0, 137, 0, 0, 0, 0, 0, 146,
	145, 147, 0, 633, 137, 0, 0, 0, 77, 0,
	0, 0, 78, 0, 595, 0, 86, 77, 0, 0,
	75, 78, 0, 0, 0, 86, 0, 0, 0, 75,
	80, 146, 145, 147, 135, 134, 137, 0, 0, 80,
	142, 136, 141, 140, 0, 135, 134, 143, 144, 0,
	0, 142, 136, 141, 140, 146, 145, 147, 143, 144,
	137, 0, 323, 0, 72, 73, 79, 64, 0, 0,
	0, 0, 589, 72, 73, 79, 64, 135, 134, 0,
	0, 0, 43, 142, 136, 141, 140, 0, 0, 0,
	143, 144, 0, 0, 0, 0, 0, 0, 146, 145,
	147, 135, 134, 137, 0, 0, 0, 142, 136, 141,
	140, 0, 0, 588, 143, 144, 146, 145, 147, 0,
	0, 137, 0, 0, 0, 0, 0, 146, 145, 147,
	0, 474, 137, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 421, 0, 135, 134, 0, 0, 0, 0,
	142, 136, 141, 140, 0, 0, 0, 143, 144, 0,
	0, 0, 135, 134, 0, 0, 0, 408, 142, 136,
	141, 140, 0, 135, 134, 143, 144, 0, 0, 142,
	136, 141, 140, 146, 145, 147, 143, 144, 137, 0,
	0, 0, 0, 0, 146, 145, 147, 0, 412, 137,
	0, 0, 0, 0, 146, 145, 147, 0, 0, 137,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 166, 0, 0, 0, 0, 146, 145, 147, 135,
	134, 137, 0, 0, 0, 142, 136, 141, 140, 0,
	135, 134, 143, 144, 0, 0, 142, 136, 141, 140,
	135, 134, 147, 143, 144, 137, 142, 136, 141, 140,
	146, 145, 147, 143, 144, 137, 0, 0, 0, 0,
	0, 0, 135, 134, 0, 133, 0, 0, 142, 136,
	141, 140, 405, 145, 147, 143, 144, 137, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 134, 0, 0,
	0, 0, 142, 136, 141, 140, 135, 134, 0, 143,
	144, 0, 142, 136, 141, 140, 0, 0, 38, 143,
	144, 0, 0, 0, 0, 40, 0, 0, 135, 134,
	33, 0, 0, 0, 142, 136, 141, 140, 0, 0,
	22, 143, 144, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 38, 0, 0, 0, 0,
	0, 0, 40, 0, 0, 0, 0, 33, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 22, 0, 0,
	23, 0, 0, 0, 0, 0, 0, 0, 37, 0,
	669, 0, 647, 0, 0, 0, 0, 0, 17, 0,
	0, 30, 27, 28, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 31, 32, 252, 253, 20, 34, 35,
	36, 38, 0, 525, 25, 37, 0, 607, 40, 524,
	0, 0, 0, 33, 0, 526, 0, 0, 30, 27,
	28, 29, 0, 22, 0, 0, 23, 0, 0, 0,
	31, 32, 252, 253, 0, 34, 35, 36, 38, 0,
	525, 25, 0, 0, 0, 40, 0, 0, 0, 0,
	33, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	22, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 37, 0, 250, 0, 19, 0, 0, 0, 0,
	0, 17, 0, 0, 30, 27, 28, 29, 0, 0,
	0, 0, 0, 0, 0, 0, 31, 32, 252, 253,
	20, 34, 35, 36, 38, 0, 0, 25, 37, 0,
	646, 40, 647, 0, 0, 0, 33, 0, 17, 0,
	0, 30, 27, 28, 29, 0, 22, 0, 0, 23,
	0, 0, 0, 31, 32, 0, 0, 20, 34, 35,
	36, 38, 0, 525, 25, 0, 0, 0, 40, 0,
	0, 0, 0, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 22, 0, 0, 23, 0, 0, 0,
	0, 0, 0, 0, 37, 0, 523, 0, 524, 0,
	0, 0, 0, 0, 526, 0, 0, 30, 27, 28,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 31,
	32, 0, 0, 0, 34, 35, 36, 0, 0, 525,
	25, 37, 0, 18, 0, 19, 0, 0, 0, 0,
	0, 17, 0, 0, 30, 27, 28, 29, 0, 0,
	0, 0, 0, 0, 0, 0, 31, 32, 0, 0,
	20, 34, 35, 36, 0, 0, 0, 25,
}
var yyPact = [...]int{

	2207, -1000, 2207, -1000, -1000, -1000, 113, 113, 113, 113,
	113, 113, -1000, -1000, -1000, -1000, -1000, 603, 1604, 1604,
	113, 209, 496, 492, 92, 573, 113, 603, 603, 252,
	270, 113, 113, 567, 1604, 1604, 601, 516, -1000, 122,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 248,
	1845, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 122, -1000, -1000, 1513, -56, -1000, -1000, -1000, -1000,
	-1000, -1000, 1604, 1604, -1000, 1604, 186, 91, 1604, 1604,
	603, -1000, -1000, -1000, -1000, -1000, -1000, 1789, 350, -34,
	-1000, 470, 555, 603, 579, 572, 435, 326, -1000, 318,
	603, 603, 1431, 113, -13, 107, -1000, 113, 113, 603,
	603, 603, -1000, -1000, -1000, -1000, 1604, 1604, -1000, -1000,
	97, 1616, 113, 803, 113, -1000, -17, 603, -1000, 1604,
	170, 101, 90, 2207, 1604, 1604, 1604, 338, 355, 372,
	1604, 1604, 1604, 1604, 1604, 1604, 1604, -1000, 77, 54,
	51, 76, 603, 1337, -1000, -1000, 278, 1811, 68, 68,
	357, 368, -1000, 1835, -1000, 334, 2067, 603, 573, 426,
	448, 603, 565, -19, 570, 128, 574, 559, 128, 359,
	359, 359, 1472, -1000, 88, 510, -1000, 50, -1000, 573,
	1604, -1000, -1000, 113, 113, 551, 1811, 1811, 505, -1000,
	-1000, 1604, -1000, 516, 108, 1811, 318, 603, 318, 104,
	293, -37, -50, -50, 401, 1604, 68, 1604, 68, 68,
	-39, -39, -1000, -1000, -1000, 1075, 1835, -1000, -1000, -1000,
	-1000, 43, 38, 1595, -1000, 273, 1604, -1000, 1513, -1000,
	-1000, 68, 84, 83, 82, 338, 236, 2067, -1000, -1000,
	1604, -1000, 113, 113, 259, -1000, -20, 420, 1604, 1604,
	95, 603, 603, -1000, 603, 559, 7, -1000, 563, -1000,
	-1000, -1000, -1000, 128, 459, 1604, -1000, 76, -1000, 76,
	76, -1000, -27, 529, 1811, -1000, -1000, -59, 603, 166,
	161, 603, -1000, -1000, 1811, -1000, -1000, 573, 113, -1000,
	-1000, 71, 603, 113, 37, -30, 113, 528, 36, 234,
	293, 2207, 1604, -1000, -1000, 1867, -1000, -50, -1000, -1000,
	-1000, 443, 159, -1000, 1779, 233, 278, 1604, 1768, 341,
	87, -1000, 87, -1000, 87, -1000, 207, 295, -1000, 1712,
	-1000, -1000, 2067, -1000, 1604, 210, -1000, -33, 458, 1811,
	-1000, 68, 603, -1000, 572, -35, 81, -70, -1000, -1000,
	-1000, 414, 454, 377, 397, 128, -1000, -1000, -1000, -1000,
	-1000, 603, 559, 436, 441, 1811, 376, -1000, -1000, 376,
	1472, 603, 1311, 31, 531, 603, 485, -1000, 603, 480,
	113, -1000, 318, 25, -1000, 152, 603, -1000, 132, 523,
	314, 232, 298, -1000, 1701, 1604, 1604, 597, 439, 158,
	-1000, 1811, 1604, 68, 22, -42, 18, 17, -1000, 163,
	113, 2067, 225, 1811, -1000, 324, 402, 1604, 330, -1000,
	-1000, -1000, 16, -53, 559, 603, 1604, 128, 394, 377,
	393, -1000, 128, -1000, -1000, -1000, -1000, 1604, 1604, -1000,
	-1000, 143, 13, -1000, -1000, -1000, -1000, 603, 603, 12,
	-54, 1604, 8, 603, -1000, 6, 522, -1000, 318, -1000,
	2170, 129, 113, 312, 2207, 1835, 4, 3, 1604, 592,
	1811, -1000, -1000, 68, -1000, -1000, -1000, -1000, 288, 2207,
	290, -1000, -1000, -1000, 493, 370, 603, -1000, -1000, 1811,
	921, 128, 389, 128, 400, 1811, -1000, 70, 138, -1000,
	-1000, 531, 603, 1811, -1000, -1000, -1000, 69, 113, 222,
	2170, -1000, -1000, 1604, 1604, 1440, 603, 2170, -1000, 113,
	-1000, -1000, -1000, 1, -1, -1000, 217, 288, 2067, 1604,
	113, -1000, -1000, -1000, 68, -1000, -1000, -1000, 1604, 60,
	400, 128, 921, 149, 59, -1000, -1000, 318, -1000, 113,
	-1000, 1683, 1640, 349, -1000, 1616, 251, 216, -1000, -1000,
	-1000, 311, 215, 299, -1000, 1584, -1000, -1000, 1811, 603,
	400, -1000, -2, 470, 437, 149, -4, -1000, 2170, 2001,
	603, -1000, 113, 113, 309, 2067, -5, -1000, -1000, 1604,
	-9, -1000, 263, 213, 2001, -1000, -1000, 1604, -1000, 238,
	-1000, -1000, 113, -1000, -1000, -1000, -1000, 202, 265, 2170,
	1604, 298, 281, -1000, 1573, 2001, -1000, 308, 196, -1000,
	1505, 298, 113, 2001, 190, 113, 307, 2104, -1000, 261,
	2170, 271, -1000, 113, -1000, -1000, 1604, 1604, 189, 261,
	2001, 1604, 113, -1000, 1105, 1039, 347, 304, 187, 294,
	-1000, 899, -1000, 2104, 1964, 603, 113, 302, 2001, 1604,
	-1000, 211, -1000, 113, -1000, 878, 1964, -1000, 1964,
}
var yyPgo = [...]int{

	0, 6, 4, 12, 5, 225, 65, 178, 736, 732,
	729, 727, 90, 726, 721, 720, 719, 718, 42, 22,
	19, 715, 714, 707, 706, 705, 704, 797, 55, 45,
	703, 41, 20, 700, 699, 14, 698, 24, 697, 578,
	694, 47, 50, 573, 412, 25, 15, 39, 692, 691,
	690, 689, 1029, 685, 676, 675, 673, 613, 670, 668,
	667, 35, 13, 662, 43, 660, 30, 658, 16, 657,
	655, 647, 645, 54, 642, 26, 17, 37, 51, 21,
	36, 640, 637, 633, 33, 624, 32, 40, 27, 23,
	623, 10, 8, 2, 0, 621, 619, 615, 46, 612,
	44, 97, 11, 460, 611, 49, 609, 48, 38, 34,
	31, 52, 608, 379, 701,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	6, 6, 6, 7, 7, 8, 8, 9, 9, 10,
	10, 10, 10, 10, 11, 11, 11, 11, 11, 11,
	12, 12, 13, 13, 13, 14, 14, 14, 15, 15,
	16, 16, 17, 17, 17, 17, 17, 17, 18, 18,
	19, 19, 20, 20, 20, 20, 20, 21, 21, 21,
	21, 21, 22, 22, 22, 22, 23, 23, 24, 24,
	24, 24, 24, 24, 24, 25, 25, 26, 26, 26,
	26, 27, 28, 28, 28, 28, 29, 29, 30, 31,
	31, 32, 32, 33, 33, 34, 34, 35, 35, 36,
	36, 36, 37, 37, 38, 38, 39, 39, 40, 40,
	41, 41, 42, 42, 42, 42, 42, 42, 43, 43,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 45, 45, 46, 46, 47, 47,
	48, 48, 49, 49, 50, 50, 50, 51, 51, 52,
	53, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	55, 55, 55, 55, 55, 55, 55, 56, 56, 56,
	56, 57, 57, 58, 58, 59, 59, 59, 60, 60,
	60, 60, 61, 61, 62, 63, 63, 64, 64, 64,
	65, 65, 66, 66, 66, 66, 66, 66, 67, 67,
	67, 67, 67, 68, 68, 68, 69, 69, 69, 70,
	70, 71, 72, 72, 73, 73, 74, 74, 75, 75,
	76, 76, 77, 77, 78, 78, 79, 79, 80, 80,
	81, 81, 81, 81, 82, 83, 84, 84, 85, 85,
	86, 86, 87, 87, 88, 88, 89, 89, 90, 90,
	91, 91, 92, 92, 93, 93, 94, 95, 96, 97,
	98, 99, 100, 101, 102, 102, 103, 104, 104, 105,
	105, 106, 106, 107, 107, 108, 108, 109, 109, 110,
	110, 110, 110, 111, 111, 112, 112, 113, 113, 114,
	114,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	9, 7, 9, 2, 8, 9, 7, 9, 2, 3,
	2, 2, 8, 9, 1, 8, 9, 1, 3, 2,
	2, 2, 6, 6, 8, 5, 7, 7, 1, 3,
	1, 3, 0, 1, 1, 2, 2, 6, 3, 3,
	4, 6, 7, 9, 6, 4, 10, 11, 0, 1,
	1, 1, 1, 2, 2, 5, 6, 5, 3, 3,
	3, 5, 5, 4, 4, 4, 1, 1, 3, 0,
	2, 0, 2, 0, 3, 0, 2, 0, 3, 0,
	3, 4, 0, 2, 0, 2, 0, 2, 6, 9,
	1, 3, 1, 1, 1, 1, 1, 1, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 3, 1, 1, 3, 1, 3,
	2, 4, 1, 1, 0, 1, 1, 1, 1, 3,
	3, 3, 3, 3, 3, 4, 4, 6, 6, 4,
	6, 4, 4, 4, 6, 4, 4, 6, 4, 2,
	3, 3, 3, 3, 3, 2, 2, 3, 3, 2,
	2, 3, 4, 4, 1, 1, 2, 2, 7, 8,
	7, 8, 7, 8, 2, 0, 3, 1, 2, 3,
	1, 1, 1, 1, 2, 3, 1, 1, 5, 5,
	6, 6, 4, 0, 2, 4, 1, 1, 1, 1,
	3, 5, 0, 1, 4, 2, 0, 2, 1, 3,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	6, 9, 5, 8, 7, 3, 1, 3, 5, 6,
	4, 2, 0, 2, 4, 2, 0, 2, 4, 2,
	0, 2, 4, 2, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	3, 0, 1, 0, 1, 0, 1, 0, 1, 0,
	1, 1, 1, 0, 1, 0, 1, 1, 1, 0,
	1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -23, -10, -27, -81, -82, -85,
	-17, -57, -15, -21, -22, -16, -26, 84, 76, 78,
	103, -39, 26, 29, -94, 110, -103, 88, 89, 90,
	87, 99, 100, 16, 104, 105, 106, 74, 4, -101,
	11, -1, -114, 116, -114, -114, -114, -114, -114, -94,
	-44, -43, -42, -55, -53, -52, -57, -58, -71, -54,
	-56, -101, -103, -25, 122, -94, -95, -96, -97, -98,
	-99, -100, 119, 120, -60, 75, -45, 63, 67, 121,
	85, 5, 6, 7, 9, 10, 71, -44, -102, -101,
	-114, -28, 19, 15, 17, -30, -29, 13, -52, 122,
	30, 30, 122, -105, -104, -101, -114, -94, -94, 85,
	30, -24, 91, 92, 31, 32, 93, 94, -114, -114,
	12, -44, -76, -44, 5, -41, -40, -112, 25, 113,
	85, 30, 107, 80, 112, 111, 118, 70, -107, -113,
	120, 119, 117, 124, 125, 66, 65, 67, -44, -76,
	-27, -39, 127, 122, -44, -44, -72, -44, 111, 118,
	-107, -113, -52, -44, -44, -94, 82, 64, 126, -35,
	38, 20, -78, -64, -94, 14, -78, -31, 14, 58,
	59, 60, -106, 73, -94, -94, 123, -76, -114, 126,
	113, -114, -114, -94, -94, -94, -44, -44, 118, -114,
	-114, 126, -114, 126, -94, -44, 86, 122, 86, 122,
	-1, -44, -44, -44, -107, 68, 64, 69, 62, 61,
	-44, -44, -44, -44, -44, -44, -44, 123, 123, 123,
	-94, -59, -44, 73, 117, -73, 79, -45, 122, -52,
	-45, 68, 64, 62, 61, 70, -2, -8, -6, -13,
	76, -12, 101, 102, -94, -102, -101, -36, 44, 41,
	-94, 16, 126, -94, 22, -77, -66, -64, -65, -67,
	23, -52, 24, 14, -32, 18, -77, -111, 61, -111,
	-111, -80, -70, -69, -44, -61, 117, -94, 122, 27,
	28, 36, 123, -105, -44, -114, -114, 20, -42, -76,
	-41, 22, 122, -27, -79, -94, -27, 123, -102, -87,
	-86, 81, 77, -98, -100, -44, -45, -44, -45, -45,
	123, 38, -35, 117, -44, -74, -73, 81, -44, -45,
	122, -52, 122, -52, 122, -52, -107, 83, -2, -44,
	-114, -114, 82, -38, 45, -44, -47, -48, -49, -44,
	-61, 21, 122, -27, -84, -83, -43, -94, -78, -94,
	-32, -108, 57, -110, 54, 126, 49, 51, 52, 53,
	-94, 22, -77, -33, 39, -44, -29, -28, -29, -29,
	126, 22, 122, -79, -18, 122, -94, -43, 122, -43,
	-102, -114, 122, -79, -114, 123, 126, -114, 22, 123,
	83, -87, -86, -1, -44, 65, 41, 96, 38, -35,
	83, -44, 80, 65, -46, -45, -46, -46, 88, 64,
	78, 80, -2, -44, -37, 47, 74, 126, -50, 42,
	43, -46, -75, -43, -31, 126, 118, 48, -108, -110,
	-109, 50, 48, -77, -94, -32, -34, 40, 41, -80,
	-94, 123, -76, 123, -20, 31, 32, 33, 34, -19,
	-18, 35, -75, 37, -114, -27, 123, -114, 86, -79,
	108, 22, 76, 83, 80, -44, -47, 5, 41, 96,
	-44, -45, 123, 126, 123, 123, 95, -114, -2, -6,
	83, -37, 46, -47, 72, 123, 126, -32, -84, -44,
	-66, 48, -109, 48, -66, -44, -76, 98, 123, -43,
	-43, 123, 126, -44, 123, -94, 123, 22, -27, -3,
	-7, -5, -11, 76, 78, 109, 84, 108, -114, 76,
	-1, 123, 123, -47, 5, -46, -89, -88, 81, 77,
	78, -51, 31, 32, 21, -27, -75, -68, 55, 56,
	-66, 48, -66, 122, 98, -20, -19, 122, -114, 83,
	-3, -44, -44, -102, -114, -44, -94, -3, -114, 123,
	123, 83, -89, -88, -2, -44, -114, -46, -44, 122,
	-66, -68, -62, -63, 97, 122, -27, -114, 80, 82,
	64, -114, 83, 76, 83, 80, -79, 123, -35, 41,
	-62, 123, -3, -4, -9, -7, -14, 76, -12, -94,
	-114, -114, 76, -2, 123, -76, 123, -91, -90, 81,
	77, -86, 83, -4, -44, 82, -114, 83, -91, -3,
	-44, -86, 78, 80, -4, 76, 83, 80, -114, -4,
	-7, 83, -114, 76, -3, -5, 76, 78, -93, -92,
	81, 77, 78, -114, -44, -44, -102, 83, -93, -92,
	-4, -44, -114, 80, 82, 64, 76, 83, 80, 76,
	-12, -94, -114, 76, -4, -44, 82, -114, 80,
}
var yyDef = [...]int{

	-2, -2, -2, 20, 21, 22, 309, 309, 309, 309,
	309, 309, 15, 16, 17, 18, 19, 0, 0, 0,
	309, 0, 0, 0, 0, 0, 309, 0, 0, 0,
	78, 309, 309, 0, 0, 0, 0, 305, 276, 0,
	283, 2, 9, 310, 10, 11, 12, 13, 14, 0,
	293, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 116, 128, 122, 123, 124, 125,
	126, 127, 0, 0, 194, 232, 293, 0, 0, 0,
	0, 277, 278, 279, 280, 281, 282, 293, 0, 140,
	33, -2, 0, 0, 0, 99, 0, 291, 97, 116,
	0, 0, 0, 309, 289, 287, 49, 309, 309, 0,
	0, 0, 79, 80, 81, 82, 0, 0, 50, 51,
	0, -2, 309, -2, 309, 117, 120, 0, 306, 0,
	0, 0, 0, -2, 0, 307, 308, 293, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 293, 0,
	0, 0, 0, 0, 185, 186, 0, -2, 307, 308,
	0, 0, 179, 189, 190, 0, -2, 0, 0, 109,
	0, 0, 0, 244, 207, 0, 0, 101, 0, 303,
	303, 303, 0, 292, 0, 0, 191, 0, 48, 0,
	0, 68, 69, 309, 309, 0, -2, -2, 0, 88,
	89, 0, 90, 305, 0, 286, 116, 0, 116, 0,
	262, 160, -2, -2, 0, 0, 0, 0, 0, 0,
	180, 181, 182, 183, 184, 187, 188, 143, 144, 159,
	129, 0, -2, 0, 195, 236, 0, 162, 116, 145,
	164, 0, 0, 0, 0, 293, 0, -2, 25, 26,
	0, 44, 309, 309, 0, 285, 284, 114, 0, 0,
	116, 0, 0, 208, 0, 101, -2, 212, 213, 216,
	217, 210, 211, 0, 103, 0, 100, 0, 304, 0,
	0, 98, 248, 229, -2, 227, 228, 128, 0, 0,
	0, 0, 192, 290, -2, 70, 75, 0, 309, 241,
	121, 0, 0, 309, 0, 246, 309, 0, 0, 0,
	262, -2, 0, 165, 166, 293, 169, -2, 173, 176,
	193, 0, 0, 196, -2, 0, 235, 0, 293, 0,
	116, 171, 116, 175, 116, 178, 0, 0, 4, 293,
	40, 41, -2, 91, 0, -2, 108, 148, 154, -2,
	153, 0, 0, 252, 99, 256, 0, 128, 245, 209,
	258, 0, -2, 297, 0, 0, 296, 300, 301, 302,
	214, 0, 101, 105, 0, -2, 93, 96, 94, 95,
	0, 0, 0, 0, 62, 0, 58, 55, 0, 0,
	309, 87, 116, 0, 67, 309, 0, 74, 0, 0,
	0, 0, 261, 263, 293, 0, 0, 0, 0, 0,
	231, -2, 0, 0, 0, 146, 0, 0, 85, 0,
	309, -2, 0, -2, 110, 112, 0, 0, 150, 155,
	156, 250, 0, 238, 101, 0, 0, 0, 0, 297,
	0, 298, 0, 243, 215, 259, 92, 0, 0, 249,
	230, 191, 0, 52, 53, 63, 64, 0, 0, 0,
	60, 0, 0, 0, 71, 0, 0, 72, 116, 247,
	-2, 0, 309, 0, -2, 167, 108, 0, 0, 0,
	-2, 168, 170, 0, 174, 177, 86, 31, 266, -2,
	0, 111, 113, 149, 0, 116, 0, 254, 257, -2,
	223, 0, 0, 0, 222, -2, 104, 0, 192, 65,
	66, 62, 0, -2, 56, 57, 118, 0, 309, 0,
	-2, 23, 24, 0, 0, 309, 0, -2, 29, 309,
	260, 198, 200, 108, 0, 147, 0, 266, -2, 0,
	309, 151, 157, 158, 0, 253, 239, 218, 0, 0,
	219, 0, 223, 205, 0, 54, 61, 116, 73, 309,
	6, 293, 293, 0, 38, -2, 0, 0, 30, 199,
	201, 0, 0, 265, 267, 293, 32, 251, -2, 0,
	221, 220, 0, 107, 0, 205, 0, 76, -2, -2,
	0, 39, 309, 309, 0, -2, 0, 202, 204, 0,
	0, 119, 270, 0, -2, 27, 28, 0, 47, 0,
	77, 42, 309, 264, 225, 206, 203, 0, 270, -2,
	0, 0, 0, 8, 293, -2, 43, 0, 0, 271,
	293, 269, 309, -2, 0, 309, 0, -2, 36, 274,
	-2, 0, 34, 309, 268, -2, 0, 0, 0, 274,
	-2, 0, 309, 35, 293, 293, 0, 0, 0, 273,
	275, 293, 37, -2, -2, 0, 309, 0, -2, 0,
	-2, 0, 45, 309, 272, 293, -2, 46, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 121, 3, 3, 3, 125, 3, 3,
	122, 123, 117, 120, 126, 119, 127, 124, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 116,
	3, 118,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:179
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:184
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:191
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:196
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:203
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:208
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:215
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:220
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:227
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:231
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:235
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:239
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:243
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:247
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:251
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:255
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:259
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:263
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:267
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:273
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:277
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:281
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:291
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:301
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:307
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:311
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:317
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:321
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:325
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 32:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:329
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:333
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:339
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:343
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:347
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:351
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:355
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:359
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:365
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:369
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:375
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:379
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:383
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:389
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:393
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:397
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:403
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:407
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:413
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:417
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:423
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:427
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 54:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:431
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:435
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 56:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:439
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:443
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression.(FieldReference), To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:449
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:453
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:459
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:463
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:469
		{
			yyVAL.expression = nil
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:473
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:477
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:481
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:485
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:491
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:495
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:499
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:503
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:507
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:513
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 73:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:517
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:521
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:525
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 76:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:531
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 77:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:535
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:541
		{
			yyVAL.expression = nil
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:545
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:549
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:553
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:557
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:561
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:565
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:571
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:575
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:581
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:585
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:589
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Values: yyDollar[2].expressions}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:593
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].token.Literal}
		}
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:599
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:611
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:621
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:630
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:639
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:650
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:654
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:660
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:666
		{
			yyVAL.expression = nil
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:670
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 101:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:676
		{
			yyVAL.expression = nil
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:680
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:686
		{
			yyVAL.expression = nil
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:690
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:696
		{
			yyVAL.expression = nil
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:700
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:706
		{
			yyVAL.expression = nil
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:710
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:716
		{
			yyVAL.expression = nil
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:720
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:724
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:730
		{
			yyVAL.expression = nil
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:734
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 114:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:740
		{
			yyVAL.expression = nil
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:744
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:750
		{
			yyVAL.expression = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:754
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:760
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 119:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:764
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:770
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:774
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:780
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:784
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:788
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:792
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:796
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:800
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:806
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Column: yyDollar[1].identifier}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:810
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:816
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:820
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:824
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:828
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:832
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:836
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:840
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:844
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:848
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:852
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:856
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:860
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:864
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:868
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:874
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:878
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:884
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:888
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:894
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:898
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:904
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:908
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:914
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:918
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:924
		{
			yyVAL.token = Token{}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:928
		{
			yyVAL.token = yyDollar[1].token
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:932
		{
			yyVAL.token = yyDollar[1].token
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:938
		{
			yyVAL.token = yyDollar[1].token
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:942
		{
			yyVAL.token = yyDollar[1].token
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:948
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:954
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:977
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:981
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:985
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:989
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:993
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:997
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1001
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1005
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1009
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1013
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1017
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1021
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1025
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1029
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1033
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1037
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1041
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1045
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1049
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1055
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1059
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1063
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1067
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1071
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1075
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1079
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1085
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1089
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1093
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1097
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1103
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1107
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1113
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Option: yyDollar[3].expression.(AggregateOption)}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1117
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1123
		{
			yyVAL.expression = AggregateOption{Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}}}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1127
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[2].token)}}}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1131
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{yyDollar[2].expression}}
		}
	case 198:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1137
		{
			orderBy := OrderByClause{OrderBy: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Items: yyDollar[6].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: orderBy}
		}
	case 199:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1142
		{
			orderBy := OrderByClause{OrderBy: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Items: yyDollar[7].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: orderBy}
		}
	case 200:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1147
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: yyDollar[4].expression, SeparatorLit: yyDollar[5].token.Literal, Separator: yyDollar[6].token.Literal}
		}
	case 201:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1151
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: yyDollar[5].expression, SeparatorLit: yyDollar[6].token.Literal, Separator: yyDollar[7].token.Literal}
		}
	case 202:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1157
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Over: yyDollar[4].token.Literal, AnalyticClause: yyDollar[6].expression.(AnalyticClause)}
		}
	case 203:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1161
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1167
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 205:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1173
		{
			yyVAL.expression = nil
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1177
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1183
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1187
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, Alias: yyDollar[2].identifier}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1191
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1197
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1201
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1207
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1211
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1215
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1219
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1223
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1227
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 218:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1233
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1237
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1241
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 221:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1245
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1249
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1255
		{
			yyVAL.expression = nil
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1259
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1263
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1269
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1273
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1277
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1283
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1287
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 231:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1293
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 232:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1299
		{
			yyVAL.expression = nil
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1303
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 234:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1309
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1313
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 236:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1319
		{
			yyVAL.expression = nil
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1323
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1329
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 239:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1333
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1339
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1343
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1349
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 243:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1353
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1359
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 245:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1363
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 246:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1369
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1373
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1379
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1383
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 250:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1389
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 251:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1393
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1397
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 253:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1401
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 254:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1407
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1413
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression.(FieldReference), Value: yyDollar[3].expression}
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1419
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1423
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 258:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1429
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 259:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1434
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1441
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1445
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 262:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1451
		{
			yyVAL.procexpr = nil
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1455
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1461
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1465
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 266:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1471
		{
			yyVAL.procexpr = nil
		}
	case 267:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1475
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1481
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1485
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 270:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1491
		{
			yyVAL.procexpr = nil
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1495
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 272:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1501
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1505
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 274:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1511
		{
			yyVAL.procexpr = nil
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1515
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1521
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1527
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1533
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1539
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1545
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1551
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1557
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1563
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1569
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1573
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1579
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1585
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1589
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1595
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1599
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 291:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1605
		{
			yyVAL.token = Token{}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1609
		{
			yyVAL.token = yyDollar[1].token
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1615
		{
			yyVAL.token = Token{}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1619
		{
			yyVAL.token = yyDollar[1].token
		}
	case 295:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1625
		{
			yyVAL.token = Token{}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1629
		{
			yyVAL.token = yyDollar[1].token
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1635
		{
			yyVAL.token = Token{}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1639
		{
			yyVAL.token = yyDollar[1].token
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1645
		{
			yyVAL.token = Token{}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1649
		{
			yyVAL.token = yyDollar[1].token
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1653
		{
			yyVAL.token = yyDollar[1].token
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1657
		{
			yyVAL.token = yyDollar[1].token
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1663
		{
			yyVAL.token = Token{}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1667
		{
			yyVAL.token = yyDollar[1].token
		}
	case 305:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1673
		{
			yyVAL.token = Token{}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1677
		{
			yyVAL.token = yyDollar[1].token
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1684
		{
			yyVAL.token = yyDollar[1].token
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1688
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 309:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1695
		{
			yyVAL.token = Token{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1699
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
