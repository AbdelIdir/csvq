//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const TIES = 57388
const PERCENT = 57389
const JOIN = 57390
const INNER = 57391
const OUTER = 57392
const LEFT = 57393
const RIGHT = 57394
const FULL = 57395
const CROSS = 57396
const ON = 57397
const USING = 57398
const NATURAL = 57399
const UNION = 57400
const INTERSECT = 57401
const EXCEPT = 57402
const ALL = 57403
const ANY = 57404
const EXISTS = 57405
const IN = 57406
const AND = 57407
const OR = 57408
const NOT = 57409
const BETWEEN = 57410
const LIKE = 57411
const IS = 57412
const NULL = 57413
const NULLS = 57414
const DISTINCT = 57415
const WITH = 57416
const CASE = 57417
const IF = 57418
const ELSEIF = 57419
const WHILE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const DO = 57424
const END = 57425
const DECLARE = 57426
const CURSOR = 57427
const FOR = 57428
const FETCH = 57429
const OPEN = 57430
const CLOSE = 57431
const DISPOSE = 57432
const NEXT = 57433
const PRIOR = 57434
const ABSOLUTE = 57435
const RELATIVE = 57436
const RANGE = 57437
const SEPARATOR = 57438
const PARTITION = 57439
const OVER = 57440
const COMMIT = 57441
const ROLLBACK = 57442
const CONTINUE = 57443
const BREAK = 57444
const EXIT = 57445
const PRINT = 57446
const PRINTF = 57447
const SOURCE = 57448
const FUNCTION = 57449
const BEGIN = 57450
const RETURN = 57451
const VAR = 57452
const COMPARISON_OP = 57453
const STRING_OP = 57454
const SUBSTITUTION_OP = 57455
const UMINUS = 57456
const UPLUS = 57457

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"TIES",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"NULLS",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"BEGIN",
	"RETURN",
	"VAR",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1734

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 119,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 91,
	58, 99,
	59, 99,
	60, 99,
	-2, 110,
	-1, 124,
	64, 300,
	68, 300,
	69, 300,
	-2, 316,
	-1, 132,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 157,
	79, 240,
	-2, 300,
	-1, 166,
	83, 3,
	-2, 119,
	-1, 189,
	64, 300,
	68, 300,
	69, 300,
	-2, 247,
	-1, 203,
	4, 85,
	-2, 300,
	-1, 204,
	4, 86,
	-2, 300,
	-1, 215,
	70, 0,
	111, 0,
	118, 0,
	-2, 167,
	-1, 216,
	70, 0,
	111, 0,
	118, 0,
	-2, 169,
	-1, 237,
	96, 110,
	123, 247,
	-2, 300,
	-1, 254,
	77, 3,
	81, 3,
	83, 3,
	-2, 119,
	-1, 271,
	48, 302,
	50, 306,
	-2, 249,
	-1, 290,
	64, 300,
	68, 300,
	69, 300,
	-2, 233,
	-1, 299,
	64, 300,
	68, 300,
	69, 300,
	-2, 295,
	-1, 314,
	83, 1,
	-2, 119,
	-1, 320,
	70, 0,
	111, 0,
	118, 0,
	-2, 178,
	-1, 328,
	96, 110,
	123, 203,
	-2, 300,
	-1, 346,
	83, 3,
	-2, 119,
	-1, 349,
	64, 300,
	68, 300,
	69, 300,
	-2, 115,
	-1, 353,
	64, 300,
	68, 300,
	69, 300,
	-2, 158,
	-1, 365,
	50, 306,
	-2, 302,
	-1, 380,
	64, 300,
	68, 300,
	69, 300,
	-2, 105,
	-1, 417,
	83, 244,
	-2, 300,
	-1, 427,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 429,
	64, 300,
	68, 300,
	69, 300,
	-2, 118,
	-1, 482,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 488,
	79, 241,
	81, 241,
	83, 241,
	-2, 300,
	-1, 497,
	77, 1,
	81, 1,
	83, 1,
	-2, 25,
	-1, 507,
	64, 300,
	68, 300,
	69, 300,
	-2, 262,
	-1, 513,
	64, 300,
	68, 300,
	69, 300,
	-2, 109,
	-1, 522,
	64, 300,
	68, 300,
	69, 300,
	-2, 61,
	-1, 527,
	83, 5,
	-2, 119,
	-1, 541,
	83, 3,
	-2, 119,
	-1, 562,
	77, 5,
	81, 5,
	83, 5,
	-2, 119,
	-1, 568,
	83, 5,
	-2, 119,
	-1, 580,
	64, 300,
	68, 300,
	69, 300,
	-2, 231,
	-1, 595,
	64, 300,
	68, 300,
	69, 300,
	-2, 316,
	-1, 600,
	77, 3,
	81, 3,
	83, 3,
	-2, 119,
	-1, 607,
	77, 5,
	81, 5,
	83, 5,
	-2, 119,
	-1, 608,
	83, 7,
	-2, 119,
	-1, 621,
	77, 7,
	81, 7,
	83, 7,
	-2, 119,
	-1, 631,
	83, 5,
	-2, 119,
	-1, 637,
	83, 7,
	-2, 119,
	-1, 644,
	77, 5,
	81, 5,
	83, 5,
	-2, 119,
	-1, 648,
	77, 1,
	81, 5,
	83, 5,
	-2, 119,
	-1, 651,
	77, 5,
	81, 5,
	83, 5,
	-2, 27,
	-1, 656,
	109, 23,
	-2, 21,
	-1, 661,
	83, 7,
	-2, 119,
	-1, 674,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 675,
	83, 3,
	-2, 119,
	-1, 679,
	77, 7,
	81, 7,
	83, 7,
	-2, 119,
	-1, 681,
	109, 47,
	-2, 44,
	-1, 687,
	83, 3,
	-2, 119,
	-1, 689,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
}

const yyPrivate = 57344

const yyLast = 2409

var yyAct = [...]int{

	64, 23, 659, 23, 670, 584, 88, 388, 408, 169,
	213, 1, 629, 41, 550, 539, 467, 420, 462, 271,
	575, 619, 359, 76, 350, 438, 107, 446, 430, 112,
	113, 366, 354, 279, 364, 286, 178, 312, 270, 468,
	71, 69, 127, 148, 103, 172, 330, 258, 137, 276,
	96, 51, 50, 67, 387, 382, 2, 282, 369, 151,
	370, 371, 372, 367, 151, 153, 365, 145, 144, 146,
	106, 141, 136, 140, 139, 133, 91, 278, 142, 143,
	141, 165, 140, 139, 152, 253, 620, 142, 143, 151,
	141, 562, 269, 521, 174, 174, 43, 142, 143, 40,
	504, 185, 174, 145, 144, 146, 208, 491, 136, 461,
	131, 198, 199, 134, 133, 202, 441, 268, 433, 141,
	135, 140, 139, 168, 385, 160, 142, 143, 231, 168,
	211, 210, 191, 23, 618, 368, 616, 612, 602, 572,
	177, 571, 146, 173, 173, 136, 188, 535, 534, 134,
	133, 186, 234, 38, 240, 141, 135, 140, 139, 355,
	529, 230, 142, 143, 231, 523, 520, 23, 261, 516,
	503, 493, 174, 65, 492, 262, 490, 174, 479, 476,
	174, 473, 244, 247, 292, 217, 134, 133, 460, 268,
	38, 97, 141, 135, 140, 139, 188, 324, 38, 142,
	143, 297, 268, 242, 233, 235, 91, 241, 37, 275,
	175, 399, 37, 232, 587, 302, 291, 42, 281, 581,
	310, 267, 313, 255, 44, 45, 46, 47, 48, 245,
	569, 556, 404, 338, 336, 334, 298, 90, 303, 284,
	285, 293, 99, 319, 108, 321, 322, 326, 102, 121,
	122, 301, 308, 309, 146, 23, 245, 307, 317, 316,
	356, 442, 97, 205, 93, 192, 94, 292, 92, 174,
	362, 394, 333, 43, 373, 323, 526, 375, 131, 174,
	568, 527, 195, 557, 678, 487, 515, 494, 586, 61,
	26, 413, 26, 300, 389, 392, 362, 362, 158, 425,
	99, 340, 389, 668, 363, 159, 43, 40, 99, 397,
	400, 255, 389, 401, 358, 23, 391, 377, 173, 405,
	311, 190, 361, 424, 193, 409, 111, 197, 652, 647,
	200, 201, 687, 381, 390, 383, 384, 194, 415, 638,
	342, 634, 206, 207, 209, 611, 599, 23, 393, 395,
	589, 407, 573, 498, 422, 481, 423, 362, 421, 196,
	421, 416, 421, 117, 118, 406, 341, 637, 662, 174,
	632, 99, 661, 437, 631, 450, 542, 451, 315, 421,
	541, 110, 314, 243, 346, 331, 292, 457, 631, 243,
	663, 3, 392, 643, 543, 362, 440, 445, 426, 662,
	444, 315, 542, 255, 138, 684, 677, 449, 547, 439,
	654, 452, 646, 292, 614, 598, 304, 305, 291, 532,
	470, 456, 26, 115, 116, 119, 120, 480, 23, 37,
	432, 459, 428, 184, 292, 502, 252, 484, 146, 419,
	84, 219, 362, 489, 174, 218, 220, 439, 676, 174,
	81, 82, 83, 249, 84, 85, 26, 248, 501, 609,
	499, 37, 389, 508, 506, 167, 362, 362, 512, 517,
	251, 250, 524, 510, 505, 222, 221, 344, 345, 283,
	181, 161, 447, 23, 497, 554, 511, 292, 180, 181,
	182, 509, 448, 533, 361, 443, 500, 348, 23, 514,
	55, 10, 86, 10, 265, 362, 435, 436, 41, 538,
	174, 536, 174, 496, 604, 421, 86, 540, 518, 519,
	486, 455, 392, 412, 454, 402, 403, 266, 23, 553,
	549, 555, 369, 170, 370, 371, 372, 367, 559, 558,
	365, 379, 23, 369, 26, 370, 371, 372, 471, 561,
	294, 295, 469, 545, 546, 174, 574, 439, 101, 296,
	100, 189, 130, 23, 530, 579, 38, 38, 38, 23,
	583, 421, 528, 593, 582, 463, 464, 465, 466, 49,
	87, 38, 389, 475, 590, 376, 65, 38, 175, 601,
	596, 386, 306, 605, 171, 603, 124, 176, 255, 374,
	280, 23, 179, 123, 26, 38, 40, 175, 23, 23,
	626, 38, 40, 82, 472, 537, 474, 485, 126, 477,
	125, 38, 23, 129, 183, 147, 104, 576, 633, 70,
	68, 66, 23, 10, 154, 155, 26, 157, 23, 630,
	163, 164, 642, 639, 495, 23, 8, 360, 617, 23,
	7, 6, 23, 640, 329, 660, 625, 255, 156, 533,
	57, 287, 23, 669, 288, 667, 274, 10, 273, 625,
	655, 272, 585, 590, 74, 23, 23, 682, 236, 56,
	23, 203, 204, 59, 52, 625, 615, 58, 23, 53,
	23, 525, 625, 212, 544, 214, 215, 216, 531, 434,
	622, 223, 224, 225, 226, 227, 228, 229, 635, 625,
	352, 351, 128, 622, 237, 60, 39, 26, 39, 347,
	264, 453, 378, 681, 645, 95, 16, 625, 62, 622,
	114, 650, 255, 14, 89, 681, 651, 681, 13, 12,
	105, 105, 9, 109, 255, 290, 497, 15, 671, 11,
	570, 623, 256, 622, 299, 10, 564, 4, 621, 254,
	0, 578, 0, 0, 0, 0, 685, 622, 0, 0,
	0, 622, 26, 428, 645, 496, 650, 0, 588, 622,
	318, 651, 320, 0, 0, 594, 20, 26, 369, 0,
	370, 371, 372, 367, 551, 552, 365, 0, 0, 0,
	328, 0, 0, 0, 0, 332, 0, 606, 0, 0,
	0, 0, 0, 610, 0, 10, 613, 26, 0, 343,
	0, 0, 0, 0, 0, 0, 0, 349, 353, 627,
	0, 26, 628, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 380, 0, 0, 0, 0, 10, 39, 0,
	150, 0, 26, 0, 0, 0, 0, 0, 26, 0,
	0, 649, 0, 0, 653, 0, 0, 0, 0, 0,
	0, 0, 664, 0, 0, 0, 0, 410, 0, 0,
	0, 673, 39, 0, 263, 0, 150, 0, 0, 0,
	26, 0, 0, 417, 0, 683, 0, 26, 26, 0,
	0, 0, 688, 0, 0, 0, 0, 105, 0, 0,
	429, 26, 0, 0, 54, 0, 0, 0, 0, 563,
	0, 26, 0, 0, 5, 0, 0, 26, 10, 0,
	0, 0, 0, 0, 26, 98, 0, 0, 26, 0,
	0, 26, 0, 0, 0, 0, 0, 290, 0, 237,
	0, 26, 0, 0, 563, 0, 0, 0, 0, 0,
	563, 0, 0, 0, 26, 26, 0, 0, 0, 26,
	39, 0, 0, 483, 353, 0, 0, 26, 0, 26,
	488, 0, 0, 10, 0, 0, 0, 0, 149, 0,
	0, 0, 162, 0, 0, 353, 0, 0, 10, 563,
	563, 0, 0, 0, 507, 0, 0, 0, 0, 0,
	0, 0, 0, 563, 0, 0, 513, 0, 0, 263,
	0, 0, 263, 563, 149, 0, 0, 0, 10, 563,
	39, 522, 150, 0, 0, 0, 563, 0, 0, 0,
	656, 0, 10, 563, 0, 0, 0, 0, 353, 0,
	0, 0, 0, 563, 150, 0, 0, 0, 0, 0,
	0, 0, 39, 10, 0, 98, 656, 656, 0, 10,
	0, 563, 0, 246, 246, 0, 0, 0, 0, 656,
	0, 656, 0, 0, 0, 0, 0, 150, 0, 150,
	0, 277, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 10, 0, 0, 577, 0, 0, 0, 10, 10,
	0, 0, 0, 580, 0, 0, 0, 0, 0, 0,
	0, 150, 10, 150, 0, 150, 0, 591, 592, 595,
	0, 0, 10, 0, 246, 0, 246, 246, 10, 0,
	0, 0, 0, 39, 0, 10, 0, 0, 0, 10,
	0, 0, 10, 0, 0, 0, 145, 144, 146, 0,
	0, 136, 10, 246, 335, 337, 339, 0, 0, 0,
	149, 689, 0, 0, 0, 10, 10, 0, 0, 0,
	10, 0, 0, 0, 0, 0, 636, 0, 10, 0,
	10, 150, 357, 277, 641, 0, 0, 98, 39, 98,
	98, 0, 134, 133, 0, 0, 325, 0, 141, 135,
	140, 139, 0, 39, 0, 142, 143, 0, 0, 665,
	666, 0, 0, 0, 672, 396, 0, 398, 0, 0,
	0, 0, 0, 145, 144, 146, 0, 0, 136, 0,
	0, 0, 686, 39, 0, 0, 0, 0, 0, 246,
	0, 246, 0, 246, 0, 0, 0, 39, 0, 149,
	0, 149, 0, 149, 0, 0, 0, 0, 0, 0,
	246, 0, 0, 0, 0, 0, 0, 0, 39, 134,
	133, 0, 89, 277, 39, 141, 135, 140, 139, 0,
	150, 0, 142, 143, 231, 0, 0, 0, 0, 0,
	0, 0, 38, 81, 82, 83, 0, 84, 85, 40,
	0, 0, 0, 150, 0, 0, 39, 0, 0, 0,
	0, 0, 65, 39, 39, 0, 0, 0, 0, 478,
	0, 0, 0, 145, 246, 146, 0, 39, 136, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 0, 0,
	0, 0, 0, 39, 0, 0, 150, 0, 277, 0,
	39, 77, 0, 277, 39, 78, 0, 39, 0, 86,
	0, 238, 0, 75, 89, 0, 0, 39, 0, 134,
	133, 0, 0, 80, 0, 141, 135, 140, 139, 0,
	39, 39, 142, 143, 0, 39, 0, 0, 0, 0,
	0, 0, 0, 39, 0, 39, 246, 38, 81, 82,
	83, 0, 84, 85, 40, 239, 0, 72, 73, 79,
	63, 458, 0, 0, 277, 0, 277, 65, 548, 0,
	38, 81, 82, 83, 0, 84, 85, 40, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 560, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 246, 0, 0, 0, 77, 0, 0, 277,
	78, 0, 0, 0, 86, 0, 238, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 77,
	0, 0, 0, 78, 597, 0, 0, 86, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 38, 81, 82,
	83, 80, 84, 85, 40, 0, 0, 0, 0, 0,
	239, 0, 72, 73, 79, 63, 187, 65, 0, 0,
	38, 81, 82, 83, 0, 84, 85, 40, 0, 0,
	0, 0, 0, 0, 0, 72, 73, 79, 63, 187,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 0, 0, 0,
	78, 0, 0, 0, 86, 0, 0, 0, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 77,
	0, 0, 0, 78, 0, 0, 0, 86, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 38, 81, 82,
	83, 80, 84, 85, 40, 0, 0, 0, 0, 43,
	0, 0, 72, 73, 79, 63, 0, 65, 0, 0,
	38, 81, 82, 83, 0, 84, 85, 40, 0, 0,
	0, 0, 0, 289, 0, 72, 73, 79, 63, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 431, 0, 77, 0, 0, 0,
	78, 0, 0, 0, 86, 0, 0, 37, 75, 0,
	0, 0, 145, 144, 146, 0, 0, 136, 80, 77,
	0, 432, 0, 78, 0, 0, 0, 86, 0, 0,
	0, 75, 0, 0, 0, 0, 0, 38, 81, 82,
	83, 80, 84, 85, 40, 0, 0, 0, 0, 0,
	0, 0, 72, 73, 79, 63, 0, 65, 134, 133,
	0, 0, 0, 0, 141, 135, 140, 139, 0, 0,
	0, 142, 143, 327, 0, 72, 73, 79, 63, 145,
	144, 146, 0, 0, 136, 0, 0, 0, 0, 0,
	145, 144, 146, 0, 679, 136, 77, 0, 0, 0,
	78, 0, 0, 0, 86, 0, 0, 675, 75, 0,
	0, 0, 145, 144, 146, 0, 0, 136, 80, 0,
	0, 0, 0, 0, 0, 134, 133, 674, 0, 0,
	0, 141, 135, 140, 139, 0, 134, 133, 142, 143,
	0, 0, 141, 135, 140, 139, 145, 144, 146, 142,
	143, 136, 72, 73, 79, 63, 0, 0, 134, 133,
	0, 648, 0, 0, 141, 135, 140, 139, 145, 144,
	146, 142, 143, 136, 0, 0, 0, 0, 0, 145,
	144, 146, 0, 644, 136, 0, 0, 0, 0, 0,
	0, 0, 134, 133, 0, 0, 0, 0, 141, 135,
	140, 139, 145, 144, 146, 142, 143, 136, 0, 0,
	0, 0, 0, 0, 134, 133, 0, 0, 0, 608,
	141, 135, 140, 139, 0, 134, 133, 142, 143, 0,
	43, 141, 135, 140, 139, 145, 144, 146, 142, 143,
	136, 0, 0, 0, 0, 0, 0, 0, 134, 133,
	607, 0, 0, 0, 141, 135, 140, 139, 145, 144,
	146, 142, 143, 136, 0, 0, 0, 0, 0, 145,
	144, 146, 0, 600, 136, 0, 0, 0, 0, 0,
	0, 134, 133, 0, 482, 0, 0, 141, 135, 140,
	139, 145, 144, 146, 142, 143, 136, 0, 0, 0,
	0, 0, 0, 0, 134, 133, 427, 0, 0, 0,
	141, 135, 140, 139, 0, 134, 133, 142, 143, 0,
	414, 141, 135, 140, 139, 145, 144, 146, 142, 143,
	136, 0, 0, 0, 0, 0, 0, 134, 133, 0,
	418, 0, 0, 141, 135, 140, 139, 145, 144, 146,
	142, 143, 136, 0, 0, 0, 0, 145, 144, 146,
	0, 0, 136, 0, 0, 0, 0, 0, 145, 144,
	146, 134, 133, 136, 166, 0, 0, 141, 135, 140,
	139, 0, 0, 132, 142, 143, 145, 144, 146, 0,
	0, 136, 0, 134, 133, 0, 0, 0, 0, 141,
	135, 140, 139, 134, 133, 0, 142, 143, 0, 141,
	135, 140, 139, 0, 134, 133, 142, 143, 0, 0,
	141, 135, 140, 139, 411, 144, 146, 142, 143, 136,
	38, 0, 134, 133, 0, 0, 0, 40, 141, 135,
	140, 139, 33, 0, 0, 142, 143, 0, 0, 0,
	0, 0, 21, 0, 0, 22, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 38, 0,
	134, 133, 0, 0, 0, 40, 141, 135, 140, 139,
	33, 0, 0, 142, 143, 0, 0, 0, 0, 0,
	21, 0, 0, 22, 0, 0, 0, 0, 0, 0,
	37, 0, 680, 0, 658, 0, 0, 0, 0, 0,
	25, 0, 38, 30, 28, 29, 27, 0, 0, 40,
	0, 0, 0, 0, 33, 31, 32, 259, 260, 19,
	34, 35, 36, 0, 21, 567, 24, 22, 37, 0,
	624, 0, 566, 0, 0, 0, 0, 0, 25, 0,
	38, 30, 28, 29, 27, 0, 0, 40, 0, 0,
	0, 0, 33, 31, 32, 259, 260, 0, 34, 35,
	36, 0, 21, 567, 24, 22, 0, 0, 0, 0,
	0, 0, 37, 0, 257, 0, 18, 0, 0, 0,
	0, 0, 25, 0, 38, 30, 28, 29, 27, 0,
	0, 40, 0, 0, 0, 0, 33, 31, 32, 259,
	260, 19, 34, 35, 36, 0, 21, 0, 24, 22,
	37, 0, 657, 0, 658, 0, 0, 0, 0, 0,
	25, 0, 38, 30, 28, 29, 27, 0, 0, 40,
	0, 0, 0, 0, 33, 31, 32, 0, 0, 19,
	34, 35, 36, 0, 21, 567, 24, 22, 0, 0,
	0, 0, 0, 0, 37, 0, 565, 0, 566, 0,
	0, 0, 0, 0, 25, 0, 0, 30, 28, 29,
	27, 0, 0, 0, 0, 0, 0, 0, 0, 31,
	32, 0, 0, 0, 34, 35, 36, 0, 0, 567,
	24, 0, 37, 0, 17, 0, 18, 0, 0, 0,
	0, 0, 25, 0, 0, 30, 28, 29, 27, 0,
	0, 0, 0, 0, 0, 0, 0, 31, 32, 0,
	0, 19, 34, 35, 36, 0, 0, 0, 24,
}
var yyPact = [...]int{

	2298, -1000, 2298, -1000, -1000, 157, 157, 157, 157, 157,
	157, -1000, -1000, -1000, -1000, -1000, -1000, 1703, 1703, 157,
	249, 530, 528, 126, 595, 601, 157, 296, 617, 617,
	332, 157, 157, 591, 1703, 615, 613, 537, -1000, 165,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1973,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	165, -1000, -1000, 1603, -38, -62, -1000, -1000, -1000, -1000,
	-1000, -1000, 1703, 1703, -1000, 1703, 187, 120, 1703, 1703,
	617, -1000, -1000, -1000, -1000, -1000, -1000, 1962, 401, -3,
	-1000, 495, 574, 564, 583, 588, 430, 360, -1000, 355,
	617, 564, 1426, 157, 6, 152, 157, 252, -1000, 157,
	617, 617, 157, 157, 617, -1000, -1000, -1000, -1000, 1703,
	1703, -1000, -1000, 145, 1784, -20, 157, -1000, 5, 617,
	-1000, 1703, 2298, 1703, 1703, 1703, 371, 377, 414, 1703,
	1703, 1703, 1703, 1703, 1703, 1703, -1000, 38, 90, 81,
	178, 607, 1403, 607, -1000, -1000, 310, 1991, 107, 107,
	389, 409, -1000, 75, -1000, 366, 2178, 617, 595, 460,
	486, 564, 76, -1000, -1000, -1000, 186, 63, 582, 186,
	418, 418, 418, 1526, -1000, 119, 523, -1000, 78, 2,
	-1000, 595, 1703, -1000, 207, 129, 116, -1000, 157, 157,
	-1000, -1000, 572, 1991, 1991, 445, -1000, -1000, 1703, -1000,
	537, 198, 1991, 301, -46, -37, -37, 431, 1703, 107,
	1703, 107, 107, -27, -27, -1000, -1000, -1000, 1268, 75,
	-1000, 1703, -1000, -1000, -1000, -1000, 74, 1168, 1626, -1000,
	-1000, -1000, 304, 1703, -1000, 1603, -1000, -1000, 107, 113,
	112, 111, 371, 283, 2178, -1000, -1000, 1703, -1000, 157,
	157, 302, -1000, 3, 452, 1703, 1703, 138, 564, 562,
	582, 9, -1000, 577, -1000, -1000, 563, -1000, 186, 502,
	1703, -1000, 178, -1000, 178, 178, -1000, -2, 569, -1000,
	1991, -1000, -68, 617, 194, 149, 562, -1000, -1000, 1991,
	355, 617, 355, 88, -1000, -1000, 595, 157, 157, -1000,
	110, 617, 282, 301, 2298, 1703, -1000, -1000, 2029, -1000,
	-37, -1000, -1000, -1000, -1000, 482, 195, -1000, 1952, 278,
	310, 1703, 1930, 374, 134, -1000, 134, -1000, 134, -1000,
	235, 320, -1000, 1896, -1000, -1000, 2178, -1000, 1703, 1617,
	-1000, -8, 464, 1991, -1000, 107, 562, -1000, -9, 588,
	-10, 143, -63, -1000, 447, 494, 432, 444, 186, -1000,
	-1000, -1000, -1000, -1000, 617, -1000, 617, 582, 484, 480,
	1991, 421, -1000, -1000, 421, 1526, 617, 1298, 65, -17,
	544, 617, 517, -1000, 562, 511, 157, 58, 157, 561,
	56, 157, -1000, -1000, 355, 55, 351, 272, 324, -1000,
	1874, 1703, 1703, 612, 479, 189, -1000, 1991, 1703, 107,
	53, -19, 51, 48, -1000, 192, 157, 2178, 270, 1991,
	-1000, 356, 450, 1703, 363, -1000, -1000, -1000, 47, -26,
	582, 562, 1703, 186, 443, 432, 438, -1000, 186, -1000,
	-1000, -1000, -1000, -1000, 1703, 1703, -1000, -1000, 188, 46,
	-1000, 617, -1000, -1000, -1000, 562, 562, 43, -33, 1703,
	42, 617, -1000, 190, -1000, 173, 550, -1000, 37, 542,
	157, 343, 2298, 75, 25, 24, 1703, 610, 1991, -1000,
	-1000, 107, -1000, -1000, -1000, -1000, 299, 2298, 316, -1000,
	-1000, -1000, 522, 387, 562, -1000, -1000, 1991, 739, 186,
	437, 186, 483, 1991, -1000, 109, 185, -1000, -1000, -1000,
	544, 617, 1991, -1000, -1000, -1000, 355, 2260, 172, -1000,
	108, -1000, 157, -1000, -1000, -1000, 18, 16, -1000, 269,
	299, 2178, 1703, 157, -1000, -1000, -1000, 107, -1000, -1000,
	-1000, 1703, 97, 483, 186, 739, 191, 92, -1000, -1000,
	157, 267, 2260, -1000, -1000, 1703, 1703, 1503, 2260, 355,
	-1000, -1000, -1000, 339, 263, 325, -1000, 1863, -1000, -1000,
	1991, 617, 483, -1000, 15, 495, 473, 191, -1000, 157,
	-1000, 1840, 1807, 395, -1000, 1784, 262, 14, 157, 338,
	2178, 13, -1000, -1000, 1703, 11, -1000, 2260, 2134, 617,
	-1000, 157, -1000, -1000, 157, -1000, -1000, -1000, -1000, 293,
	258, 2134, -1000, -1000, 1703, -1000, 285, -1000, -1000, 256,
	307, 2260, 1703, 324, 315, -1000, 1773, 2134, 336, 246,
	-1000, 1751, 324, 157, 2134, 245, 157, 334, 2216, -1000,
	291, 2260, 312, -1000, 157, -1000, -1000, 1703, 1703, 220,
	291, 2134, 1703, 157, -1000, 1717, 1695, 384, 330, 201,
	322, -1000, 1684, -1000, 2216, 2096, 617, 157, 329, 2134,
	1703, -1000, 250, -1000, 157, -1000, 1091, 2096, -1000, 2096,
}
var yyPgo = [...]int{

	0, 10, 85, 21, 86, 391, 56, 91, 759, 758,
	757, 756, 47, 752, 751, 749, 747, 742, 39, 16,
	18, 739, 738, 733, 730, 728, 726, 924, 55, 50,
	725, 36, 33, 722, 721, 9, 720, 28, 719, 786,
	712, 42, 51, 52, 561, 23, 17, 24, 711, 710,
	699, 694, 914, 689, 687, 684, 683, 500, 679, 678,
	674, 32, 5, 672, 49, 671, 668, 19, 666, 14,
	664, 661, 660, 658, 46, 654, 25, 43, 38, 45,
	7, 35, 651, 650, 647, 22, 646, 8, 37, 20,
	15, 639, 12, 4, 2, 0, 631, 53, 630, 41,
	629, 40, 715, 6, 289, 626, 44, 624, 48, 34,
	27, 31, 57, 623, 404, 217,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 6, 6, 7, 7, 8, 8, 9, 9, 10,
	10, 10, 10, 10, 11, 11, 11, 11, 11, 11,
	12, 12, 13, 13, 13, 14, 14, 14, 15, 15,
	15, 15, 16, 16, 17, 17, 17, 17, 17, 17,
	18, 18, 19, 19, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 22, 22, 22, 22, 23, 23,
	24, 24, 24, 24, 24, 24, 24, 25, 25, 26,
	26, 26, 26, 26, 27, 28, 28, 28, 28, 29,
	29, 30, 31, 31, 32, 32, 33, 33, 34, 34,
	35, 35, 36, 36, 36, 37, 37, 38, 38, 39,
	39, 40, 40, 41, 41, 42, 42, 42, 42, 42,
	42, 43, 43, 43, 43, 43, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	45, 45, 46, 46, 47, 47, 48, 48, 49, 49,
	50, 50, 50, 51, 51, 52, 53, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 55, 55, 55, 55,
	55, 55, 55, 56, 56, 56, 56, 57, 57, 58,
	58, 59, 59, 59, 60, 60, 60, 60, 61, 61,
	62, 63, 63, 64, 64, 65, 65, 65, 66, 67,
	67, 67, 67, 67, 67, 68, 68, 68, 68, 68,
	69, 69, 69, 70, 70, 71, 71, 71, 72, 73,
	73, 74, 74, 75, 75, 76, 76, 77, 77, 78,
	78, 79, 79, 80, 80, 81, 81, 82, 82, 82,
	82, 83, 84, 85, 85, 86, 86, 87, 87, 88,
	88, 89, 89, 90, 90, 91, 91, 92, 92, 93,
	93, 94, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 103, 104, 105, 105, 106, 106, 107, 107,
	108, 108, 109, 109, 110, 110, 111, 111, 111, 111,
	112, 112, 113, 113, 114, 114, 115, 115,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	9, 7, 9, 2, 8, 9, 7, 9, 2, 3,
	2, 2, 8, 9, 1, 8, 9, 1, 3, 3,
	2, 3, 2, 2, 6, 6, 8, 5, 7, 7,
	1, 3, 1, 3, 0, 1, 1, 2, 2, 6,
	3, 3, 4, 6, 7, 9, 6, 4, 10, 11,
	0, 1, 1, 1, 1, 2, 2, 5, 6, 5,
	3, 3, 5, 3, 5, 5, 4, 4, 4, 1,
	1, 3, 0, 2, 0, 2, 0, 3, 0, 2,
	0, 3, 0, 3, 4, 0, 2, 0, 2, 0,
	2, 6, 9, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 3, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 1, 1, 3, 1, 3, 2, 4, 1, 1,
	0, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 4, 4, 6, 6, 4, 6, 4, 4, 4,
	6, 4, 4, 6, 4, 2, 3, 3, 3, 3,
	3, 2, 2, 3, 3, 2, 2, 3, 4, 4,
	1, 1, 2, 2, 7, 8, 7, 8, 7, 8,
	2, 0, 3, 1, 1, 1, 2, 3, 1, 1,
	1, 2, 3, 1, 1, 5, 5, 6, 6, 4,
	0, 2, 4, 1, 1, 1, 3, 1, 5, 0,
	1, 4, 2, 0, 2, 1, 3, 1, 3, 1,
	3, 1, 3, 1, 3, 1, 3, 6, 9, 5,
	8, 7, 3, 1, 3, 5, 6, 4, 2, 0,
	2, 4, 2, 0, 2, 4, 2, 0, 2, 4,
	2, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 1, 3, 1, 3, 0, 1,
	0, 1, 0, 1, 0, 1, 0, 1, 1, 1,
	0, 1, 0, 1, 1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -10, -27, -82, -83, -86, -17,
	-57, -15, -21, -22, -23, -16, -26, 76, 78, 103,
	-39, 26, 29, -95, 110, 84, -104, 90, 88, 89,
	87, 99, 100, 16, 104, 105, 106, 74, 4, -102,
	11, -1, -115, 116, -115, -115, -115, -115, -115, -44,
	-43, -42, -55, -53, -52, -57, -58, -72, -54, -56,
	-102, -104, -25, 122, -95, 24, -96, -97, -98, -99,
	-100, -101, 119, 120, -60, 75, -45, 63, 67, 121,
	85, 5, 6, 7, 9, 10, 71, -44, -103, -102,
	-115, -28, 19, 15, 17, -30, -29, 13, -52, 122,
	30, 30, 122, -106, -105, -102, -106, -95, -115, -102,
	85, 30, -95, -95, -24, 91, 92, 31, 32, 93,
	94, -115, -115, 12, -44, 5, 5, -41, -40, -113,
	25, 113, 80, 112, 111, 118, 70, -108, -114, 120,
	119, 117, 124, 125, 66, 65, 67, -44, -77, -27,
	-39, 127, 122, 127, -44, -44, -73, -44, 111, 118,
	-108, -114, -52, -44, -44, -95, 82, 64, 126, -35,
	38, 20, -79, -64, -95, 24, 14, -79, -31, 14,
	58, 59, 60, -107, 73, -95, -64, 123, -77, -44,
	-115, 126, 113, -115, 85, 30, 107, -115, -95, -95,
	-115, -115, -95, -44, -44, 118, -115, -115, 126, -115,
	126, -95, -44, -1, -44, -44, -44, -108, 68, 64,
	69, 62, 61, -44, -44, -44, -44, -44, -44, -44,
	123, 126, 123, 123, -95, -97, -59, -44, 73, 117,
	-95, -97, -74, 79, -45, 122, -52, -45, 68, 64,
	62, 61, 70, -2, -8, -6, -13, 76, -12, 101,
	102, -95, -103, -102, -36, 44, 41, -64, 126, 16,
	-78, -67, -65, -66, -68, 23, -64, -52, 14, -32,
	18, -78, -112, 61, -112, -112, -81, -71, -70, 117,
	-44, -61, -95, 122, 27, 28, 36, 123, -106, -44,
	86, 122, 86, 122, -115, -115, 20, -42, -77, -41,
	22, 122, -88, -87, 81, 77, -99, -101, -44, -45,
	-44, -45, -45, -77, 123, 38, -35, 117, -44, -75,
	-74, 81, -44, -45, 122, -52, 122, -52, 122, -52,
	-108, 83, -2, -44, -115, -115, 82, -38, 45, -44,
	-47, -48, -49, -44, -61, 21, 122, -27, -79, -85,
	-84, -43, -95, -32, -109, 57, -111, 54, 126, 49,
	51, 52, 53, -95, 22, -95, 22, -78, -33, 39,
	-44, -29, -28, -29, -29, 126, 22, 122, -80, -95,
	-18, 122, -95, -43, 122, -43, -27, -80, -27, 123,
	-103, -103, -115, -115, 122, -80, 83, -88, -87, -1,
	-44, 65, 41, 96, 38, -35, 83, -44, 80, 65,
	-46, -45, -46, -46, 88, 64, 78, 80, -2, -44,
	-37, 47, 74, 126, -50, 42, 43, -46, -76, -43,
	-31, 126, 118, 48, -109, -111, -110, 50, 48, -78,
	-95, -95, -32, -34, 40, 41, -81, -95, 123, -77,
	123, 126, -20, 31, 32, 33, 34, -19, -18, 35,
	-76, 37, -115, 123, -115, 22, 123, -115, -27, 123,
	76, 83, 80, -44, -47, 5, 41, 96, -44, -45,
	123, 126, 123, 123, 95, -115, -2, -6, 83, -37,
	46, -47, 72, 123, 126, -32, -85, -44, -67, 48,
	-110, 48, -67, -44, -77, 98, 123, -80, -43, -43,
	123, 126, -44, 123, -95, -115, 86, 108, 22, 123,
	22, -115, 76, -1, 123, 123, -47, 5, -46, -90,
	-89, 81, 77, 78, -51, 31, 32, 21, -27, -76,
	-69, 55, 56, -67, 48, -67, 122, 98, -20, -19,
	-27, -3, -7, -5, -11, 76, 78, 109, 108, 122,
	-115, 123, 123, 83, -90, -89, -2, -44, -115, -46,
	-44, 122, -67, -69, -62, -63, 97, 122, -115, 83,
	-3, -44, -44, -103, -115, -44, -3, -27, 76, 83,
	80, -80, 123, -35, 41, -62, -115, 80, 82, 64,
	-115, 83, 123, -115, 76, -2, 123, -77, 123, -3,
	-4, -9, -7, -14, 76, -12, -95, -115, -115, -92,
	-91, 81, 77, -87, 83, -4, -44, 82, 83, -92,
	-3, -44, -87, 78, 80, -4, 76, 83, 80, -115,
	-4, -7, 83, -115, 76, -3, -5, 76, 78, -94,
	-93, 81, 77, 78, -115, -44, -44, -103, 83, -94,
	-93, -4, -44, -115, 80, 82, 64, 76, 83, 80,
	76, -12, -95, -115, 76, -4, -44, 82, -115, 80,
}
var yyDef = [...]int{

	-2, -2, -2, 21, 22, 316, 316, 316, 316, 316,
	316, 15, 16, 17, 18, 19, 20, 0, 0, 316,
	0, 0, 0, 0, 0, 0, 316, 0, 0, 0,
	80, 316, 316, 0, 0, 0, 0, 312, 283, 0,
	290, 2, 9, 317, 10, 11, 12, 13, 14, 300,
	136, 137, 138, 139, 140, 141, 142, 143, 144, 145,
	146, 147, 148, 119, 131, 0, 125, 126, 127, 128,
	129, 130, 0, 0, 200, 239, 300, 0, 0, 0,
	0, 284, 285, 286, 287, 288, 289, 300, 0, 146,
	33, -2, 0, 0, 0, 102, 0, 298, 100, 119,
	0, 0, 0, 316, 296, 294, 316, 0, 50, 316,
	0, 0, 316, 316, 0, 81, 82, 83, 84, 0,
	0, 52, 53, 0, -2, 316, 316, 120, 123, 0,
	313, 0, -2, 0, 314, 315, 300, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 301, 300, 0, 0,
	0, 0, 0, 0, 191, 192, 0, -2, 314, 315,
	0, 0, 185, 195, 196, 0, -2, 0, 0, 112,
	0, 0, 0, 251, 213, 214, 0, 0, 104, 0,
	310, 310, 310, 0, 299, 0, 0, 197, 0, -2,
	48, 0, 0, 49, 0, 0, 0, 51, 316, 316,
	70, 71, 0, -2, -2, 0, 90, 91, 0, 93,
	312, 0, 293, 269, 166, -2, -2, 0, 0, 0,
	0, 0, 0, 186, 187, 188, 189, 190, 193, 194,
	149, 0, 150, 165, 132, 134, 0, -2, 0, 201,
	133, 135, 243, 0, 168, 119, 151, 170, 0, 0,
	0, 0, 300, 0, -2, 25, 26, 0, 44, 316,
	316, 0, 292, 291, 117, 0, 0, 119, 0, 0,
	104, -2, 219, 220, 223, 224, 215, 218, 0, 106,
	0, 103, 0, 311, 0, 0, 101, 255, 235, 237,
	-2, 234, 131, 0, 0, 0, 0, 198, 297, -2,
	119, 0, 119, 0, 72, 77, 0, 316, 316, 124,
	0, 0, 0, 269, -2, 0, 171, 172, 300, 175,
	-2, 179, 182, 248, 199, 0, 0, 202, -2, 0,
	242, 0, 300, 0, 119, 177, 119, 181, 119, 184,
	0, 0, 4, 300, 40, 41, -2, 94, 0, -2,
	111, 154, 160, -2, 159, 0, 0, 259, 252, 102,
	263, 0, 131, 265, 0, -2, 304, 0, 0, 303,
	307, 308, 309, 221, 0, 216, 0, 104, 108, 0,
	-2, 96, 99, 97, 98, 0, 0, 0, 0, 253,
	64, 0, 60, 57, 0, 0, 316, 0, 316, 0,
	0, 316, 89, 92, 119, 0, 0, 0, 268, 270,
	300, 0, 0, 0, 0, 0, 238, -2, 0, 0,
	0, 152, 0, 0, 87, 0, 316, -2, 0, -2,
	113, 115, 0, 0, 156, 161, 162, 257, 0, 245,
	104, 0, 0, 0, 0, 304, 0, 305, 0, 250,
	222, 217, 266, 95, 0, 0, 256, 236, 197, 0,
	54, 0, 55, 65, 66, 0, 0, 0, 62, 0,
	0, 0, 69, 316, 76, 0, 0, 73, 0, 0,
	316, 0, -2, 173, 111, 0, 0, 0, -2, 174,
	176, 0, 180, 183, 88, 31, 273, -2, 0, 114,
	116, 155, 0, 119, 0, 261, 264, -2, 230, 0,
	0, 0, 229, -2, 107, 0, 198, 254, 67, 68,
	64, 0, -2, 58, 59, 74, 119, -2, 0, 121,
	0, 29, 316, 267, 204, 206, 111, 0, 153, 0,
	273, -2, 0, 316, 157, 163, 164, 0, 260, 246,
	225, 0, 0, 226, 0, 230, 211, 0, 56, 63,
	316, 0, -2, 23, 24, 0, 0, 316, -2, 119,
	30, 205, 207, 0, 0, 272, 274, 300, 32, 258,
	-2, 0, 228, 227, 0, 110, 0, 211, 75, 316,
	6, 300, 300, 0, 38, -2, 0, 0, 316, 0,
	-2, 0, 208, 210, 0, 0, 78, -2, -2, 0,
	39, 316, 122, 42, 316, 271, 232, 212, 209, 277,
	0, -2, 27, 28, 0, 47, 0, 79, 43, 0,
	277, -2, 0, 0, 0, 8, 300, -2, 0, 0,
	278, 300, 276, 316, -2, 0, 316, 0, -2, 36,
	281, -2, 0, 34, 316, 275, -2, 0, 0, 0,
	281, -2, 0, 316, 35, 300, 300, 0, 0, 0,
	280, 282, 300, 37, -2, -2, 0, 316, 0, -2,
	0, -2, 0, 45, 316, 279, 300, -2, 46, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 121, 3, 3, 3, 125, 3, 3,
	122, 123, 117, 120, 126, 119, 127, 124, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 116,
	3, 118,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:180
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:185
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:192
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:197
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:204
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:209
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:216
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:221
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:228
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:232
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:236
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:240
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:244
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:248
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:252
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:256
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:260
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:264
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:268
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:272
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:278
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:288
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:292
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:298
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:302
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:308
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:312
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:318
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:322
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:326
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 32:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:330
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:334
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:340
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:344
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:348
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:352
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:356
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:360
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:366
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:370
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:376
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:380
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:384
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:390
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:394
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:398
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:404
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:408
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:412
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:416
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:422
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:426
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:432
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:436
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:440
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:444
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:448
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:452
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression.(FieldReference), To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:458
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:462
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:468
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:472
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:478
		{
			yyVAL.expression = nil
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:482
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:486
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:490
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:494
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:500
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:504
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:508
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:512
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 73:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:516
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:522
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:526
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:530
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:534
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 78:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:540
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 79:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:544
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:550
		{
			yyVAL.expression = nil
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:554
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:558
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:562
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:566
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:570
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:574
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:580
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:584
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:590
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:594
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:598
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:602
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:606
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].token.Literal}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:612
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:624
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:634
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:643
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:652
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:663
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:667
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:673
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:679
		{
			yyVAL.expression = nil
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:683
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:689
		{
			yyVAL.expression = nil
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:693
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:699
		{
			yyVAL.expression = nil
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:703
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:709
		{
			yyVAL.expression = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:713
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:719
		{
			yyVAL.expression = nil
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:723
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:729
		{
			yyVAL.expression = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:733
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:737
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:743
		{
			yyVAL.expression = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:747
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:753
		{
			yyVAL.expression = nil
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:757
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:763
		{
			yyVAL.expression = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:767
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:773
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 122:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:777
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:783
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:787
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:793
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:797
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:801
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:805
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:809
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:813
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:819
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Column: yyDollar[1].identifier}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:823
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:827
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:831
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Number: yyDollar[3].integer}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:835
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: yyDollar[3].integer}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:841
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:845
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:849
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:853
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:857
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:861
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:865
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:869
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:873
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:877
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:881
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:885
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:889
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:893
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:899
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:903
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:909
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:913
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:919
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:923
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:929
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:933
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:939
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:943
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:949
		{
			yyVAL.token = Token{}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:953
		{
			yyVAL.token = yyDollar[1].token
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:957
		{
			yyVAL.token = yyDollar[1].token
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:963
		{
			yyVAL.token = yyDollar[1].token
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:967
		{
			yyVAL.token = yyDollar[1].token
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:973
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:979
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1002
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1006
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1010
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1014
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1018
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1022
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1026
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1030
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1034
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1038
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1042
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1046
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1050
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1054
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1058
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1062
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1066
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1070
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1074
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1080
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1084
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1088
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1092
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1096
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1100
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1104
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1110
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1114
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1118
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1122
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1128
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1132
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1138
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Option: yyDollar[3].expression.(AggregateOption)}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1142
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1148
		{
			yyVAL.expression = AggregateOption{Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}}}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1152
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[2].token)}}}
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1156
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{yyDollar[2].expression}}
		}
	case 204:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1162
		{
			orderBy := OrderByClause{OrderBy: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Items: yyDollar[6].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: orderBy}
		}
	case 205:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1167
		{
			orderBy := OrderByClause{OrderBy: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Items: yyDollar[7].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: orderBy}
		}
	case 206:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1172
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: yyDollar[4].expression, SeparatorLit: yyDollar[5].token.Literal, Separator: yyDollar[6].token.Literal}
		}
	case 207:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1176
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: yyDollar[5].expression, SeparatorLit: yyDollar[6].token.Literal, Separator: yyDollar[7].token.Literal}
		}
	case 208:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1182
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Over: yyDollar[4].token.Literal, AnalyticClause: yyDollar[6].expression.(AnalyticClause)}
		}
	case 209:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1186
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1192
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1198
		{
			yyVAL.expression = nil
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1202
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1208
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1212
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1218
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1222
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1226
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1232
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1238
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1242
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1246
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 222:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1250
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1254
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1258
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1264
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1268
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 227:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1272
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 228:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1276
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 229:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1280
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 230:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1286
		{
			yyVAL.expression = nil
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1290
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 232:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1294
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1300
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1304
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1310
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1314
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1318
		{
			yyVAL.expression = Field{Object: AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}}
		}
	case 238:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1324
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1330
		{
			yyVAL.expression = nil
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1334
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1340
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1344
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1350
		{
			yyVAL.expression = nil
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1354
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1360
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1364
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1370
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1374
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1380
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1384
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1390
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1394
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1400
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 254:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1404
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1410
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1414
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1420
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 258:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1424
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1428
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 260:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1432
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 261:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1438
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1444
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression.(FieldReference), Value: yyDollar[3].expression}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1450
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1454
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 265:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1460
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 266:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1465
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1472
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1476
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1482
		{
			yyVAL.procexpr = nil
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1486
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1492
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1496
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1502
		{
			yyVAL.procexpr = nil
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1506
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1512
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1516
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1522
		{
			yyVAL.procexpr = nil
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1526
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1532
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1536
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 281:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1542
		{
			yyVAL.procexpr = nil
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1546
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1552
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1558
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1564
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1570
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1576
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1582
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1588
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1594
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1600
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 292:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1604
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1610
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1616
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1620
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1626
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1630
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1636
		{
			yyVAL.token = Token{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1640
		{
			yyVAL.token = yyDollar[1].token
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1646
		{
			yyVAL.token = Token{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1650
		{
			yyVAL.token = yyDollar[1].token
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1656
		{
			yyVAL.token = Token{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1660
		{
			yyVAL.token = yyDollar[1].token
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1666
		{
			yyVAL.token = Token{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1670
		{
			yyVAL.token = yyDollar[1].token
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1676
		{
			yyVAL.token = Token{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1680
		{
			yyVAL.token = yyDollar[1].token
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1684
		{
			yyVAL.token = yyDollar[1].token
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1688
		{
			yyVAL.token = yyDollar[1].token
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1694
		{
			yyVAL.token = Token{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1698
		{
			yyVAL.token = yyDollar[1].token
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1704
		{
			yyVAL.token = Token{}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1708
		{
			yyVAL.token = yyDollar[1].token
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1715
		{
			yyVAL.token = yyDollar[1].token
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1719
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 316:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1726
		{
			yyVAL.token = Token{}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1730
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
