//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const TIES = 57388
const PERCENT = 57389
const JOIN = 57390
const INNER = 57391
const OUTER = 57392
const LEFT = 57393
const RIGHT = 57394
const FULL = 57395
const CROSS = 57396
const ON = 57397
const USING = 57398
const NATURAL = 57399
const UNION = 57400
const INTERSECT = 57401
const EXCEPT = 57402
const ALL = 57403
const ANY = 57404
const EXISTS = 57405
const IN = 57406
const AND = 57407
const OR = 57408
const NOT = 57409
const BETWEEN = 57410
const LIKE = 57411
const IS = 57412
const NULL = 57413
const NULLS = 57414
const DISTINCT = 57415
const WITH = 57416
const CASE = 57417
const IF = 57418
const ELSEIF = 57419
const WHILE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const DO = 57424
const END = 57425
const DECLARE = 57426
const CURSOR = 57427
const FOR = 57428
const FETCH = 57429
const OPEN = 57430
const CLOSE = 57431
const DISPOSE = 57432
const NEXT = 57433
const PRIOR = 57434
const ABSOLUTE = 57435
const RELATIVE = 57436
const RANGE = 57437
const SEPARATOR = 57438
const PARTITION = 57439
const OVER = 57440
const COMMIT = 57441
const ROLLBACK = 57442
const CONTINUE = 57443
const BREAK = 57444
const EXIT = 57445
const PRINT = 57446
const PRINTF = 57447
const SOURCE = 57448
const FUNCTION = 57449
const BEGIN = 57450
const RETURN = 57451
const VAR = 57452
const COMPARISON_OP = 57453
const STRING_OP = 57454
const SUBSTITUTION_OP = 57455
const UMINUS = 57456
const UPLUS = 57457

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"TIES",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"NULLS",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"BEGIN",
	"RETURN",
	"VAR",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1707

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 117,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	77, 1,
	81, 1,
	83, 1,
	-2, 117,
	-1, 91,
	58, 97,
	59, 97,
	60, 97,
	-2, 108,
	-1, 121,
	64, 294,
	68, 294,
	69, 294,
	-2, 310,
	-1, 132,
	77, 1,
	81, 1,
	83, 1,
	-2, 117,
	-1, 156,
	79, 234,
	-2, 294,
	-1, 165,
	83, 3,
	-2, 117,
	-1, 187,
	64, 294,
	68, 294,
	69, 294,
	-2, 241,
	-1, 196,
	4, 83,
	-2, 294,
	-1, 197,
	4, 84,
	-2, 294,
	-1, 212,
	70, 0,
	111, 0,
	118, 0,
	-2, 162,
	-1, 213,
	70, 0,
	111, 0,
	118, 0,
	-2, 164,
	-1, 233,
	96, 108,
	123, 241,
	-2, 294,
	-1, 248,
	77, 3,
	81, 3,
	83, 3,
	-2, 117,
	-1, 267,
	48, 296,
	50, 300,
	-2, 243,
	-1, 285,
	64, 294,
	68, 294,
	69, 294,
	-2, 227,
	-1, 295,
	64, 294,
	68, 294,
	69, 294,
	-2, 289,
	-1, 312,
	83, 1,
	-2, 117,
	-1, 318,
	70, 0,
	111, 0,
	118, 0,
	-2, 173,
	-1, 326,
	96, 108,
	123, 198,
	-2, 294,
	-1, 344,
	83, 3,
	-2, 117,
	-1, 347,
	64, 294,
	68, 294,
	69, 294,
	-2, 113,
	-1, 351,
	64, 294,
	68, 294,
	69, 294,
	-2, 153,
	-1, 364,
	50, 300,
	-2, 296,
	-1, 377,
	64, 294,
	68, 294,
	69, 294,
	-2, 103,
	-1, 414,
	83, 238,
	-2, 294,
	-1, 424,
	77, 1,
	81, 1,
	83, 1,
	-2, 117,
	-1, 426,
	64, 294,
	68, 294,
	69, 294,
	-2, 116,
	-1, 473,
	83, 5,
	-2, 117,
	-1, 477,
	77, 1,
	81, 1,
	83, 1,
	-2, 117,
	-1, 483,
	79, 235,
	81, 235,
	83, 235,
	-2, 294,
	-1, 492,
	77, 1,
	81, 1,
	83, 1,
	-2, 25,
	-1, 502,
	64, 294,
	68, 294,
	69, 294,
	-2, 256,
	-1, 508,
	64, 294,
	68, 294,
	69, 294,
	-2, 107,
	-1, 516,
	64, 294,
	68, 294,
	69, 294,
	-2, 59,
	-1, 523,
	77, 5,
	81, 5,
	83, 5,
	-2, 117,
	-1, 530,
	83, 5,
	-2, 117,
	-1, 541,
	83, 3,
	-2, 117,
	-1, 568,
	64, 294,
	68, 294,
	69, 294,
	-2, 310,
	-1, 581,
	64, 294,
	68, 294,
	69, 294,
	-2, 225,
	-1, 591,
	77, 5,
	81, 5,
	83, 5,
	-2, 117,
	-1, 592,
	83, 7,
	-2, 117,
	-1, 598,
	77, 3,
	81, 3,
	83, 3,
	-2, 117,
	-1, 607,
	77, 7,
	81, 7,
	83, 7,
	-2, 117,
	-1, 622,
	83, 5,
	-2, 117,
	-1, 628,
	83, 7,
	-2, 117,
	-1, 636,
	77, 5,
	81, 5,
	83, 5,
	-2, 117,
	-1, 640,
	77, 1,
	81, 5,
	83, 5,
	-2, 117,
	-1, 643,
	77, 5,
	81, 5,
	83, 5,
	-2, 27,
	-1, 648,
	109, 23,
	-2, 20,
	-1, 653,
	83, 7,
	-2, 117,
	-1, 666,
	77, 1,
	81, 1,
	83, 1,
	-2, 117,
	-1, 667,
	83, 3,
	-2, 117,
	-1, 671,
	77, 7,
	81, 7,
	83, 7,
	-2, 117,
	-1, 673,
	109, 47,
	-2, 44,
	-1, 679,
	83, 3,
	-2, 117,
	-1, 681,
	77, 1,
	81, 1,
	83, 1,
	-2, 117,
}

const yyPrivate = 57344

const yyLast = 2297

var yyAct = [...]int{

	65, 24, 651, 24, 662, 305, 620, 2, 585, 88,
	405, 210, 1, 462, 41, 539, 168, 457, 49, 550,
	435, 576, 443, 427, 417, 356, 266, 310, 107, 108,
	365, 247, 275, 352, 252, 348, 148, 282, 76, 363,
	176, 463, 268, 171, 71, 69, 96, 137, 124, 52,
	103, 278, 133, 328, 379, 151, 515, 141, 499, 140,
	139, 145, 267, 146, 142, 143, 136, 368, 384, 369,
	370, 371, 366, 151, 605, 364, 91, 323, 141, 152,
	141, 164, 140, 139, 151, 142, 143, 142, 143, 43,
	128, 523, 486, 438, 173, 173, 430, 399, 382, 201,
	3, 183, 184, 167, 145, 144, 146, 134, 133, 136,
	193, 194, 195, 141, 135, 140, 139, 167, 263, 203,
	142, 143, 40, 189, 159, 619, 353, 204, 97, 617,
	93, 604, 94, 24, 92, 38, 172, 172, 175, 186,
	600, 606, 146, 573, 367, 136, 572, 535, 534, 519,
	134, 133, 231, 517, 271, 273, 141, 135, 140, 139,
	514, 511, 37, 142, 143, 228, 24, 255, 498, 488,
	487, 261, 485, 249, 264, 173, 469, 256, 173, 37,
	456, 402, 288, 398, 214, 38, 134, 133, 97, 186,
	322, 293, 141, 135, 140, 139, 238, 241, 38, 142,
	143, 230, 302, 229, 277, 91, 208, 588, 306, 236,
	239, 582, 239, 560, 42, 286, 556, 395, 336, 309,
	334, 311, 44, 45, 46, 47, 48, 354, 332, 289,
	209, 280, 281, 146, 308, 90, 99, 99, 300, 102,
	294, 106, 207, 439, 198, 43, 118, 119, 299, 24,
	324, 190, 301, 99, 128, 317, 249, 319, 320, 315,
	314, 288, 530, 359, 173, 321, 361, 473, 471, 557,
	372, 130, 510, 587, 482, 173, 422, 157, 130, 410,
	340, 331, 489, 411, 158, 206, 110, 670, 660, 644,
	306, 388, 359, 359, 338, 385, 639, 99, 43, 362,
	421, 374, 303, 390, 306, 630, 172, 360, 392, 396,
	145, 144, 146, 24, 625, 136, 387, 597, 188, 114,
	115, 595, 191, 192, 406, 378, 129, 380, 381, 574,
	562, 679, 386, 129, 493, 476, 199, 200, 202, 404,
	413, 109, 403, 412, 339, 24, 654, 628, 131, 623,
	653, 622, 249, 622, 542, 359, 134, 133, 541, 419,
	344, 420, 141, 135, 140, 139, 237, 655, 173, 142,
	143, 418, 635, 418, 447, 418, 425, 543, 434, 112,
	113, 116, 117, 288, 453, 313, 138, 423, 388, 312,
	654, 359, 418, 313, 446, 442, 237, 437, 329, 542,
	306, 676, 669, 646, 441, 472, 638, 448, 296, 297,
	288, 465, 62, 26, 615, 26, 286, 596, 187, 532,
	452, 455, 475, 37, 429, 24, 182, 497, 547, 246,
	216, 288, 492, 84, 215, 217, 243, 50, 87, 359,
	242, 173, 51, 146, 416, 479, 173, 668, 593, 166,
	245, 244, 494, 121, 279, 484, 491, 219, 218, 179,
	444, 359, 359, 160, 501, 505, 496, 518, 342, 343,
	500, 178, 179, 180, 24, 81, 82, 83, 24, 84,
	85, 37, 288, 147, 554, 506, 504, 445, 509, 533,
	440, 153, 154, 24, 156, 86, 495, 162, 163, 346,
	359, 432, 433, 503, 41, 173, 259, 173, 507, 602,
	481, 538, 451, 540, 393, 394, 388, 536, 409, 397,
	549, 260, 400, 450, 24, 418, 376, 169, 466, 559,
	569, 24, 558, 464, 101, 196, 197, 566, 545, 546,
	100, 86, 24, 56, 11, 26, 11, 205, 522, 249,
	127, 520, 211, 212, 213, 173, 575, 474, 220, 221,
	222, 223, 224, 225, 226, 61, 39, 553, 39, 555,
	401, 233, 580, 577, 524, 584, 383, 368, 26, 369,
	370, 371, 298, 306, 38, 89, 418, 170, 599, 276,
	262, 105, 24, 24, 612, 290, 291, 603, 563, 24,
	285, 38, 373, 601, 292, 570, 249, 467, 24, 295,
	177, 174, 274, 470, 38, 120, 624, 583, 458, 459,
	460, 461, 40, 24, 524, 537, 480, 611, 631, 24,
	616, 524, 265, 123, 316, 634, 318, 24, 490, 618,
	122, 24, 611, 38, 24, 126, 181, 652, 104, 70,
	68, 67, 533, 326, 24, 661, 330, 66, 621, 9,
	659, 26, 357, 611, 8, 7, 327, 24, 24, 674,
	341, 611, 24, 155, 58, 249, 11, 283, 347, 351,
	24, 284, 24, 270, 608, 269, 586, 249, 611, 492,
	531, 74, 524, 524, 232, 377, 57, 632, 39, 608,
	60, 53, 673, 59, 54, 358, 611, 544, 524, 11,
	431, 425, 350, 491, 673, 647, 673, 349, 563, 125,
	608, 345, 258, 524, 449, 26, 375, 95, 643, 524,
	16, 39, 407, 257, 389, 391, 561, 524, 63, 111,
	4, 648, 14, 567, 524, 608, 13, 571, 414, 626,
	10, 15, 12, 609, 524, 105, 250, 26, 579, 608,
	525, 5, 607, 608, 248, 426, 0, 648, 648, 0,
	637, 608, 524, 643, 0, 257, 0, 590, 642, 0,
	648, 0, 648, 594, 0, 368, 0, 369, 370, 371,
	366, 0, 11, 364, 0, 663, 0, 436, 0, 0,
	0, 285, 0, 233, 0, 0, 0, 0, 0, 0,
	613, 614, 0, 677, 39, 0, 0, 0, 0, 0,
	0, 637, 0, 642, 0, 0, 0, 478, 351, 0,
	629, 0, 0, 436, 483, 0, 368, 26, 369, 370,
	371, 366, 551, 552, 364, 0, 0, 0, 0, 351,
	641, 0, 0, 645, 0, 0, 11, 0, 502, 0,
	0, 656, 0, 0, 257, 0, 0, 0, 0, 508,
	665, 0, 0, 0, 0, 0, 0, 0, 39, 0,
	0, 358, 0, 516, 675, 0, 26, 0, 11, 0,
	26, 680, 0, 21, 0, 0, 0, 0, 0, 0,
	351, 6, 0, 512, 513, 26, 0, 0, 0, 0,
	39, 0, 0, 0, 0, 38, 81, 82, 83, 0,
	84, 85, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 26, 0, 0, 0,
	0, 0, 436, 26, 0, 564, 565, 568, 0, 0,
	0, 0, 0, 0, 26, 0, 0, 0, 150, 0,
	0, 578, 0, 0, 0, 0, 149, 0, 11, 0,
	581, 0, 0, 0, 77, 0, 0, 0, 78, 0,
	0, 0, 86, 0, 234, 0, 75, 0, 0, 0,
	39, 0, 0, 150, 0, 0, 80, 0, 0, 0,
	0, 149, 0, 0, 26, 26, 0, 0, 0, 0,
	0, 26, 0, 0, 0, 0, 0, 11, 0, 0,
	26, 11, 0, 55, 0, 0, 0, 0, 235, 627,
	72, 73, 79, 64, 454, 26, 11, 0, 0, 39,
	0, 26, 633, 39, 0, 98, 0, 0, 0, 26,
	0, 0, 0, 26, 0, 0, 26, 0, 39, 145,
	144, 146, 0, 0, 136, 0, 26, 11, 657, 658,
	0, 0, 0, 664, 11, 0, 0, 0, 0, 26,
	26, 0, 0, 0, 26, 11, 0, 0, 0, 39,
	0, 678, 26, 89, 26, 0, 39, 0, 0, 0,
	150, 161, 150, 0, 0, 134, 133, 39, 304, 0,
	307, 141, 135, 140, 139, 0, 0, 227, 142, 143,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 0, 11, 11, 0, 0, 0,
	0, 149, 11, 0, 0, 0, 0, 0, 0, 0,
	0, 11, 0, 0, 0, 150, 0, 39, 39, 0,
	0, 0, 0, 355, 39, 0, 11, 0, 0, 0,
	0, 0, 11, 39, 98, 0, 0, 0, 0, 0,
	11, 240, 240, 0, 11, 0, 0, 11, 39, 0,
	0, 0, 0, 0, 39, 0, 0, 11, 272, 0,
	0, 272, 39, 0, 0, 0, 39, 0, 0, 39,
	11, 11, 0, 0, 0, 11, 89, 0, 0, 39,
	0, 0, 0, 11, 0, 11, 150, 0, 150, 0,
	150, 0, 39, 39, 149, 0, 149, 39, 149, 0,
	240, 0, 240, 240, 0, 39, 0, 39, 0, 0,
	0, 38, 81, 82, 83, 0, 84, 85, 40, 0,
	0, 0, 0, 0, 0, 0, 240, 333, 335, 337,
	38, 81, 82, 83, 0, 84, 85, 40, 0, 0,
	0, 38, 81, 82, 83, 0, 84, 85, 40, 150,
	0, 0, 0, 0, 0, 0, 0, 468, 272, 0,
	0, 0, 98, 0, 98, 98, 0, 0, 0, 0,
	77, 0, 0, 0, 78, 0, 0, 0, 86, 0,
	234, 0, 75, 0, 0, 0, 0, 0, 0, 77,
	0, 0, 80, 78, 0, 0, 0, 86, 0, 0,
	77, 75, 0, 0, 78, 0, 0, 0, 86, 0,
	0, 80, 75, 0, 0, 0, 240, 0, 240, 0,
	240, 0, 80, 0, 235, 150, 72, 73, 79, 64,
	185, 0, 0, 521, 0, 0, 0, 240, 145, 144,
	146, 0, 0, 136, 0, 72, 73, 79, 64, 185,
	0, 272, 150, 43, 0, 667, 72, 73, 79, 64,
	548, 0, 0, 0, 38, 81, 82, 83, 0, 84,
	85, 40, 0, 0, 0, 0, 428, 0, 0, 0,
	0, 0, 0, 0, 134, 133, 0, 0, 0, 0,
	141, 135, 140, 139, 145, 144, 146, 142, 143, 136,
	240, 0, 0, 429, 38, 81, 82, 83, 0, 84,
	85, 40, 0, 0, 150, 0, 0, 0, 0, 0,
	0, 0, 589, 77, 272, 0, 0, 78, 0, 272,
	0, 86, 0, 0, 0, 75, 0, 0, 0, 0,
	134, 133, 0, 0, 0, 80, 141, 135, 140, 139,
	0, 0, 0, 142, 143, 145, 144, 146, 0, 0,
	136, 0, 0, 77, 0, 0, 0, 78, 0, 0,
	240, 86, 0, 0, 37, 75, 0, 287, 0, 72,
	73, 79, 64, 0, 0, 80, 0, 0, 272, 0,
	272, 38, 81, 82, 83, 0, 84, 85, 40, 0,
	0, 134, 133, 0, 0, 0, 0, 141, 135, 140,
	139, 0, 0, 0, 142, 143, 228, 0, 0, 72,
	73, 79, 64, 0, 145, 144, 146, 0, 0, 136,
	0, 240, 0, 0, 0, 0, 0, 0, 272, 681,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 0, 0, 0, 78, 0, 0, 0, 86, 0,
	0, 0, 75, 0, 0, 0, 0, 0, 0, 0,
	134, 133, 80, 0, 0, 0, 141, 135, 140, 139,
	0, 0, 0, 142, 143, 38, 81, 82, 83, 0,
	84, 85, 40, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 325, 0, 72, 73, 79, 64,
	0, 0, 0, 0, 0, 145, 144, 146, 0, 0,
	136, 0, 0, 0, 0, 0, 145, 144, 146, 0,
	671, 136, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 666, 0, 0, 77, 0, 0, 0, 78, 0,
	0, 0, 86, 0, 0, 0, 75, 0, 0, 0,
	0, 134, 133, 0, 0, 0, 80, 141, 135, 140,
	139, 0, 134, 133, 142, 143, 0, 0, 141, 135,
	140, 139, 145, 144, 146, 142, 143, 136, 0, 0,
	0, 0, 0, 145, 144, 146, 0, 640, 136, 0,
	72, 73, 79, 64, 145, 144, 146, 0, 636, 136,
	0, 0, 0, 0, 0, 145, 144, 146, 0, 598,
	136, 0, 0, 0, 0, 0, 0, 0, 134, 133,
	0, 0, 0, 0, 141, 135, 140, 139, 0, 134,
	133, 142, 143, 0, 0, 141, 135, 140, 139, 0,
	134, 133, 142, 143, 0, 0, 141, 135, 140, 139,
	0, 134, 133, 142, 143, 0, 43, 141, 135, 140,
	139, 145, 144, 146, 142, 143, 136, 0, 0, 0,
	0, 145, 144, 146, 0, 0, 136, 0, 592, 0,
	0, 0, 145, 144, 146, 0, 591, 136, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 477, 0, 0,
	0, 0, 0, 0, 145, 144, 146, 134, 133, 136,
	0, 0, 0, 141, 135, 140, 139, 134, 133, 424,
	142, 143, 0, 141, 135, 140, 139, 0, 134, 133,
	142, 143, 0, 0, 141, 135, 140, 139, 145, 144,
	146, 142, 143, 136, 0, 0, 0, 0, 0, 0,
	134, 133, 0, 415, 0, 0, 141, 135, 140, 139,
	145, 144, 146, 142, 143, 136, 0, 0, 0, 0,
	0, 145, 144, 146, 0, 0, 136, 165, 0, 0,
	0, 0, 0, 0, 134, 133, 132, 0, 0, 0,
	141, 135, 140, 139, 145, 144, 146, 142, 143, 136,
	0, 0, 0, 0, 0, 0, 134, 133, 0, 0,
	0, 0, 141, 135, 140, 139, 0, 134, 133, 142,
	143, 0, 0, 141, 135, 140, 139, 408, 144, 146,
	142, 143, 136, 0, 0, 0, 0, 0, 38, 0,
	134, 133, 0, 0, 0, 40, 141, 135, 140, 139,
	33, 0, 0, 142, 143, 0, 0, 0, 0, 0,
	22, 0, 0, 23, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 134, 133, 0, 38, 0, 0, 141,
	135, 140, 139, 40, 0, 0, 142, 143, 33, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 22, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 37, 0,
	672, 0, 650, 0, 0, 0, 0, 0, 17, 0,
	38, 30, 27, 28, 29, 0, 0, 40, 0, 0,
	0, 0, 33, 31, 32, 253, 254, 20, 34, 35,
	36, 0, 22, 528, 25, 23, 37, 0, 610, 0,
	527, 0, 0, 0, 0, 0, 529, 0, 38, 30,
	27, 28, 29, 0, 0, 40, 0, 0, 0, 0,
	33, 31, 32, 253, 254, 0, 34, 35, 36, 0,
	22, 528, 25, 23, 0, 0, 0, 0, 0, 0,
	37, 0, 251, 0, 19, 0, 0, 0, 0, 0,
	17, 0, 38, 30, 27, 28, 29, 0, 0, 40,
	0, 0, 0, 0, 33, 31, 32, 253, 254, 20,
	34, 35, 36, 0, 22, 0, 25, 23, 37, 0,
	649, 0, 650, 0, 0, 0, 0, 0, 17, 0,
	38, 30, 27, 28, 29, 0, 0, 40, 0, 0,
	0, 0, 33, 31, 32, 0, 0, 20, 34, 35,
	36, 0, 22, 528, 25, 23, 0, 0, 0, 0,
	0, 0, 37, 0, 526, 0, 527, 0, 0, 0,
	0, 0, 529, 0, 0, 30, 27, 28, 29, 0,
	0, 0, 0, 0, 0, 0, 0, 31, 32, 0,
	0, 0, 34, 35, 36, 0, 0, 528, 25, 0,
	37, 0, 18, 0, 19, 0, 0, 0, 0, 0,
	17, 0, 0, 30, 27, 28, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 31, 32, 0, 0, 20,
	34, 35, 36, 0, 0, 0, 25,
}
var yyPact = [...]int{

	2186, -1000, 2186, -1000, -1000, -1000, 129, 129, 129, 129,
	129, 129, -1000, -1000, -1000, -1000, -1000, 639, 1621, 1621,
	129, 115, 510, 504, 117, 611, 129, 639, 639, 256,
	288, 129, 129, 603, 1621, 635, 628, 525, -1000, 141,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 241,
	1856, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 141, -1000, -1000, 1440, -43, -1000, -1000, -1000, -1000,
	-1000, -1000, 1621, 1621, -1000, 1621, 166, 114, 1621, 1621,
	639, -1000, -1000, -1000, -1000, -1000, -1000, 1845, 385, -23,
	-1000, 489, 567, 639, 597, 596, 413, 353, -1000, 349,
	639, 639, 1266, 129, -3, 138, -1000, 129, 129, 639,
	639, 639, -1000, -1000, -1000, -1000, 1621, 1621, -1000, -1000,
	126, 1690, -27, 129, -1000, -7, 639, -1000, 1621, 199,
	120, 108, 2186, 1621, 1621, 1621, 376, 366, 396, 1621,
	1621, 1621, 1621, 1621, 1621, 1621, -1000, 994, 80, 78,
	175, 639, 1247, -1000, -1000, 287, 1879, 90, 90, 372,
	389, -1000, 75, -1000, 359, 2066, 639, 611, 462, 480,
	639, 574, -8, 610, 131, 598, 571, 131, 393, 393,
	393, 1400, -1000, 107, 568, -1000, 68, 1430, -1000, 611,
	1621, -1000, -1000, 129, 129, 562, 1879, 1879, 470, -1000,
	-1000, 1621, -1000, 525, 180, 1879, 349, 639, 349, 111,
	308, -37, -60, -60, 424, 1621, 90, 1621, 90, 90,
	-39, -39, -1000, -1000, -1000, -4, 75, -1000, 1621, -1000,
	-1000, -1000, 67, 39, 1527, -1000, 317, 1621, -1000, 1440,
	-1000, -1000, 90, 106, 98, 96, 376, 261, 2066, -1000,
	-1000, 1621, -1000, 129, 129, 278, -1000, -9, 454, 1621,
	1621, 105, 639, 639, -1000, 639, 571, 18, -1000, 580,
	-1000, -1000, -1000, -1000, 131, 487, 1621, -1000, 175, -1000,
	175, 175, -1000, -28, 554, 1879, -1000, -1000, -54, 639,
	194, 181, 639, -1000, -1000, 1879, -1000, -1000, 611, 129,
	129, -1000, 95, 639, 129, 60, -29, 129, 548, 58,
	259, 308, 2186, 1621, -1000, -1000, 1912, -1000, -60, -1000,
	-1000, -1000, -1000, 477, 183, -1000, 245, 257, 287, 1621,
	1823, 379, 88, -1000, 88, -1000, 88, -1000, 212, 309,
	-1000, 1789, -1000, -1000, 2066, -1000, 1621, 1369, -1000, -30,
	459, 1879, -1000, 90, 639, -1000, 596, -33, 125, -72,
	-1000, -1000, -1000, 442, 528, 410, 439, 131, -1000, -1000,
	-1000, -1000, -1000, 639, 571, 483, 471, 1879, 400, -1000,
	-1000, 400, 1400, 639, 911, 57, 587, 639, 498, -1000,
	639, 491, 129, -1000, -1000, 349, 53, -1000, 182, 639,
	-1000, 159, 535, 346, 252, 316, -1000, 1767, 1621, 1621,
	621, 469, 178, -1000, 1879, 1621, 90, 49, -34, 47,
	46, -1000, 187, 129, 2066, 251, 1879, -1000, 350, 450,
	1621, 355, -1000, -1000, -1000, 45, -68, 571, 639, 1621,
	131, 438, 410, 437, -1000, 131, -1000, -1000, -1000, -1000,
	1621, 1621, -1000, -1000, 174, 38, -1000, -1000, -1000, -1000,
	639, 639, 37, -70, 1621, 30, 639, -1000, 26, 529,
	-1000, 349, -1000, 2148, 154, 129, 343, 2186, 75, 25,
	24, 1621, 620, 1879, -1000, -1000, 90, -1000, -1000, -1000,
	-1000, 277, 2186, 299, -1000, -1000, -1000, 507, 407, 639,
	-1000, -1000, 1879, 787, 131, 436, 131, 736, 1879, -1000,
	94, 171, -1000, -1000, 587, 639, 1879, -1000, -1000, -1000,
	91, 129, 247, 2148, -1000, -1000, 1621, 1621, 1277, 639,
	2148, -1000, 129, -1000, -1000, -1000, 23, 20, -1000, 246,
	277, 2066, 1621, 129, -1000, -1000, -1000, 90, -1000, -1000,
	-1000, 1621, 89, 736, 131, 787, 176, 85, -1000, -1000,
	349, -1000, 129, -1000, 1756, 1746, 384, -1000, 1690, 248,
	238, -1000, -1000, -1000, 341, 234, 322, -1000, 1679, -1000,
	-1000, 1879, 639, 736, -1000, 17, 489, 468, 176, 8,
	-1000, 2148, 2022, 639, -1000, 129, 129, 338, 2066, 6,
	-1000, -1000, 1621, 2, -1000, 272, 231, 2022, -1000, -1000,
	1621, -1000, 265, -1000, -1000, 129, -1000, -1000, -1000, -1000,
	222, 270, 2148, 1621, 316, 294, -1000, 1668, 2022, -1000,
	330, 213, -1000, 1657, 316, 129, 2022, 206, 129, 327,
	2104, -1000, 269, 2148, 289, -1000, 129, -1000, -1000, 1621,
	1621, 205, 269, 2022, 1621, 129, -1000, 1601, 1313, 383,
	326, 204, 313, -1000, 1590, -1000, 2104, 1984, 639, 129,
	325, 2022, 1621, -1000, 249, -1000, 129, -1000, 1499, 1984,
	-1000, 1984,
}
var yyPgo = [...]int{

	0, 11, 31, 74, 141, 100, 7, 91, 764, 762,
	761, 760, 34, 756, 753, 752, 751, 750, 41, 13,
	17, 746, 742, 740, 739, 738, 730, 901, 54, 46,
	727, 40, 32, 726, 724, 16, 722, 23, 721, 893,
	719, 48, 49, 442, 418, 38, 24, 35, 717, 712,
	710, 707, 1023, 704, 703, 701, 700, 543, 696, 694,
	691, 33, 8, 686, 42, 685, 62, 683, 19, 681,
	677, 674, 673, 53, 666, 20, 36, 26, 43, 5,
	37, 665, 664, 662, 25, 659, 10, 27, 21, 15,
	658, 6, 4, 2, 0, 657, 651, 650, 45, 649,
	44, 565, 9, 412, 648, 50, 646, 47, 39, 22,
	30, 51, 645, 386, 214,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	6, 6, 6, 7, 7, 8, 8, 9, 9, 10,
	10, 10, 10, 10, 11, 11, 11, 11, 11, 11,
	12, 12, 13, 13, 13, 14, 14, 14, 15, 15,
	16, 16, 17, 17, 17, 17, 17, 17, 18, 18,
	19, 19, 20, 20, 20, 20, 20, 21, 21, 21,
	21, 21, 22, 22, 22, 22, 23, 23, 24, 24,
	24, 24, 24, 24, 24, 25, 25, 26, 26, 26,
	26, 26, 27, 28, 28, 28, 28, 29, 29, 30,
	31, 31, 32, 32, 33, 33, 34, 34, 35, 35,
	36, 36, 36, 37, 37, 38, 38, 39, 39, 40,
	40, 41, 41, 42, 42, 42, 42, 42, 42, 43,
	43, 44, 44, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 45, 45, 46, 46, 47,
	47, 48, 48, 49, 49, 50, 50, 50, 51, 51,
	52, 53, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 55, 55, 55, 55, 55, 55, 55, 56, 56,
	56, 56, 57, 57, 58, 58, 59, 59, 59, 60,
	60, 60, 60, 61, 61, 62, 63, 63, 64, 64,
	64, 65, 65, 66, 66, 66, 66, 66, 66, 67,
	67, 67, 67, 67, 68, 68, 68, 69, 69, 69,
	70, 70, 71, 72, 72, 73, 73, 74, 74, 75,
	75, 76, 76, 77, 77, 78, 78, 79, 79, 80,
	80, 81, 81, 81, 81, 82, 83, 84, 84, 85,
	85, 86, 86, 87, 87, 88, 88, 89, 89, 90,
	90, 91, 91, 92, 92, 93, 93, 94, 95, 96,
	97, 98, 99, 100, 101, 102, 102, 103, 104, 104,
	105, 105, 106, 106, 107, 107, 108, 108, 109, 109,
	110, 110, 110, 110, 111, 111, 112, 112, 113, 113,
	114, 114,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	9, 7, 9, 2, 8, 9, 7, 9, 2, 3,
	2, 2, 8, 9, 1, 8, 9, 1, 3, 2,
	2, 2, 6, 6, 8, 5, 7, 7, 1, 3,
	1, 3, 0, 1, 1, 2, 2, 6, 3, 3,
	4, 6, 7, 9, 6, 4, 10, 11, 0, 1,
	1, 1, 1, 2, 2, 5, 6, 5, 3, 3,
	5, 3, 5, 5, 4, 4, 4, 1, 1, 3,
	0, 2, 0, 2, 0, 3, 0, 2, 0, 3,
	0, 3, 4, 0, 2, 0, 2, 0, 2, 6,
	9, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 1, 1, 3, 1,
	3, 2, 4, 1, 1, 0, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 3, 4, 4, 6, 6,
	4, 6, 4, 4, 4, 6, 4, 4, 6, 4,
	2, 3, 3, 3, 3, 3, 2, 2, 3, 3,
	2, 2, 3, 4, 4, 1, 1, 2, 2, 7,
	8, 7, 8, 7, 8, 2, 0, 3, 1, 2,
	3, 1, 1, 1, 1, 2, 3, 1, 1, 5,
	5, 6, 6, 4, 0, 2, 4, 1, 1, 1,
	1, 3, 5, 0, 1, 4, 2, 0, 2, 1,
	3, 1, 3, 1, 3, 1, 3, 1, 3, 1,
	3, 6, 9, 5, 8, 7, 3, 1, 3, 5,
	6, 4, 2, 0, 2, 4, 2, 0, 2, 4,
	2, 0, 2, 4, 2, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 1, 3,
	1, 3, 0, 1, 0, 1, 0, 1, 0, 1,
	0, 1, 1, 1, 0, 1, 0, 1, 1, 1,
	0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -23, -10, -27, -81, -82, -85,
	-17, -57, -15, -21, -22, -16, -26, 84, 76, 78,
	103, -39, 26, 29, -94, 110, -103, 88, 89, 90,
	87, 99, 100, 16, 104, 105, 106, 74, 4, -101,
	11, -1, -114, 116, -114, -114, -114, -114, -114, -94,
	-44, -43, -42, -55, -53, -52, -57, -58, -71, -54,
	-56, -101, -103, -25, 122, -94, -95, -96, -97, -98,
	-99, -100, 119, 120, -60, 75, -45, 63, 67, 121,
	85, 5, 6, 7, 9, 10, 71, -44, -102, -101,
	-114, -28, 19, 15, 17, -30, -29, 13, -52, 122,
	30, 30, 122, -105, -104, -101, -114, -94, -94, 85,
	30, -24, 91, 92, 31, 32, 93, 94, -114, -114,
	12, -44, 5, 5, -41, -40, -112, 25, 113, 85,
	30, 107, 80, 112, 111, 118, 70, -107, -113, 120,
	119, 117, 124, 125, 66, 65, 67, -44, -76, -27,
	-39, 127, 122, -44, -44, -72, -44, 111, 118, -107,
	-113, -52, -44, -44, -94, 82, 64, 126, -35, 38,
	20, -78, -64, -94, 14, -78, -31, 14, 58, 59,
	60, -106, 73, -94, -94, 123, -76, -44, -114, 126,
	113, -114, -114, -94, -94, -94, -44, -44, 118, -114,
	-114, 126, -114, 126, -94, -44, 86, 122, 86, 122,
	-1, -44, -44, -44, -107, 68, 64, 69, 62, 61,
	-44, -44, -44, -44, -44, -44, -44, 123, 126, 123,
	123, -94, -59, -44, 73, 117, -73, 79, -45, 122,
	-52, -45, 68, 64, 62, 61, 70, -2, -8, -6,
	-13, 76, -12, 101, 102, -94, -102, -101, -36, 44,
	41, -94, 16, 126, -94, 22, -77, -66, -64, -65,
	-67, 23, -52, 24, 14, -32, 18, -77, -111, 61,
	-111, -111, -80, -70, -69, -44, -61, 117, -94, 122,
	27, 28, 36, 123, -105, -44, -114, -114, 20, -42,
	-76, -41, 22, 122, -27, -79, -94, -27, 123, -102,
	-87, -86, 81, 77, -98, -100, -44, -45, -44, -45,
	-45, -76, 123, 38, -35, 117, -44, -74, -73, 81,
	-44, -45, 122, -52, 122, -52, 122, -52, -107, 83,
	-2, -44, -114, -114, 82, -38, 45, -44, -47, -48,
	-49, -44, -61, 21, 122, -27, -84, -83, -43, -94,
	-78, -94, -32, -108, 57, -110, 54, 126, 49, 51,
	52, 53, -94, 22, -77, -33, 39, -44, -29, -28,
	-29, -29, 126, 22, 122, -79, -18, 122, -94, -43,
	122, -43, -102, -114, -114, 122, -79, -114, 123, 126,
	-114, 22, 123, 83, -87, -86, -1, -44, 65, 41,
	96, 38, -35, 83, -44, 80, 65, -46, -45, -46,
	-46, 88, 64, 78, 80, -2, -44, -37, 47, 74,
	126, -50, 42, 43, -46, -75, -43, -31, 126, 118,
	48, -108, -110, -109, 50, 48, -77, -94, -32, -34,
	40, 41, -80, -94, 123, -76, 123, -20, 31, 32,
	33, 34, -19, -18, 35, -75, 37, -114, -27, 123,
	-114, 86, -79, 108, 22, 76, 83, 80, -44, -47,
	5, 41, 96, -44, -45, 123, 126, 123, 123, 95,
	-114, -2, -6, 83, -37, 46, -47, 72, 123, 126,
	-32, -84, -44, -66, 48, -109, 48, -66, -44, -76,
	98, 123, -43, -43, 123, 126, -44, 123, -94, 123,
	22, -27, -3, -7, -5, -11, 76, 78, 109, 84,
	108, -114, 76, -1, 123, 123, -47, 5, -46, -89,
	-88, 81, 77, 78, -51, 31, 32, 21, -27, -75,
	-68, 55, 56, -66, 48, -66, 122, 98, -20, -19,
	122, -114, 83, -3, -44, -44, -102, -114, -44, -94,
	-3, -114, 123, 123, 83, -89, -88, -2, -44, -114,
	-46, -44, 122, -66, -68, -62, -63, 97, 122, -27,
	-114, 80, 82, 64, -114, 83, 76, 83, 80, -79,
	123, -35, 41, -62, 123, -3, -4, -9, -7, -14,
	76, -12, -94, -114, -114, 76, -2, 123, -76, 123,
	-91, -90, 81, 77, -86, 83, -4, -44, 82, -114,
	83, -91, -3, -44, -86, 78, 80, -4, 76, 83,
	80, -114, -4, -7, 83, -114, 76, -3, -5, 76,
	78, -93, -92, 81, 77, 78, -114, -44, -44, -102,
	83, -93, -92, -4, -44, -114, 80, 82, 64, 76,
	83, 80, 76, -12, -94, -114, 76, -4, -44, 82,
	-114, 80,
}
var yyDef = [...]int{

	-2, -2, -2, 20, 21, 22, 310, 310, 310, 310,
	310, 310, 15, 16, 17, 18, 19, 0, 0, 0,
	310, 0, 0, 0, 0, 0, 310, 0, 0, 0,
	78, 310, 310, 0, 0, 0, 0, 306, 277, 0,
	284, 2, 9, 311, 10, 11, 12, 13, 14, 0,
	294, 131, 132, 133, 134, 135, 136, 137, 138, 139,
	140, 141, 142, 143, 117, 129, 123, 124, 125, 126,
	127, 128, 0, 0, 195, 233, 294, 0, 0, 0,
	0, 278, 279, 280, 281, 282, 283, 294, 0, 141,
	33, -2, 0, 0, 0, 100, 0, 292, 98, 117,
	0, 0, 0, 310, 290, 288, 49, 310, 310, 0,
	0, 0, 79, 80, 81, 82, 0, 0, 50, 51,
	0, -2, 310, 310, 118, 121, 0, 307, 0, 0,
	0, 0, -2, 0, 308, 309, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 295, 294, 0, 0,
	0, 0, 0, 186, 187, 0, -2, 308, 309, 0,
	0, 180, 190, 191, 0, -2, 0, 0, 110, 0,
	0, 0, 245, 208, 0, 0, 102, 0, 304, 304,
	304, 0, 293, 0, 0, 192, 0, -2, 48, 0,
	0, 68, 69, 310, 310, 0, -2, -2, 0, 88,
	89, 0, 91, 306, 0, 287, 117, 0, 117, 0,
	263, 161, -2, -2, 0, 0, 0, 0, 0, 0,
	181, 182, 183, 184, 185, 188, 189, 144, 0, 145,
	160, 130, 0, -2, 0, 196, 237, 0, 163, 117,
	146, 165, 0, 0, 0, 0, 294, 0, -2, 25,
	26, 0, 44, 310, 310, 0, 286, 285, 115, 0,
	0, 117, 0, 0, 209, 0, 102, -2, 213, 214,
	217, 218, 211, 212, 0, 104, 0, 101, 0, 305,
	0, 0, 99, 249, 230, -2, 228, 229, 129, 0,
	0, 0, 0, 193, 291, -2, 70, 75, 0, 310,
	310, 122, 0, 0, 310, 0, 247, 310, 0, 0,
	0, 263, -2, 0, 166, 167, 294, 170, -2, 174,
	177, 242, 194, 0, 0, 197, -2, 0, 236, 0,
	294, 0, 117, 172, 117, 176, 117, 179, 0, 0,
	4, 294, 40, 41, -2, 92, 0, -2, 109, 149,
	155, -2, 154, 0, 0, 253, 100, 257, 0, 129,
	246, 210, 259, 0, -2, 298, 0, 0, 297, 301,
	302, 303, 215, 0, 102, 106, 0, -2, 94, 97,
	95, 96, 0, 0, 0, 0, 62, 0, 58, 55,
	0, 0, 310, 87, 90, 117, 0, 67, 310, 0,
	74, 0, 0, 0, 0, 262, 264, 294, 0, 0,
	0, 0, 0, 232, -2, 0, 0, 0, 147, 0,
	0, 85, 0, 310, -2, 0, -2, 111, 113, 0,
	0, 151, 156, 157, 251, 0, 239, 102, 0, 0,
	0, 0, 298, 0, 299, 0, 244, 216, 260, 93,
	0, 0, 250, 231, 192, 0, 52, 53, 63, 64,
	0, 0, 0, 60, 0, 0, 0, 71, 0, 0,
	72, 117, 248, -2, 0, 310, 0, -2, 168, 109,
	0, 0, 0, -2, 169, 171, 0, 175, 178, 86,
	31, 267, -2, 0, 112, 114, 150, 0, 117, 0,
	255, 258, -2, 224, 0, 0, 0, 223, -2, 105,
	0, 193, 65, 66, 62, 0, -2, 56, 57, 119,
	0, 310, 0, -2, 23, 24, 0, 0, 310, 0,
	-2, 29, 310, 261, 199, 201, 109, 0, 148, 0,
	267, -2, 0, 310, 152, 158, 159, 0, 254, 240,
	219, 0, 0, 220, 0, 224, 206, 0, 54, 61,
	117, 73, 310, 6, 294, 294, 0, 38, -2, 0,
	0, 30, 200, 202, 0, 0, 266, 268, 294, 32,
	252, -2, 0, 222, 221, 0, 108, 0, 206, 0,
	76, -2, -2, 0, 39, 310, 310, 0, -2, 0,
	203, 205, 0, 0, 120, 271, 0, -2, 27, 28,
	0, 47, 0, 77, 42, 310, 265, 226, 207, 204,
	0, 271, -2, 0, 0, 0, 8, 294, -2, 43,
	0, 0, 272, 294, 270, 310, -2, 0, 310, 0,
	-2, 36, 275, -2, 0, 34, 310, 269, -2, 0,
	0, 0, 275, -2, 0, 310, 35, 294, 294, 0,
	0, 0, 274, 276, 294, 37, -2, -2, 0, 310,
	0, -2, 0, -2, 0, 45, 310, 273, 294, -2,
	46, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 121, 3, 3, 3, 125, 3, 3,
	122, 123, 117, 120, 126, 119, 127, 124, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 116,
	3, 118,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:179
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:184
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:191
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:196
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:203
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:208
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:215
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:220
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:227
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:231
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:235
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:239
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:243
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:247
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:251
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:255
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:259
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:263
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:267
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:273
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:277
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:281
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:291
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:301
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:307
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:311
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:317
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:321
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:325
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 32:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:329
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:333
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:339
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:343
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:347
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:351
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:355
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:359
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:365
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:369
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:375
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:379
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:383
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:389
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:393
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:397
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:403
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 49:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:407
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:413
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:417
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:423
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:427
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 54:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:431
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:435
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 56:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:439
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:443
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression.(FieldReference), To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:449
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:453
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:459
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:463
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:469
		{
			yyVAL.expression = nil
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:473
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:477
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:481
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:485
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 67:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:491
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:495
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:499
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:503
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 71:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:507
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 72:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:513
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 73:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:517
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:521
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:525
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 76:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:531
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 77:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:535
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:541
		{
			yyVAL.expression = nil
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:545
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:549
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:553
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:557
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:561
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:565
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:571
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 86:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:575
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:581
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:585
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:589
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 90:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:593
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:597
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].token.Literal}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:603
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:615
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:625
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:634
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:643
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:654
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:658
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:664
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 100:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:670
		{
			yyVAL.expression = nil
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:674
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:680
		{
			yyVAL.expression = nil
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:684
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:690
		{
			yyVAL.expression = nil
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:694
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:700
		{
			yyVAL.expression = nil
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:704
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:710
		{
			yyVAL.expression = nil
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:714
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:720
		{
			yyVAL.expression = nil
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:724
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:728
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:734
		{
			yyVAL.expression = nil
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:738
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:744
		{
			yyVAL.expression = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:748
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:754
		{
			yyVAL.expression = nil
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:758
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:764
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 120:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:768
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:774
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:778
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:784
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:788
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:792
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:796
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:800
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:804
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:810
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Column: yyDollar[1].identifier}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:814
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:820
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:824
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:828
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:832
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:836
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:840
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:844
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:848
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:852
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:856
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:860
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:864
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:868
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:872
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:878
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:882
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:888
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:892
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:898
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:902
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:908
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:912
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:918
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:922
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:928
		{
			yyVAL.token = Token{}
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:932
		{
			yyVAL.token = yyDollar[1].token
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:936
		{
			yyVAL.token = yyDollar[1].token
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:942
		{
			yyVAL.token = yyDollar[1].token
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:946
		{
			yyVAL.token = yyDollar[1].token
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:952
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:958
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:981
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:985
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:989
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:993
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:997
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1001
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1005
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1009
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1013
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 171:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1017
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1021
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1025
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1029
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1033
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1037
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 177:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1041
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1045
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1049
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1053
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1059
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1063
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1067
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1071
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1075
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1079
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1083
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1089
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1093
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1097
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1101
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1107
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal}
		}
	case 193:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1111
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1117
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Option: yyDollar[3].expression.(AggregateOption)}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1121
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1127
		{
			yyVAL.expression = AggregateOption{Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}}}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1131
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[2].token)}}}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1135
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{yyDollar[2].expression}}
		}
	case 199:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1141
		{
			orderBy := OrderByClause{OrderBy: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Items: yyDollar[6].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: orderBy}
		}
	case 200:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1146
		{
			orderBy := OrderByClause{OrderBy: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Items: yyDollar[7].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: orderBy}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1151
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: yyDollar[4].expression, SeparatorLit: yyDollar[5].token.Literal, Separator: yyDollar[6].token.Literal}
		}
	case 202:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1155
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: yyDollar[5].expression, SeparatorLit: yyDollar[6].token.Literal, Separator: yyDollar[7].token.Literal}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1161
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Over: yyDollar[4].token.Literal, AnalyticClause: yyDollar[6].expression.(AnalyticClause)}
		}
	case 204:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1165
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1171
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1177
		{
			yyVAL.expression = nil
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1181
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1187
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier}
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1191
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, Alias: yyDollar[2].identifier}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1195
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1201
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1205
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1211
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1215
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1219
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1223
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1227
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1231
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 219:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1237
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 220:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1241
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 221:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1245
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 222:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1249
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1253
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 224:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1259
		{
			yyVAL.expression = nil
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1263
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 226:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1267
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1273
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1277
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1281
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1287
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1291
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 232:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1297
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 233:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1303
		{
			yyVAL.expression = nil
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1307
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 235:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1313
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1317
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 237:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1323
		{
			yyVAL.expression = nil
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1327
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1333
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 240:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1337
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1343
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1347
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1353
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1357
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1363
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1367
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1373
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1377
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1383
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1387
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1393
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 252:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1397
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1401
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 254:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1405
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 255:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1411
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1417
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression.(FieldReference), Value: yyDollar[3].expression}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1423
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1427
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 259:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1433
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 260:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1438
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1445
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 262:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1449
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 263:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1455
		{
			yyVAL.procexpr = nil
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1459
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1465
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1469
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 267:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1475
		{
			yyVAL.procexpr = nil
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1479
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 269:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1485
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1489
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 271:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1495
		{
			yyVAL.procexpr = nil
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1499
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1505
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1509
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 275:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1515
		{
			yyVAL.procexpr = nil
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1519
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1525
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1531
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1537
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1543
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1549
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1555
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1561
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1567
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1573
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1577
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1583
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1589
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1593
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1599
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1603
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1609
		{
			yyVAL.token = Token{}
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1613
		{
			yyVAL.token = yyDollar[1].token
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1619
		{
			yyVAL.token = Token{}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1623
		{
			yyVAL.token = yyDollar[1].token
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1629
		{
			yyVAL.token = Token{}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1633
		{
			yyVAL.token = yyDollar[1].token
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1639
		{
			yyVAL.token = Token{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1643
		{
			yyVAL.token = yyDollar[1].token
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1649
		{
			yyVAL.token = Token{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1653
		{
			yyVAL.token = yyDollar[1].token
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1657
		{
			yyVAL.token = yyDollar[1].token
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1661
		{
			yyVAL.token = yyDollar[1].token
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1667
		{
			yyVAL.token = Token{}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1671
		{
			yyVAL.token = yyDollar[1].token
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1677
		{
			yyVAL.token = Token{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1681
		{
			yyVAL.token = yyDollar[1].token
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1688
		{
			yyVAL.token = yyDollar[1].token
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1692
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1699
		{
			yyVAL.token = Token{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1703
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
