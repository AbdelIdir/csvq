//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const TRIGGER = 57447
const FUNCTION = 57448
const AGGREGATE = 57449
const BEGIN = 57450
const RETURN = 57451
const IGNORE = 57452
const WITHIN = 57453
const VAR = 57454
const TIES = 57455
const NULLS = 57456
const ERROR = 57457
const COUNT = 57458
const LISTAGG = 57459
const AGGREGATE_FUNCTION = 57460
const FUNCTION_WITH_ADDITIONALS = 57461
const COMPARISON_OP = 57462
const STRING_OP = 57463
const SUBSTITUTION_OP = 57464
const UMINUS = 57465
const UPLUS = 57466

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"TRIGGER",
	"FUNCTION",
	"AGGREGATE",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"TIES",
	"NULLS",
	"ERROR",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_ADDITIONALS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1831

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 128,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	75, 1,
	79, 1,
	81, 1,
	-2, 128,
	-1, 103,
	57, 108,
	58, 108,
	59, 108,
	-2, 119,
	-1, 136,
	63, 322,
	67, 322,
	68, 322,
	-2, 338,
	-1, 138,
	63, 322,
	67, 322,
	68, 322,
	-2, 338,
	-1, 145,
	75, 1,
	79, 1,
	81, 1,
	-2, 128,
	-1, 172,
	77, 255,
	-2, 322,
	-1, 182,
	81, 3,
	-2, 128,
	-1, 206,
	63, 322,
	67, 322,
	68, 322,
	-2, 262,
	-1, 221,
	63, 322,
	67, 322,
	68, 322,
	-2, 90,
	-1, 222,
	63, 322,
	67, 322,
	68, 322,
	-2, 91,
	-1, 229,
	63, 322,
	67, 322,
	68, 322,
	-2, 338,
	-1, 236,
	69, 0,
	120, 0,
	127, 0,
	-2, 177,
	-1, 237,
	69, 0,
	120, 0,
	127, 0,
	-2, 179,
	-1, 276,
	75, 3,
	79, 3,
	81, 3,
	-2, 128,
	-1, 295,
	47, 324,
	49, 328,
	-2, 264,
	-1, 313,
	63, 322,
	67, 322,
	68, 322,
	-2, 248,
	-1, 327,
	63, 322,
	67, 322,
	68, 322,
	-2, 317,
	-1, 339,
	63, 322,
	67, 322,
	68, 322,
	-2, 338,
	-1, 345,
	81, 1,
	-2, 128,
	-1, 351,
	69, 0,
	120, 0,
	127, 0,
	-2, 188,
	-1, 377,
	81, 3,
	-2, 128,
	-1, 378,
	81, 3,
	-2, 128,
	-1, 381,
	63, 322,
	67, 322,
	68, 322,
	-2, 124,
	-1, 385,
	63, 322,
	67, 322,
	68, 322,
	-2, 168,
	-1, 399,
	49, 328,
	-2, 324,
	-1, 412,
	63, 322,
	67, 322,
	68, 322,
	-2, 114,
	-1, 455,
	81, 259,
	-2, 322,
	-1, 466,
	75, 1,
	79, 1,
	81, 1,
	-2, 128,
	-1, 469,
	63, 322,
	67, 322,
	68, 322,
	-2, 127,
	-1, 528,
	75, 1,
	79, 1,
	81, 1,
	-2, 128,
	-1, 530,
	77, 256,
	79, 256,
	81, 256,
	-2, 322,
	-1, 540,
	75, 1,
	79, 1,
	81, 1,
	-2, 26,
	-1, 551,
	63, 322,
	67, 322,
	68, 322,
	-2, 277,
	-1, 557,
	63, 322,
	67, 322,
	68, 322,
	-2, 118,
	-1, 572,
	63, 322,
	67, 322,
	68, 322,
	-2, 64,
	-1, 577,
	81, 5,
	-2, 128,
	-1, 590,
	81, 3,
	-2, 128,
	-1, 618,
	75, 5,
	79, 5,
	81, 5,
	-2, 128,
	-1, 624,
	81, 5,
	-2, 128,
	-1, 625,
	81, 5,
	-2, 128,
	-1, 638,
	63, 322,
	67, 322,
	68, 322,
	-2, 246,
	-1, 658,
	63, 322,
	67, 322,
	68, 322,
	-2, 338,
	-1, 666,
	75, 3,
	79, 3,
	81, 3,
	-2, 128,
	-1, 679,
	75, 5,
	79, 5,
	81, 5,
	-2, 128,
	-1, 680,
	81, 7,
	-2, 128,
	-1, 686,
	81, 5,
	-2, 128,
	-1, 705,
	75, 7,
	79, 7,
	81, 7,
	-2, 128,
	-1, 725,
	81, 5,
	-2, 128,
	-1, 731,
	81, 7,
	-2, 128,
	-1, 732,
	81, 7,
	-2, 128,
	-1, 741,
	75, 5,
	79, 5,
	81, 5,
	-2, 128,
	-1, 747,
	75, 1,
	79, 5,
	81, 5,
	-2, 128,
	-1, 750,
	75, 5,
	79, 5,
	81, 5,
	-2, 28,
	-1, 756,
	109, 24,
	-2, 22,
	-1, 761,
	81, 7,
	-2, 128,
	-1, 777,
	75, 1,
	79, 1,
	81, 1,
	-2, 128,
	-1, 778,
	81, 3,
	-2, 128,
	-1, 783,
	75, 7,
	79, 7,
	81, 7,
	-2, 128,
	-1, 785,
	109, 50,
	-2, 47,
	-1, 792,
	81, 3,
	-2, 128,
	-1, 793,
	81, 3,
	-2, 128,
	-1, 795,
	75, 1,
	79, 1,
	81, 1,
	-2, 128,
}

const yyPrivate = 57344

const yyLast = 2563

var yyAct = [...]int{

	73, 24, 703, 24, 277, 2, 759, 2, 275, 723,
	772, 234, 1, 101, 50, 186, 600, 446, 205, 668,
	588, 511, 424, 506, 280, 478, 632, 119, 487, 312,
	124, 125, 295, 382, 400, 87, 302, 393, 314, 309,
	512, 458, 398, 195, 189, 150, 343, 108, 80, 470,
	78, 140, 115, 296, 360, 414, 294, 200, 60, 305,
	59, 403, 164, 404, 405, 406, 401, 779, 293, 399,
	681, 291, 301, 76, 166, 146, 21, 103, 571, 118,
	154, 419, 153, 152, 165, 483, 164, 155, 156, 164,
	548, 161, 180, 40, 533, 154, 505, 153, 152, 158,
	157, 159, 155, 156, 149, 521, 191, 191, 522, 154,
	482, 292, 52, 202, 191, 204, 155, 156, 69, 48,
	183, 48, 226, 216, 217, 473, 144, 220, 417, 144,
	184, 231, 208, 175, 734, 566, 49, 721, 100, 184,
	720, 719, 184, 232, 117, 117, 24, 121, 402, 163,
	2, 194, 718, 618, 717, 147, 146, 565, 701, 693,
	387, 154, 148, 153, 152, 255, 692, 258, 155, 156,
	252, 688, 687, 649, 626, 611, 610, 190, 190, 144,
	609, 608, 607, 24, 283, 203, 286, 292, 163, 191,
	39, 581, 184, 292, 191, 238, 573, 191, 284, 570,
	559, 316, 41, 42, 47, 43, 44, 45, 46, 264,
	267, 39, 547, 230, 535, 534, 532, 525, 520, 103,
	427, 109, 51, 257, 517, 504, 262, 260, 261, 53,
	54, 55, 56, 57, 464, 453, 452, 451, 256, 274,
	259, 450, 290, 102, 325, 337, 254, 253, 330, 265,
	120, 702, 344, 304, 675, 133, 134, 435, 307, 308,
	341, 326, 674, 109, 48, 105, 673, 106, 672, 104,
	388, 354, 671, 648, 642, 639, 350, 24, 352, 353,
	265, 629, 336, 340, 161, 373, 627, 348, 442, 347,
	316, 358, 390, 191, 396, 329, 423, 704, 407, 422,
	421, 48, 191, 285, 363, 420, 368, 366, 364, 332,
	331, 321, 181, 111, 170, 169, 114, 223, 370, 52,
	209, 159, 425, 428, 396, 396, 144, 117, 386, 576,
	425, 397, 139, 437, 613, 546, 272, 392, 207, 111,
	544, 210, 163, 425, 215, 436, 24, 218, 219, 438,
	2, 537, 433, 413, 395, 415, 416, 447, 409, 224,
	225, 227, 228, 426, 190, 443, 686, 163, 625, 342,
	52, 212, 624, 355, 577, 173, 356, 357, 24, 24,
	677, 111, 174, 273, 429, 431, 467, 468, 646, 396,
	371, 445, 480, 645, 644, 48, 647, 643, 612, 606,
	459, 670, 459, 191, 459, 163, 536, 163, 460, 491,
	461, 537, 151, 463, 328, 782, 49, 770, 316, 497,
	752, 751, 793, 459, 211, 746, 735, 733, 428, 477,
	728, 396, 685, 684, 486, 123, 462, 481, 665, 333,
	334, 163, 485, 163, 651, 163, 492, 213, 214, 479,
	285, 630, 338, 542, 285, 541, 514, 496, 527, 490,
	454, 444, 372, 792, 48, 129, 130, 24, 762, 732,
	731, 540, 761, 725, 316, 539, 378, 499, 500, 501,
	502, 377, 764, 396, 263, 191, 619, 3, 122, 3,
	191, 479, 763, 531, 726, 591, 48, 48, 725, 590,
	176, 263, 740, 361, 375, 376, 425, 545, 593, 592,
	396, 396, 386, 465, 558, 554, 574, 552, 549, 163,
	550, 543, 556, 127, 128, 131, 132, 762, 567, 24,
	346, 563, 346, 2, 345, 498, 580, 591, 789, 503,
	585, 24, 781, 395, 754, 2, 745, 690, 664, 396,
	584, 526, 50, 597, 191, 39, 191, 472, 201, 439,
	440, 269, 441, 159, 457, 268, 589, 780, 96, 459,
	568, 569, 428, 682, 599, 586, 185, 306, 24, 198,
	617, 70, 27, 488, 27, 48, 603, 695, 605, 380,
	604, 24, 240, 615, 614, 555, 239, 241, 553, 633,
	271, 270, 243, 242, 39, 191, 197, 198, 199, 479,
	631, 159, 489, 484, 149, 560, 561, 562, 564, 24,
	288, 652, 641, 495, 163, 24, 24, 659, 660, 98,
	475, 476, 3, 459, 289, 494, 656, 640, 587, 637,
	425, 285, 411, 187, 515, 663, 403, 48, 404, 405,
	406, 401, 513, 163, 399, 516, 113, 518, 112, 48,
	143, 523, 667, 595, 596, 147, 146, 24, 676, 3,
	661, 154, 148, 153, 152, 691, 582, 579, 155, 156,
	24, 24, 710, 711, 578, 694, 519, 24, 538, 714,
	418, 696, 697, 698, 699, 700, 48, 403, 335, 404,
	405, 406, 188, 303, 163, 709, 24, 196, 135, 48,
	49, 93, 94, 95, 716, 96, 97, 507, 508, 509,
	510, 727, 722, 137, 142, 116, 24, 27, 737, 79,
	709, 77, 24, 24, 736, 75, 724, 48, 322, 323,
	575, 655, 24, 48, 48, 739, 8, 324, 24, 583,
	755, 24, 2, 652, 394, 7, 709, 709, 5, 585,
	760, 6, 24, 3, 27, 359, 709, 771, 171, 66,
	310, 311, 769, 298, 297, 669, 98, 85, 24, 24,
	786, 787, 2, 65, 24, 48, 709, 68, 61, 67,
	62, 594, 474, 24, 24, 384, 24, 383, 48, 48,
	540, 467, 468, 785, 539, 48, 141, 628, 709, 40,
	379, 64, 10, 287, 10, 635, 636, 785, 785, 493,
	785, 410, 107, 17, 48, 16, 71, 126, 299, 192,
	14, 162, 3, 13, 706, 12, 158, 157, 159, 650,
	9, 149, 15, 11, 48, 707, 657, 278, 620, 4,
	48, 48, 206, 705, 276, 0, 0, 0, 27, 706,
	48, 0, 0, 0, 3, 3, 48, 0, 0, 48,
	162, 58, 99, 0, 678, 0, 0, 768, 0, 0,
	48, 683, 0, 0, 0, 706, 706, 689, 136, 0,
	138, 0, 147, 146, 0, 750, 48, 48, 154, 148,
	153, 152, 48, 0, 0, 155, 156, 712, 713, 0,
	0, 48, 48, 715, 48, 706, 0, 0, 41, 42,
	47, 43, 44, 45, 46, 160, 158, 27, 159, 0,
	0, 149, 706, 0, 167, 168, 111, 706, 0, 172,
	0, 0, 178, 179, 0, 0, 706, 706, 0, 750,
	0, 0, 0, 3, 0, 40, 744, 10, 0, 27,
	27, 0, 0, 748, 0, 0, 0, 0, 753, 0,
	0, 0, 0, 0, 0, 74, 0, 765, 0, 0,
	0, 0, 147, 146, 221, 222, 775, 776, 154, 148,
	153, 152, 229, 0, 10, 155, 156, 233, 0, 235,
	236, 237, 0, 729, 788, 244, 245, 246, 247, 248,
	249, 250, 794, 0, 403, 3, 404, 405, 406, 401,
	601, 602, 399, 0, 162, 40, 0, 3, 0, 742,
	743, 0, 0, 0, 0, 193, 0, 0, 0, 749,
	0, 0, 0, 0, 0, 192, 0, 0, 27, 389,
	158, 157, 159, 313, 0, 149, 0, 0, 0, 773,
	0, 0, 327, 0, 41, 42, 47, 43, 44, 45,
	46, 40, 0, 94, 0, 0, 0, 3, 0, 0,
	0, 790, 430, 339, 0, 0, 0, 432, 10, 434,
	742, 743, 349, 749, 351, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 147, 146, 0, 0,
	27, 0, 154, 148, 153, 152, 362, 0, 251, 155,
	156, 252, 27, 162, 0, 162, 0, 162, 0, 0,
	0, 0, 374, 0, 41, 42, 47, 43, 44, 45,
	46, 381, 385, 40, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 3, 0, 34, 412, 10, 0, 27,
	0, 0, 0, 0, 0, 22, 0, 0, 23, 0,
	0, 0, 27, 0, 0, 0, 0, 0, 0, 0,
	41, 42, 47, 43, 44, 45, 46, 0, 0, 10,
	10, 0, 0, 0, 0, 0, 0, 0, 0, 448,
	27, 524, 0, 0, 0, 0, 27, 27, 0, 0,
	0, 39, 0, 279, 455, 19, 0, 0, 0, 0,
	0, 26, 0, 0, 31, 29, 30, 28, 0, 0,
	0, 0, 0, 469, 756, 0, 32, 33, 281, 282,
	20, 35, 36, 37, 38, 0, 0, 0, 27, 0,
	0, 25, 41, 42, 47, 43, 44, 45, 46, 0,
	0, 27, 27, 0, 756, 756, 0, 0, 27, 0,
	313, 0, 0, 0, 471, 0, 0, 0, 10, 756,
	756, 0, 756, 0, 0, 0, 0, 27, 0, 0,
	0, 0, 158, 157, 159, 0, 0, 149, 0, 0,
	472, 0, 529, 0, 0, 0, 598, 27, 0, 530,
	0, 0, 0, 27, 27, 0, 0, 0, 0, 0,
	0, 0, 63, 27, 0, 0, 385, 0, 0, 27,
	0, 0, 27, 0, 0, 616, 551, 0, 0, 0,
	10, 0, 0, 27, 110, 0, 0, 557, 147, 146,
	0, 0, 10, 0, 154, 148, 153, 152, 0, 27,
	27, 155, 156, 0, 0, 27, 572, 0, 0, 0,
	0, 0, 0, 0, 27, 27, 0, 27, 0, 0,
	0, 0, 0, 158, 157, 159, 662, 0, 149, 10,
	40, 0, 0, 158, 157, 159, 0, 795, 149, 0,
	0, 0, 10, 0, 0, 0, 0, 783, 0, 0,
	74, 177, 0, 0, 0, 40, 93, 94, 95, 0,
	96, 97, 49, 0, 0, 0, 0, 0, 0, 0,
	10, 0, 0, 0, 0, 74, 10, 10, 0, 147,
	146, 0, 0, 0, 634, 154, 148, 153, 152, 147,
	146, 0, 155, 156, 638, 154, 148, 153, 152, 0,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 653, 654, 658, 89, 10, 0,
	0, 98, 0, 0, 86, 0, 110, 0, 40, 0,
	0, 10, 10, 0, 91, 0, 266, 266, 10, 41,
	42, 47, 43, 44, 45, 46, 408, 0, 0, 0,
	0, 0, 0, 158, 157, 159, 300, 10, 149, 300,
	0, 0, 0, 0, 41, 42, 47, 84, 92, 83,
	46, 0, 0, 0, 0, 0, 52, 10, 40, 81,
	82, 90, 72, 10, 10, 0, 0, 0, 0, 0,
	0, 0, 0, 10, 0, 0, 0, 0, 192, 10,
	0, 730, 10, 266, 0, 266, 266, 0, 0, 147,
	146, 0, 0, 10, 52, 154, 148, 153, 152, 738,
	0, 0, 155, 156, 0, 0, 0, 0, 0, 10,
	10, 266, 365, 367, 369, 10, 0, 41, 42, 47,
	43, 44, 45, 46, 10, 10, 0, 10, 0, 0,
	766, 767, 158, 157, 159, 774, 0, 149, 0, 0,
	0, 0, 0, 0, 300, 0, 777, 0, 110, 0,
	110, 110, 0, 0, 0, 0, 0, 791, 40, 93,
	94, 95, 0, 96, 97, 49, 0, 41, 42, 47,
	43, 44, 45, 46, 0, 0, 0, 0, 74, 0,
	40, 93, 94, 95, 0, 96, 97, 49, 147, 146,
	0, 0, 0, 0, 154, 148, 153, 152, 0, 0,
	74, 155, 156, 0, 0, 0, 0, 266, 0, 266,
	0, 266, 0, 0, 0, 0, 88, 0, 0, 0,
	89, 0, 0, 0, 98, 0, 0, 86, 0, 0,
	266, 0, 0, 0, 0, 0, 0, 91, 88, 0,
	0, 40, 89, 0, 0, 300, 98, 201, 49, 86,
	0, 0, 0, 0, 0, 40, 93, 94, 95, 91,
	96, 97, 49, 0, 0, 0, 0, 41, 42, 47,
	84, 92, 83, 46, 0, 74, 0, 0, 40, 0,
	315, 0, 81, 82, 90, 72, 0, 0, 0, 41,
	42, 47, 84, 92, 83, 46, 391, 0, 0, 0,
	266, 0, 0, 0, 81, 82, 90, 72, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 89, 0, 0,
	0, 98, 0, 0, 86, 0, 0, 300, 0, 0,
	0, 0, 300, 0, 91, 0, 0, 0, 0, 40,
	93, 94, 95, 0, 96, 97, 49, 0, 0, 0,
	41, 42, 47, 43, 44, 45, 46, 0, 0, 74,
	0, 0, 0, 0, 41, 42, 47, 318, 319, 317,
	320, 0, 0, 0, 0, 0, 266, 315, 0, 81,
	82, 90, 72, 0, 0, 0, 0, 41, 42, 47,
	43, 44, 45, 46, 0, 0, 300, 88, 300, 0,
	0, 89, 0, 0, 0, 98, 0, 39, 86, 40,
	93, 94, 95, 0, 96, 97, 49, 0, 91, 0,
	158, 157, 159, 0, 0, 149, 0, 0, 40, 74,
	0, 0, 0, 0, 747, 0, 40, 93, 94, 95,
	266, 96, 97, 49, 0, 0, 0, 300, 41, 42,
	47, 84, 92, 83, 46, 0, 74, 0, 0, 0,
	0, 0, 0, 81, 82, 90, 72, 88, 0, 0,
	0, 89, 0, 0, 0, 98, 147, 146, 86, 0,
	0, 0, 154, 148, 153, 152, 0, 0, 91, 155,
	156, 0, 0, 0, 88, 0, 0, 0, 89, 0,
	0, 0, 98, 0, 40, 86, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 91, 34, 0, 41, 42,
	47, 84, 92, 83, 46, 0, 22, 0, 0, 23,
	0, 0, 0, 81, 82, 90, 72, 41, 42, 47,
	43, 44, 45, 46, 0, 41, 42, 47, 318, 319,
	317, 320, 0, 0, 0, 0, 0, 0, 40, 0,
	81, 82, 90, 72, 0, 49, 0, 0, 0, 0,
	34, 0, 39, 0, 784, 0, 758, 0, 0, 0,
	22, 0, 26, 23, 0, 31, 29, 30, 28, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 33, 281,
	282, 20, 35, 36, 37, 38, 0, 0, 0, 623,
	0, 0, 25, 41, 42, 47, 43, 44, 45, 46,
	0, 0, 40, 0, 0, 0, 39, 0, 708, 49,
	622, 0, 0, 0, 34, 0, 26, 0, 0, 31,
	29, 30, 28, 0, 22, 0, 0, 23, 0, 0,
	0, 32, 33, 281, 282, 0, 35, 36, 37, 38,
	0, 0, 0, 623, 0, 0, 25, 41, 42, 47,
	43, 44, 45, 46, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 158, 157, 159, 40, 0, 149, 0,
	39, 0, 757, 49, 758, 0, 0, 0, 34, 778,
	26, 0, 0, 31, 29, 30, 28, 0, 22, 0,
	0, 23, 0, 0, 0, 32, 33, 0, 0, 20,
	35, 36, 37, 38, 0, 0, 0, 623, 0, 0,
	25, 41, 42, 47, 43, 44, 45, 46, 0, 147,
	146, 0, 0, 0, 0, 154, 148, 153, 152, 0,
	0, 0, 155, 156, 39, 0, 621, 0, 622, 0,
	158, 157, 159, 0, 26, 149, 0, 31, 29, 30,
	28, 0, 0, 0, 741, 0, 158, 157, 159, 32,
	33, 149, 0, 0, 35, 36, 37, 38, 0, 0,
	0, 623, 680, 0, 25, 41, 42, 47, 43, 44,
	45, 46, 0, 0, 158, 157, 159, 0, 0, 149,
	0, 0, 0, 0, 0, 0, 147, 146, 679, 0,
	0, 0, 154, 148, 153, 152, 449, 157, 159, 155,
	156, 149, 147, 146, 0, 0, 0, 0, 154, 148,
	153, 152, 158, 157, 159, 155, 156, 149, 0, 0,
	40, 0, 0, 0, 0, 0, 666, 49, 0, 0,
	147, 146, 34, 0, 0, 0, 154, 148, 153, 152,
	0, 0, 22, 155, 156, 23, 0, 0, 0, 0,
	0, 0, 147, 146, 0, 0, 0, 0, 154, 148,
	153, 152, 0, 0, 0, 155, 156, 0, 147, 146,
	0, 0, 0, 0, 154, 148, 153, 152, 0, 0,
	0, 155, 156, 0, 0, 0, 0, 0, 39, 0,
	18, 0, 19, 0, 158, 157, 159, 0, 26, 149,
	0, 31, 29, 30, 28, 0, 0, 0, 528, 0,
	158, 157, 159, 32, 33, 149, 0, 20, 35, 36,
	37, 38, 0, 0, 466, 0, 0, 0, 25, 41,
	42, 47, 43, 44, 45, 46, 0, 0, 158, 157,
	159, 0, 0, 149, 0, 0, 0, 0, 0, 0,
	147, 146, 456, 0, 0, 0, 154, 148, 153, 152,
	158, 157, 159, 155, 156, 149, 147, 146, 0, 0,
	0, 0, 154, 148, 153, 152, 182, 0, 0, 155,
	156, 0, 158, 157, 159, 0, 0, 149, 0, 0,
	0, 0, 0, 0, 147, 146, 145, 0, 0, 0,
	154, 148, 153, 152, 0, 0, 0, 155, 156, 0,
	0, 0, 0, 0, 0, 0, 147, 146, 0, 0,
	0, 0, 154, 148, 153, 152, 0, 0, 0, 155,
	156, 0, 0, 0, 0, 0, 0, 0, 147, 146,
	0, 0, 0, 0, 154, 148, 153, 152, 0, 0,
	0, 155, 156,
}
var yyPact = [...]int{

	2326, -1000, 2326, -1000, -1000, 194, 194, 194, 194, 194,
	194, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1885, 1885,
	194, 250, 628, 626, 185, 699, 1717, 194, 405, 1904,
	1904, 434, 194, 194, 696, 1885, 718, 1885, 217, 635,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 204, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2428, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 204,
	-1000, -1000, 1815, -47, -62, -1000, -1000, -1000, -1000, -1000,
	-1000, 1885, 1885, 184, 183, -1000, 1885, 255, 182, 1885,
	1885, 1904, 181, -1000, -1000, -1000, -1000, -1000, -1000, 2406,
	57, 513, -1000, 605, 682, 1534, 1021, 693, 549, 487,
	-1000, 483, 1904, 1534, 1885, 194, -3, 198, 194, 341,
	-1000, 194, 1904, 1904, 194, 194, 1904, -1000, -1000, -1000,
	-1000, 1885, 1885, -1000, -1000, 190, 1449, -13, 1449, 1411,
	-1000, -4, 1904, -1000, 1885, 2326, 1885, 1885, 1885, 497,
	529, 542, 1885, 1885, 1885, 1885, 1885, 1885, 1885, -1000,
	986, 115, 114, 208, 1067, 1656, 1067, -1000, -1000, 487,
	487, 407, 772, 149, 149, 498, 540, -1000, 545, -1000,
	267, 487, 1139, 1904, 699, 1904, 576, 593, 1534, 52,
	-1000, -1000, -1000, 805, 58, 685, 805, 517, 517, 517,
	1731, -1000, 180, 711, 112, -1000, 35, -1000, 699, 1885,
	-1000, 330, 164, 179, 178, -1000, 194, 194, -1000, -1000,
	678, 772, 772, 706, -1000, -1000, 1885, -1000, -1000, 1449,
	1885, 635, 238, 772, 455, -31, -46, -46, 559, 1885,
	149, 1885, 149, 149, -17, -17, -1000, -1000, -1000, 862,
	545, -1000, 1885, -1000, -1000, -1000, -1000, 1885, -1000, -1000,
	1885, 1634, 424, 1885, -1000, 1815, -1000, -1000, 149, 177,
	176, 175, 497, -1000, 1885, 381, 1139, -1000, -1000, 1885,
	-1000, 194, 194, 401, -1000, -5, 396, 544, 1885, 1912,
	139, 1754, 1534, 1386, 685, 13, -1000, 1484, -1000, -1000,
	-1000, 805, 603, 1885, -1000, 208, -1000, 208, 208, -1000,
	-7, 668, -1000, 772, -1000, -1000, -50, 174, 169, 168,
	165, 1904, 89, 951, 1386, -1000, -1000, 772, 483, 1904,
	483, 125, 1904, -1000, -1000, 699, 194, 194, -1000, 1449,
	-1000, 157, 1904, 380, 455, 2326, 1885, -1000, -1000, 2242,
	-1000, -46, -1000, -1000, -1000, 109, 105, 104, 103, 379,
	407, 1885, 2384, 500, 118, -1000, 118, -1000, 118, -1000,
	350, 102, 437, -1000, 2356, -1000, -1000, 1139, 1139, -1000,
	1885, 1228, -1000, -10, 588, 772, -1000, 149, 1386, -1000,
	-1000, 1904, -24, 693, -25, -42, -74, -1000, 566, 649,
	534, 565, 805, -1000, -1000, -1000, -1000, -1000, 1904, 685,
	595, 582, 772, 521, -1000, -1000, 521, 1731, 1904, 1656,
	487, 487, 487, 1885, 93, -39, 686, 1904, 617, -1000,
	1386, 607, 194, 92, 194, 664, 86, -27, 194, -1000,
	-1000, -1000, 483, 85, 477, 377, 457, -1000, 2340, 1885,
	-1000, -1000, -1000, -1000, -1000, 772, 1885, 149, 84, -41,
	83, 82, -1000, 313, 240, 194, 1139, 374, 372, 772,
	-1000, 485, 227, 1912, 221, -1000, -1000, -1000, 80, -45,
	-1000, 685, 1386, 1885, 805, 551, 534, 548, -1000, 805,
	-1000, -1000, -1000, -1000, 1885, 1885, -1000, -1000, 68, 1885,
	1885, 1634, 1885, 25, -1000, 1904, -1000, -1000, -1000, 1386,
	1386, 67, -57, 1885, 64, 1904, -1000, 245, -1000, 266,
	662, 655, 699, -1000, 59, 654, 194, 476, 2326, 545,
	772, -1000, -1000, 149, -1000, -1000, -1000, 599, -1000, 420,
	2326, 433, 432, -1000, -1000, -1000, 632, 532, 1386, -1000,
	-1000, 772, 966, 805, 543, 805, 598, 772, -1000, 303,
	50, 49, 48, 44, 43, 302, 220, -1000, -1000, -1000,
	686, 1904, 772, -1000, -1000, -1000, 483, 2162, 264, 260,
	42, -1000, 155, -1000, 194, -1000, -1000, 150, 370, 420,
	1139, 1885, 194, 194, -1000, -1000, -1000, 149, -1000, -1000,
	-1000, 1885, 144, 598, 805, 966, 143, 301, 298, 297,
	292, 300, 142, 41, -1000, -1000, 194, 363, 2162, -1000,
	-1000, 1885, 1885, 1411, 2162, 2162, 648, 483, -1000, 605,
	474, 357, 462, -1000, 2258, -1000, -1000, -1000, 772, 1904,
	598, -1000, 306, 141, 137, 135, 131, 123, 306, 284,
	-1000, 194, -1000, 2220, 2192, 7, 510, -1000, 1449, 352,
	351, 258, 40, 39, 194, 473, 1139, 34, 27, 605,
	546, 306, 306, 306, 306, 306, 26, 120, -1000, 2162,
	2034, 1904, 1904, -1000, 194, 194, 2162, -1000, -1000, -1000,
	194, -1000, -1000, -1000, -1000, 1885, 22, 20, 9, 8,
	5, -1000, 306, 419, 349, 2034, -1000, -1000, 1885, -1000,
	390, 389, -1000, -1000, 346, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2, 345, 394, 2162, 1885, 457, 426, -1000,
	2176, 2034, 2034, 194, -1000, 472, 344, -1000, 1836, 457,
	194, 2034, 340, 339, -1000, 194, 470, 2098, -1000, 393,
	2162, 416, 406, -1000, 194, -1000, -1000, 1885, 1885, 336,
	393, 2034, 1885, 194, 194, -1000, 1548, 2099, 4, 504,
	468, 334, 452, -1000, 1329, -1000, -1000, 2098, 1980, 1904,
	1904, 194, 464, 2034, 1885, -1000, 383, 342, -1000, 194,
	-1000, 1319, 1980, 1980, -1000, 1980,
}
var yyPgo = [...]int{

	0, 11, 8, 2, 297, 486, 4, 153, 854, 853,
	849, 848, 24, 847, 845, 843, 842, 840, 40, 21,
	23, 835, 833, 830, 827, 826, 825, 823, 758, 55,
	47, 822, 43, 36, 821, 819, 15, 813, 49, 810,
	76, 806, 51, 58, 60, 852, 29, 35, 41, 33,
	797, 795, 792, 791, 1322, 790, 789, 788, 787, 115,
	811, 783, 777, 38, 19, 775, 71, 53, 774, 32,
	773, 16, 771, 770, 769, 768, 54, 765, 25, 18,
	56, 44, 22, 39, 761, 755, 754, 37, 746, 17,
	46, 26, 20, 736, 9, 10, 6, 0, 735, 73,
	731, 50, 729, 48, 118, 13, 581, 725, 52, 57,
	45, 42, 28, 34, 59, 724, 412, 222,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 6, 6, 7, 7, 8, 8, 9, 9,
	10, 10, 10, 10, 10, 10, 11, 11, 11, 11,
	11, 11, 11, 12, 12, 13, 13, 13, 14, 14,
	14, 15, 15, 15, 15, 16, 16, 17, 17, 17,
	17, 17, 17, 18, 18, 19, 19, 20, 20, 20,
	20, 20, 21, 21, 21, 21, 21, 22, 22, 22,
	22, 23, 23, 23, 23, 24, 24, 24, 24, 24,
	24, 24, 25, 25, 25, 26, 26, 26, 26, 26,
	27, 27, 27, 28, 29, 29, 29, 29, 30, 30,
	31, 32, 32, 33, 33, 34, 34, 35, 35, 36,
	36, 37, 37, 37, 38, 38, 39, 39, 40, 40,
	41, 41, 42, 42, 43, 43, 43, 43, 43, 43,
	44, 44, 44, 44, 44, 45, 45, 45, 45, 45,
	45, 45, 45, 45, 45, 45, 45, 45, 45, 46,
	47, 47, 48, 48, 49, 49, 50, 50, 51, 51,
	52, 52, 52, 53, 53, 54, 55, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 57, 57, 57, 57,
	57, 57, 57, 58, 58, 58, 58, 59, 59, 60,
	61, 61, 61, 61, 61, 62, 62, 63, 63, 63,
	63, 63, 63, 63, 63, 64, 65, 65, 66, 66,
	67, 67, 67, 68, 69, 69, 69, 69, 69, 69,
	70, 70, 70, 70, 70, 71, 71, 71, 72, 72,
	73, 73, 73, 74, 75, 75, 76, 76, 77, 77,
	78, 78, 79, 79, 80, 80, 81, 81, 82, 82,
	83, 83, 84, 84, 84, 84, 85, 86, 87, 87,
	88, 88, 89, 89, 90, 90, 91, 91, 92, 92,
	93, 93, 94, 94, 95, 95, 96, 96, 97, 97,
	97, 97, 97, 97, 97, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 105, 106, 107, 107, 108, 108,
	109, 109, 110, 110, 111, 111, 112, 112, 113, 113,
	113, 113, 114, 114, 115, 115, 116, 116, 117, 117,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	8, 9, 7, 9, 9, 2, 8, 9, 7, 9,
	9, 2, 3, 2, 2, 8, 9, 1, 8, 9,
	1, 3, 3, 2, 3, 2, 2, 6, 6, 8,
	5, 7, 7, 1, 3, 1, 3, 0, 1, 1,
	2, 2, 6, 3, 3, 4, 6, 7, 9, 6,
	4, 10, 11, 11, 13, 0, 1, 1, 1, 1,
	2, 2, 5, 6, 3, 5, 3, 3, 5, 3,
	3, 4, 5, 5, 5, 4, 4, 4, 1, 1,
	3, 0, 2, 0, 2, 0, 3, 0, 2, 0,
	3, 0, 3, 4, 0, 2, 0, 2, 0, 2,
	6, 9, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	3, 1, 1, 3, 1, 3, 2, 4, 1, 1,
	0, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 4, 4, 6, 6, 4, 6, 4, 4, 4,
	6, 4, 4, 6, 4, 2, 3, 3, 3, 3,
	3, 2, 2, 3, 3, 2, 2, 0, 1, 4,
	5, 5, 5, 5, 1, 5, 10, 8, 9, 9,
	9, 9, 9, 8, 10, 2, 0, 3, 1, 1,
	1, 2, 3, 1, 1, 1, 2, 3, 1, 1,
	5, 5, 6, 6, 4, 0, 2, 4, 1, 1,
	1, 3, 1, 5, 0, 1, 4, 2, 0, 2,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 6, 9, 5, 8, 7, 3, 1, 3,
	5, 6, 4, 2, 0, 2, 4, 2, 0, 2,
	4, 2, 0, 2, 4, 2, 0, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 1, 3, 1, 3,
	0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
	1, 1, 0, 1, 0, 1, 1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -10, -28, -84, -85, -88, -17,
	-60, -15, -21, -22, -23, -16, -26, -27, 74, 76,
	101, -40, 26, 29, -97, 112, 82, -106, 88, 86,
	87, 85, 97, 98, 16, 102, 103, 104, 105, 72,
	4, 113, 114, 116, 117, 118, 119, 115, -104, 11,
	-1, -117, 125, -117, -117, -117, -117, -117, -45, -44,
	-43, -57, -55, -54, -60, -61, -74, -56, -58, -104,
	-106, -25, 131, -97, 24, -98, -99, -100, -101, -102,
	-103, 128, 129, 118, 116, -62, 73, -47, 62, 66,
	130, 83, 117, 5, 6, 7, 9, 10, 70, -45,
	-104, -105, -117, -29, 19, 15, 17, -31, -30, 13,
	-54, 131, 30, 30, 131, -108, -107, -104, -108, -97,
	-117, -104, 83, 30, -97, -97, -24, 89, 90, 31,
	32, 91, 92, -117, -117, 12, -45, 5, -45, 115,
	-42, -41, -115, 25, 122, 78, 121, 120, 127, 69,
	-110, -116, 129, 128, 126, 133, 134, 65, 64, 66,
	-45, -79, -28, -40, 136, 131, 136, -45, -45, 131,
	131, -75, -45, 120, 127, -110, -116, -54, -45, -45,
	-97, 131, 80, 63, 135, 63, -36, 38, 20, -81,
	-66, -97, 24, 14, -81, -32, 14, 57, 58, 59,
	-109, 71, -97, -66, -59, -79, -45, -117, 135, 122,
	-117, 83, 30, 106, 107, -117, -97, -97, -117, -117,
	-97, -45, -45, 127, -117, -117, 135, -117, -117, -45,
	-99, 135, -97, -45, -1, -45, -45, -45, -110, 67,
	63, 68, 61, 60, -45, -45, -45, -45, -45, -45,
	-45, 132, 135, 132, 132, -97, -99, -109, -97, -99,
	-109, -109, -76, 77, -47, 131, -54, -47, 67, 63,
	61, 60, 69, 116, -109, -2, -8, -6, -13, 74,
	-12, 99, 100, -97, -105, -104, -97, -37, 44, 41,
	-67, -66, 135, 16, -80, -69, -67, -68, -70, 23,
	-54, 14, -33, 18, -80, -114, 60, -114, -114, -83,
	-73, -72, -46, -45, -63, 126, -97, 118, 116, 117,
	119, 131, 27, 28, 36, 132, -108, -45, 84, 131,
	84, 131, 131, -117, -117, 20, -43, -79, -117, -45,
	-42, 22, 131, -90, -89, 79, 75, -101, -103, -45,
	-47, -45, -47, -47, -79, -59, -59, -59, -46, -77,
	-76, 79, -45, -47, 131, -54, 131, -54, 131, -54,
	-110, -59, 81, -2, -45, -117, -117, 80, 80, -39,
	45, -45, -49, -50, -51, -45, -63, 21, 131, -28,
	-97, 22, -81, -87, -86, -44, -97, -33, -111, 56,
	-113, 53, 135, 48, 50, 51, 52, -97, 22, -80,
	-34, 39, -45, -30, -29, -30, -30, 135, 22, 131,
	131, 131, 131, 131, -82, -97, -18, 131, -97, -44,
	131, -44, -28, -82, -28, 132, -105, -97, -105, -117,
	-117, -117, 131, -82, 81, -90, -89, -1, -45, 64,
	132, 132, 132, 132, 81, -45, 78, 64, -48, -47,
	-48, -48, 86, 63, 132, 76, 78, -2, -2, -45,
	-38, 46, 72, 135, -52, 42, 43, -48, -78, -44,
	-97, -32, 135, 127, 47, -111, -113, -112, 49, 47,
	-80, -97, -33, -35, 40, 41, -83, -97, -59, -109,
	-109, -109, -109, -59, 132, 135, -20, 31, 32, 33,
	34, -19, -18, 35, -78, 37, -117, 132, -117, 22,
	132, 132, 135, -117, -28, 132, 74, 81, 78, -45,
	-45, -47, 132, 135, 132, 132, 93, 111, -117, -2,
	-6, 81, 81, -38, 113, -49, 114, 132, 135, -33,
	-87, -45, -69, 47, -112, 47, -69, -45, -79, 132,
	-59, -59, -59, -46, -59, 132, 110, -82, -44, -44,
	132, 135, -45, 132, -97, -117, 84, 108, 22, 22,
	-105, 132, 22, -117, 74, -1, -48, 39, -92, -91,
	79, 75, 76, 76, -53, 31, 32, 21, -28, -78,
	-71, 54, 55, -69, 47, -69, 96, 132, 132, 132,
	132, 132, 96, 114, -20, -19, -28, -3, -7, -5,
	-11, 74, 76, 109, 108, 108, 132, 131, -117, 131,
	81, -92, -91, -2, -45, -117, -117, -48, -45, 131,
	-69, -71, 131, 96, 96, 96, 96, 96, 131, 132,
	-117, 81, -3, -45, -45, -104, -105, -117, -45, -3,
	-3, 22, -28, -36, 74, 81, 78, -82, -64, -65,
	95, 131, 131, 131, 131, 131, -64, 96, -117, 78,
	80, 63, 63, -117, 81, 81, 108, 132, 132, -117,
	74, -2, 132, 132, -36, 41, -64, -64, -64, -64,
	-64, 132, 131, -3, -4, -9, -7, -14, 74, -12,
	-97, -97, -117, -117, -3, -117, -79, 132, 132, 132,
	132, 132, -64, -94, -93, 79, 75, -89, 81, -4,
	-45, 80, 80, 81, 132, 81, -94, -3, -45, -89,
	76, 78, -4, -4, -117, 74, 81, 78, -117, -4,
	-7, 81, 81, -117, 74, -3, -5, 74, 76, -96,
	-95, 79, 75, 76, 76, -117, -45, -45, -104, -105,
	81, -96, -95, -4, -45, -117, -117, 78, 80, 63,
	63, 74, 81, 78, 74, -12, -97, -97, -117, 74,
	-4, -45, 80, 80, -117, 78,
}
var yyDef = [...]int{

	-2, -2, -2, 22, 23, 338, 338, 338, 338, 338,
	338, 15, 16, 17, 18, 19, 20, 21, 0, 0,
	338, 0, 0, 0, 0, 0, 0, 338, 0, 0,
	0, 85, 338, 338, 0, 0, 0, 0, 0, 334,
	298, 299, 300, 301, 302, 303, 304, 305, 0, 312,
	2, 9, 339, 10, 11, 12, 13, 14, 322, 145,
	146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 128, 140, 0, 134, 135, 136, 137, 138,
	139, 0, 0, 303, 301, 214, 254, 322, 0, 0,
	0, 0, 302, 306, 307, 308, 309, 310, 311, 322,
	155, 0, 35, -2, 0, 0, 0, 111, 0, 320,
	109, 128, 0, 0, 207, 338, 318, 316, 338, 0,
	53, 338, 0, 0, 338, 338, 0, 86, 87, 88,
	89, 0, 0, 55, 56, 0, -2, 338, -2, 338,
	129, 132, 0, 335, 0, -2, 0, 336, 337, 322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 323,
	322, 0, 0, 0, 0, 207, 0, 201, 202, 320,
	320, 0, -2, 336, 337, 0, 0, 195, 205, 206,
	0, 320, -2, 0, 0, 0, 121, 0, 0, 0,
	266, 228, 229, 0, 0, 113, 0, 332, 332, 332,
	0, 321, 0, 0, 0, 208, -2, 51, 0, 0,
	52, 0, 0, 0, 0, 54, 338, 338, 73, 74,
	0, -2, -2, 0, 96, 97, 0, 99, 100, -2,
	135, 334, 0, 315, 284, 176, -2, -2, 0, 0,
	0, 0, 0, 0, 196, 197, 198, 199, 200, 203,
	204, 158, 0, 160, 175, 141, 143, 207, 142, 144,
	207, 207, 258, 0, 178, 128, 161, 180, 0, 0,
	0, 0, 322, 94, 207, 0, -2, 26, 27, 0,
	47, 338, 338, 0, 314, 313, 0, 126, 0, 0,
	128, 230, 0, 0, 113, -2, 234, 235, 238, 239,
	233, 0, 115, 0, 112, 0, 333, 0, 0, 110,
	270, 250, 252, -2, 249, 159, 140, 303, 301, 302,
	304, 0, 0, 0, 0, 209, 319, -2, 128, 0,
	128, 0, 0, 75, 80, 0, 338, 338, 101, -2,
	133, 0, 0, 0, 284, -2, 0, 181, 182, 322,
	185, -2, 189, 192, 263, 0, 0, 0, 0, 0,
	257, 0, 322, 0, 128, 187, 128, 191, 128, 194,
	0, 0, 0, 4, 322, 43, 44, -2, -2, 103,
	0, -2, 120, 164, 170, -2, 169, 0, 0, 274,
	231, 0, 267, 111, 278, 0, 140, 280, 0, -2,
	326, 0, 0, 325, 329, 330, 331, 236, 0, 113,
	117, 0, -2, 105, 108, 106, 107, 0, 0, 207,
	320, 320, 320, 207, 0, 268, 67, 0, 63, 60,
	0, 0, 338, 0, 338, 0, 0, 0, 338, 95,
	98, 102, 128, 0, 0, 0, 283, 285, 322, 0,
	210, 211, 212, 213, 253, -2, 0, 0, 0, 162,
	0, 0, 92, 0, 215, 338, -2, 0, 0, -2,
	122, 124, 0, 0, 166, 171, 172, 272, 0, 260,
	232, 113, 0, 0, 0, 0, 326, 0, 327, 0,
	265, 237, 281, 104, 0, 0, 271, 251, 0, 207,
	207, 207, 207, 0, 57, 0, 58, 68, 69, 0,
	0, 0, 65, 0, 0, 0, 72, 338, 79, 0,
	0, 0, 0, 76, 0, 0, 338, 0, -2, 183,
	-2, 184, 186, 0, 190, 193, 93, 0, 32, 288,
	-2, 0, 0, 123, 125, 165, 0, 128, 0, 276,
	279, -2, 245, 0, 0, 0, 244, -2, 116, 209,
	0, 0, 0, 0, 0, 0, 0, 269, 70, 71,
	67, 0, -2, 61, 62, 77, 128, -2, 0, 0,
	0, 130, 0, 30, 338, 282, 163, 0, 0, 288,
	-2, 0, 338, 338, 167, 173, 174, 0, 275, 261,
	240, 0, 0, 241, 0, 245, 0, 210, 211, 212,
	213, 215, 0, 0, 59, 66, 338, 0, -2, 24,
	25, 0, 0, 338, -2, -2, 0, 128, 31, 119,
	0, 0, 287, 289, 322, 33, 34, 273, -2, 0,
	243, 242, 226, 0, 0, 0, 0, 0, 226, 0,
	78, 338, 6, 322, 322, 155, 0, 41, -2, 0,
	0, 0, 0, 0, 338, 0, -2, 0, 0, 119,
	0, 226, 226, 226, 226, 226, 0, 0, 81, -2,
	-2, 0, 0, 42, 338, 338, -2, 131, 216, 45,
	338, 286, 247, 217, 225, 0, 0, 0, 0, 0,
	0, 223, 226, 292, 0, -2, 28, 29, 0, 50,
	0, 0, 82, 83, 0, 46, 227, 218, 219, 220,
	221, 222, 0, 0, 292, -2, 0, 0, 0, 8,
	322, -2, -2, 338, 224, 0, 0, 293, 322, 291,
	338, -2, 0, 0, 84, 338, 0, -2, 38, 296,
	-2, 0, 0, 36, 338, 290, -2, 0, 0, 0,
	296, -2, 0, 338, 338, 37, 322, 322, 155, 0,
	0, 0, 295, 297, 322, 39, 40, -2, -2, 0,
	0, 338, 0, -2, 0, -2, 0, 0, 48, 338,
	294, 322, -2, -2, 49, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 130, 3, 3, 3, 134, 3, 3,
	131, 132, 126, 129, 135, 128, 136, 133, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 125,
	3, 127,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:187
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:192
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:199
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:204
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:211
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:216
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:223
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:228
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:235
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:239
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:243
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:247
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:251
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:255
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:259
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:263
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:267
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:271
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:275
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:279
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:289
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:299
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:303
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:309
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:313
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:319
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:323
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:329
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:333
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:337
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:341
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 34:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:345
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:349
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:355
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:359
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:363
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:367
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:371
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:375
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:379
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:385
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:389
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:395
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:399
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:403
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:409
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:413
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:417
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:423
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:427
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:431
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:435
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:441
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:445
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 57:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:451
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:455
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:459
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:463
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:467
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:471
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].expression, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression, To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:477
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:481
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:487
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:491
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:497
		{
			yyVAL.expression = nil
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:501
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:505
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:509
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:513
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:519
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:523
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:527
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:531
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:535
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 77:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:541
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 78:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:545
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:549
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:553
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 81:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:559
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 82:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:563
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 83:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:567
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Statements: yyDollar[9].program}
		}
	case 84:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.y:571
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Parameters: yyDollar[7].variables, Statements: yyDollar[11].program}
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:577
		{
			yyVAL.expression = nil
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:581
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:585
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:589
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:593
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:597
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:601
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:607
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 93:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:611
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:615
		{
			yyVAL.expression = CursorAttrebute{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Attrebute: yyDollar[3].token}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:621
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:625
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:629
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:633
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:637
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].expression}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:643
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token}
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:647
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[3].expression}
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:651
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[4].expression, Code: yyDollar[3].integer}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:657
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:669
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:679
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:688
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:697
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:708
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:712
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:718
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:724
		{
			yyVAL.expression = nil
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:728
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:734
		{
			yyVAL.expression = nil
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:738
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:744
		{
			yyVAL.expression = nil
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:748
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:754
		{
			yyVAL.expression = nil
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:758
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:764
		{
			yyVAL.expression = nil
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:768
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 121:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:774
		{
			yyVAL.expression = nil
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:778
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:782
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:788
		{
			yyVAL.expression = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:792
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:798
		{
			yyVAL.expression = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:802
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:808
		{
			yyVAL.expression = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:812
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:818
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 131:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:822
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:828
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:832
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:838
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:842
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:846
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:850
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:854
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:858
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:864
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, Column: yyDollar[1].identifier}
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:868
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:872
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:876
		{
			yyVAL.expression = ColumnNumber{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Number: yyDollar[3].integer}
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:880
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: yyDollar[3].integer}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:886
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:890
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:894
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:898
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:902
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:906
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:910
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:914
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:918
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:922
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:926
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:930
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:934
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:938
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:944
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:950
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:954
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:960
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:964
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:970
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:974
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:980
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:984
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:990
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:994
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1000
		{
			yyVAL.token = Token{}
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1004
		{
			yyVAL.token = yyDollar[1].token
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1008
		{
			yyVAL.token = yyDollar[1].token
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1014
		{
			yyVAL.token = yyDollar[1].token
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1018
		{
			yyVAL.token = yyDollar[1].token
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1024
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1030
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1053
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1057
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1061
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1065
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1069
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 182:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1073
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1077
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1081
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 185:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1085
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1089
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1093
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 188:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1097
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1101
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1105
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 191:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1109
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 192:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1113
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1117
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1121
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1125
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1131
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 197:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1135
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1139
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 199:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1143
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 200:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1147
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 201:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1151
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 202:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1155
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1161
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1165
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1169
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1173
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 207:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1179
		{
			yyVAL.expressions = nil
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1183
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1189
		{
			yyVAL.expression = Function{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 210:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1195
		{
			yyVAL.expression = AggregateFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 211:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1199
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 212:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1203
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 213:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1207
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1211
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 215:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1217
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 216:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1221
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 217:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1227
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 218:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1231
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 219:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1235
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 220:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1239
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 221:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1243
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 222:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1247
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 223:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1251
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 224:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1255
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 225:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1261
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1267
		{
			yyVAL.expression = nil
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1271
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1277
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1281
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1287
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1291
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1295
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1301
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1307
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1311
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1315
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 237:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1319
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1323
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1327
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1333
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1337
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 242:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1341
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 243:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1345
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1349
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 245:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1355
		{
			yyVAL.expression = nil
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1359
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1363
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1369
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1373
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1379
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1383
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1387
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 253:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1393
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 254:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1399
		{
			yyVAL.expression = nil
		}
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1403
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1409
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 257:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1413
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 258:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1419
		{
			yyVAL.expression = nil
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1423
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1429
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1433
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1439
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 263:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1443
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1449
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1453
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1459
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1463
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1469
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1473
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1479
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1483
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1489
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 273:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1493
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1497
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 275:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1501
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 276:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1507
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1513
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1519
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1523
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 280:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1529
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 281:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1534
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1541
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1545
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1551
		{
			yyVAL.procexpr = nil
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1555
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1561
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1565
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1571
		{
			yyVAL.procexpr = nil
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1575
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1581
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 291:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1585
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1591
		{
			yyVAL.procexpr = nil
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1595
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1601
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 295:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1605
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1611
		{
			yyVAL.procexpr = nil
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1615
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1621
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1625
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1629
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1633
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1637
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1641
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1645
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1649
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1655
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1661
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1667
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1673
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1679
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1685
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1691
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1697
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 314:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1701
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1707
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1713
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1717
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1723
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1727
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1733
		{
			yyVAL.token = Token{}
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1737
		{
			yyVAL.token = yyDollar[1].token
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1743
		{
			yyVAL.token = Token{}
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1747
		{
			yyVAL.token = yyDollar[1].token
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1753
		{
			yyVAL.token = Token{}
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1757
		{
			yyVAL.token = yyDollar[1].token
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1763
		{
			yyVAL.token = Token{}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1767
		{
			yyVAL.token = yyDollar[1].token
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1773
		{
			yyVAL.token = Token{}
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1777
		{
			yyVAL.token = yyDollar[1].token
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1781
		{
			yyVAL.token = yyDollar[1].token
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1785
		{
			yyVAL.token = yyDollar[1].token
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1791
		{
			yyVAL.token = Token{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1795
		{
			yyVAL.token = yyDollar[1].token
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1801
		{
			yyVAL.token = Token{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1805
		{
			yyVAL.token = yyDollar[1].token
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1812
		{
			yyVAL.token = yyDollar[1].token
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1816
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1823
		{
			yyVAL.token = Token{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1827
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
