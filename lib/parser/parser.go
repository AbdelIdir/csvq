//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	identifier  Identifier
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const TRIGGER = 57447
const FUNCTION = 57448
const AGGREGATE = 57449
const BEGIN = 57450
const RETURN = 57451
const IGNORE = 57452
const WITHIN = 57453
const VAR = 57454
const TIES = 57455
const NULLS = 57456
const ERROR = 57457
const COUNT = 57458
const LISTAGG = 57459
const AGGREGATE_FUNCTION = 57460
const FUNCTION_WITH_INS = 57461
const COMPARISON_OP = 57462
const STRING_OP = 57463
const SUBSTITUTION_OP = 57464
const UMINUS = 57465
const UPLUS = 57466

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"TRIGGER",
	"FUNCTION",
	"AGGREGATE",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"TIES",
	"NULLS",
	"ERROR",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_INS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:2006

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 154,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 53,
	13, 154,
	15, 154,
	17, 154,
	19, 154,
	131, 154,
	-2, 1,
	-1, 55,
	132, 235,
	-2, 154,
	-1, 93,
	77, 285,
	-2, 362,
	-1, 95,
	57, 134,
	58, 134,
	59, 134,
	-2, 145,
	-1, 125,
	63, 362,
	67, 362,
	68, 362,
	-2, 122,
	-1, 127,
	63, 362,
	67, 362,
	68, 362,
	-2, 125,
	-1, 138,
	75, 1,
	79, 1,
	81, 1,
	-2, 154,
	-1, 197,
	63, 362,
	67, 362,
	68, 362,
	-2, 292,
	-1, 209,
	63, 362,
	67, 362,
	68, 362,
	-2, 116,
	-1, 210,
	63, 362,
	67, 362,
	68, 362,
	-2, 117,
	-1, 213,
	63, 362,
	67, 362,
	68, 362,
	-2, 127,
	-1, 215,
	81, 4,
	-2, 154,
	-1, 224,
	69, 0,
	120, 0,
	127, 0,
	-2, 205,
	-1, 225,
	69, 0,
	120, 0,
	127, 0,
	-2, 207,
	-1, 265,
	81, 1,
	-2, 154,
	-1, 275,
	47, 364,
	-2, 294,
	-1, 294,
	63, 362,
	67, 362,
	68, 362,
	-2, 278,
	-1, 310,
	63, 362,
	67, 362,
	68, 362,
	-2, 357,
	-1, 319,
	63, 362,
	67, 362,
	68, 362,
	-2, 128,
	-1, 340,
	81, 1,
	-2, 154,
	-1, 346,
	69, 0,
	120, 0,
	127, 0,
	-2, 216,
	-1, 368,
	77, 1,
	79, 1,
	81, 1,
	-2, 154,
	-1, 371,
	63, 362,
	67, 362,
	68, 362,
	-2, 150,
	-1, 375,
	63, 362,
	67, 362,
	68, 362,
	-2, 196,
	-1, 403,
	63, 362,
	67, 362,
	68, 362,
	-2, 140,
	-1, 437,
	75, 4,
	77, 4,
	79, 4,
	81, 4,
	-2, 154,
	-1, 440,
	81, 4,
	-2, 154,
	-1, 441,
	81, 4,
	-2, 154,
	-1, 454,
	81, 289,
	-2, 362,
	-1, 466,
	63, 362,
	67, 362,
	68, 362,
	-2, 153,
	-1, 503,
	13, 154,
	131, 154,
	-2, 70,
	-1, 525,
	75, 4,
	79, 4,
	81, 4,
	-2, 154,
	-1, 534,
	75, 1,
	79, 1,
	81, 1,
	-2, 154,
	-1, 536,
	79, 286,
	81, 286,
	-2, 362,
	-1, 553,
	63, 362,
	67, 362,
	68, 362,
	-2, 307,
	-1, 560,
	63, 362,
	67, 362,
	68, 362,
	-2, 144,
	-1, 576,
	63, 362,
	67, 362,
	68, 362,
	-2, 81,
	-1, 580,
	81, 6,
	-2, 154,
	-1, 586,
	132, 101,
	135, 101,
	-2, 362,
	-1, 591,
	81, 4,
	-2, 154,
	-1, 637,
	81, 6,
	-2, 154,
	-1, 638,
	81, 6,
	-2, 154,
	-1, 642,
	81, 4,
	-2, 154,
	-1, 646,
	77, 4,
	79, 4,
	81, 4,
	-2, 154,
	-1, 653,
	63, 362,
	67, 362,
	68, 362,
	-2, 276,
	-1, 667,
	75, 6,
	77, 6,
	79, 6,
	81, 6,
	-2, 154,
	-1, 673,
	125, 50,
	-2, 362,
	-1, 686,
	63, 362,
	67, 362,
	68, 362,
	-2, 273,
	-1, 698,
	75, 6,
	79, 6,
	81, 6,
	-2, 154,
	-1, 701,
	81, 8,
	-2, 154,
	-1, 706,
	81, 6,
	-2, 154,
	-1, 709,
	75, 4,
	79, 4,
	81, 4,
	-2, 154,
	-1, 726,
	81, 6,
	-2, 154,
	-1, 751,
	81, 6,
	-2, 154,
	-1, 755,
	77, 6,
	79, 6,
	81, 6,
	-2, 154,
	-1, 757,
	75, 8,
	77, 8,
	79, 8,
	81, 8,
	-2, 154,
	-1, 760,
	81, 8,
	-2, 154,
	-1, 761,
	81, 8,
	-2, 154,
	-1, 773,
	75, 8,
	79, 8,
	81, 8,
	-2, 154,
	-1, 780,
	75, 6,
	79, 6,
	81, 6,
	-2, 154,
	-1, 784,
	81, 8,
	-2, 154,
	-1, 792,
	81, 8,
	-2, 154,
	-1, 796,
	77, 8,
	79, 8,
	81, 8,
	-2, 154,
	-1, 808,
	75, 8,
	79, 8,
	81, 8,
	-2, 154,
}

const yyPrivate = 57344

const yyLast = 2612

var yyAct = [...]int{

	69, 23, 790, 791, 774, 750, 699, 641, 749, 92,
	526, 640, 179, 131, 608, 415, 196, 339, 510, 251,
	275, 475, 320, 505, 430, 457, 428, 687, 111, 293,
	483, 115, 116, 431, 382, 295, 327, 21, 176, 193,
	634, 372, 283, 188, 338, 290, 633, 467, 511, 326,
	20, 274, 182, 390, 23, 389, 84, 143, 56, 76,
	107, 100, 74, 57, 132, 271, 328, 1, 276, 405,
	286, 394, 154, 395, 396, 391, 388, 702, 394, 392,
	395, 396, 391, 388, 216, 158, 392, 160, 110, 174,
	21, 410, 95, 166, 575, 159, 158, 139, 184, 184,
	158, 550, 147, 20, 146, 145, 198, 184, 539, 148,
	149, 178, 519, 518, 206, 207, 152, 504, 208, 142,
	147, 137, 146, 145, 728, 479, 470, 148, 149, 521,
	147, 217, 522, 43, 408, 220, 136, 148, 149, 23,
	273, 219, 169, 136, 212, 200, 52, 305, 764, 217,
	747, 187, 279, 185, 746, 336, 217, 745, 393, 244,
	744, 247, 490, 183, 183, 743, 722, 377, 714, 713,
	140, 139, 199, 712, 711, 21, 147, 141, 146, 145,
	639, 620, 184, 148, 149, 43, 619, 184, 20, 618,
	184, 617, 616, 595, 297, 577, 574, 42, 568, 246,
	226, 42, 562, 549, 249, 250, 222, 101, 541, 97,
	540, 98, 538, 96, 531, 263, 23, 331, 42, 334,
	517, 515, 503, 463, 253, 256, 452, 95, 451, 318,
	450, 332, 42, 449, 101, 313, 302, 241, 243, 242,
	627, 285, 44, 45, 50, 46, 47, 48, 49, 723,
	270, 694, 693, 692, 691, 690, 303, 349, 664, 658,
	280, 309, 288, 289, 337, 654, 23, 427, 254, 651,
	297, 178, 380, 385, 184, 317, 649, 378, 397, 442,
	353, 184, 414, 184, 335, 345, 343, 347, 348, 342,
	413, 254, 412, 411, 44, 45, 50, 46, 47, 48,
	49, 399, 21, 362, 416, 376, 360, 420, 385, 385,
	358, 315, 419, 416, 357, 20, 434, 387, 314, 364,
	175, 103, 165, 164, 163, 103, 386, 104, 425, 480,
	435, 384, 211, 367, 400, 439, 757, 152, 416, 183,
	667, 23, 437, 53, 312, 201, 66, 51, 404, 136,
	406, 407, 103, 443, 261, 418, 128, 665, 548, 546,
	663, 543, 706, 43, 621, 638, 421, 423, 637, 23,
	580, 696, 662, 109, 109, 543, 112, 21, 622, 385,
	203, 689, 477, 70, 445, 661, 459, 130, 460, 660,
	20, 167, 659, 615, 184, 542, 311, 52, 168, 489,
	51, 262, 462, 474, 144, 21, 807, 800, 446, 297,
	496, 794, 787, 786, 779, 458, 114, 458, 20, 458,
	420, 765, 485, 385, 762, 461, 478, 756, 753, 708,
	151, 150, 152, 202, 458, 142, 465, 476, 23, 705,
	761, 23, 23, 491, 513, 488, 487, 760, 486, 704,
	498, 499, 500, 501, 495, 677, 204, 205, 666, 644,
	524, 594, 593, 528, 529, 533, 453, 792, 444, 113,
	436, 297, 44, 45, 50, 46, 47, 48, 49, 366,
	385, 476, 184, 184, 793, 51, 140, 139, 792, 170,
	422, 441, 147, 141, 146, 145, 440, 784, 239, 148,
	149, 240, 554, 555, 544, 416, 376, 67, 28, 385,
	385, 561, 547, 537, 552, 578, 545, 751, 559, 752,
	571, 551, 726, 751, 643, 341, 23, 642, 642, 340,
	566, 591, 340, 355, 265, 23, 775, 700, 384, 527,
	177, 252, 798, 583, 584, 120, 121, 109, 589, 588,
	797, 385, 582, 771, 648, 647, 599, 184, 184, 184,
	523, 28, 51, 793, 333, 600, 752, 572, 573, 643,
	341, 21, 607, 810, 806, 788, 420, 611, 612, 613,
	778, 23, 740, 707, 20, 71, 72, 73, 197, 90,
	75, 597, 23, 532, 625, 804, 458, 769, 624, 681,
	605, 464, 598, 118, 119, 122, 123, 54, 93, 476,
	570, 42, 51, 469, 645, 184, 650, 194, 90, 228,
	152, 456, 703, 227, 229, 125, 655, 127, 258, 129,
	218, 652, 257, 260, 259, 657, 629, 3, 23, 23,
	191, 287, 669, 23, 153, 614, 28, 23, 484, 672,
	91, 42, 558, 678, 557, 416, 231, 230, 556, 482,
	42, 433, 458, 333, 684, 679, 161, 162, 23, 682,
	685, 481, 93, 370, 268, 172, 173, 716, 156, 91,
	190, 191, 192, 153, 472, 473, 394, 51, 395, 396,
	3, 494, 695, 710, 269, 493, 601, 402, 180, 23,
	514, 715, 23, 737, 738, 306, 307, 23, 520, 512,
	23, 209, 210, 106, 308, 51, 105, 213, 717, 718,
	719, 720, 721, 28, 135, 221, 676, 23, 223, 224,
	225, 596, 741, 742, 232, 233, 234, 235, 236, 237,
	238, 587, 735, 759, 316, 61, 9, 581, 734, 763,
	579, 748, 23, 603, 604, 516, 23, 409, 23, 766,
	181, 23, 23, 284, 272, 189, 266, 282, 736, 506,
	507, 508, 509, 28, 23, 3, 124, 781, 52, 126,
	43, 23, 294, 195, 51, 23, 134, 51, 51, 108,
	310, 783, 725, 23, 801, 799, 590, 23, 735, 9,
	70, 735, 735, 319, 734, 264, 8, 734, 734, 23,
	809, 383, 7, 6, 735, 812, 344, 354, 346, 63,
	734, 291, 292, 278, 736, 735, 277, 736, 736, 688,
	82, 734, 62, 735, 65, 58, 64, 735, 195, 734,
	736, 356, 59, 734, 602, 471, 374, 373, 28, 735,
	133, 736, 322, 369, 267, 734, 492, 371, 375, 736,
	43, 401, 99, 736, 17, 433, 585, 16, 68, 433,
	186, 117, 51, 403, 14, 736, 28, 432, 674, 675,
	185, 51, 772, 429, 9, 776, 777, 13, 12, 44,
	45, 50, 46, 47, 48, 49, 10, 15, 782, 11,
	731, 630, 3, 729, 628, 323, 321, 4, 697, 795,
	2, 0, 0, 438, 93, 0, 0, 802, 0, 0,
	0, 805, 0, 0, 0, 350, 0, 51, 351, 352,
	447, 0, 0, 811, 22, 0, 0, 0, 51, 724,
	0, 0, 365, 0, 454, 28, 0, 739, 28, 28,
	0, 0, 0, 151, 150, 152, 0, 0, 142, 466,
	394, 9, 395, 396, 391, 388, 656, 754, 392, 44,
	45, 50, 46, 47, 48, 49, 0, 3, 0, 0,
	468, 0, 671, 0, 51, 51, 0, 0, 0, 51,
	157, 0, 767, 51, 0, 0, 770, 294, 151, 150,
	152, 0, 0, 142, 0, 3, 469, 0, 0, 140,
	139, 9, 0, 0, 51, 147, 141, 146, 145, 0,
	0, 789, 148, 149, 240, 0, 0, 0, 0, 157,
	0, 0, 0, 28, 0, 0, 0, 535, 157, 0,
	0, 0, 28, 0, 536, 51, 0, 0, 51, 0,
	0, 0, 0, 51, 140, 139, 51, 0, 0, 375,
	147, 141, 146, 145, 0, 0, 0, 148, 149, 553,
	0, 0, 0, 51, 322, 0, 0, 322, 322, 0,
	0, 0, 560, 0, 0, 0, 9, 0, 28, 497,
	0, 0, 0, 502, 0, 0, 0, 5, 51, 28,
	0, 576, 51, 0, 51, 0, 0, 51, 51, 586,
	0, 0, 0, 0, 9, 0, 592, 0, 0, 0,
	51, 0, 0, 0, 0, 0, 0, 51, 0, 0,
	0, 51, 0, 157, 0, 0, 0, 0, 0, 51,
	0, 0, 0, 51, 0, 28, 28, 0, 0, 0,
	28, 0, 0, 155, 28, 51, 0, 0, 0, 0,
	0, 0, 322, 43, 0, 0, 0, 0, 0, 0,
	0, 3, 0, 0, 0, 28, 0, 563, 564, 565,
	567, 398, 0, 9, 0, 0, 9, 9, 0, 157,
	0, 0, 155, 0, 0, 0, 0, 0, 653, 0,
	0, 155, 0, 0, 0, 157, 28, 0, 0, 28,
	0, 0, 0, 0, 28, 157, 0, 28, 0, 0,
	668, 93, 0, 0, 670, 673, 0, 0, 322, 0,
	0, 0, 680, 0, 28, 0, 0, 0, 0, 0,
	157, 0, 0, 0, 0, 686, 157, 0, 157, 0,
	151, 150, 152, 0, 0, 142, 0, 0, 0, 28,
	43, 0, 248, 28, 808, 28, 0, 0, 28, 28,
	0, 9, 44, 45, 50, 46, 47, 48, 49, 322,
	9, 28, 0, 322, 0, 0, 0, 0, 28, 727,
	0, 0, 28, 157, 0, 157, 304, 157, 0, 0,
	28, 0, 0, 0, 28, 0, 140, 139, 0, 0,
	0, 0, 147, 141, 146, 145, 28, 0, 0, 148,
	149, 758, 93, 0, 0, 0, 9, 0, 0, 0,
	60, 0, 0, 0, 0, 0, 0, 9, 730, 0,
	0, 768, 0, 0, 0, 0, 322, 0, 0, 0,
	0, 0, 155, 102, 0, 0, 43, 71, 72, 73,
	0, 90, 75, 52, 785, 0, 0, 0, 379, 44,
	45, 50, 46, 47, 48, 49, 70, 157, 155, 0,
	0, 43, 803, 9, 9, 0, 0, 0, 9, 0,
	0, 0, 9, 0, 730, 0, 0, 730, 730, 0,
	279, 185, 0, 417, 0, 0, 0, 0, 0, 424,
	730, 426, 0, 9, 85, 0, 171, 0, 86, 0,
	0, 730, 91, 0, 0, 83, 79, 0, 0, 730,
	0, 0, 0, 730, 0, 88, 0, 0, 157, 0,
	0, 0, 0, 0, 9, 730, 0, 9, 0, 0,
	0, 0, 9, 0, 0, 9, 155, 0, 155, 151,
	155, 152, 0, 0, 142, 44, 45, 50, 81, 89,
	80, 49, 9, 0, 0, 0, 0, 0, 296, 0,
	77, 78, 87, 94, 157, 43, 0, 245, 102, 0,
	44, 45, 50, 46, 47, 48, 49, 9, 255, 255,
	0, 9, 0, 9, 0, 157, 9, 9, 280, 0,
	0, 0, 0, 0, 157, 140, 139, 281, 0, 9,
	281, 147, 141, 146, 145, 0, 9, 0, 148, 149,
	9, 0, 0, 0, 0, 0, 0, 0, 9, 0,
	530, 0, 9, 0, 0, 0, 43, 71, 72, 73,
	0, 90, 75, 52, 9, 0, 0, 0, 0, 255,
	0, 255, 255, 0, 0, 0, 70, 0, 0, 0,
	0, 0, 43, 71, 72, 73, 0, 90, 75, 52,
	0, 0, 0, 0, 157, 0, 0, 0, 255, 359,
	361, 363, 70, 0, 44, 45, 50, 46, 47, 48,
	49, 569, 0, 0, 85, 0, 0, 0, 86, 0,
	0, 281, 91, 281, 42, 83, 79, 102, 43, 102,
	102, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	85, 0, 0, 0, 86, 0, 381, 0, 91, 194,
	0, 83, 79, 43, 71, 72, 73, 606, 90, 75,
	52, 88, 0, 0, 0, 44, 45, 50, 81, 89,
	80, 49, 0, 70, 0, 0, 0, 0, 623, 0,
	77, 78, 87, 94, 0, 0, 0, 626, 0, 0,
	0, 44, 45, 50, 81, 89, 80, 49, 0, 255,
	0, 255, 0, 255, 0, 0, 77, 78, 87, 94,
	0, 85, 0, 0, 0, 86, 0, 0, 255, 91,
	0, 0, 83, 79, 43, 71, 72, 73, 0, 90,
	75, 52, 88, 0, 281, 0, 0, 44, 45, 50,
	46, 47, 48, 49, 70, 0, 0, 0, 0, 43,
	71, 72, 73, 0, 90, 75, 52, 683, 0, 0,
	0, 0, 44, 45, 50, 299, 300, 298, 301, 70,
	0, 0, 0, 0, 0, 296, 0, 77, 78, 87,
	94, 0, 85, 0, 0, 0, 86, 0, 0, 0,
	91, 0, 0, 83, 79, 0, 0, 255, 0, 0,
	0, 0, 0, 88, 0, 43, 0, 85, 0, 0,
	0, 86, 52, 0, 0, 91, 43, 0, 83, 79,
	0, 0, 281, 281, 43, 71, 72, 73, 88, 90,
	75, 52, 0, 44, 45, 50, 81, 89, 80, 49,
	0, 0, 0, 0, 70, 0, 0, 0, 77, 78,
	87, 94, 0, 0, 0, 0, 0, 0, 44, 45,
	50, 81, 89, 80, 49, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 78, 87, 55, 0, 0, 0,
	255, 0, 85, 0, 0, 0, 86, 0, 0, 0,
	91, 0, 0, 83, 79, 0, 0, 281, 281, 281,
	0, 0, 0, 88, 43, 71, 214, 73, 0, 90,
	75, 52, 43, 0, 44, 45, 50, 46, 47, 48,
	49, 0, 0, 0, 70, 44, 45, 50, 46, 47,
	48, 49, 185, 44, 45, 50, 299, 300, 298, 301,
	151, 150, 152, 0, 0, 142, 255, 0, 77, 78,
	87, 94, 0, 0, 796, 281, 0, 0, 0, 0,
	0, 0, 85, 0, 43, 0, 86, 0, 0, 0,
	91, 52, 0, 83, 79, 0, 35, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 24, 0, 0, 25,
	0, 0, 0, 0, 0, 0, 140, 139, 0, 0,
	0, 0, 147, 141, 146, 145, 0, 0, 0, 148,
	149, 0, 0, 44, 45, 50, 81, 89, 80, 49,
	0, 44, 45, 50, 46, 47, 48, 49, 77, 78,
	87, 94, 42, 733, 732, 0, 635, 0, 0, 0,
	0, 0, 27, 0, 0, 32, 30, 31, 29, 0,
	151, 150, 152, 0, 0, 142, 0, 33, 34, 329,
	330, 0, 36, 37, 38, 39, 701, 0, 0, 636,
	0, 0, 26, 44, 45, 50, 46, 47, 48, 49,
	43, 0, 0, 0, 0, 0, 0, 52, 0, 0,
	0, 394, 35, 395, 396, 391, 388, 609, 610, 392,
	0, 0, 24, 0, 0, 25, 140, 139, 0, 0,
	0, 0, 147, 141, 146, 145, 0, 0, 0, 148,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 43,
	0, 0, 0, 0, 0, 0, 52, 0, 0, 0,
	0, 35, 0, 0, 0, 0, 0, 0, 42, 325,
	324, 24, 40, 0, 25, 0, 0, 0, 27, 0,
	0, 32, 30, 31, 29, 0, 0, 0, 0, 0,
	0, 0, 0, 33, 34, 329, 330, 41, 36, 37,
	38, 39, 0, 0, 0, 0, 0, 0, 26, 44,
	45, 50, 46, 47, 48, 49, 43, 42, 632, 631,
	0, 635, 0, 52, 0, 0, 0, 27, 35, 0,
	32, 30, 31, 29, 0, 0, 0, 0, 24, 0,
	0, 25, 33, 34, 0, 0, 0, 36, 37, 38,
	39, 0, 0, 0, 636, 0, 0, 26, 44, 45,
	50, 46, 47, 48, 49, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 151, 150, 152,
	0, 0, 142, 0, 42, 19, 18, 0, 40, 0,
	0, 780, 0, 0, 27, 0, 0, 32, 30, 31,
	29, 0, 0, 0, 0, 0, 151, 150, 152, 33,
	34, 142, 0, 41, 36, 37, 38, 39, 0, 0,
	773, 0, 0, 0, 26, 44, 45, 50, 46, 47,
	48, 49, 0, 140, 139, 0, 0, 0, 0, 147,
	141, 146, 145, 151, 150, 152, 148, 149, 142, 0,
	0, 0, 0, 151, 150, 152, 0, 755, 142, 0,
	0, 0, 140, 139, 0, 0, 0, 709, 147, 141,
	146, 145, 151, 150, 152, 148, 149, 142, 0, 0,
	0, 0, 151, 150, 152, 0, 698, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 646, 0, 0, 140,
	139, 0, 0, 0, 0, 147, 141, 146, 145, 140,
	139, 0, 148, 149, 0, 147, 141, 146, 145, 151,
	150, 152, 148, 149, 142, 0, 0, 0, 140, 139,
	0, 0, 252, 0, 147, 141, 146, 145, 140, 139,
	0, 148, 149, 0, 147, 141, 146, 145, 151, 150,
	152, 148, 149, 142, 0, 0, 0, 0, 151, 150,
	152, 0, 534, 142, 0, 0, 0, 0, 0, 0,
	0, 0, 525, 0, 0, 140, 139, 0, 0, 0,
	0, 147, 141, 146, 145, 151, 150, 152, 148, 149,
	142, 0, 0, 0, 0, 151, 150, 152, 0, 455,
	142, 0, 0, 0, 140, 139, 0, 0, 0, 368,
	147, 141, 146, 145, 140, 139, 0, 148, 149, 0,
	147, 141, 146, 145, 151, 150, 152, 148, 149, 142,
	0, 0, 0, 0, 151, 150, 152, 0, 0, 142,
	215, 140, 139, 0, 0, 0, 0, 147, 141, 146,
	145, 140, 139, 0, 148, 149, 0, 147, 141, 146,
	145, 151, 150, 152, 148, 149, 142, 0, 0, 0,
	0, 448, 150, 152, 0, 138, 142, 0, 0, 0,
	140, 139, 0, 0, 0, 0, 147, 141, 146, 145,
	140, 139, 0, 148, 149, 0, 147, 141, 146, 145,
	0, 0, 0, 148, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 140, 139, 0,
	0, 0, 0, 147, 141, 146, 145, 140, 139, 0,
	148, 149, 0, 147, 141, 146, 145, 0, 0, 0,
	148, 149,
}
var yyPact = [...]int{

	2182, -1000, 218, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1735, 1710,
	-1000, -1000, 194, 196, 686, 683, 767, 1791, -1000, 386,
	1802, 1802, 514, -1000, -1000, 764, 1710, 774, 1710, 241,
	1710, -1000, 699, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 227, -1000, 2182, 2467, 1542, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 227, -1000, -1000, -36,
	-49, -1000, -1000, -1000, -1000, -1000, -1000, 1710, 1710, 193,
	192, 191, -1000, 1710, 271, 190, 1710, 1710, 1802, 189,
	-1000, -1000, 463, 2440, 1542, 660, 740, 1898, 856, 751,
	623, 546, -1000, 539, 1710, 1802, 1898, -1000, 10, 223,
	-1000, 350, -1000, 1802, 1802, -1000, -1000, 1802, -1000, -1000,
	-1000, -1000, 1710, 1710, 205, 2440, 9, 2440, 1890, 2430,
	21, 567, -1000, 6, 1802, -1000, 1710, -1000, 2182, 1710,
	1710, 1710, 554, 556, 596, 1710, 1710, 1710, 1710, 1710,
	1710, 1710, -1000, 366, 105, 107, 106, 221, 1481, 1568,
	1256, -1000, -1000, 1710, 546, 546, 464, 137, 137, 565,
	573, -1000, 50, -1000, 285, 546, 455, 1710, 105, 630,
	653, 1898, 748, 5, -1000, -1000, 1377, 753, 745, 1377,
	581, 581, 581, 1639, -1000, 104, -1000, 889, 125, 678,
	767, 1710, 312, 213, 187, 180, -1000, -1000, 724, 2440,
	2440, 580, 1710, 2440, 1710, 2066, 1802, 767, 1802, 699,
	133, 2440, 450, -6, -24, -24, 609, 1710, 137, 1710,
	137, 137, 4, 4, -1000, -1000, -1000, 1395, 50, -1000,
	1710, -1000, -1000, -1000, -1000, -1000, 1710, -1000, -1000, 1710,
	1352, 454, 1710, -1000, 1542, -1000, -1000, 137, 179, 175,
	172, 554, -1000, 1710, 398, 2182, 2401, 628, 1710, 1810,
	146, 1614, 776, 1898, 745, 23, -1000, 1159, -1000, -1000,
	129, -1000, 1377, 658, 1710, -1000, 221, -1000, 221, 221,
	-1000, -1, 735, -1000, 2440, -1000, -1000, -40, 162, 161,
	159, 151, -1000, 1802, -1000, 539, 181, 359, 776, -1000,
	2440, 539, 1802, 539, 135, 1802, 767, -1000, -1000, 2440,
	389, 217, -1000, -1000, 1735, 1710, -1000, -1000, -1000, -1000,
	-1000, 416, -1000, -4, 411, -1000, 148, 1802, 387, 453,
	2182, 1710, -1000, -1000, 2477, -1000, -24, -1000, -1000, -1000,
	101, 98, 96, 94, 385, 1710, 2391, 557, 160, -1000,
	160, -1000, 160, -1000, 339, 91, 528, -1000, 2182, -1000,
	1710, 934, -1000, -9, 642, 2440, -1000, 137, 776, -1000,
	-1000, 1802, 751, -10, 202, -51, -1000, -1000, 624, 612,
	599, 599, 638, 1377, -1000, -1000, -1000, -1000, 1802, 30,
	745, 655, 650, 2440, 582, -1000, -1000, 582, 1639, 1802,
	1568, 546, 546, 546, 1710, 90, -18, -1000, 738, 1802,
	674, -1000, 776, 663, -1000, 89, -1000, 733, 88, -22,
	-1000, -1000, -23, 673, -3, -1000, 484, 2066, 2364, 462,
	2066, 2066, 539, 82, 519, 384, -1000, 2354, 1710, -1000,
	-1000, -1000, -1000, -1000, 2440, 1710, 137, 80, -27, 78,
	76, -1000, 302, 250, -1000, 463, 2440, -1000, 541, 246,
	1810, 244, -1000, -1000, -1000, 71, -34, -1000, 745, 776,
	1710, 1377, 1377, 611, -1000, 607, 605, 599, -1000, -1000,
	-1000, -1000, -1000, 1710, 1710, -1000, -1000, 70, 1710, 1710,
	1352, 1710, 66, 588, 1802, -1000, -1000, -1000, 776, 776,
	64, -41, 1710, 63, 1802, 728, 262, 725, 767, 767,
	1710, 719, 767, -1000, -1000, 2066, 452, 1710, 381, 380,
	61, 709, -1000, 517, 2182, 50, 2325, -1000, -1000, 137,
	-1000, -1000, -1000, 657, -1000, -1000, -1000, -1000, 722, 579,
	776, -1000, -1000, 2440, 638, 2033, 1377, 1377, 1377, 598,
	2440, -1000, 297, 60, 59, 57, 54, 49, 268, -1000,
	539, -1000, -1000, -1000, 738, 1802, 2440, -1000, -1000, 539,
	2115, 260, -1000, -1000, -1000, 673, 2440, 257, 48, 449,
	378, 2066, 2288, 479, 478, -1000, 145, -1000, 495, -1000,
	-1000, 138, -1000, -1000, -1000, 137, -1000, -1000, -1000, 1710,
	134, 2033, 912, 638, 1377, 128, 296, 293, 289, 276,
	264, 127, 243, -1000, -1000, -1000, -1000, 377, 215, -1000,
	-1000, 1735, 1710, -1000, -1000, 1710, 1710, 2115, 2115, 704,
	374, 448, 2066, 1710, 526, -1000, 2066, -1000, -1000, 539,
	-1000, 660, -1000, 2440, 1802, -1000, 1710, 638, 286, 124,
	123, 122, 121, 120, 286, 275, -1000, 2115, 2278, 460,
	1976, 14, 559, 2440, 368, 358, 254, 509, 348, -1000,
	2259, -1000, 462, 42, 41, 37, 2440, 36, 660, 636,
	286, 286, 286, 286, 286, 34, 118, -1000, 2115, 443,
	1710, 1950, 1802, 1802, -1000, -1000, 2115, -1000, 508, 2066,
	-1000, -1000, -1000, -1000, -1000, -1000, 1710, 33, 28, 25,
	22, 18, -1000, 286, 444, 347, 2115, 2249, 346, 211,
	-1000, -1000, 1735, 1710, -1000, -1000, -1000, 367, 360, 343,
	-1000, 494, -1000, -1000, -1000, -1000, -1000, -1000, 16, 340,
	438, 2115, 1710, 524, -1000, 2115, 477, 1950, 2212, 459,
	1950, 1950, -1000, -1000, -1000, 506, 333, -1000, 2183, -1000,
	460, -1000, -1000, 1950, 418, 1710, 332, 331, -1000, 501,
	2115, -1000, 409, 330, 1950, 1866, 474, 466, -1000, 491,
	326, 388, 1950, 1710, 522, -1000, 1950, -1000, -1000, -1000,
	500, 325, -1000, 1186, -1000, 459, -1000, 499, 1950, -1000,
	-1000, 488, -1000,
}
var yyPgo = [...]int{

	0, 67, 22, 240, 124, 636, 66, 910, 49, 36,
	907, 906, 905, 904, 46, 40, 903, 901, 900, 899,
	897, 896, 48, 18, 23, 888, 887, 33, 883, 877,
	24, 26, 874, 871, 868, 867, 864, 1097, 69, 61,
	862, 43, 42, 861, 856, 12, 854, 47, 853, 934,
	850, 64, 63, 62, 59, 58, 588, 29, 56, 25,
	41, 847, 846, 845, 844, 1330, 842, 836, 835, 834,
	678, 745, 832, 830, 35, 27, 829, 65, 68, 826,
	20, 823, 14, 822, 821, 819, 9, 19, 817, 21,
	16, 51, 52, 15, 45, 813, 812, 811, 34, 806,
	17, 44, 7, 11, 5, 8, 3, 2, 38, 805,
	10, 796, 6, 792, 4, 791, 0, 346, 13, 507,
	789, 60, 39, 57, 55, 30, 53, 70, 786, 404,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 2, 2, 3, 3, 4, 4,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 6, 6, 7, 7, 8, 8, 8,
	9, 11, 11, 10, 10, 10, 10, 10, 12, 12,
	12, 12, 12, 12, 13, 13, 14, 14, 14, 15,
	15, 16, 16, 17, 17, 17, 17, 17, 18, 18,
	18, 18, 18, 18, 19, 19, 19, 19, 20, 20,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	22, 22, 23, 23, 24, 24, 24, 24, 24, 25,
	25, 25, 25, 25, 26, 26, 26, 26, 27, 28,
	28, 29, 30, 30, 31, 31, 31, 32, 32, 32,
	32, 33, 33, 33, 33, 33, 33, 33, 34, 34,
	34, 35, 35, 35, 35, 35, 36, 36, 36, 37,
	38, 38, 38, 38, 39, 39, 40, 41, 41, 42,
	42, 43, 43, 44, 44, 45, 45, 46, 46, 46,
	47, 47, 48, 48, 49, 49, 50, 50, 51, 51,
	52, 52, 52, 52, 52, 52, 53, 54, 55, 55,
	55, 55, 55, 56, 56, 56, 56, 56, 56, 56,
	56, 56, 56, 56, 56, 56, 56, 57, 58, 58,
	59, 59, 60, 60, 61, 61, 62, 62, 63, 63,
	63, 64, 64, 65, 66, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 68, 68, 68, 68, 68, 68,
	68, 69, 69, 69, 69, 70, 70, 71, 71, 72,
	72, 72, 72, 72, 73, 73, 74, 74, 74, 74,
	74, 74, 74, 74, 75, 76, 76, 77, 77, 78,
	78, 78, 79, 80, 80, 80, 80, 80, 80, 80,
	81, 81, 81, 81, 81, 81, 82, 82, 83, 83,
	84, 84, 84, 85, 86, 86, 87, 87, 88, 88,
	89, 89, 90, 90, 91, 91, 92, 92, 93, 93,
	94, 94, 95, 95, 95, 95, 96, 97, 98, 98,
	99, 99, 100, 100, 101, 101, 102, 102, 103, 103,
	104, 104, 105, 105, 106, 106, 107, 107, 108, 108,
	109, 109, 110, 110, 111, 111, 112, 112, 113, 113,
	114, 114, 115, 115, 116, 116, 116, 116, 116, 116,
	116, 116, 117, 118, 118, 119, 120, 120, 121, 121,
	122, 122, 123, 123, 124, 124, 125, 125, 126, 126,
	127, 127, 128, 128, 129, 129,
}
var yyR2 = [...]int{

	0, 0, 1, 3, 0, 3, 0, 3, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 6, 8, 8,
	1, 1, 1, 7, 8, 6, 1, 1, 7, 8,
	6, 1, 1, 1, 1, 1, 6, 8, 8, 1,
	2, 1, 1, 7, 8, 6, 1, 1, 7, 8,
	6, 1, 1, 1, 2, 2, 1, 2, 1, 1,
	6, 7, 4, 8, 5, 6, 8, 5, 7, 7,
	1, 3, 1, 3, 0, 1, 1, 2, 2, 5,
	2, 2, 3, 5, 6, 8, 5, 3, 1, 1,
	3, 3, 1, 3, 1, 1, 3, 9, 10, 10,
	12, 0, 1, 1, 1, 1, 2, 2, 5, 6,
	3, 4, 2, 2, 4, 2, 2, 3, 4, 5,
	5, 4, 4, 4, 1, 1, 3, 0, 2, 0,
	2, 0, 3, 0, 2, 0, 3, 0, 3, 4,
	0, 2, 0, 2, 0, 2, 6, 9, 1, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 1, 3, 1,
	1, 3, 1, 3, 2, 4, 1, 1, 0, 1,
	1, 1, 1, 3, 3, 3, 3, 3, 3, 4,
	4, 6, 6, 4, 6, 4, 4, 4, 6, 4,
	4, 6, 4, 2, 3, 3, 3, 3, 3, 2,
	2, 3, 3, 2, 2, 0, 1, 4, 4, 5,
	5, 5, 5, 1, 5, 10, 8, 9, 9, 9,
	9, 9, 8, 10, 2, 0, 3, 1, 1, 1,
	2, 3, 1, 1, 1, 2, 3, 1, 1, 3,
	4, 5, 6, 7, 5, 6, 2, 4, 1, 1,
	1, 3, 1, 5, 0, 1, 4, 5, 0, 2,
	1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
	1, 3, 6, 9, 5, 8, 7, 3, 1, 3,
	5, 6, 4, 5, 0, 2, 4, 5, 0, 2,
	4, 5, 0, 2, 4, 5, 0, 2, 4, 5,
	0, 2, 4, 5, 0, 2, 4, 5, 0, 2,
	4, 5, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 1, 3, 1, 3,
	0, 1, 0, 1, 0, 1, 0, 1, 1, 1,
	0, 1, 0, 1, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -7, -5, -10, -37, -95, -96, -99, -71,
	-21, -19, -25, -26, -32, -20, -35, -36, 74, 73,
	-8, -9, -49, -116, 26, 29, 112, 82, -119, 88,
	86, 87, 85, 97, 98, 16, 102, 103, 104, 105,
	76, 101, 72, 4, 113, 114, 116, 117, 118, 119,
	115, -117, 11, 125, -56, 131, -55, -52, -68, -66,
	-65, -71, -72, -85, -67, -69, -117, -119, -34, -116,
	24, 5, 6, 7, -53, 10, -54, 128, 129, 74,
	118, 116, -73, 73, -58, 62, 66, 130, 83, 117,
	9, 70, -86, -56, 131, -38, 19, 15, 17, -40,
	-39, 13, -65, 131, 131, 30, 30, -121, -120, -117,
	-121, -116, -117, 83, 30, -116, -116, -33, 89, 90,
	31, 32, 91, 92, 12, -56, 5, -56, 115, -56,
	-117, -118, -51, -50, -128, 25, 122, -1, 78, 121,
	120, 127, 69, -123, -129, 129, 128, 126, 133, 134,
	65, 64, 66, -56, -90, -37, -70, -49, 136, 131,
	136, -56, -56, 131, 131, 131, -86, 120, 127, -123,
	-129, -65, -56, -56, -116, 131, -108, 77, -90, -45,
	38, 20, -92, -77, -116, 24, 14, -92, -41, 14,
	57, 58, 59, -122, 71, -70, -90, -56, -116, -77,
	135, 122, 83, 30, 106, 107, -116, -116, -116, -56,
	-56, 127, 135, -56, 6, 80, 63, 135, 63, 135,
	-116, -56, -1, -56, -56, -56, -123, 67, 63, 68,
	61, 60, -56, -56, -56, -56, -56, -56, -56, 132,
	135, 132, 132, 132, -116, 6, -122, -116, 6, -122,
	-122, -87, 77, -58, 131, -65, -58, 67, 63, 61,
	60, 69, 116, -122, -109, 79, -56, -46, 44, 41,
	-78, -77, 16, 135, -91, -80, -78, -79, -81, 23,
	131, -65, 14, -42, 18, -91, -127, 60, -127, -127,
	-94, -84, -83, -57, -56, -74, 126, -116, 118, 116,
	117, 119, 132, 131, -37, 22, 27, 28, 36, -121,
	-56, 84, 131, 22, 131, 131, 20, -52, -90, -56,
	-2, -11, -5, -12, 74, 73, -8, -9, -6, 99,
	100, -116, -118, -117, -116, -51, 22, 131, -101, -100,
	79, 75, -53, -54, -56, -58, -56, -58, -58, -90,
	-70, -70, -70, -57, -88, 79, -56, -58, 131, -65,
	131, -65, 131, -65, -123, -70, 81, -1, 78, -48,
	45, -56, -60, -61, -62, -56, -74, 21, 131, -37,
	-116, 22, -98, -97, -55, -116, -92, -42, 53, -124,
	-126, 52, 56, 135, 48, 50, 51, -116, 22, -80,
	-91, -43, 39, -56, -39, -38, -39, -39, 135, 22,
	131, 131, 131, 131, 131, -93, -116, -37, -22, 131,
	-116, -55, 131, -55, -37, -93, -37, 132, -31, -28,
	-30, -27, -29, -117, -116, -118, 81, 125, -56, -86,
	80, 80, 131, -93, 81, -101, -1, -56, 64, 132,
	132, 132, 132, 81, -56, 78, 64, -59, -58, -59,
	-59, 86, 63, 132, 73, -1, -56, -47, 46, 72,
	135, -63, 42, 43, -59, -89, -55, -116, -41, 135,
	127, 47, 47, -125, 49, -125, -124, -126, -91, -116,
	132, -42, -44, 40, 41, -94, -116, -70, -122, -122,
	-122, -122, -70, 132, 135, -24, 31, 32, 33, 34,
	-23, -22, 35, -89, 37, 132, 22, 132, 135, 135,
	35, 132, 135, 76, -2, 78, -110, 77, -2, -2,
	-37, 132, 74, 81, 78, -56, -56, -58, 132, 135,
	132, 132, 93, 111, -108, -47, 113, -60, 114, 132,
	135, -42, -98, -56, -80, -80, 47, 47, 47, -125,
	-56, -90, 132, -70, -70, -70, -57, -70, 132, -37,
	22, -93, -55, -55, 132, 135, -56, 132, -116, 22,
	108, 22, -27, -30, -30, -117, -56, 22, -31, -2,
	-111, 79, -56, 81, 81, 132, 22, 74, -1, -87,
	-59, 39, -64, 31, 32, 21, -37, -89, -82, 54,
	55, -80, -80, -80, 47, 96, 132, 132, 132, 132,
	132, 96, 110, -37, -24, -23, -37, -3, -13, -5,
	-17, 74, 73, -14, -15, 76, 109, 108, 108, 132,
	-103, -102, 79, 75, 81, -2, 78, 76, 76, 131,
	-100, 131, -59, -56, 131, -82, 54, -80, 131, 96,
	96, 96, 96, 96, 131, 114, 81, 125, -56, -86,
	-56, -117, -118, -56, -3, -3, 22, 81, -103, -2,
	-56, 73, -2, -37, -45, -93, -56, -75, -76, 95,
	131, 131, 131, 131, 131, -75, 96, -3, 78, -112,
	77, 80, 63, 63, 81, 81, 108, 74, 81, 78,
	-110, 132, 132, 132, 132, -45, 41, -75, -75, -75,
	-75, -75, 132, 131, -3, -113, 79, -56, -4, -16,
	-5, -18, 74, 73, -14, -15, -6, -116, -116, -3,
	74, -2, -90, 132, 132, 132, 132, 132, -75, -105,
	-104, 79, 75, 81, -3, 78, 81, 125, -56, -86,
	80, 80, 81, -102, 132, 81, -105, -3, -56, 73,
	-3, 76, -4, 78, -114, 77, -4, -4, 74, 81,
	78, -112, -4, -115, 79, -56, 81, 81, 74, -3,
	-107, -106, 79, 75, 81, -4, 78, 76, 76, -104,
	81, -107, -4, -56, 73, -4, 74, 81, 78, -114,
	74, -4, -106,
}
var yyDef = [...]int{

	-2, -2, 2, 25, 26, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 0, 284,
	36, 37, 0, 0, 0, 0, 0, 0, 66, 0,
	0, 0, 111, 68, 69, 0, 0, 0, 0, 0,
	0, 30, 372, 344, 345, 346, 347, 348, 349, 350,
	351, 0, 352, -2, 362, -2, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 183, 184, 185, 168,
	0, 160, 161, 162, 163, 164, 165, 0, 0, 0,
	349, 347, 243, 284, 362, 0, 0, 0, 0, 348,
	166, 167, 0, -2, 154, -2, 0, 0, 0, 137,
	0, 360, 135, 154, 235, 0, 0, 64, 358, 356,
	65, 0, 67, 0, 0, 90, 91, 0, 112, 113,
	114, 115, 0, 0, 0, -2, 123, -2, 126, 362,
	183, 0, 155, 158, 0, 373, 0, 3, -2, 0,
	374, 375, 362, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 363, 362, 0, 0, 0, 0, 0, 235,
	0, 229, 230, 235, 360, 360, 0, 374, 375, 0,
	0, 223, 233, 234, 0, 360, 330, 0, 0, 147,
	0, 0, 0, 296, 257, 258, 0, 0, 139, 0,
	370, 370, 370, 0, 361, 0, 236, -2, 154, 0,
	0, 0, 0, 0, 0, 0, 92, 97, 0, -2,
	-2, 0, 0, -2, 161, -2, 0, 0, 0, 372,
	0, 355, 314, 204, -2, -2, 0, 0, 0, 0,
	0, 0, 224, 225, 226, 227, 228, 231, 232, 186,
	0, 188, 203, 238, 169, 171, 235, 170, 172, 235,
	235, 288, 0, 206, 154, 189, 208, 0, 0, 0,
	0, 362, 120, 235, 0, -2, 362, 152, 0, 0,
	154, 259, 0, 0, 139, -2, 263, 264, 267, 268,
	154, 262, 0, 141, 0, 138, 0, 371, 0, 0,
	136, 300, 280, 282, -2, 279, 187, 168, 349, 347,
	348, 350, 237, 0, 72, 154, 0, 0, 0, 359,
	-2, 154, 0, 154, 0, 0, 0, 121, 124, -2,
	0, 0, 31, 32, 0, 284, 41, 42, 43, 23,
	24, 0, 354, 353, 0, 159, 0, 0, 0, 314,
	-2, 0, 209, 210, 362, 213, -2, 217, 220, 293,
	0, 0, 0, 0, 0, 0, 362, 0, 154, 215,
	154, 219, 154, 222, 0, 0, 0, 331, -2, 129,
	0, -2, 146, 192, 198, -2, 197, 0, 0, 304,
	260, 0, 137, 308, 0, 168, 297, 310, 0, 0,
	366, 366, 364, 0, 365, 368, 369, 265, 0, 364,
	139, 143, 0, -2, 131, 134, 132, 133, 0, 0,
	235, 360, 360, 360, 235, 0, 298, 74, 84, 0,
	80, 77, 0, 0, 89, 0, 96, 0, 0, 104,
	105, 99, 102, 98, 0, 93, 0, -2, 362, 0,
	-2, -2, 154, 0, 0, 0, 315, 362, 0, 239,
	240, 241, 242, 283, -2, 0, 0, 0, 190, 0,
	0, 118, 0, 244, 35, 328, -2, 148, 150, 0,
	0, 194, 199, 200, 302, 0, 290, 261, 139, 0,
	0, 0, 0, 0, 367, 0, 0, 366, 295, 266,
	269, 311, 130, 0, 0, 301, 281, 0, 235, 235,
	235, 235, 0, -2, 0, 75, 85, 86, 0, 0,
	0, 82, 0, 0, 0, 94, 0, 0, 0, 0,
	0, 0, 0, 27, 5, -2, 334, 0, 0, 0,
	0, 0, 33, 0, -2, 211, -2, 212, 214, 0,
	218, 221, 119, 0, 329, 149, 151, 193, 0, 154,
	0, 306, 309, -2, 270, 364, 0, 0, 0, 0,
	-2, 142, 237, 0, 0, 0, 0, 0, 0, 71,
	154, 299, 87, 88, 84, 0, -2, 78, 79, 154,
	-2, 0, 100, 106, 103, 0, -2, 0, 0, 318,
	0, -2, 362, 0, 0, 156, 0, 34, 312, 287,
	191, 0, 195, 201, 202, 0, 305, 291, 271, 0,
	0, 364, 364, 274, 0, 0, 239, 240, 241, 242,
	244, 0, 0, 73, 76, 83, 95, 0, 0, 44,
	45, 0, 284, 56, 57, 0, 49, -2, -2, 0,
	0, 318, -2, 0, 0, 335, -2, 28, 29, 154,
	313, 145, 303, -2, 0, 272, 0, 275, 255, 0,
	0, 0, 0, 0, 255, 0, 107, -2, 362, 0,
	362, 183, 0, -2, 0, 0, 0, 0, 0, 319,
	362, 40, 332, 0, 0, 0, -2, 0, 145, 0,
	255, 255, 255, 255, 255, 0, 0, 7, -2, 338,
	0, -2, 0, 0, 108, 109, -2, 38, 0, -2,
	333, 157, 245, 277, 246, 254, 0, 0, 0, 0,
	0, 0, 252, 255, 322, 0, -2, 362, 0, 0,
	51, 52, 0, 284, 61, 62, 63, 0, 0, 0,
	39, 316, 256, 247, 248, 249, 250, 251, 0, 0,
	322, -2, 0, 0, 339, -2, 0, -2, 362, 0,
	-2, -2, 110, 317, 253, 0, 0, 323, 362, 55,
	336, 46, 9, -2, 342, 0, 0, 0, 53, 0,
	-2, 337, 326, 0, -2, 362, 0, 0, 54, 320,
	0, 326, -2, 0, 0, 343, -2, 47, 48, 321,
	0, 0, 327, 362, 60, 340, 58, 0, -2, 341,
	59, 324, 325,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 130, 3, 3, 3, 134, 3, 3,
	131, 132, 126, 129, 135, 128, 136, 133, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 125,
	3, 127,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:193
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:198
		{
			yyVAL.program = []Statement{yyDollar[1].statement}
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:203
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[3].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:210
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:215
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[3].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:222
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:227
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[3].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:234
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:239
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[3].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:246
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:250
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:254
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:258
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:262
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:266
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:270
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:274
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:278
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:282
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:286
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:290
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:294
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:300
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:304
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:310
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:314
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:320
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:324
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:328
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:334
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:340
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:344
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 33:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:350
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:354
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:358
		{
			yyVAL.statement = Case{Value: yyDollar[2].expression, When: yyDollar[3].procexprs, Else: yyDollar[4].procexpr}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:362
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:366
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:372
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:376
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:380
		{
			yyVAL.statement = Case{Value: yyDollar[2].expression, When: yyDollar[3].procexprs, Else: yyDollar[4].procexpr}
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:384
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 42:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:388
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:392
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:398
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:402
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:408
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:412
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:416
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:422
		{
			yyVAL.statement = Return{Value: NewNullValue()}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:426
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:432
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:436
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:442
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 54:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:446
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:450
		{
			yyVAL.statement = Case{Value: yyDollar[2].expression, When: yyDollar[3].procexprs, Else: yyDollar[4].procexpr}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:454
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:458
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:464
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:468
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 60:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:472
		{
			yyVAL.statement = Case{Value: yyDollar[2].expression, When: yyDollar[3].procexprs, Else: yyDollar[4].procexpr}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:476
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:480
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:484
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:490
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:494
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:498
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:502
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:508
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:512
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 70:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:518
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:522
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[7].expression}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:526
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Query: yyDollar[4].expression}
		}
	case 73:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:530
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:534
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Query: yyDollar[5].expression}
		}
	case 75:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:538
		{
			yyVAL.statement = AddColumns{Table: yyDollar[3].expression, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 76:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:542
		{
			yyVAL.statement = AddColumns{Table: yyDollar[3].expression, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:546
		{
			yyVAL.statement = DropColumns{Table: yyDollar[3].expression, Columns: []Expression{yyDollar[5].expression}}
		}
	case 78:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:550
		{
			yyVAL.statement = DropColumns{Table: yyDollar[3].expression, Columns: yyDollar[6].expressions}
		}
	case 79:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:554
		{
			yyVAL.statement = RenameColumn{Table: yyDollar[3].expression, Old: yyDollar[5].expression, New: yyDollar[7].identifier}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:560
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:564
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:570
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:574
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 84:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:580
		{
			yyVAL.expression = nil
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:584
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:588
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:592
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:596
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:602
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:606
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:610
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:614
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 93:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:618
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 94:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:624
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 95:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:628
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:632
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:636
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:642
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:648
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:652
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expression)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:658
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:664
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:668
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:674
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:678
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:682
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 107:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:688
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 108:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:692
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].expressions, Statements: yyDollar[9].program}
		}
	case 109:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:696
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Statements: yyDollar[9].program}
		}
	case 110:
		yyDollar = yyS[yypt-12 : yypt+1]
		//line parser.y:700
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Parameters: yyDollar[7].expressions, Statements: yyDollar[11].program}
		}
	case 111:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:706
		{
			yyVAL.expression = nil
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:710
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:714
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:718
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:722
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:726
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:730
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:736
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:740
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:744
		{
			yyVAL.expression = CursorAttrebute{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Attrebute: yyDollar[3].token}
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:750
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].expression.(PrimitiveType).Value}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:754
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:758
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:762
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:766
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].expression}
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:772
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token}
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:776
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[3].expression}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:780
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[4].expression, Code: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:786
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:798
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:808
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:817
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:826
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:837
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:841
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:847
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:853
		{
			yyVAL.expression = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:857
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:863
		{
			yyVAL.expression = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:867
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:873
		{
			yyVAL.expression = nil
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:877
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:883
		{
			yyVAL.expression = nil
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:887
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 145:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:893
		{
			yyVAL.expression = nil
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:897
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 147:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:903
		{
			yyVAL.expression = nil
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:907
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:911
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:917
		{
			yyVAL.expression = nil
		}
	case 151:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:921
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:927
		{
			yyVAL.expression = nil
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:931
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:937
		{
			yyVAL.expression = nil
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:941
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 156:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:947
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 157:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:951
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:957
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:961
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:967
		{
			yyVAL.expression = NewStringValue(yyDollar[1].token.Literal)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:971
		{
			yyVAL.expression = NewIntegerValueFromString(yyDollar[1].token.Literal)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:975
		{
			yyVAL.expression = NewFloatValueFromString(yyDollar[1].token.Literal)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:979
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:983
		{
			yyVAL.expression = NewDatetimeValueFromString(yyDollar[1].token.Literal)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:987
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:993
		{
			yyVAL.expression = NewTernaryValueFromString(yyDollar[1].token.Literal)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:999
		{
			yyVAL.expression = NewNullValueFromString(yyDollar[1].token.Literal)
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1005
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, Column: yyDollar[1].identifier}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1009
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1013
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1017
		{
			yyVAL.expression = ColumnNumber{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Number: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1021
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: NewIntegerFromString(yyDollar[3].token.Literal)}
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1027
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1031
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1035
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1039
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1043
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1047
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1051
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1055
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1059
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1063
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1067
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1071
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1075
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1079
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1085
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1091
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1095
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1101
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1105
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1111
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1115
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1121
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1125
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1131
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1135
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 198:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1141
		{
			yyVAL.token = Token{}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1145
		{
			yyVAL.token = yyDollar[1].token
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1149
		{
			yyVAL.token = yyDollar[1].token
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1155
		{
			yyVAL.token = yyDollar[1].token
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1159
		{
			yyVAL.token = yyDollar[1].token
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1165
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1171
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1194
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1198
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1202
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 208:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1206
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 209:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1210
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].expression, Negation: yyDollar[3].token}
		}
	case 210:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1214
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].expression, Negation: yyDollar[3].token}
		}
	case 211:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1218
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 212:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1222
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 213:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1226
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 214:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1230
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 215:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1234
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 216:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1238
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 217:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1242
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1246
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 219:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1250
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 220:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1254
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 221:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1258
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1262
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1266
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1272
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1276
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 226:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1280
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1284
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1288
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1292
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1296
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1302
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 232:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1306
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1310
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 234:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1314
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1320
		{
			yyVAL.expressions = nil
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1324
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1330
		{
			yyVAL.expression = Function{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1334
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions}
		}
	case 239:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1341
		{
			yyVAL.expression = AggregateFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 240:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1345
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1349
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1353
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1357
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1363
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 245:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1367
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 246:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1373
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1377
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 248:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1381
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 249:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1385
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 250:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1389
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 251:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1393
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 252:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1397
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 253:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1401
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1407
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 255:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1413
		{
			yyVAL.expression = nil
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1417
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1423
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1427
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1433
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1437
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1441
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1447
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1453
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1457
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 265:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1461
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1465
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1469
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 268:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1473
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1477
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1483
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[4].expression, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 271:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1487
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[4].expression, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 272:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1491
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[5].expression, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 273:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1495
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[5].expression, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: JoinCondition{Literal: yyDollar[6].token.Literal, On: yyDollar[7].expression}}
		}
	case 274:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1499
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[5].expression, JoinType: yyDollar[3].token, Natural: yyDollar[2].token}
		}
	case 275:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1503
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression, JoinTable: yyDollar[6].expression, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Natural: yyDollar[2].token}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1509
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 277:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1513
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1519
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1523
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1529
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1533
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1537
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 283:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1543
		{
			yyVAL.expression = CaseExpr{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 284:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1549
		{
			yyVAL.expression = nil
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1553
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1559
		{
			yyVAL.expressions = []Expression{CaseExprWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1563
		{
			yyVAL.expressions = append([]Expression{CaseExprWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}, yyDollar[5].expressions...)
		}
	case 288:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1569
		{
			yyVAL.expression = nil
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1573
		{
			yyVAL.expression = CaseExprElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1579
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1583
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1589
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1593
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1599
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1603
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1609
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 297:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1613
		{
			yyVAL.expressions = append([]Expression{Table{Object: yyDollar[1].expression}}, yyDollar[3].expressions...)
		}
	case 298:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1619
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1623
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 300:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1629
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 301:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1633
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 302:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1639
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 303:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1643
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1647
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 305:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1651
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 306:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1657
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1663
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1669
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1673
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1679
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 311:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1684
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 312:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1691
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 313:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1695
		{
			yyVAL.procexprs = append([]ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}, yyDollar[5].procexprs...)
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1701
		{
			yyVAL.procexpr = nil
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1705
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 316:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1711
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 317:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1715
		{
			yyVAL.procexprs = append([]ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}, yyDollar[5].procexprs...)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1721
		{
			yyVAL.procexpr = nil
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1725
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 320:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1731
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 321:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1735
		{
			yyVAL.procexprs = append([]ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}, yyDollar[5].procexprs...)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1741
		{
			yyVAL.procexpr = nil
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1745
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 324:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1751
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 325:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1755
		{
			yyVAL.procexprs = append([]ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}, yyDollar[5].procexprs...)
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1761
		{
			yyVAL.procexpr = nil
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1765
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 328:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1771
		{
			yyVAL.procexprs = []ProcExpr{CaseWhen{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 329:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1775
		{
			yyVAL.procexprs = append([]ProcExpr{CaseWhen{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}, yyDollar[5].procexprs...)
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1781
		{
			yyVAL.procexpr = nil
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1785
		{
			yyVAL.procexpr = CaseElse{Statements: yyDollar[2].program}
		}
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1791
		{
			yyVAL.procexprs = []ProcExpr{CaseWhen{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 333:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1795
		{
			yyVAL.procexprs = append([]ProcExpr{CaseWhen{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}, yyDollar[5].procexprs...)
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1801
		{
			yyVAL.procexpr = nil
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1805
		{
			yyVAL.procexpr = CaseElse{Statements: yyDollar[2].program}
		}
	case 336:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1811
		{
			yyVAL.procexprs = []ProcExpr{CaseWhen{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 337:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1815
		{
			yyVAL.procexprs = append([]ProcExpr{CaseWhen{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}, yyDollar[5].procexprs...)
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1821
		{
			yyVAL.procexpr = nil
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1825
		{
			yyVAL.procexpr = CaseElse{Statements: yyDollar[2].program}
		}
	case 340:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1831
		{
			yyVAL.procexprs = []ProcExpr{CaseWhen{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1835
		{
			yyVAL.procexprs = append([]ProcExpr{CaseWhen{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}, yyDollar[5].procexprs...)
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1841
		{
			yyVAL.procexpr = nil
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1845
		{
			yyVAL.procexpr = CaseElse{Statements: yyDollar[2].program}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1851
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1855
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1859
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1863
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1867
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1871
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1875
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1879
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1885
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1891
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1895
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1901
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1907
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1911
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1917
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1921
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1927
		{
			yyVAL.token = Token{}
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1931
		{
			yyVAL.token = yyDollar[1].token
		}
	case 362:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1937
		{
			yyVAL.token = Token{}
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1941
		{
			yyVAL.token = yyDollar[1].token
		}
	case 364:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1947
		{
			yyVAL.token = Token{}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1951
		{
			yyVAL.token = yyDollar[1].token
		}
	case 366:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1957
		{
			yyVAL.token = Token{}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1961
		{
			yyVAL.token = yyDollar[1].token
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1967
		{
			yyVAL.token = yyDollar[1].token
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1971
		{
			yyVAL.token = yyDollar[1].token
		}
	case 370:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1977
		{
			yyVAL.token = Token{}
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1981
		{
			yyVAL.token = yyDollar[1].token
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1987
		{
			yyVAL.token = Token{}
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1991
		{
			yyVAL.token = yyDollar[1].token
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1997
		{
			yyVAL.token = yyDollar[1].token
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:2001
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
