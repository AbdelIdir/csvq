//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const PERCENT = 57388
const JOIN = 57389
const INNER = 57390
const OUTER = 57391
const LEFT = 57392
const RIGHT = 57393
const FULL = 57394
const CROSS = 57395
const ON = 57396
const USING = 57397
const NATURAL = 57398
const UNION = 57399
const INTERSECT = 57400
const EXCEPT = 57401
const ALL = 57402
const ANY = 57403
const EXISTS = 57404
const IN = 57405
const AND = 57406
const OR = 57407
const NOT = 57408
const BETWEEN = 57409
const LIKE = 57410
const IS = 57411
const NULL = 57412
const DISTINCT = 57413
const WITH = 57414
const CASE = 57415
const IF = 57416
const ELSEIF = 57417
const WHILE = 57418
const WHEN = 57419
const THEN = 57420
const ELSE = 57421
const DO = 57422
const END = 57423
const DECLARE = 57424
const CURSOR = 57425
const FOR = 57426
const FETCH = 57427
const OPEN = 57428
const CLOSE = 57429
const DISPOSE = 57430
const NEXT = 57431
const PRIOR = 57432
const ABSOLUTE = 57433
const RELATIVE = 57434
const RANGE = 57435
const SEPARATOR = 57436
const PARTITION = 57437
const OVER = 57438
const COMMIT = 57439
const ROLLBACK = 57440
const CONTINUE = 57441
const BREAK = 57442
const EXIT = 57443
const PRINT = 57444
const PRINTF = 57445
const SOURCE = 57446
const TRIGGER = 57447
const FUNCTION = 57448
const AGGREGATE = 57449
const BEGIN = 57450
const RETURN = 57451
const IGNORE = 57452
const WITHIN = 57453
const VAR = 57454
const TIES = 57455
const NULLS = 57456
const ERROR = 57457
const COUNT = 57458
const LISTAGG = 57459
const AGGREGATE_FUNCTION = 57460
const FUNCTION_WITH_INS = 57461
const COMPARISON_OP = 57462
const STRING_OP = 57463
const SUBSTITUTION_OP = 57464
const UMINUS = 57465
const UPLUS = 57466

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"TRIGGER",
	"FUNCTION",
	"AGGREGATE",
	"BEGIN",
	"RETURN",
	"IGNORE",
	"WITHIN",
	"VAR",
	"TIES",
	"NULLS",
	"ERROR",
	"COUNT",
	"LISTAGG",
	"AGGREGATE_FUNCTION",
	"FUNCTION_WITH_INS",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1902

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 141,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 58,
	132, 220,
	-2, 141,
	-1, 104,
	57, 121,
	58, 121,
	59, 121,
	-2, 132,
	-1, 137,
	63, 336,
	67, 336,
	68, 336,
	-2, 352,
	-1, 139,
	63, 336,
	67, 336,
	68, 336,
	-2, 352,
	-1, 146,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 175,
	77, 269,
	-2, 336,
	-1, 185,
	81, 3,
	-2, 141,
	-1, 208,
	63, 336,
	67, 336,
	68, 336,
	-2, 276,
	-1, 225,
	63, 336,
	67, 336,
	68, 336,
	-2, 103,
	-1, 226,
	63, 336,
	67, 336,
	68, 336,
	-2, 104,
	-1, 233,
	63, 336,
	67, 336,
	68, 336,
	-2, 352,
	-1, 240,
	69, 0,
	120, 0,
	127, 0,
	-2, 190,
	-1, 241,
	69, 0,
	120, 0,
	127, 0,
	-2, 192,
	-1, 281,
	75, 3,
	79, 3,
	81, 3,
	-2, 141,
	-1, 300,
	47, 338,
	49, 342,
	-2, 278,
	-1, 318,
	63, 336,
	67, 336,
	68, 336,
	-2, 262,
	-1, 334,
	63, 336,
	67, 336,
	68, 336,
	-2, 331,
	-1, 346,
	63, 336,
	67, 336,
	68, 336,
	-2, 352,
	-1, 352,
	81, 1,
	-2, 141,
	-1, 358,
	69, 0,
	120, 0,
	127, 0,
	-2, 201,
	-1, 384,
	81, 3,
	-2, 141,
	-1, 385,
	81, 3,
	-2, 141,
	-1, 388,
	63, 336,
	67, 336,
	68, 336,
	-2, 137,
	-1, 392,
	63, 336,
	67, 336,
	68, 336,
	-2, 181,
	-1, 406,
	49, 342,
	-2, 338,
	-1, 419,
	63, 336,
	67, 336,
	68, 336,
	-2, 127,
	-1, 469,
	81, 273,
	-2, 336,
	-1, 480,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 483,
	63, 336,
	67, 336,
	68, 336,
	-2, 140,
	-1, 518,
	13, 141,
	131, 141,
	-2, 352,
	-1, 547,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 549,
	77, 270,
	79, 270,
	81, 270,
	-2, 336,
	-1, 559,
	75, 1,
	79, 1,
	81, 1,
	-2, 26,
	-1, 570,
	63, 336,
	67, 336,
	68, 336,
	-2, 291,
	-1, 576,
	63, 336,
	67, 336,
	68, 336,
	-2, 131,
	-1, 594,
	63, 336,
	67, 336,
	68, 336,
	-2, 68,
	-1, 599,
	81, 5,
	-2, 141,
	-1, 605,
	132, 88,
	135, 88,
	-2, 336,
	-1, 617,
	81, 3,
	-2, 141,
	-1, 649,
	75, 5,
	79, 5,
	81, 5,
	-2, 141,
	-1, 655,
	81, 5,
	-2, 141,
	-1, 656,
	81, 5,
	-2, 141,
	-1, 669,
	63, 336,
	67, 336,
	68, 336,
	-2, 260,
	-1, 691,
	63, 336,
	67, 336,
	68, 336,
	-2, 352,
	-1, 699,
	75, 3,
	79, 3,
	81, 3,
	-2, 141,
	-1, 712,
	75, 5,
	79, 5,
	81, 5,
	-2, 141,
	-1, 713,
	81, 7,
	-2, 141,
	-1, 719,
	81, 5,
	-2, 141,
	-1, 738,
	75, 7,
	79, 7,
	81, 7,
	-2, 141,
	-1, 758,
	81, 5,
	-2, 141,
	-1, 764,
	81, 7,
	-2, 141,
	-1, 765,
	81, 7,
	-2, 141,
	-1, 774,
	75, 5,
	79, 5,
	81, 5,
	-2, 141,
	-1, 780,
	75, 1,
	79, 5,
	81, 5,
	-2, 141,
	-1, 783,
	75, 5,
	79, 5,
	81, 5,
	-2, 28,
	-1, 789,
	109, 24,
	-2, 22,
	-1, 794,
	81, 7,
	-2, 141,
	-1, 810,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
	-1, 811,
	81, 3,
	-2, 141,
	-1, 816,
	75, 7,
	79, 7,
	81, 7,
	-2, 141,
	-1, 818,
	109, 50,
	-2, 47,
	-1, 825,
	81, 3,
	-2, 141,
	-1, 826,
	81, 3,
	-2, 141,
	-1, 828,
	75, 1,
	79, 1,
	81, 1,
	-2, 141,
}

const yyPrivate = 57344

const yyLast = 2676

var yyAct = [...]int{

	72, 22, 756, 22, 101, 627, 792, 207, 190, 736,
	282, 2, 300, 2, 472, 460, 238, 1, 805, 50,
	431, 526, 663, 521, 615, 701, 501, 120, 492, 445,
	125, 126, 400, 317, 307, 319, 389, 280, 164, 447,
	407, 285, 448, 405, 199, 484, 314, 299, 350, 527,
	79, 77, 141, 60, 109, 204, 301, 151, 296, 116,
	193, 367, 310, 75, 812, 421, 162, 410, 426, 411,
	412, 413, 408, 166, 714, 406, 147, 167, 166, 306,
	168, 155, 166, 154, 153, 52, 119, 104, 156, 157,
	767, 155, 183, 154, 153, 230, 649, 593, 156, 157,
	40, 540, 298, 567, 541, 155, 552, 195, 195, 538,
	189, 186, 156, 157, 49, 209, 195, 160, 537, 519,
	150, 496, 297, 145, 220, 221, 487, 424, 224, 187,
	51, 235, 212, 145, 754, 753, 187, 53, 54, 55,
	56, 752, 751, 735, 236, 178, 187, 22, 750, 734,
	726, 103, 206, 725, 409, 721, 720, 2, 121, 650,
	3, 657, 3, 134, 135, 194, 194, 260, 198, 263,
	145, 148, 147, 638, 210, 329, 637, 155, 149, 154,
	153, 636, 394, 187, 156, 157, 22, 288, 635, 291,
	634, 608, 289, 195, 595, 592, 584, 110, 195, 40,
	297, 195, 578, 737, 234, 321, 206, 566, 242, 41,
	42, 47, 43, 44, 45, 46, 87, 554, 304, 196,
	110, 297, 106, 262, 107, 39, 105, 436, 265, 266,
	261, 104, 264, 39, 553, 444, 267, 551, 344, 544,
	279, 536, 533, 518, 478, 467, 466, 211, 309, 295,
	214, 465, 464, 219, 351, 337, 222, 223, 39, 326,
	69, 48, 348, 48, 361, 312, 313, 257, 228, 229,
	231, 232, 333, 259, 258, 708, 707, 706, 189, 705,
	100, 343, 22, 704, 327, 679, 118, 118, 347, 122,
	673, 670, 395, 355, 354, 321, 270, 397, 195, 403,
	365, 362, 336, 414, 363, 364, 3, 195, 41, 42,
	47, 43, 44, 45, 46, 112, 660, 270, 378, 380,
	658, 456, 430, 429, 428, 427, 112, 375, 432, 373,
	393, 437, 403, 403, 404, 377, 371, 432, 112, 339,
	451, 338, 184, 112, 173, 3, 172, 452, 171, 113,
	432, 340, 341, 22, 416, 587, 194, 442, 399, 160,
	497, 227, 52, 2, 345, 420, 213, 422, 423, 461,
	457, 349, 145, 598, 277, 140, 680, 565, 563, 556,
	435, 639, 678, 719, 656, 22, 22, 655, 474, 599,
	475, 710, 677, 269, 272, 640, 403, 556, 676, 494,
	459, 703, 216, 70, 27, 39, 27, 48, 675, 491,
	195, 674, 633, 176, 52, 555, 505, 382, 383, 152,
	177, 278, 481, 482, 40, 321, 511, 335, 815, 477,
	49, 803, 785, 784, 130, 131, 779, 437, 768, 766,
	403, 3, 761, 718, 73, 495, 48, 500, 290, 124,
	499, 506, 476, 758, 717, 215, 698, 504, 52, 433,
	684, 357, 661, 359, 360, 512, 561, 560, 530, 517,
	546, 510, 468, 118, 453, 454, 458, 455, 217, 218,
	379, 22, 513, 514, 515, 516, 826, 825, 321, 765,
	370, 559, 128, 129, 132, 133, 795, 403, 764, 195,
	794, 759, 123, 385, 195, 758, 618, 179, 384, 353,
	617, 571, 3, 352, 268, 797, 575, 577, 558, 268,
	432, 368, 796, 393, 564, 403, 403, 573, 773, 569,
	568, 562, 596, 41, 42, 47, 43, 44, 45, 46,
	588, 620, 48, 619, 3, 3, 479, 795, 22, 582,
	27, 439, 579, 580, 581, 583, 353, 618, 2, 822,
	22, 814, 787, 778, 612, 520, 723, 613, 403, 529,
	2, 607, 532, 195, 534, 195, 50, 602, 603, 697,
	601, 616, 611, 542, 40, 630, 545, 632, 473, 27,
	473, 624, 473, 39, 437, 486, 626, 205, 160, 450,
	22, 96, 244, 290, 73, 471, 243, 245, 274, 648,
	557, 473, 273, 48, 813, 644, 643, 715, 22, 188,
	276, 275, 59, 64, 9, 311, 9, 247, 246, 201,
	202, 203, 195, 202, 40, 502, 631, 574, 672, 668,
	3, 662, 39, 572, 671, 48, 48, 503, 498, 585,
	22, 387, 589, 293, 196, 664, 22, 22, 689, 685,
	489, 490, 98, 728, 597, 692, 693, 509, 294, 696,
	531, 432, 508, 93, 94, 95, 610, 96, 97, 410,
	614, 411, 412, 413, 408, 27, 418, 406, 550, 191,
	539, 700, 528, 41, 42, 47, 43, 44, 45, 46,
	22, 622, 623, 330, 331, 709, 410, 3, 411, 412,
	413, 727, 332, 22, 22, 743, 744, 641, 115, 3,
	22, 522, 523, 524, 525, 114, 645, 646, 144, 747,
	729, 730, 731, 732, 733, 694, 749, 724, 98, 22,
	609, 48, 659, 41, 42, 47, 43, 44, 45, 46,
	666, 667, 760, 606, 600, 742, 27, 535, 425, 22,
	769, 755, 342, 192, 308, 22, 22, 200, 770, 473,
	9, 136, 49, 681, 682, 22, 772, 3, 683, 138,
	742, 22, 143, 117, 22, 690, 78, 76, 27, 27,
	788, 2, 74, 685, 757, 22, 802, 612, 450, 604,
	804, 793, 450, 8, 401, 7, 742, 742, 48, 9,
	739, 22, 22, 819, 820, 711, 742, 22, 6, 366,
	48, 2, 716, 174, 66, 315, 22, 22, 722, 22,
	316, 303, 302, 702, 85, 739, 742, 65, 68, 559,
	61, 473, 67, 62, 621, 488, 391, 390, 745, 746,
	142, 386, 292, 818, 748, 507, 208, 417, 742, 3,
	48, 739, 739, 481, 482, 108, 558, 818, 818, 17,
	818, 783, 16, 71, 127, 57, 99, 14, 48, 449,
	446, 13, 12, 10, 27, 15, 11, 740, 283, 651,
	4, 739, 137, 738, 139, 281, 0, 777, 0, 0,
	0, 0, 0, 0, 781, 9, 0, 0, 739, 786,
	48, 0, 0, 739, 688, 161, 48, 48, 798, 0,
	21, 402, 739, 739, 0, 783, 0, 808, 809, 0,
	0, 0, 0, 0, 0, 0, 0, 169, 170, 0,
	789, 0, 762, 175, 0, 821, 181, 182, 0, 0,
	0, 27, 0, 827, 438, 440, 0, 0, 0, 161,
	48, 0, 0, 27, 0, 0, 0, 0, 775, 776,
	789, 789, 0, 48, 48, 5, 9, 0, 782, 165,
	48, 0, 0, 0, 40, 789, 789, 0, 789, 225,
	226, 49, 0, 0, 0, 0, 0, 233, 806, 48,
	0, 0, 237, 27, 239, 240, 241, 0, 9, 9,
	248, 249, 250, 251, 252, 253, 254, 0, 493, 48,
	823, 27, 0, 165, 0, 48, 48, 0, 0, 775,
	776, 0, 782, 165, 163, 48, 0, 0, 0, 0,
	0, 48, 0, 0, 48, 40, 0, 0, 0, 0,
	0, 0, 801, 27, 0, 48, 0, 0, 0, 27,
	27, 318, 493, 415, 159, 158, 160, 0, 0, 150,
	334, 48, 48, 0, 0, 0, 0, 48, 163, 0,
	0, 0, 0, 0, 0, 0, 48, 48, 163, 48,
	0, 346, 485, 41, 42, 47, 43, 44, 45, 46,
	356, 0, 358, 27, 9, 0, 0, 0, 0, 0,
	159, 158, 160, 0, 0, 150, 27, 27, 486, 402,
	148, 147, 0, 27, 40, 369, 155, 149, 154, 153,
	165, 0, 255, 156, 157, 256, 0, 0, 159, 158,
	160, 381, 27, 150, 0, 0, 0, 590, 591, 0,
	388, 392, 0, 0, 41, 42, 47, 43, 44, 45,
	46, 0, 27, 0, 0, 419, 148, 147, 27, 27,
	0, 9, 155, 149, 154, 153, 40, 0, 27, 156,
	157, 0, 0, 9, 27, 328, 197, 27, 40, 0,
	493, 165, 0, 0, 148, 147, 196, 0, 27, 0,
	155, 149, 154, 153, 0, 0, 398, 156, 157, 256,
	462, 0, 0, 0, 27, 27, 165, 0, 0, 0,
	27, 0, 0, 9, 0, 469, 0, 0, 0, 27,
	27, 0, 27, 41, 42, 47, 43, 44, 45, 46,
	0, 9, 0, 0, 483, 0, 163, 0, 0, 0,
	165, 0, 159, 158, 160, 0, 165, 150, 165, 0,
	0, 0, 0, 0, 0, 0, 828, 0, 0, 0,
	0, 396, 0, 9, 0, 0, 0, 0, 0, 9,
	9, 318, 63, 0, 0, 41, 42, 47, 43, 44,
	45, 46, 165, 0, 165, 0, 165, 41, 42, 47,
	43, 44, 45, 46, 111, 434, 0, 0, 148, 147,
	0, 441, 0, 443, 155, 149, 154, 153, 0, 0,
	548, 156, 157, 9, 0, 0, 0, 549, 0, 0,
	159, 158, 160, 0, 0, 150, 9, 9, 0, 0,
	0, 0, 0, 9, 392, 0, 811, 163, 0, 163,
	0, 163, 0, 0, 570, 0, 0, 0, 159, 158,
	160, 0, 9, 150, 0, 576, 0, 0, 0, 0,
	0, 180, 816, 0, 0, 0, 0, 165, 0, 0,
	0, 0, 9, 0, 0, 594, 148, 147, 9, 9,
	0, 0, 155, 149, 154, 153, 605, 0, 9, 156,
	157, 159, 158, 160, 9, 0, 150, 9, 0, 0,
	0, 0, 0, 0, 148, 147, 0, 0, 9, 0,
	155, 149, 154, 153, 0, 0, 0, 156, 157, 0,
	0, 0, 543, 0, 9, 9, 159, 158, 160, 165,
	9, 150, 0, 0, 0, 0, 0, 0, 111, 9,
	9, 0, 9, 0, 0, 0, 0, 148, 147, 271,
	271, 0, 52, 155, 149, 154, 153, 0, 0, 0,
	156, 157, 0, 0, 0, 665, 159, 158, 160, 0,
	305, 150, 0, 305, 0, 669, 0, 165, 0, 0,
	810, 0, 148, 147, 586, 0, 0, 0, 155, 149,
	154, 153, 0, 0, 0, 156, 157, 0, 165, 686,
	687, 691, 0, 0, 0, 40, 93, 94, 95, 165,
	96, 97, 49, 0, 0, 0, 0, 271, 0, 271,
	271, 0, 148, 147, 0, 73, 0, 0, 155, 149,
	154, 153, 625, 0, 0, 156, 157, 410, 0, 411,
	412, 413, 408, 628, 629, 406, 271, 372, 374, 376,
	0, 0, 0, 642, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 647, 0, 0, 89, 0, 165,
	0, 98, 0, 0, 86, 82, 0, 0, 0, 305,
	0, 0, 0, 111, 91, 111, 111, 0, 763, 40,
	93, 94, 95, 0, 96, 97, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 771, 0, 0, 73,
	0, 40, 0, 94, 41, 42, 47, 84, 92, 83,
	46, 0, 0, 159, 695, 160, 52, 0, 150, 80,
	81, 90, 102, 0, 0, 0, 0, 799, 800, 0,
	0, 0, 807, 0, 271, 0, 271, 88, 271, 0,
	0, 89, 0, 0, 0, 98, 0, 0, 86, 82,
	0, 0, 0, 0, 824, 0, 0, 271, 91, 40,
	93, 94, 95, 0, 96, 97, 49, 0, 0, 148,
	147, 0, 305, 0, 0, 155, 149, 154, 153, 73,
	0, 0, 156, 157, 0, 0, 0, 0, 41, 42,
	47, 84, 92, 83, 46, 159, 158, 160, 0, 0,
	150, 320, 0, 80, 81, 90, 102, 0, 0, 780,
	41, 42, 47, 43, 44, 45, 46, 88, 0, 0,
	0, 89, 0, 0, 0, 98, 205, 0, 86, 82,
	40, 93, 94, 95, 271, 96, 97, 49, 91, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 148, 147, 0, 0, 0, 0, 155, 149, 154,
	153, 305, 0, 0, 156, 157, 305, 0, 41, 42,
	47, 84, 92, 83, 46, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 81, 90, 102, 0, 88, 0,
	0, 0, 89, 0, 0, 0, 98, 0, 0, 86,
	82, 40, 93, 94, 95, 0, 96, 97, 49, 91,
	0, 0, 0, 0, 0, 271, 0, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 40, 93, 94, 95,
	0, 96, 97, 49, 0, 305, 0, 305, 0, 41,
	42, 47, 323, 324, 322, 325, 73, 0, 0, 0,
	0, 0, 320, 0, 80, 81, 90, 102, 0, 88,
	0, 0, 0, 89, 0, 0, 0, 98, 0, 39,
	86, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 88, 0, 0, 271, 89, 0,
	0, 0, 98, 0, 305, 86, 82, 40, 93, 94,
	95, 0, 96, 97, 49, 91, 0, 0, 0, 0,
	41, 42, 47, 84, 92, 83, 46, 73, 0, 0,
	0, 0, 0, 0, 0, 80, 81, 90, 102, 159,
	158, 160, 0, 0, 150, 41, 42, 47, 84, 92,
	83, 46, 0, 774, 0, 0, 0, 0, 0, 0,
	80, 81, 90, 58, 0, 88, 0, 0, 0, 89,
	0, 0, 0, 98, 0, 0, 86, 82, 40, 93,
	94, 95, 0, 96, 97, 49, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 147, 0, 73, 0,
	0, 155, 149, 154, 153, 0, 0, 0, 156, 157,
	159, 158, 160, 0, 0, 150, 41, 42, 47, 84,
	92, 83, 46, 0, 0, 0, 713, 0, 0, 0,
	0, 80, 81, 90, 102, 0, 88, 0, 40, 0,
	89, 0, 0, 0, 98, 49, 0, 86, 82, 0,
	34, 0, 0, 0, 0, 0, 0, 91, 0, 0,
	23, 0, 0, 24, 0, 0, 148, 147, 0, 0,
	0, 0, 155, 149, 154, 153, 0, 0, 0, 156,
	157, 0, 0, 0, 0, 0, 0, 41, 42, 47,
	323, 324, 322, 325, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 81, 90, 102, 39, 0, 817, 0,
	791, 0, 0, 0, 0, 0, 26, 0, 0, 31,
	29, 30, 28, 0, 159, 158, 160, 0, 0, 150,
	0, 32, 33, 286, 287, 20, 35, 36, 37, 38,
	185, 0, 0, 654, 0, 0, 25, 41, 42, 47,
	43, 44, 45, 46, 40, 0, 0, 0, 0, 0,
	0, 49, 0, 0, 0, 0, 34, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 23, 0, 0, 24,
	148, 147, 0, 0, 0, 0, 155, 149, 154, 153,
	0, 0, 0, 156, 157, 0, 0, 0, 0, 0,
	0, 0, 0, 40, 0, 0, 0, 0, 0, 0,
	49, 0, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 0, 39, 0, 741, 23, 653, 0, 24, 0,
	0, 0, 26, 0, 0, 31, 29, 30, 28, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 33, 286,
	287, 0, 35, 36, 37, 38, 0, 0, 0, 654,
	0, 0, 25, 41, 42, 47, 43, 44, 45, 46,
	40, 39, 0, 284, 0, 19, 0, 49, 0, 0,
	0, 26, 34, 0, 31, 29, 30, 28, 0, 0,
	0, 0, 23, 0, 0, 24, 32, 33, 286, 287,
	20, 35, 36, 37, 38, 0, 0, 0, 0, 0,
	0, 25, 41, 42, 47, 43, 44, 45, 46, 40,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 0,
	0, 34, 0, 0, 0, 0, 0, 0, 39, 0,
	790, 23, 791, 0, 24, 0, 0, 0, 26, 0,
	0, 31, 29, 30, 28, 0, 0, 0, 0, 0,
	0, 0, 0, 32, 33, 0, 0, 20, 35, 36,
	37, 38, 0, 0, 0, 654, 0, 0, 25, 41,
	42, 47, 43, 44, 45, 46, 0, 39, 0, 652,
	0, 653, 0, 159, 158, 160, 0, 26, 150, 0,
	31, 29, 30, 28, 0, 0, 0, 712, 0, 159,
	158, 160, 32, 33, 150, 0, 0, 35, 36, 37,
	38, 0, 0, 699, 654, 0, 0, 25, 41, 42,
	47, 43, 44, 45, 46, 0, 0, 0, 0, 40,
	0, 0, 0, 0, 0, 0, 49, 0, 0, 148,
	147, 34, 0, 0, 0, 155, 149, 154, 153, 0,
	0, 23, 156, 157, 24, 148, 147, 0, 0, 0,
	0, 155, 149, 154, 153, 0, 0, 0, 156, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	159, 158, 160, 0, 0, 150, 0, 39, 0, 18,
	0, 19, 0, 0, 547, 0, 0, 26, 0, 0,
	31, 29, 30, 28, 0, 0, 0, 0, 0, 159,
	158, 160, 32, 33, 150, 0, 20, 35, 36, 37,
	38, 0, 0, 480, 0, 0, 0, 25, 41, 42,
	47, 43, 44, 45, 46, 0, 148, 147, 0, 0,
	0, 0, 155, 149, 154, 153, 159, 158, 160, 156,
	157, 150, 0, 0, 0, 0, 159, 158, 160, 0,
	470, 150, 0, 0, 0, 148, 147, 0, 0, 0,
	146, 155, 149, 154, 153, 463, 158, 160, 156, 157,
	150, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 148, 147, 0, 0, 0, 0, 155, 149,
	154, 153, 148, 147, 0, 156, 157, 0, 155, 149,
	154, 153, 0, 0, 0, 156, 157, 0, 0, 0,
	0, 148, 147, 0, 0, 0, 0, 155, 149, 154,
	153, 0, 0, 0, 156, 157,
}
var yyPact = [...]int{

	2445, -1000, 2445, -1000, -1000, 237, 237, 237, 237, 237,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1842, 1913,
	237, 207, 218, 695, 688, 761, 980, 237, 419, 1120,
	1120, 403, 237, 237, 759, 1913, 774, 1913, 260, 703,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 250, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2522, 1817, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 250,
	-1000, -1000, -54, -56, -1000, -1000, -1000, -1000, -1000, -1000,
	1913, 1913, 217, 215, 213, -1000, 1913, 293, 212, 1913,
	1913, 1120, 211, -1000, -1000, -1000, -1000, -1000, -1000, 2070,
	48, 556, 1817, -1000, 651, 743, 630, 1172, 753, 572,
	526, -1000, 521, 1913, 1120, 630, 237, -3, 244, 237,
	372, -1000, 237, 1120, 1120, 237, 237, 1120, -1000, -1000,
	-1000, -1000, 1913, 1913, -1000, -1000, 234, 1337, -40, 1337,
	1511, -1000, -4, 1120, -1000, 1913, 2445, 1913, 1913, 1913,
	532, 539, 567, 1913, 1913, 1913, 1913, 1913, 1913, 1913,
	-1000, 1000, 135, 142, 141, 184, 1617, 1675, 1617, -1000,
	-1000, 1913, 526, 526, 437, 1372, 165, 165, 545, 560,
	-1000, 51, -1000, 305, 526, 2209, 1120, 761, 1120, 135,
	609, 627, 630, 86, -1000, -1000, -1000, 195, 65, 746,
	195, 565, 565, 565, 1746, -1000, 127, -1000, 1074, 153,
	676, -1000, 761, 1913, -1000, 343, 171, 210, 208, -1000,
	237, 237, -1000, -1000, 742, 1372, 1372, 668, -1000, -1000,
	1913, -1000, -1000, 1337, 1913, 703, 240, 1372, 434, -35,
	-45, -45, 592, 1913, 165, 1913, 165, 165, -21, -21,
	-1000, -1000, -1000, 1569, 51, -1000, 1913, -1000, -1000, -1000,
	-1000, -1000, 1913, -1000, -1000, 1913, 1595, 442, 1913, -1000,
	1817, -1000, -1000, 165, 205, 198, 196, 532, -1000, 1913,
	399, 2209, -1000, -1000, 1842, -1000, 237, 237, 428, -1000,
	-6, 423, 606, 1913, 1984, 161, 1184, 630, 580, 746,
	19, -1000, 1041, -1000, -1000, -1000, 195, 647, 1913, -1000,
	184, -1000, 184, 184, -1000, -8, 736, -1000, 1372, -1000,
	-1000, -63, 194, 193, 192, 191, -1000, 1120, 237, 521,
	96, 420, 580, -1000, 1372, 521, 1120, 521, 103, 1120,
	-1000, -1000, 761, 237, 237, -1000, 1337, -1000, 190, 1120,
	395, 434, 2445, 1913, -1000, -1000, 2541, -1000, -45, -1000,
	-1000, -1000, 120, 119, 114, 113, 391, 437, 1913, 2512,
	541, 186, -1000, 186, -1000, 186, -1000, 366, 112, 470,
	-1000, 2475, -1000, -1000, 2209, 2209, -1000, 1913, 1046, -1000,
	-9, 618, 1372, -1000, 165, 580, -1000, -1000, 1120, -13,
	753, -14, 233, -58, -1000, 601, 658, 586, 600, 195,
	-1000, -1000, -1000, -1000, -1000, 1120, 746, 632, 626, 1372,
	575, -1000, -1000, 575, 1746, 1120, 1675, 526, 526, 526,
	1913, 111, -16, -1000, 237, 690, 1120, 657, 237, 580,
	633, 237, 110, 237, 735, 109, -17, -1000, -1000, -26,
	655, -31, 237, -1000, -1000, -1000, 521, 107, 512, 389,
	481, -1000, 2446, 1913, -1000, -1000, -1000, -1000, -1000, 1372,
	1913, 165, 105, -29, 102, 85, -1000, 322, 268, 237,
	2209, 386, 385, 1372, -1000, 523, 265, 1984, 263, -1000,
	-1000, -1000, 75, -32, -1000, 746, 580, 1913, 195, 596,
	586, 590, -1000, 195, -1000, -1000, -1000, -1000, 1913, 1913,
	-1000, -1000, 70, 1913, 1913, 1595, 1913, 64, 333, 1120,
	-1000, 237, -1000, -1000, 580, 580, 63, -38, 1913, -1000,
	62, 1120, -1000, 289, -1000, 281, 732, 761, 761, 1913,
	731, 761, -1000, 59, 718, 237, 508, 2445, 51, 1372,
	-1000, -1000, 165, -1000, -1000, -1000, 641, -1000, 431, 2445,
	467, 465, -1000, -1000, -1000, 670, 570, 580, -1000, -1000,
	1372, 1499, 195, 589, 195, 631, 1372, -1000, 316, 58,
	56, 49, 44, 41, 285, -1000, 237, 521, -1000, -1000,
	-1000, -1000, 690, 1120, 1372, 237, 237, -1000, 521, 2325,
	279, -1000, -1000, -1000, 655, 1372, 276, 29, -1000, 189,
	-1000, 237, -1000, -1000, 185, 381, 431, 2209, 1913, 237,
	237, -1000, -1000, -1000, 165, -1000, -1000, -1000, 1913, 160,
	631, 195, 1499, 159, 315, 312, 302, 296, 286, 154,
	262, -1000, 237, 237, -1000, -1000, -1000, 237, 379, 2325,
	-1000, -1000, 1842, 1913, 1511, 2325, 2325, 713, 521, -1000,
	651, 505, 375, 482, -1000, 2355, -1000, -1000, -1000, 1372,
	1120, 631, -1000, 306, 152, 148, 146, 145, 144, 306,
	295, -1000, -1000, -1000, 237, -1000, 2339, 1956, 11, 554,
	-1000, 1337, 373, 362, 275, 24, 23, 237, 492, 2209,
	21, 18, 651, 622, 306, 306, 306, 306, 306, 17,
	12, -1000, 2325, 2160, 1120, 1120, -1000, 237, 237, 2325,
	-1000, -1000, -1000, 237, -1000, -1000, -1000, -1000, 1913, 16,
	10, 9, 3, 2, -1000, 306, 426, 361, 2160, -1000,
	-1000, 1842, -1000, 418, 409, -1000, -1000, 358, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -42, 357, 374, 2325, 1913,
	481, 452, -1000, 1885, 2160, 2160, 237, -1000, 489, 355,
	-1000, 1651, 481, 237, 2160, 352, 351, -1000, 237, 488,
	2276, -1000, 421, 2325, 446, 439, -1000, 237, -1000, -1000,
	1842, 1913, 350, 421, 2160, 1913, 237, 237, -1000, 1412,
	1266, 1, 551, 487, 347, 472, -1000, 1294, -1000, -1000,
	2276, 2044, 1120, 1120, 237, 485, 2160, 1842, -1000, 407,
	406, -1000, 237, -1000, 1188, 2044, 2044, -1000, 2044,
}
var yyPgo = [...]int{

	0, 16, 37, 9, 203, 159, 10, 96, 895, 893,
	890, 889, 41, 888, 887, 886, 885, 883, 49, 21,
	23, 882, 881, 42, 880, 879, 39, 29, 877, 874,
	873, 872, 869, 975, 65, 54, 865, 44, 34, 857,
	855, 8, 852, 45, 851, 920, 850, 52, 53, 622,
	856, 33, 216, 14, 36, 847, 846, 845, 844, 1282,
	843, 842, 840, 838, 38, 623, 837, 834, 35, 25,
	833, 58, 56, 832, 12, 831, 5, 830, 825, 824,
	823, 61, 819, 28, 7, 47, 60, 20, 46, 818,
	805, 804, 32, 803, 15, 48, 22, 24, 794, 2,
	18, 6, 0, 792, 63, 787, 51, 786, 50, 260,
	4, 403, 783, 59, 55, 57, 43, 26, 40, 62,
	782, 419, 130,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 6, 6, 7, 7, 8, 8, 9, 9,
	10, 10, 10, 10, 10, 10, 11, 11, 11, 11,
	11, 11, 11, 12, 12, 13, 13, 13, 14, 14,
	14, 15, 15, 15, 15, 16, 16, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 18, 18, 19,
	19, 20, 20, 20, 20, 20, 21, 21, 21, 21,
	21, 22, 22, 22, 22, 23, 24, 24, 25, 26,
	26, 27, 27, 27, 28, 28, 28, 28, 29, 29,
	29, 29, 29, 29, 29, 30, 30, 30, 31, 31,
	31, 31, 31, 32, 32, 32, 33, 34, 34, 34,
	34, 35, 35, 36, 37, 37, 38, 38, 39, 39,
	40, 40, 41, 41, 42, 42, 42, 43, 43, 44,
	44, 45, 45, 46, 46, 47, 47, 48, 48, 48,
	48, 48, 48, 49, 49, 49, 49, 49, 50, 50,
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
	50, 50, 51, 52, 52, 53, 53, 54, 54, 55,
	55, 56, 56, 57, 57, 57, 58, 58, 59, 60,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 62,
	62, 62, 62, 62, 62, 62, 63, 63, 63, 63,
	64, 64, 65, 65, 66, 66, 66, 66, 66, 67,
	67, 68, 68, 68, 68, 68, 68, 68, 68, 69,
	70, 70, 71, 71, 72, 72, 72, 73, 74, 74,
	74, 74, 74, 74, 75, 75, 75, 75, 75, 76,
	76, 76, 77, 77, 78, 78, 78, 79, 80, 80,
	81, 81, 82, 82, 83, 83, 84, 84, 85, 85,
	86, 86, 87, 87, 88, 88, 89, 89, 89, 89,
	90, 91, 92, 92, 93, 93, 94, 94, 95, 95,
	96, 96, 97, 97, 98, 98, 99, 99, 100, 100,
	101, 101, 102, 102, 102, 102, 102, 102, 102, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 110, 111,
	112, 112, 113, 113, 114, 114, 115, 115, 116, 116,
	117, 117, 118, 118, 118, 118, 119, 119, 120, 120,
	121, 121, 122, 122,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	8, 9, 7, 9, 9, 2, 8, 9, 7, 9,
	9, 2, 3, 2, 2, 8, 9, 1, 8, 9,
	1, 3, 3, 2, 3, 2, 2, 7, 8, 5,
	9, 6, 7, 9, 6, 8, 8, 1, 3, 1,
	3, 0, 1, 1, 2, 2, 6, 3, 3, 4,
	6, 7, 9, 6, 4, 1, 1, 3, 3, 1,
	3, 1, 1, 3, 10, 11, 11, 13, 0, 1,
	1, 1, 1, 2, 2, 5, 6, 3, 5, 3,
	3, 5, 3, 3, 4, 5, 5, 5, 4, 4,
	4, 1, 1, 3, 0, 2, 0, 2, 0, 3,
	0, 2, 0, 3, 0, 3, 4, 0, 2, 0,
	2, 0, 2, 6, 9, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 3, 1, 1, 3, 1, 3, 2,
	4, 1, 1, 0, 1, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 4, 4, 6, 6, 4, 6,
	4, 4, 4, 6, 4, 4, 6, 4, 2, 3,
	3, 3, 3, 3, 2, 2, 3, 3, 2, 2,
	0, 1, 4, 4, 5, 5, 5, 5, 1, 5,
	10, 8, 9, 9, 9, 9, 9, 8, 10, 2,
	0, 3, 1, 1, 1, 2, 3, 1, 1, 1,
	2, 3, 1, 1, 5, 5, 6, 6, 4, 0,
	2, 4, 1, 1, 1, 3, 1, 5, 0, 1,
	4, 2, 0, 2, 1, 3, 1, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 6, 9, 5, 8,
	7, 3, 1, 3, 5, 6, 4, 2, 0, 2,
	4, 2, 0, 2, 4, 2, 0, 2, 4, 2,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	1, 3, 1, 3, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 1, 1, 1, 0, 1, 0, 1,
	1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -10, -33, -89, -90, -93, -65,
	-17, -15, -21, -22, -28, -16, -31, -32, 74, 76,
	101, -45, -102, 26, 29, 112, 82, -111, 88, 86,
	87, 85, 97, 98, 16, 102, 103, 104, 105, 72,
	4, 113, 114, 116, 117, 118, 119, 115, -109, 11,
	-1, -122, 125, -122, -122, -122, -122, -50, 131, -49,
	-48, -62, -60, -59, -65, -66, -79, -61, -63, -109,
	-111, -30, -102, 24, -103, -104, -105, -106, -107, -108,
	128, 129, 74, 118, 116, -67, 73, -52, 62, 66,
	130, 83, 117, 5, 6, 7, 9, 10, 70, -50,
	-109, -110, 131, -122, -34, 19, 15, 17, -36, -35,
	13, -59, 131, 131, 30, 30, -113, -112, -109, -113,
	-102, -122, -109, 83, 30, -102, -102, -29, 89, 90,
	31, 32, 91, 92, -122, -122, 12, -50, 5, -50,
	115, -47, -46, -120, 25, 122, 78, 121, 120, 127,
	69, -115, -121, 129, 128, 126, 133, 134, 65, 64,
	66, -50, -84, -33, -64, -45, 136, 131, 136, -50,
	-50, 131, 131, 131, -80, -50, 120, 127, -115, -121,
	-59, -50, -50, -102, 131, 80, 63, 135, 63, -84,
	-41, 38, 20, -86, -71, -102, 24, 14, -86, -37,
	14, 57, 58, 59, -114, 71, -64, -84, -50, -102,
	-71, -122, 135, 122, -122, 83, 30, 106, 107, -122,
	-102, -102, -122, -122, -102, -50, -50, 127, -122, -122,
	135, -122, -122, -50, -104, 135, -102, -50, -1, -50,
	-50, -50, -115, 67, 63, 68, 61, 60, -50, -50,
	-50, -50, -50, -50, -50, 132, 135, 132, 132, 132,
	-102, -104, -114, -102, -104, -114, -114, -81, 77, -52,
	131, -59, -52, 67, 63, 61, 60, 69, 116, -114,
	-2, -8, -6, -13, 74, -12, 99, 100, -102, -110,
	-109, -102, -42, 44, 41, -72, -71, 135, 16, -85,
	-74, -72, -73, -75, 23, -59, 14, -38, 18, -85,
	-119, 60, -119, -119, -88, -78, -77, -51, -50, -68,
	126, -102, 118, 116, 117, 119, 132, 131, -33, 22,
	27, 28, 36, -113, -50, 84, 131, 84, 131, 131,
	-122, -122, 20, -48, -84, -122, -50, -47, 22, 131,
	-95, -94, 79, 75, -106, -108, -50, -52, -50, -52,
	-52, -84, -64, -64, -64, -51, -82, -81, 79, -50,
	-52, 131, -59, 131, -59, 131, -59, -115, -64, 81,
	-2, -50, -122, -122, 80, 80, -44, 45, -50, -54,
	-55, -56, -50, -68, 21, 131, -33, -102, 22, -86,
	-92, -91, -49, -102, -38, -116, 56, -118, 53, 135,
	48, 50, 51, 52, -102, 22, -85, -39, 39, -50,
	-35, -34, -35, -35, 135, 22, 131, 131, 131, 131,
	131, -87, -102, -122, -33, -18, 131, -102, -49, 131,
	-49, -33, -87, -33, 132, -27, -24, -26, -23, -25,
	-109, -102, -110, -122, -122, -122, 131, -87, 81, -95,
	-94, -1, -50, 64, 132, 132, 132, 132, 81, -50,
	78, 64, -53, -52, -53, -53, 86, 63, 132, 76,
	78, -2, -2, -50, -43, 46, 72, 135, -57, 42,
	43, -53, -83, -49, -102, -37, 135, 127, 47, -116,
	-118, -117, 49, 47, -85, -102, -38, -40, 40, 41,
	-88, -102, -64, -114, -114, -114, -114, -64, 132, 135,
	-122, -20, 31, 32, 33, 34, -19, -18, 35, -122,
	-83, 37, -122, 132, -122, 22, 132, 135, 135, 35,
	132, 135, -122, -33, 132, 74, 81, 78, -50, -50,
	-52, 132, 135, 132, 132, 93, 111, -122, -2, -6,
	81, 81, -43, 113, -54, 114, 132, 135, -38, -92,
	-50, -74, 47, -117, 47, -74, -50, -84, 132, -64,
	-64, -64, -51, -64, 132, -122, -33, 22, -87, -122,
	-49, -49, 132, 135, -50, 132, -102, -122, 84, 108,
	22, -23, -26, -26, -109, -50, 22, -27, 132, 22,
	-122, 74, -1, -53, 39, -97, -96, 79, 75, 76,
	76, -58, 31, 32, 21, -33, -83, -76, 54, 55,
	-74, 47, -74, 96, 132, 132, 132, 132, 132, 96,
	110, -122, -33, -20, -19, -122, -122, -33, -3, -7,
	-5, -11, 74, 76, 109, 108, 108, 132, 131, -122,
	131, 81, -97, -96, -2, -50, -122, -122, -53, -50,
	131, -74, -76, 131, 96, 96, 96, 96, 96, 131,
	114, -122, -122, -122, 81, -3, -50, -50, -109, -110,
	-122, -50, -3, -3, 22, -33, -41, 74, 81, 78,
	-87, -69, -70, 95, 131, 131, 131, 131, 131, -69,
	96, -122, 78, 80, 63, 63, -122, 81, 81, 108,
	132, 132, -122, 74, -2, 132, 132, -41, 41, -69,
	-69, -69, -69, -69, 132, 131, -3, -4, -9, -7,
	-14, 74, -12, -102, -102, -122, -122, -3, -122, -84,
	132, 132, 132, 132, 132, -69, -99, -98, 79, 75,
	-94, 81, -4, -50, 80, 80, 81, 132, 81, -99,
	-3, -50, -94, 76, 78, -4, -4, -122, 74, 81,
	78, -122, -4, -7, 81, 81, -122, 74, -3, -5,
	74, 76, -101, -100, 79, 75, 76, 76, -122, -50,
	-50, -109, -110, 81, -101, -100, -4, -50, -122, -122,
	78, 80, 63, 63, 74, 81, 78, 74, -12, -102,
	-102, -122, 74, -4, -50, 80, 80, -122, 78,
}
var yyDef = [...]int{

	-2, -2, -2, 22, 23, 352, 352, 352, 352, 352,
	14, 15, 16, 17, 18, 19, 20, 21, 0, 0,
	352, 0, 0, 0, 0, 0, 0, 352, 0, 0,
	0, 98, 352, 352, 0, 0, 0, 0, 0, 348,
	312, 313, 314, 315, 316, 317, 318, 319, 0, 326,
	2, 9, 353, 10, 11, 12, 13, 336, -2, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 153, 0, 147, 148, 149, 150, 151, 152,
	0, 0, 0, 317, 315, 228, 268, 336, 0, 0,
	0, 0, 316, 320, 321, 322, 323, 324, 325, 336,
	168, 0, 141, 35, -2, 0, 0, 0, 124, 0,
	334, 122, 141, 220, 0, 0, 352, 332, 330, 352,
	0, 53, 352, 0, 0, 352, 352, 0, 99, 100,
	101, 102, 0, 0, 55, 56, 0, -2, 352, -2,
	352, 142, 145, 0, 349, 0, -2, 0, 350, 351,
	336, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	337, 336, 0, 0, 0, 0, 0, 220, 0, 214,
	215, 220, 334, 334, 0, -2, 350, 351, 0, 0,
	208, 218, 219, 0, 334, -2, 0, 0, 0, 0,
	134, 0, 0, 0, 280, 242, 243, 0, 0, 126,
	0, 346, 346, 346, 0, 335, 0, 221, -2, 141,
	0, 51, 0, 0, 52, 0, 0, 0, 0, 54,
	352, 352, 77, 78, 0, -2, -2, 0, 109, 110,
	0, 112, 113, -2, 148, 348, 0, 329, 298, 189,
	-2, -2, 0, 0, 0, 0, 0, 0, 209, 210,
	211, 212, 213, 216, 217, 171, 0, 173, 188, 223,
	154, 156, 220, 155, 157, 220, 220, 272, 0, 191,
	141, 174, 193, 0, 0, 0, 0, 336, 107, 220,
	0, -2, 26, 27, 0, 47, 352, 352, 0, 328,
	327, 0, 139, 0, 0, 141, 244, 0, 0, 126,
	-2, 248, 249, 252, 253, 247, 0, 128, 0, 125,
	0, 347, 0, 0, 123, 284, 264, 266, -2, 263,
	172, 153, 317, 315, 316, 318, 222, 0, 352, 141,
	0, 0, 0, 333, -2, 141, 0, 141, 0, 0,
	79, 84, 0, 352, 352, 114, -2, 146, 0, 0,
	0, 298, -2, 0, 194, 195, 336, 198, -2, 202,
	205, 277, 0, 0, 0, 0, 0, 271, 0, 336,
	0, 141, 200, 141, 204, 141, 207, 0, 0, 0,
	4, 336, 43, 44, -2, -2, 116, 0, -2, 133,
	177, 183, -2, 182, 0, 0, 288, 245, 0, 281,
	124, 292, 0, 153, 294, 0, -2, 340, 0, 0,
	339, 343, 344, 345, 250, 0, 126, 130, 0, -2,
	118, 121, 119, 120, 0, 0, 220, 334, 334, 334,
	220, 0, 282, 59, 352, 71, 0, 67, 352, 0,
	0, 352, 0, 352, 0, 0, 91, 92, 86, 89,
	85, 0, 352, 108, 111, 115, 141, 0, 0, 0,
	297, 299, 336, 0, 224, 225, 226, 227, 267, -2,
	0, 0, 0, 175, 0, 0, 105, 0, 229, 352,
	-2, 0, 0, -2, 135, 137, 0, 0, 179, 184,
	185, 286, 0, 274, 246, 126, 0, 0, 0, 0,
	340, 0, 341, 0, 279, 251, 295, 117, 0, 0,
	285, 265, 0, 220, 220, 220, 220, 0, -2, 0,
	61, 352, 72, 73, 0, 0, 0, 69, 0, 64,
	0, 0, 76, 352, 83, 0, 0, 0, 0, 0,
	0, 0, 80, 0, 0, 352, 0, -2, 196, -2,
	197, 199, 0, 203, 206, 106, 0, 32, 302, -2,
	0, 0, 136, 138, 178, 0, 141, 0, 290, 293,
	-2, 259, 0, 0, 0, 258, -2, 129, 222, 0,
	0, 0, 0, 0, 0, 57, 352, 141, 283, 62,
	74, 75, 71, 0, -2, 352, 352, 81, 141, -2,
	0, 87, 93, 90, 0, -2, 0, 0, 143, 0,
	30, 352, 296, 176, 0, 0, 302, -2, 0, 352,
	352, 180, 186, 187, 0, 289, 275, 254, 0, 0,
	255, 0, 259, 0, 224, 225, 226, 227, 229, 0,
	0, 58, 352, 352, 70, 65, 66, 352, 0, -2,
	24, 25, 0, 0, 352, -2, -2, 0, 141, 31,
	132, 0, 0, 301, 303, 336, 33, 34, 287, -2,
	0, 257, 256, 240, 0, 0, 0, 0, 0, 240,
	0, 60, 63, 82, 352, 6, 336, 336, 168, 0,
	41, -2, 0, 0, 0, 0, 0, 352, 0, -2,
	0, 0, 132, 0, 240, 240, 240, 240, 240, 0,
	0, 94, -2, -2, 0, 0, 42, 352, 352, -2,
	144, 230, 45, 352, 300, 261, 231, 239, 0, 0,
	0, 0, 0, 0, 237, 240, 306, 0, -2, 28,
	29, 0, 50, 0, 0, 95, 96, 0, 46, 241,
	232, 233, 234, 235, 236, 0, 0, 306, -2, 0,
	0, 0, 8, 336, -2, -2, 352, 238, 0, 0,
	307, 336, 305, 352, -2, 0, 0, 97, 352, 0,
	-2, 38, 310, -2, 0, 0, 36, 352, 304, -2,
	0, 0, 0, 310, -2, 0, 352, 352, 37, 336,
	336, 168, 0, 0, 0, 309, 311, 336, 39, 40,
	-2, -2, 0, 0, 352, 0, -2, 0, -2, 0,
	0, 48, 352, 308, 336, -2, -2, 49, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 130, 3, 3, 3, 134, 3, 3,
	131, 132, 126, 129, 135, 128, 136, 133, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 125,
	3, 127,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:191
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:196
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:203
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:208
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:215
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:220
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:227
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:232
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:239
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:243
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:247
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:251
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:255
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:259
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:263
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:267
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:271
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:275
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:279
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:283
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:293
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:303
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:307
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:313
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:317
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:323
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:327
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:333
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:337
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:341
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 33:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:345
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 34:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:349
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:353
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:359
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:363
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:367
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:371
		{
			yyVAL.statement = WhileInCursor{Variables: []Variable{yyDollar[2].variable}, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:375
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:379
		{
			yyVAL.statement = Return{Value: NewNullValue()}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:383
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:389
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 44:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:393
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:399
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:403
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:407
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:413
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:417
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:421
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:427
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:431
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:435
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:439
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:445
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:449
		{
			yyVAL.statement = TransactionControl{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[1].token.Token}
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:455
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 58:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:459
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[7].expression}
		}
	case 59:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:463
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Query: yyDollar[4].expression}
		}
	case 60:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:467
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 61:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:471
		{
			yyVAL.statement = CreateTable{Table: yyDollar[3].identifier, Query: yyDollar[5].expression}
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:475
		{
			yyVAL.statement = AddColumns{Table: yyDollar[3].expression, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 63:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:479
		{
			yyVAL.statement = AddColumns{Table: yyDollar[3].expression, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:483
		{
			yyVAL.statement = DropColumns{Table: yyDollar[3].expression, Columns: []Expression{yyDollar[5].expression}}
		}
	case 65:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:487
		{
			yyVAL.statement = DropColumns{Table: yyDollar[3].expression, Columns: yyDollar[6].expressions}
		}
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:491
		{
			yyVAL.statement = RenameColumn{Table: yyDollar[3].expression, Old: yyDollar[5].expression, New: yyDollar[7].identifier}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:497
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:501
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:507
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:511
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:517
		{
			yyVAL.expression = nil
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:521
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:525
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:529
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:533
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:539
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:543
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:547
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:551
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:555
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 81:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:561
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 82:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:565
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:569
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:573
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:579
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:585
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:589
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expression)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:595
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:601
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:605
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:611
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:615
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:619
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:625
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 95:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:629
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].expressions, Statements: yyDollar[9].program}
		}
	case 96:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:633
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Statements: yyDollar[9].program}
		}
	case 97:
		yyDollar = yyS[yypt-13 : yypt+1]
		//line parser.y:637
		{
			yyVAL.statement = AggregateDeclaration{Name: yyDollar[2].identifier, Cursor: yyDollar[5].identifier, Parameters: yyDollar[7].expressions, Statements: yyDollar[11].program}
		}
	case 98:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:643
		{
			yyVAL.expression = nil
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:647
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:651
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:655
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:659
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:663
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:667
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:673
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 106:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:677
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:681
		{
			yyVAL.expression = CursorAttrebute{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Attrebute: yyDollar[3].token}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:687
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].expression.(PrimitiveType).Value}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:691
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:695
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:699
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:703
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].expression}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:709
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:713
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[3].expression}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:717
		{
			yyVAL.statement = Trigger{BaseExpr: NewBaseExpr(yyDollar[1].token), Token: yyDollar[2].token.Token, Message: yyDollar[4].expression, Code: yyDollar[3].integer}
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:723
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:735
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:745
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:754
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:763
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:774
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:778
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:784
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:790
		{
			yyVAL.expression = nil
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:794
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:800
		{
			yyVAL.expression = nil
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:804
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:810
		{
			yyVAL.expression = nil
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:814
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:820
		{
			yyVAL.expression = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:824
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:830
		{
			yyVAL.expression = nil
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:834
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:840
		{
			yyVAL.expression = nil
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:844
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:848
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:854
		{
			yyVAL.expression = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:858
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:864
		{
			yyVAL.expression = nil
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:868
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 141:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:874
		{
			yyVAL.expression = nil
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:878
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:884
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 144:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:888
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:894
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:898
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:904
		{
			yyVAL.expression = NewPrimitiveType(yyDollar[1].text)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:908
		{
			yyVAL.expression = NewPrimitiveType(yyDollar[1].integer)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:912
		{
			yyVAL.expression = NewPrimitiveType(yyDollar[1].float)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:916
		{
			yyVAL.expression = NewPrimitiveType(yyDollar[1].ternary)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:920
		{
			yyVAL.expression = NewPrimitiveType(yyDollar[1].datetime)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:924
		{
			yyVAL.expression = NewPrimitiveType(yyDollar[1].null)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:930
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, Column: yyDollar[1].identifier}
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:934
		{
			yyVAL.expression = FieldReference{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:938
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Column: yyDollar[3].identifier}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:942
		{
			yyVAL.expression = ColumnNumber{BaseExpr: yyDollar[1].identifier.BaseExpr, View: yyDollar[1].identifier, Number: yyDollar[3].integer}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:946
		{
			yyVAL.expression = ColumnNumber{BaseExpr: NewBaseExpr(yyDollar[1].token), View: Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal}, Number: yyDollar[3].integer}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:952
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:956
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:960
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:964
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:968
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:972
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:976
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:980
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:984
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:988
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:992
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:996
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1000
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1004
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1010
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1016
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1020
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1026
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1030
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1036
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1040
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1046
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1050
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 181:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1056
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1060
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1066
		{
			yyVAL.token = Token{}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1070
		{
			yyVAL.token = yyDollar[1].token
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1074
		{
			yyVAL.token = yyDollar[1].token
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1080
		{
			yyVAL.token = yyDollar[1].token
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1084
		{
			yyVAL.token = yyDollar[1].token
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1090
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1096
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1119
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1123
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1127
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1131
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 194:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1135
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: NewPrimitiveType(yyDollar[4].ternary), Negation: yyDollar[3].token}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1139
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: NewPrimitiveType(yyDollar[4].null), Negation: yyDollar[3].token}
		}
	case 196:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1143
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1147
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 198:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1151
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 199:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1155
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 200:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1159
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 201:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1163
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 202:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1167
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 203:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1171
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1175
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 205:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1179
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 206:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1183
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 207:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1187
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1191
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1197
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 210:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1201
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1205
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1209
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1213
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1217
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1221
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1227
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 217:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1231
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1235
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1239
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 220:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1245
		{
			yyVAL.expressions = nil
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1249
		{
			yyVAL.expressions = yyDollar[1].expressions
		}
	case 222:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1255
		{
			yyVAL.expression = Function{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1259
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1266
		{
			yyVAL.expression = AggregateFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 225:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1270
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1274
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1278
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1282
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1288
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions}
		}
	case 230:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1292
		{
			yyVAL.expression = ListAgg{BaseExpr: NewBaseExpr(yyDollar[1].token), ListAgg: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, WithinGroup: yyDollar[6].token.Literal + " " + yyDollar[7].token.Literal, OrderBy: yyDollar[9].expression}
		}
	case 231:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1298
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 232:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1302
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: yyDollar[1].identifier.BaseExpr, Name: yyDollar[1].identifier.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 233:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1306
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 234:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1310
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 235:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1314
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 236:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1318
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Distinct: yyDollar[3].token, Args: yyDollar[4].expressions, Over: yyDollar[6].token.Literal, AnalyticClause: yyDollar[8].expression.(AnalyticClause)}
		}
	case 237:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1322
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 238:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:1326
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal, Args: yyDollar[3].expressions, IgnoreNulls: true, IgnoreNullsLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Over: yyDollar[7].token.Literal, AnalyticClause: yyDollar[9].expression.(AnalyticClause)}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1332
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 240:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1338
		{
			yyVAL.expression = nil
		}
	case 241:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1342
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1348
		{
			yyVAL.expression = yyDollar[1].identifier
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1352
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1358
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 245:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1362
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1366
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1372
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 248:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1378
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1382
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1386
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 251:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1390
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1394
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 253:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1398
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1404
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1408
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 256:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1412
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 257:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1416
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1420
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 259:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1426
		{
			yyVAL.expression = nil
		}
	case 260:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1430
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1434
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1440
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1444
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1450
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1454
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 266:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1458
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 267:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1464
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1470
		{
			yyVAL.expression = nil
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1474
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1480
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1484
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 272:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1490
		{
			yyVAL.expression = nil
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1494
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1500
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1504
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 276:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1510
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1514
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1520
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1524
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1530
		{
			yyVAL.expressions = []Expression{Table{Object: yyDollar[1].expression}}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1534
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[3].expressions...)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1540
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1544
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1550
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1554
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 286:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1560
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 287:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1564
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1568
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 289:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1572
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].expression, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 290:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1578
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1584
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression, Value: yyDollar[3].expression}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1590
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1594
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1600
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 295:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1605
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1612
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1616
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1622
		{
			yyVAL.procexpr = nil
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1626
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1632
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1636
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1642
		{
			yyVAL.procexpr = nil
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1646
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1652
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1656
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1662
		{
			yyVAL.procexpr = nil
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1666
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 308:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1672
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1676
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 310:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1682
		{
			yyVAL.procexpr = nil
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1686
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1692
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1696
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1700
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1704
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1708
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1712
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 318:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1716
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1720
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 320:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1726
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1732
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1738
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1744
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1750
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1756
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 326:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1762
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1768
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 328:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1772
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 329:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1778
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1784
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 331:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1788
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1794
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 333:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1798
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1804
		{
			yyVAL.token = Token{}
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1808
		{
			yyVAL.token = yyDollar[1].token
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1814
		{
			yyVAL.token = Token{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1818
		{
			yyVAL.token = yyDollar[1].token
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1824
		{
			yyVAL.token = Token{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1828
		{
			yyVAL.token = yyDollar[1].token
		}
	case 340:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1834
		{
			yyVAL.token = Token{}
		}
	case 341:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1838
		{
			yyVAL.token = yyDollar[1].token
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1844
		{
			yyVAL.token = Token{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1848
		{
			yyVAL.token = yyDollar[1].token
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1852
		{
			yyVAL.token = yyDollar[1].token
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1856
		{
			yyVAL.token = yyDollar[1].token
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1862
		{
			yyVAL.token = Token{}
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1866
		{
			yyVAL.token = yyDollar[1].token
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1872
		{
			yyVAL.token = Token{}
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1876
		{
			yyVAL.token = yyDollar[1].token
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1883
		{
			yyVAL.token = yyDollar[1].token
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1887
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 352:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1894
		{
			yyVAL.token = Token{}
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1898
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
