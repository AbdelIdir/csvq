//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2
//line parser.y:5
type yySymType struct {
	yys         int
	program     []Statement
	statement   Statement
	expression  Expression
	expressions []Expression
	procexpr    ProcExpr
	procexprs   []ProcExpr
	primary     Primary
	identifier  Identifier
	text        String
	integer     Integer
	float       Float
	ternary     Ternary
	datetime    Datetime
	null        Null
	variable    Variable
	variables   []Variable
	token       Token
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const BOOLEAN = 57350
const TERNARY = 57351
const DATETIME = 57352
const VARIABLE = 57353
const FLAG = 57354
const SELECT = 57355
const FROM = 57356
const UPDATE = 57357
const SET = 57358
const DELETE = 57359
const WHERE = 57360
const INSERT = 57361
const INTO = 57362
const VALUES = 57363
const AS = 57364
const DUAL = 57365
const STDIN = 57366
const RECURSIVE = 57367
const CREATE = 57368
const ADD = 57369
const DROP = 57370
const ALTER = 57371
const TABLE = 57372
const FIRST = 57373
const LAST = 57374
const AFTER = 57375
const BEFORE = 57376
const DEFAULT = 57377
const RENAME = 57378
const TO = 57379
const ORDER = 57380
const GROUP = 57381
const HAVING = 57382
const BY = 57383
const ASC = 57384
const DESC = 57385
const LIMIT = 57386
const OFFSET = 57387
const TIES = 57388
const PERCENT = 57389
const JOIN = 57390
const INNER = 57391
const OUTER = 57392
const LEFT = 57393
const RIGHT = 57394
const FULL = 57395
const CROSS = 57396
const ON = 57397
const USING = 57398
const NATURAL = 57399
const UNION = 57400
const INTERSECT = 57401
const EXCEPT = 57402
const ALL = 57403
const ANY = 57404
const EXISTS = 57405
const IN = 57406
const AND = 57407
const OR = 57408
const NOT = 57409
const BETWEEN = 57410
const LIKE = 57411
const IS = 57412
const NULL = 57413
const NULLS = 57414
const DISTINCT = 57415
const WITH = 57416
const CASE = 57417
const IF = 57418
const ELSEIF = 57419
const WHILE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const DO = 57424
const END = 57425
const DECLARE = 57426
const CURSOR = 57427
const FOR = 57428
const FETCH = 57429
const OPEN = 57430
const CLOSE = 57431
const DISPOSE = 57432
const NEXT = 57433
const PRIOR = 57434
const ABSOLUTE = 57435
const RELATIVE = 57436
const RANGE = 57437
const SEPARATOR = 57438
const PARTITION = 57439
const OVER = 57440
const COMMIT = 57441
const ROLLBACK = 57442
const CONTINUE = 57443
const BREAK = 57444
const EXIT = 57445
const PRINT = 57446
const PRINTF = 57447
const SOURCE = 57448
const FUNCTION = 57449
const BEGIN = 57450
const RETURN = 57451
const VAR = 57452
const COMPARISON_OP = 57453
const STRING_OP = 57454
const SUBSTITUTION_OP = 57455
const UMINUS = 57456
const UPLUS = 57457

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"BOOLEAN",
	"TERNARY",
	"DATETIME",
	"VARIABLE",
	"FLAG",
	"SELECT",
	"FROM",
	"UPDATE",
	"SET",
	"DELETE",
	"WHERE",
	"INSERT",
	"INTO",
	"VALUES",
	"AS",
	"DUAL",
	"STDIN",
	"RECURSIVE",
	"CREATE",
	"ADD",
	"DROP",
	"ALTER",
	"TABLE",
	"FIRST",
	"LAST",
	"AFTER",
	"BEFORE",
	"DEFAULT",
	"RENAME",
	"TO",
	"ORDER",
	"GROUP",
	"HAVING",
	"BY",
	"ASC",
	"DESC",
	"LIMIT",
	"OFFSET",
	"TIES",
	"PERCENT",
	"JOIN",
	"INNER",
	"OUTER",
	"LEFT",
	"RIGHT",
	"FULL",
	"CROSS",
	"ON",
	"USING",
	"NATURAL",
	"UNION",
	"INTERSECT",
	"EXCEPT",
	"ALL",
	"ANY",
	"EXISTS",
	"IN",
	"AND",
	"OR",
	"NOT",
	"BETWEEN",
	"LIKE",
	"IS",
	"NULL",
	"NULLS",
	"DISTINCT",
	"WITH",
	"CASE",
	"IF",
	"ELSEIF",
	"WHILE",
	"WHEN",
	"THEN",
	"ELSE",
	"DO",
	"END",
	"DECLARE",
	"CURSOR",
	"FOR",
	"FETCH",
	"OPEN",
	"CLOSE",
	"DISPOSE",
	"NEXT",
	"PRIOR",
	"ABSOLUTE",
	"RELATIVE",
	"RANGE",
	"SEPARATOR",
	"PARTITION",
	"OVER",
	"COMMIT",
	"ROLLBACK",
	"CONTINUE",
	"BREAK",
	"EXIT",
	"PRINT",
	"PRINTF",
	"SOURCE",
	"FUNCTION",
	"BEGIN",
	"RETURN",
	"VAR",
	"COMPARISON_OP",
	"STRING_OP",
	"SUBSTITUTION_OP",
	"UMINUS",
	"UPLUS",
	"';'",
	"'*'",
	"'='",
	"'-'",
	"'+'",
	"'!'",
	"'('",
	"')'",
	"'/'",
	"'%'",
	"','",
	"'.'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:1715

func SetDebugLevel(level int, verbose bool) {
	yyDebug = level
	yyErrorVerbose = verbose
}

func Parse(s string, sourceFile string) ([]Statement, error) {
	l := new(Lexer)
	l.Init(s, sourceFile)
	yyParse(l)
	return l.program, l.err
}

//line yacctab:1
var yyExca = [...]int{
	-1, 0,
	1, 1,
	-2, 119,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 94,
	58, 99,
	59, 99,
	60, 99,
	-2, 110,
	-1, 123,
	64, 296,
	68, 296,
	69, 296,
	-2, 312,
	-1, 137,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 161,
	79, 236,
	-2, 296,
	-1, 170,
	83, 3,
	-2, 119,
	-1, 192,
	64, 296,
	68, 296,
	69, 296,
	-2, 243,
	-1, 200,
	4, 85,
	-2, 296,
	-1, 201,
	4, 86,
	-2, 296,
	-1, 215,
	64, 296,
	68, 296,
	69, 296,
	-2, 291,
	-1, 218,
	70, 0,
	111, 0,
	118, 0,
	-2, 164,
	-1, 219,
	70, 0,
	111, 0,
	118, 0,
	-2, 166,
	-1, 239,
	96, 110,
	123, 243,
	-2, 296,
	-1, 254,
	77, 3,
	81, 3,
	83, 3,
	-2, 119,
	-1, 273,
	48, 298,
	50, 302,
	-2, 245,
	-1, 291,
	64, 296,
	68, 296,
	69, 296,
	-2, 229,
	-1, 316,
	83, 1,
	-2, 119,
	-1, 322,
	70, 0,
	111, 0,
	118, 0,
	-2, 175,
	-1, 330,
	96, 110,
	123, 200,
	-2, 296,
	-1, 348,
	83, 3,
	-2, 119,
	-1, 351,
	64, 296,
	68, 296,
	69, 296,
	-2, 115,
	-1, 355,
	64, 296,
	68, 296,
	69, 296,
	-2, 155,
	-1, 368,
	50, 302,
	-2, 298,
	-1, 381,
	64, 296,
	68, 296,
	69, 296,
	-2, 105,
	-1, 418,
	83, 240,
	-2, 296,
	-1, 428,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 430,
	64, 296,
	68, 296,
	69, 296,
	-2, 118,
	-1, 477,
	83, 5,
	-2, 119,
	-1, 481,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 487,
	79, 237,
	81, 237,
	83, 237,
	-2, 296,
	-1, 496,
	77, 1,
	81, 1,
	83, 1,
	-2, 25,
	-1, 506,
	64, 296,
	68, 296,
	69, 296,
	-2, 258,
	-1, 512,
	64, 296,
	68, 296,
	69, 296,
	-2, 109,
	-1, 520,
	64, 296,
	68, 296,
	69, 296,
	-2, 61,
	-1, 527,
	77, 5,
	81, 5,
	83, 5,
	-2, 119,
	-1, 534,
	83, 5,
	-2, 119,
	-1, 545,
	83, 3,
	-2, 119,
	-1, 572,
	64, 296,
	68, 296,
	69, 296,
	-2, 312,
	-1, 585,
	64, 296,
	68, 296,
	69, 296,
	-2, 227,
	-1, 595,
	77, 5,
	81, 5,
	83, 5,
	-2, 119,
	-1, 596,
	83, 7,
	-2, 119,
	-1, 602,
	77, 3,
	81, 3,
	83, 3,
	-2, 119,
	-1, 611,
	77, 7,
	81, 7,
	83, 7,
	-2, 119,
	-1, 626,
	83, 5,
	-2, 119,
	-1, 632,
	83, 7,
	-2, 119,
	-1, 640,
	77, 5,
	81, 5,
	83, 5,
	-2, 119,
	-1, 644,
	77, 1,
	81, 5,
	83, 5,
	-2, 119,
	-1, 647,
	77, 5,
	81, 5,
	83, 5,
	-2, 27,
	-1, 652,
	109, 23,
	-2, 20,
	-1, 657,
	83, 7,
	-2, 119,
	-1, 670,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
	-1, 671,
	83, 3,
	-2, 119,
	-1, 675,
	77, 7,
	81, 7,
	83, 7,
	-2, 119,
	-1, 677,
	109, 47,
	-2, 44,
	-1, 683,
	83, 3,
	-2, 119,
	-1, 685,
	77, 1,
	81, 1,
	83, 1,
	-2, 119,
}

const yyPrivate = 57344

const yyLast = 2326

var yyAct = [...]int{

	68, 24, 655, 24, 624, 609, 216, 1, 666, 41,
	273, 554, 589, 409, 309, 91, 173, 466, 50, 543,
	461, 439, 447, 431, 360, 288, 79, 258, 580, 111,
	112, 281, 421, 253, 610, 181, 356, 274, 369, 272,
	367, 314, 153, 467, 74, 99, 176, 72, 332, 126,
	352, 55, 142, 156, 284, 49, 519, 503, 383, 372,
	490, 373, 374, 375, 370, 138, 388, 368, 527, 157,
	146, 156, 145, 144, 156, 130, 442, 147, 148, 2,
	94, 106, 434, 146, 169, 145, 144, 192, 172, 403,
	147, 148, 146, 43, 386, 54, 172, 178, 178, 147,
	148, 38, 269, 205, 188, 189, 53, 90, 207, 135,
	195, 196, 357, 40, 199, 623, 621, 608, 604, 577,
	277, 279, 123, 576, 539, 538, 3, 523, 521, 208,
	518, 515, 164, 37, 177, 177, 371, 100, 24, 96,
	502, 97, 492, 95, 180, 491, 489, 473, 191, 460,
	406, 402, 100, 38, 326, 152, 299, 237, 306, 236,
	38, 235, 212, 158, 159, 37, 161, 592, 586, 167,
	168, 24, 261, 245, 564, 560, 267, 399, 340, 270,
	178, 245, 338, 178, 336, 295, 213, 294, 262, 244,
	247, 214, 102, 105, 220, 443, 202, 43, 211, 130,
	191, 475, 136, 534, 477, 133, 200, 201, 561, 242,
	514, 21, 310, 358, 94, 151, 591, 486, 209, 102,
	210, 414, 283, 292, 215, 312, 217, 218, 219, 313,
	315, 43, 226, 227, 228, 229, 230, 231, 232, 286,
	287, 493, 674, 664, 648, 239, 102, 133, 304, 321,
	255, 323, 324, 643, 303, 24, 328, 305, 307, 162,
	132, 102, 426, 634, 40, 319, 163, 294, 318, 363,
	178, 394, 365, 629, 291, 335, 376, 325, 391, 155,
	601, 178, 134, 110, 599, 578, 425, 566, 344, 497,
	480, 417, 407, 343, 683, 632, 310, 392, 363, 363,
	348, 243, 132, 333, 366, 342, 626, 177, 310, 320,
	389, 322, 243, 659, 155, 658, 364, 24, 396, 657,
	378, 627, 400, 410, 639, 626, 547, 427, 330, 658,
	382, 334, 384, 385, 255, 546, 317, 317, 109, 545,
	390, 316, 546, 680, 673, 345, 143, 416, 650, 24,
	642, 619, 600, 351, 355, 536, 479, 408, 37, 363,
	551, 433, 187, 422, 362, 422, 501, 422, 87, 252,
	381, 423, 178, 424, 151, 249, 285, 420, 451, 248,
	64, 39, 429, 39, 422, 672, 597, 294, 457, 171,
	438, 184, 392, 393, 395, 363, 441, 222, 52, 448,
	92, 221, 223, 558, 310, 411, 52, 446, 108, 445,
	452, 450, 456, 37, 294, 510, 469, 508, 476, 251,
	250, 418, 155, 292, 155, 449, 165, 444, 255, 24,
	89, 459, 116, 117, 499, 294, 225, 224, 430, 183,
	184, 185, 350, 363, 606, 178, 265, 488, 485, 372,
	178, 373, 374, 375, 440, 507, 498, 155, 436, 437,
	511, 455, 495, 413, 483, 363, 363, 505, 266, 509,
	454, 522, 380, 504, 291, 174, 239, 470, 24, 155,
	296, 297, 24, 526, 468, 500, 294, 104, 537, 298,
	440, 103, 114, 115, 118, 119, 129, 24, 513, 524,
	482, 355, 478, 41, 363, 549, 550, 487, 496, 178,
	405, 178, 462, 463, 464, 465, 52, 422, 39, 557,
	392, 559, 355, 542, 544, 553, 38, 387, 24, 302,
	175, 506, 282, 567, 573, 24, 540, 563, 362, 562,
	574, 268, 512, 182, 377, 38, 24, 570, 155, 38,
	155, 39, 155, 263, 280, 179, 520, 541, 122, 178,
	516, 517, 65, 26, 579, 26, 40, 271, 484, 587,
	125, 588, 372, 355, 373, 374, 375, 370, 422, 581,
	368, 42, 124, 38, 584, 128, 186, 310, 38, 44,
	45, 46, 47, 48, 263, 40, 24, 24, 616, 440,
	51, 603, 93, 24, 528, 607, 73, 605, 107, 71,
	70, 155, 24, 120, 121, 69, 625, 9, 568, 569,
	572, 361, 8, 628, 615, 255, 7, 24, 331, 160,
	635, 131, 636, 24, 582, 39, 620, 61, 289, 615,
	290, 24, 638, 585, 276, 24, 630, 275, 24, 622,
	651, 537, 590, 567, 528, 656, 77, 238, 24, 665,
	615, 528, 60, 59, 11, 612, 11, 641, 615, 63,
	663, 24, 24, 678, 56, 646, 24, 62, 57, 548,
	612, 435, 255, 263, 24, 615, 24, 155, 193, 354,
	194, 353, 667, 197, 198, 127, 349, 39, 264, 677,
	26, 612, 631, 615, 453, 203, 204, 206, 379, 647,
	681, 677, 98, 677, 155, 637, 16, 429, 641, 495,
	646, 66, 528, 528, 113, 4, 612, 14, 6, 39,
	13, 10, 15, 26, 12, 613, 256, 529, 528, 5,
	612, 661, 662, 611, 612, 254, 668, 0, 0, 0,
	0, 255, 612, 528, 647, 38, 84, 85, 86, 528,
	87, 88, 40, 255, 682, 496, 0, 528, 0, 0,
	0, 652, 0, 0, 528, 0, 155, 300, 301, 0,
	0, 0, 0, 0, 528, 38, 84, 85, 86, 0,
	87, 88, 40, 0, 0, 0, 154, 652, 652, 0,
	0, 11, 528, 84, 85, 86, 0, 87, 88, 39,
	652, 0, 652, 0, 80, 0, 0, 26, 81, 0,
	0, 0, 89, 0, 240, 0, 78, 0, 0, 0,
	0, 154, 0, 0, 11, 0, 83, 0, 0, 0,
	0, 346, 347, 0, 80, 0, 0, 0, 81, 0,
	0, 0, 89, 0, 240, 0, 78, 0, 39, 0,
	0, 0, 39, 0, 0, 0, 83, 0, 241, 89,
	75, 76, 82, 67, 458, 0, 0, 39, 327, 26,
	0, 0, 0, 0, 0, 397, 398, 0, 0, 0,
	401, 0, 0, 404, 0, 0, 0, 0, 241, 0,
	75, 76, 82, 67, 190, 150, 149, 151, 39, 0,
	141, 26, 92, 0, 52, 39, 0, 372, 11, 373,
	374, 375, 370, 555, 556, 368, 39, 0, 0, 0,
	38, 84, 85, 86, 0, 87, 88, 40, 0, 308,
	0, 311, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 138, 0, 0, 0, 0, 146, 140, 145,
	144, 0, 0, 0, 147, 148, 234, 0, 0, 0,
	0, 0, 0, 0, 154, 0, 39, 39, 471, 151,
	11, 0, 141, 39, 474, 0, 0, 0, 0, 80,
	0, 26, 39, 81, 0, 0, 359, 89, 0, 0,
	0, 78, 0, 0, 0, 0, 0, 39, 0, 494,
	0, 83, 11, 39, 0, 0, 0, 0, 0, 0,
	0, 39, 0, 139, 138, 39, 0, 0, 39, 146,
	140, 145, 144, 0, 0, 92, 147, 148, 39, 0,
	26, 0, 0, 0, 26, 75, 76, 82, 67, 190,
	0, 39, 39, 0, 0, 0, 39, 0, 0, 26,
	0, 535, 0, 0, 39, 154, 39, 154, 0, 154,
	0, 0, 0, 0, 0, 0, 0, 0, 150, 149,
	151, 0, 0, 141, 0, 0, 0, 0, 0, 0,
	26, 0, 11, 0, 58, 0, 0, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 565, 26, 0,
	0, 0, 0, 0, 571, 0, 101, 150, 575, 151,
	0, 0, 141, 0, 139, 138, 0, 0, 472, 583,
	146, 140, 145, 144, 0, 0, 233, 147, 148, 234,
	0, 11, 0, 0, 0, 11, 0, 0, 594, 0,
	0, 0, 0, 0, 598, 0, 0, 0, 26, 26,
	11, 0, 0, 139, 138, 26, 0, 0, 0, 146,
	140, 145, 144, 0, 26, 166, 147, 148, 0, 0,
	0, 617, 618, 0, 0, 0, 0, 0, 0, 26,
	0, 11, 0, 0, 0, 26, 0, 0, 11, 0,
	0, 633, 0, 26, 525, 0, 0, 26, 0, 11,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	26, 645, 0, 0, 649, 0, 0, 0, 0, 0,
	0, 552, 660, 26, 26, 0, 0, 0, 26, 0,
	0, 669, 0, 0, 0, 0, 26, 0, 26, 0,
	101, 0, 0, 0, 0, 679, 0, 246, 246, 11,
	11, 0, 684, 0, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 278, 11, 0, 278, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	11, 0, 0, 593, 0, 0, 11, 0, 0, 0,
	0, 0, 0, 0, 11, 0, 0, 0, 11, 0,
	0, 11, 0, 0, 0, 0, 0, 246, 0, 246,
	246, 11, 0, 0, 38, 84, 85, 86, 0, 87,
	88, 40, 0, 0, 11, 11, 0, 0, 0, 11,
	0, 0, 0, 246, 337, 339, 341, 11, 0, 11,
	0, 0, 0, 0, 0, 0, 38, 84, 85, 86,
	0, 87, 88, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 278, 0, 0, 0, 101,
	0, 101, 101, 80, 432, 0, 0, 81, 0, 0,
	0, 89, 0, 0, 0, 78, 0, 0, 0, 0,
	0, 0, 150, 149, 151, 83, 0, 141, 0, 0,
	0, 433, 0, 0, 0, 80, 0, 0, 0, 81,
	0, 0, 0, 89, 0, 0, 0, 78, 0, 0,
	0, 246, 0, 246, 0, 246, 43, 83, 0, 75,
	76, 82, 67, 0, 0, 0, 0, 0, 139, 138,
	0, 0, 246, 0, 146, 140, 145, 144, 150, 149,
	151, 147, 148, 141, 0, 0, 278, 0, 0, 293,
	0, 75, 76, 82, 67, 38, 84, 85, 86, 0,
	87, 88, 40, 0, 38, 84, 85, 86, 0, 87,
	88, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 139, 138, 0, 0, 0, 0,
	146, 140, 145, 144, 0, 246, 0, 147, 148, 234,
	150, 149, 151, 0, 0, 141, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 685, 0, 0, 81, 278,
	0, 0, 89, 80, 278, 37, 78, 81, 0, 0,
	0, 89, 0, 0, 0, 78, 83, 38, 84, 85,
	86, 0, 87, 88, 40, 83, 139, 138, 0, 0,
	0, 0, 146, 140, 145, 144, 0, 0, 0, 147,
	148, 0, 0, 0, 0, 246, 0, 0, 0, 0,
	75, 76, 82, 67, 0, 0, 0, 329, 0, 75,
	76, 82, 67, 278, 0, 278, 0, 0, 150, 149,
	151, 0, 0, 141, 0, 0, 80, 0, 0, 0,
	81, 0, 0, 675, 89, 0, 0, 0, 78, 0,
	150, 149, 151, 0, 0, 141, 0, 0, 83, 0,
	0, 0, 0, 0, 0, 0, 246, 671, 0, 0,
	0, 0, 0, 278, 139, 138, 0, 0, 0, 0,
	146, 140, 145, 144, 150, 149, 151, 147, 148, 141,
	0, 0, 75, 76, 82, 67, 139, 138, 0, 670,
	0, 0, 146, 140, 145, 144, 150, 149, 151, 147,
	148, 141, 0, 0, 0, 0, 0, 150, 149, 151,
	0, 644, 141, 0, 0, 0, 0, 0, 0, 0,
	139, 138, 640, 0, 0, 0, 146, 140, 145, 144,
	150, 149, 151, 147, 148, 141, 0, 0, 0, 0,
	0, 0, 139, 138, 0, 602, 0, 0, 146, 140,
	145, 144, 0, 139, 138, 147, 148, 0, 0, 146,
	140, 145, 144, 150, 149, 151, 147, 148, 141, 0,
	0, 0, 0, 0, 0, 0, 139, 138, 0, 0,
	0, 0, 146, 140, 145, 144, 150, 149, 151, 147,
	148, 141, 0, 0, 0, 0, 150, 149, 151, 0,
	0, 141, 0, 596, 0, 0, 0, 0, 0, 139,
	138, 595, 0, 0, 43, 146, 140, 145, 144, 150,
	149, 151, 147, 148, 141, 0, 0, 0, 0, 0,
	0, 0, 139, 138, 481, 0, 0, 0, 146, 140,
	145, 144, 139, 138, 0, 147, 148, 0, 146, 140,
	145, 144, 150, 149, 151, 147, 148, 141, 0, 415,
	0, 0, 0, 0, 0, 139, 138, 428, 0, 0,
	0, 146, 140, 145, 144, 150, 149, 151, 147, 148,
	141, 0, 0, 0, 0, 0, 150, 149, 151, 0,
	419, 141, 0, 0, 0, 0, 0, 0, 139, 138,
	0, 0, 0, 0, 146, 140, 145, 144, 150, 149,
	151, 147, 148, 141, 0, 0, 0, 0, 150, 149,
	151, 139, 138, 141, 0, 170, 0, 146, 140, 145,
	144, 0, 139, 138, 147, 148, 0, 0, 146, 140,
	145, 144, 150, 149, 151, 147, 148, 141, 0, 0,
	0, 0, 0, 0, 139, 138, 0, 137, 0, 0,
	146, 140, 145, 144, 139, 138, 0, 147, 148, 0,
	146, 140, 145, 144, 412, 149, 151, 147, 148, 141,
	0, 0, 0, 0, 0, 0, 38, 0, 139, 138,
	0, 0, 0, 40, 146, 140, 145, 144, 33, 0,
	0, 147, 148, 0, 0, 0, 0, 0, 22, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 0,
	139, 138, 0, 38, 0, 0, 146, 140, 145, 144,
	40, 0, 0, 147, 148, 33, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 22, 0, 0, 23, 0,
	0, 0, 0, 0, 0, 0, 37, 0, 676, 0,
	654, 0, 0, 0, 0, 0, 17, 0, 0, 30,
	28, 29, 27, 0, 0, 0, 0, 0, 0, 0,
	0, 31, 32, 259, 260, 20, 34, 35, 36, 38,
	0, 532, 25, 37, 0, 614, 40, 531, 0, 0,
	0, 33, 0, 533, 0, 0, 30, 28, 29, 27,
	0, 22, 0, 0, 23, 0, 0, 0, 31, 32,
	259, 260, 0, 34, 35, 36, 38, 0, 532, 25,
	0, 0, 0, 40, 0, 0, 0, 0, 33, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 22, 0,
	0, 23, 0, 0, 0, 0, 0, 0, 0, 37,
	0, 257, 0, 19, 0, 0, 0, 0, 0, 17,
	0, 0, 30, 28, 29, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 32, 259, 260, 20, 34,
	35, 36, 38, 0, 0, 25, 37, 0, 653, 40,
	654, 0, 0, 0, 33, 0, 17, 0, 0, 30,
	28, 29, 27, 0, 22, 0, 0, 23, 0, 0,
	0, 31, 32, 0, 0, 20, 34, 35, 36, 38,
	0, 532, 25, 0, 0, 0, 40, 0, 0, 0,
	0, 33, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 22, 0, 0, 23, 0, 0, 0, 0, 0,
	0, 0, 37, 0, 530, 0, 531, 0, 0, 0,
	0, 0, 533, 0, 0, 30, 28, 29, 27, 0,
	0, 0, 0, 0, 0, 0, 0, 31, 32, 0,
	0, 0, 34, 35, 36, 0, 0, 532, 25, 37,
	0, 18, 0, 19, 0, 0, 0, 0, 0, 17,
	0, 0, 30, 28, 29, 27, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 32, 0, 0, 20, 34,
	35, 36, 0, 0, 0, 25,
}
var yyPact = [...]int{

	2215, -1000, 2215, -1000, -1000, -1000, 81, 81, 81, 81,
	81, 81, -1000, -1000, -1000, -1000, -1000, 584, 1553, 1553,
	81, 124, 461, 457, 71, 555, 81, 253, 579, 579,
	401, 81, 81, 546, 1553, 577, 565, 471, -1000, 86,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 81,
	175, -17, 89, 1867, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 86, -1000, -1000, 1471, -53, -1000,
	-1000, -1000, -1000, -1000, -1000, 1553, 1553, -1000, 1553, 148,
	70, 1553, 1553, 579, -1000, -1000, -1000, -1000, -1000, -1000,
	1833, 325, -38, -1000, 437, 510, 579, 541, 529, 381,
	289, -1000, 284, 579, 579, 926, 81, -1000, 81, 579,
	579, 81, 81, 579, -1000, -1000, -1000, -1000, 1553, 1553,
	-1000, -1000, 78, 1688, -23, 81, -1000, -18, 579, -1000,
	1553, -1000, 134, 76, 64, 555, 1553, 2215, 1553, 1553,
	1553, 307, 333, 375, 1553, 1553, 1553, 1553, 1553, 1553,
	1553, -1000, 1013, 38, 36, 139, 579, 781, -1000, -1000,
	233, 1843, 51, 51, 311, 358, -1000, 912, -1000, 299,
	2075, 579, 555, 402, 427, 579, 525, -24, 545, 97,
	540, 514, 97, 315, 315, 315, 1352, -1000, 63, 453,
	-1000, 33, 1393, -1000, -1000, 81, 81, -1000, -1000, 509,
	1843, 1843, 798, -1000, -1000, 1553, -1000, 471, 136, 1843,
	284, 579, 284, 102, -1000, 1843, 260, -34, -47, -47,
	359, 1553, 51, 1553, 51, 51, -25, -25, -1000, -1000,
	-1000, 1052, 912, -1000, 1553, -1000, -1000, -1000, 31, 840,
	1480, -1000, 222, 1553, -1000, 1471, -1000, -1000, 51, 62,
	60, 56, 307, 210, 2075, -1000, -1000, 1553, -1000, 81,
	81, 218, -1000, -30, 397, 1553, 1553, 91, 579, 579,
	-1000, 579, 514, 10, -1000, 522, -1000, -1000, -1000, -1000,
	97, 433, 1553, -1000, 139, -1000, 139, 139, -1000, -32,
	505, 1843, -1000, -1000, -56, 579, 156, 149, 579, -1000,
	-1000, -1000, 555, 81, 81, -1000, 55, 579, 81, 28,
	-37, 81, 488, 27, 209, 260, 2215, 1553, -1000, -1000,
	1899, -1000, -47, -1000, -1000, -1000, -1000, 422, 125, -1000,
	1811, 208, 233, 1553, 1800, 312, 59, -1000, 59, -1000,
	59, -1000, 198, 249, -1000, 1777, -1000, -1000, 2075, -1000,
	1553, 1337, -1000, -44, 416, 1843, -1000, 51, 579, -1000,
	529, -50, 77, -74, -1000, -1000, -1000, 379, 400, 349,
	377, 97, -1000, -1000, -1000, -1000, -1000, 579, 514, 430,
	420, 1843, 332, -1000, -1000, 332, 1352, 579, 751, 26,
	481, 579, 449, -1000, 579, 440, 81, -1000, -1000, 284,
	24, -1000, 115, 579, -1000, 96, 480, 280, 207, 259,
	-1000, 1744, 1553, 1553, 563, 407, 121, -1000, 1843, 1553,
	51, 23, -66, 22, 19, -1000, 146, 81, 2075, 206,
	1843, -1000, 287, 388, 1553, 294, -1000, -1000, -1000, 17,
	-69, 514, 579, 1553, 97, 369, 349, 367, -1000, 97,
	-1000, -1000, -1000, -1000, 1553, 1553, -1000, -1000, 112, 8,
	-1000, -1000, -1000, -1000, 579, 579, 7, -70, 1553, 5,
	579, -1000, 4, 477, -1000, 284, -1000, 2178, 95, 81,
	279, 2215, 912, 2, 1, 1553, 552, 1843, -1000, -1000,
	51, -1000, -1000, -1000, -1000, 258, 2215, 248, -1000, -1000,
	-1000, 474, 339, 579, -1000, -1000, 1843, 868, 97, 355,
	97, 523, 1843, -1000, 53, 110, -1000, -1000, 481, 579,
	1843, -1000, -1000, -1000, 52, 81, 204, 2178, -1000, -1000,
	1553, 1553, 1320, 584, 2178, -1000, 81, -1000, -1000, -1000,
	0, -4, -1000, 202, 258, 2075, 1553, 81, -1000, -1000,
	-1000, 51, -1000, -1000, -1000, 1553, 46, 523, 97, 868,
	119, 45, -1000, -1000, 284, -1000, 81, -1000, 1721, 1711,
	322, -1000, 1688, 217, 201, -1000, -1000, -1000, 276, 197,
	265, -1000, 1655, -1000, -1000, 1843, 579, 523, -1000, -5,
	437, 403, 119, -6, -1000, 2178, 2009, 579, -1000, 81,
	81, 275, 2075, -7, -1000, -1000, 1553, -8, -1000, 244,
	190, 2009, -1000, -1000, 1553, -1000, 213, -1000, -1000, 81,
	-1000, -1000, -1000, -1000, 180, 225, 2178, 1553, 259, 246,
	-1000, 1632, 2009, -1000, 274, 170, -1000, 1621, 259, 81,
	2009, 161, 81, 272, 2112, -1000, 238, 2178, 235, -1000,
	81, -1000, -1000, 1553, 1553, 160, 238, 2009, 1553, 81,
	-1000, 1599, 1565, 321, 268, 159, 252, -1000, 1543, -1000,
	2112, 1972, 579, 81, 267, 2009, 1553, -1000, 212, -1000,
	81, -1000, 1455, 1972, -1000, 1972,
}
var yyPgo = [...]int{

	0, 6, 33, 5, 34, 126, 79, 68, 745, 743,
	739, 737, 27, 736, 735, 734, 732, 731, 43, 17,
	20, 730, 727, 725, 724, 721, 716, 728, 58, 45,
	712, 35, 31, 708, 704, 16, 698, 23, 696, 211,
	695, 49, 51, 95, 87, 26, 32, 50, 691, 689,
	681, 679, 1094, 678, 677, 674, 669, 663, 662, 657,
	656, 36, 12, 652, 37, 647, 10, 644, 11, 640,
	638, 637, 629, 48, 628, 21, 42, 39, 46, 14,
	25, 626, 622, 621, 24, 617, 13, 41, 28, 19,
	616, 4, 8, 2, 0, 615, 610, 609, 47, 606,
	44, 380, 15, 562, 600, 55, 586, 52, 40, 22,
	38, 54, 585, 346, 581,
}
var yyR1 = [...]int{

	0, 1, 1, 2, 2, 3, 3, 4, 4, 5,
	5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
	6, 6, 6, 7, 7, 8, 8, 9, 9, 10,
	10, 10, 10, 10, 11, 11, 11, 11, 11, 11,
	12, 12, 13, 13, 13, 14, 14, 14, 15, 15,
	15, 15, 16, 16, 17, 17, 17, 17, 17, 17,
	18, 18, 19, 19, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 22, 22, 22, 22, 23, 23,
	24, 24, 24, 24, 24, 24, 24, 25, 25, 26,
	26, 26, 26, 26, 27, 28, 28, 28, 28, 29,
	29, 30, 31, 31, 32, 32, 33, 33, 34, 34,
	35, 35, 36, 36, 36, 37, 37, 38, 38, 39,
	39, 40, 40, 41, 41, 42, 42, 42, 42, 42,
	42, 43, 43, 44, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 44, 44, 45, 45, 46,
	46, 47, 47, 48, 48, 49, 49, 50, 50, 50,
	51, 51, 52, 53, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
	54, 54, 54, 55, 55, 55, 55, 55, 55, 55,
	56, 56, 56, 56, 57, 57, 58, 58, 59, 59,
	59, 60, 60, 60, 60, 61, 61, 62, 63, 63,
	64, 64, 64, 65, 65, 66, 66, 66, 66, 66,
	66, 67, 67, 67, 67, 67, 68, 68, 68, 69,
	69, 69, 70, 70, 71, 72, 72, 73, 73, 74,
	74, 75, 75, 76, 76, 77, 77, 78, 78, 79,
	79, 80, 80, 81, 81, 81, 81, 82, 83, 84,
	84, 85, 85, 86, 86, 87, 87, 88, 88, 89,
	89, 90, 90, 91, 91, 92, 92, 93, 93, 94,
	95, 96, 97, 98, 99, 100, 101, 102, 102, 103,
	104, 104, 105, 105, 106, 106, 107, 107, 108, 108,
	109, 109, 110, 110, 110, 110, 111, 111, 112, 112,
	113, 113, 114, 114,
}
var yyR2 = [...]int{

	0, 0, 2, 0, 2, 0, 2, 0, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	9, 7, 9, 2, 8, 9, 7, 9, 2, 3,
	2, 2, 8, 9, 1, 8, 9, 1, 3, 3,
	2, 3, 2, 2, 6, 6, 8, 5, 7, 7,
	1, 3, 1, 3, 0, 1, 1, 2, 2, 6,
	3, 3, 4, 6, 7, 9, 6, 4, 10, 11,
	0, 1, 1, 1, 1, 2, 2, 5, 6, 5,
	3, 3, 5, 3, 5, 5, 4, 4, 4, 1,
	1, 3, 0, 2, 0, 2, 0, 3, 0, 2,
	0, 3, 0, 3, 4, 0, 2, 0, 2, 0,
	2, 6, 9, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 1, 1,
	3, 1, 3, 2, 4, 1, 1, 0, 1, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 4, 4,
	6, 6, 4, 6, 4, 4, 4, 6, 4, 4,
	6, 4, 2, 3, 3, 3, 3, 3, 2, 2,
	3, 3, 2, 2, 3, 4, 4, 1, 1, 2,
	2, 7, 8, 7, 8, 7, 8, 2, 0, 3,
	1, 2, 3, 1, 1, 1, 1, 2, 3, 1,
	1, 5, 5, 6, 6, 4, 0, 2, 4, 1,
	1, 1, 1, 3, 5, 0, 1, 4, 2, 0,
	2, 1, 3, 1, 3, 1, 3, 1, 3, 1,
	3, 1, 3, 6, 9, 5, 8, 7, 3, 1,
	3, 5, 6, 4, 2, 0, 2, 4, 2, 0,
	2, 4, 2, 0, 2, 4, 2, 0, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 3,
	1, 3, 1, 3, 0, 1, 0, 1, 0, 1,
	0, 1, 0, 1, 1, 1, 0, 1, 0, 1,
	1, 1, 0, 1,
}
var yyChk = [...]int{

	-1000, -1, -6, -5, -23, -10, -27, -81, -82, -85,
	-17, -57, -15, -21, -22, -16, -26, 84, 76, 78,
	103, -39, 26, 29, -94, 110, -103, 90, 88, 89,
	87, 99, 100, 16, 104, 105, 106, 74, 4, -101,
	11, -1, -114, 116, -114, -114, -114, -114, -114, -105,
	-94, -104, -101, -44, -43, -42, -55, -53, -52, -57,
	-58, -71, -54, -56, -101, -103, -25, 122, -94, -95,
	-96, -97, -98, -99, -100, 119, 120, -60, 75, -45,
	63, 67, 121, 85, 5, 6, 7, 9, 10, 71,
	-44, -102, -101, -114, -28, 19, 15, 17, -30, -29,
	13, -52, 122, 30, 30, 122, -105, -114, -101, 85,
	30, -94, -94, -24, 91, 92, 31, 32, 93, 94,
	-114, -114, 12, -44, 5, 5, -41, -40, -112, 25,
	113, -114, 85, 30, 107, 126, 113, 80, 112, 111,
	118, 70, -107, -113, 120, 119, 117, 124, 125, 66,
	65, 67, -44, -76, -27, -39, 127, 122, -44, -44,
	-72, -44, 111, 118, -107, -113, -52, -44, -44, -94,
	82, 64, 126, -35, 38, 20, -78, -64, -94, 14,
	-78, -31, 14, 58, 59, 60, -106, 73, -94, -94,
	123, -76, -44, -114, -114, -94, -94, -114, -114, -94,
	-44, -44, 118, -114, -114, 126, -114, 126, -94, -44,
	86, 122, 86, 122, -105, -44, -1, -44, -44, -44,
	-107, 68, 64, 69, 62, 61, -44, -44, -44, -44,
	-44, -44, -44, 123, 126, 123, 123, -94, -59, -44,
	73, 117, -73, 79, -45, 122, -52, -45, 68, 64,
	62, 61, 70, -2, -8, -6, -13, 76, -12, 101,
	102, -94, -102, -101, -36, 44, 41, -94, 16, 126,
	-94, 22, -77, -66, -64, -65, -67, 23, -52, 24,
	14, -32, 18, -77, -111, 61, -111, -111, -80, -70,
	-69, -44, -61, 117, -94, 122, 27, 28, 36, 123,
	-114, -114, 20, -42, -76, -41, 22, 122, -27, -79,
	-94, -27, 123, -102, -87, -86, 81, 77, -98, -100,
	-44, -45, -44, -45, -45, -76, 123, 38, -35, 117,
	-44, -74, -73, 81, -44, -45, 122, -52, 122, -52,
	122, -52, -107, 83, -2, -44, -114, -114, 82, -38,
	45, -44, -47, -48, -49, -44, -61, 21, 122, -27,
	-84, -83, -43, -94, -78, -94, -32, -108, 57, -110,
	54, 126, 49, 51, 52, 53, -94, 22, -77, -33,
	39, -44, -29, -28, -29, -29, 126, 22, 122, -79,
	-18, 122, -94, -43, 122, -43, -102, -114, -114, 122,
	-79, -114, 123, 126, -114, 22, 123, 83, -87, -86,
	-1, -44, 65, 41, 96, 38, -35, 83, -44, 80,
	65, -46, -45, -46, -46, 88, 64, 78, 80, -2,
	-44, -37, 47, 74, 126, -50, 42, 43, -46, -75,
	-43, -31, 126, 118, 48, -108, -110, -109, 50, 48,
	-77, -94, -32, -34, 40, 41, -80, -94, 123, -76,
	123, -20, 31, 32, 33, 34, -19, -18, 35, -75,
	37, -114, -27, 123, -114, 86, -79, 108, 22, 76,
	83, 80, -44, -47, 5, 41, 96, -44, -45, 123,
	126, 123, 123, 95, -114, -2, -6, 83, -37, 46,
	-47, 72, 123, 126, -32, -84, -44, -66, 48, -109,
	48, -66, -44, -76, 98, 123, -43, -43, 123, 126,
	-44, 123, -94, 123, 22, -27, -3, -7, -5, -11,
	76, 78, 109, 84, 108, -114, 76, -1, 123, 123,
	-47, 5, -46, -89, -88, 81, 77, 78, -51, 31,
	32, 21, -27, -75, -68, 55, 56, -66, 48, -66,
	122, 98, -20, -19, 122, -114, 83, -3, -44, -44,
	-102, -114, -44, -94, -3, -114, 123, 123, 83, -89,
	-88, -2, -44, -114, -46, -44, 122, -66, -68, -62,
	-63, 97, 122, -27, -114, 80, 82, 64, -114, 83,
	76, 83, 80, -79, 123, -35, 41, -62, 123, -3,
	-4, -9, -7, -14, 76, -12, -94, -114, -114, 76,
	-2, 123, -76, 123, -91, -90, 81, 77, -86, 83,
	-4, -44, 82, -114, 83, -91, -3, -44, -86, 78,
	80, -4, 76, 83, 80, -114, -4, -7, 83, -114,
	76, -3, -5, 76, 78, -93, -92, 81, 77, 78,
	-114, -44, -44, -102, 83, -93, -92, -4, -44, -114,
	80, 82, 64, 76, 83, 80, 76, -12, -94, -114,
	76, -4, -44, 82, -114, 80,
}
var yyDef = [...]int{

	-2, -2, -2, 20, 21, 22, 312, 312, 312, 312,
	312, 312, 15, 16, 17, 18, 19, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	80, 312, 312, 0, 0, 0, 0, 308, 279, 0,
	286, 2, 9, 313, 10, 11, 12, 13, 14, 312,
	0, 292, 290, 296, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 119, 131, 125,
	126, 127, 128, 129, 130, 0, 0, 197, 235, 296,
	0, 0, 0, 0, 280, 281, 282, 283, 284, 285,
	296, 0, 143, 33, -2, 0, 0, 0, 102, 0,
	294, 100, 119, 0, 0, 0, 312, 50, 312, 0,
	0, 312, 312, 0, 81, 82, 83, 84, 0, 0,
	52, 53, 0, -2, 312, 312, 120, 123, 0, 309,
	0, 49, 0, 0, 0, 0, 0, -2, 0, 310,
	311, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 297, 296, 0, 0, 0, 0, 0, 188, 189,
	0, -2, 310, 311, 0, 0, 182, 192, 193, 0,
	-2, 0, 0, 112, 0, 0, 0, 247, 210, 0,
	0, 104, 0, 306, 306, 306, 0, 295, 0, 0,
	194, 0, -2, 48, 51, 312, 312, 70, 71, 0,
	-2, -2, 0, 90, 91, 0, 93, 308, 0, 289,
	119, 0, 119, 0, 293, -2, 265, 163, -2, -2,
	0, 0, 0, 0, 0, 0, 183, 184, 185, 186,
	187, 190, 191, 146, 0, 147, 162, 132, 0, -2,
	0, 198, 239, 0, 165, 119, 148, 167, 0, 0,
	0, 0, 296, 0, -2, 25, 26, 0, 44, 312,
	312, 0, 288, 287, 117, 0, 0, 119, 0, 0,
	211, 0, 104, -2, 215, 216, 219, 220, 213, 214,
	0, 106, 0, 103, 0, 307, 0, 0, 101, 251,
	232, -2, 230, 231, 131, 0, 0, 0, 0, 195,
	72, 77, 0, 312, 312, 124, 0, 0, 312, 0,
	249, 312, 0, 0, 0, 265, -2, 0, 168, 169,
	296, 172, -2, 176, 179, 244, 196, 0, 0, 199,
	-2, 0, 238, 0, 296, 0, 119, 174, 119, 178,
	119, 181, 0, 0, 4, 296, 40, 41, -2, 94,
	0, -2, 111, 151, 157, -2, 156, 0, 0, 255,
	102, 259, 0, 131, 248, 212, 261, 0, -2, 300,
	0, 0, 299, 303, 304, 305, 217, 0, 104, 108,
	0, -2, 96, 99, 97, 98, 0, 0, 0, 0,
	64, 0, 60, 57, 0, 0, 312, 89, 92, 119,
	0, 69, 312, 0, 76, 0, 0, 0, 0, 264,
	266, 296, 0, 0, 0, 0, 0, 234, -2, 0,
	0, 0, 149, 0, 0, 87, 0, 312, -2, 0,
	-2, 113, 115, 0, 0, 153, 158, 159, 253, 0,
	241, 104, 0, 0, 0, 0, 300, 0, 301, 0,
	246, 218, 262, 95, 0, 0, 252, 233, 194, 0,
	54, 55, 65, 66, 0, 0, 0, 62, 0, 0,
	0, 73, 0, 0, 74, 119, 250, -2, 0, 312,
	0, -2, 170, 111, 0, 0, 0, -2, 171, 173,
	0, 177, 180, 88, 31, 269, -2, 0, 114, 116,
	152, 0, 119, 0, 257, 260, -2, 226, 0, 0,
	0, 225, -2, 107, 0, 195, 67, 68, 64, 0,
	-2, 58, 59, 121, 0, 312, 0, -2, 23, 24,
	0, 0, 312, 0, -2, 29, 312, 263, 201, 203,
	111, 0, 150, 0, 269, -2, 0, 312, 154, 160,
	161, 0, 256, 242, 221, 0, 0, 222, 0, 226,
	208, 0, 56, 63, 119, 75, 312, 6, 296, 296,
	0, 38, -2, 0, 0, 30, 202, 204, 0, 0,
	268, 270, 296, 32, 254, -2, 0, 224, 223, 0,
	110, 0, 208, 0, 78, -2, -2, 0, 39, 312,
	312, 0, -2, 0, 205, 207, 0, 0, 122, 273,
	0, -2, 27, 28, 0, 47, 0, 79, 42, 312,
	267, 228, 209, 206, 0, 273, -2, 0, 0, 0,
	8, 296, -2, 43, 0, 0, 274, 296, 272, 312,
	-2, 0, 312, 0, -2, 36, 277, -2, 0, 34,
	312, 271, -2, 0, 0, 0, 277, -2, 0, 312,
	35, 296, 296, 0, 0, 0, 276, 278, 296, 37,
	-2, -2, 0, 312, 0, -2, 0, -2, 0, 45,
	312, 275, 296, -2, 46, -2,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 121, 3, 3, 3, 125, 3, 3,
	122, 123, 117, 120, 126, 119, 127, 124, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 116,
	3, 118,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:179
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:184
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 3:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:191
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:196
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:203
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:208
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:215
		{
			yyVAL.program = nil
			yylex.(*Lexer).program = yyVAL.program
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:220
		{
			yyVAL.program = append([]Statement{yyDollar[1].statement}, yyDollar[2].program...)
			yylex.(*Lexer).program = yyVAL.program
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:227
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:231
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:235
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 12:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:239
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:243
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:247
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:251
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:255
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:259
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:263
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:267
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:273
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:277
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:281
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:287
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:291
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:297
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:301
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:307
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:311
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 29:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:317
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:321
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:325
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 32:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:329
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:333
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 34:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:339
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 35:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:343
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:347
		{
			yyVAL.statement = While{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}
		}
	case 37:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:351
		{
			yyVAL.statement = WhileInCursor{Variables: yyDollar[2].variables, Cursor: yyDollar[4].identifier, Statements: yyDollar[6].program}
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:355
		{
			yyVAL.statement = Return{Value: NewNull()}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:359
		{
			yyVAL.statement = Return{Value: yyDollar[2].expression}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:365
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:369
		{
			yyVAL.statement = FlowControl{Token: yyDollar[1].token.Token}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:375
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:379
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:383
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:389
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, Else: yyDollar[5].procexpr}
		}
	case 46:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:393
		{
			yyVAL.statement = If{Condition: yyDollar[2].expression, Statements: yyDollar[4].program, ElseIf: yyDollar[5].procexprs, Else: yyDollar[6].procexpr}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:397
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:403
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:407
		{
			yyVAL.statement = VariableDeclaration{Assignments: yyDollar[2].expressions}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:411
		{
			yyVAL.statement = yyDollar[1].expression
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:415
		{
			yyVAL.statement = DisposeVariable{Variable: yyDollar[2].variable}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:421
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:425
		{
			yyVAL.statement = TransactionControl{Token: yyDollar[1].token.Token}
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:431
		{
			yyVAL.statement = CreateTable{CreateTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Fields: yyDollar[5].expressions}
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:435
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}, Position: yyDollar[6].expression}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:439
		{
			yyVAL.statement = AddColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Add: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions, Position: yyDollar[8].expression}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:443
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: []Expression{yyDollar[5].expression}}
		}
	case 58:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:447
		{
			yyVAL.statement = DropColumns{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Drop: yyDollar[4].token.Literal, Columns: yyDollar[6].expressions}
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:451
		{
			yyVAL.statement = RenameColumn{AlterTable: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Table: yyDollar[3].identifier, Rename: yyDollar[4].token.Literal, Old: yyDollar[5].expression.(FieldReference), To: yyDollar[6].token.Literal, New: yyDollar[7].identifier}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:457
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:461
		{
			yyVAL.expression = ColumnDefault{Column: yyDollar[1].identifier, Default: yyDollar[2].token.Literal, Value: yyDollar[3].expression}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:467
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:471
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:477
		{
			yyVAL.expression = nil
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:481
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:485
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:489
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:493
		{
			yyVAL.expression = ColumnPosition{Position: yyDollar[1].token, Column: yyDollar[2].expression}
		}
	case 69:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:499
		{
			yyVAL.statement = CursorDeclaration{Cursor: yyDollar[2].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:503
		{
			yyVAL.statement = OpenCursor{Cursor: yyDollar[2].identifier}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:507
		{
			yyVAL.statement = CloseCursor{Cursor: yyDollar[2].identifier}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:511
		{
			yyVAL.statement = DisposeCursor{Cursor: yyDollar[3].identifier}
		}
	case 73:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:515
		{
			yyVAL.statement = FetchCursor{Position: yyDollar[2].expression, Cursor: yyDollar[3].identifier, Variables: yyDollar[5].variables}
		}
	case 74:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:521
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions}
		}
	case 75:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:525
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Fields: yyDollar[5].expressions, Query: yyDollar[8].expression}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:529
		{
			yyVAL.statement = TableDeclaration{Table: yyDollar[2].identifier, Query: yyDollar[5].expression}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:533
		{
			yyVAL.statement = DisposeTable{Table: yyDollar[3].identifier}
		}
	case 78:
		yyDollar = yyS[yypt-10 : yypt+1]
		//line parser.y:539
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Statements: yyDollar[8].program}
		}
	case 79:
		yyDollar = yyS[yypt-11 : yypt+1]
		//line parser.y:543
		{
			yyVAL.statement = FunctionDeclaration{Name: yyDollar[2].identifier, Parameters: yyDollar[5].variables, Statements: yyDollar[9].program}
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:549
		{
			yyVAL.expression = nil
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:553
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:557
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:561
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:565
		{
			yyVAL.expression = FetchPosition{Position: yyDollar[1].token}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:569
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:573
		{
			yyVAL.expression = FetchPosition{BaseExpr: NewBaseExpr(yyDollar[1].token), Position: yyDollar[1].token, Number: yyDollar[2].expression}
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:579
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[5].token.Token, TypeLit: yyDollar[5].token.Literal}
		}
	case 88:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:583
		{
			yyVAL.expression = CursorStatus{CursorLit: yyDollar[1].token.Literal, Cursor: yyDollar[2].identifier, Is: yyDollar[3].token.Literal, Negation: yyDollar[4].token, Type: yyDollar[6].token.Token, TypeLit: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal}
		}
	case 89:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:589
		{
			yyVAL.statement = SetFlag{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[2].token.Literal, Value: yyDollar[4].primary}
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:593
		{
			yyVAL.statement = Print{Value: yyDollar[2].expression}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:597
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal}
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:601
		{
			yyVAL.statement = Printf{BaseExpr: NewBaseExpr(yyDollar[1].token), Format: yyDollar[2].token.Literal, Values: yyDollar[4].expressions}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:605
		{
			yyVAL.statement = Source{BaseExpr: NewBaseExpr(yyDollar[1].token), FilePath: yyDollar[2].token.Literal}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:611
		{
			yyVAL.expression = SelectQuery{
				WithClause:    yyDollar[1].expression,
				SelectEntity:  yyDollar[2].expression,
				OrderByClause: yyDollar[3].expression,
				LimitClause:   yyDollar[4].expression,
				OffsetClause:  yyDollar[5].expression,
			}
		}
	case 95:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:623
		{
			yyVAL.expression = SelectEntity{
				SelectClause:  yyDollar[1].expression,
				FromClause:    yyDollar[2].expression,
				WhereClause:   yyDollar[3].expression,
				GroupByClause: yyDollar[4].expression,
				HavingClause:  yyDollar[5].expression,
			}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:633
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:642
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:651
		{
			yyVAL.expression = SelectSet{
				LHS:      yyDollar[1].expression,
				Operator: yyDollar[2].token,
				All:      yyDollar[3].token,
				RHS:      yyDollar[4].expression,
			}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:662
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:666
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:672
		{
			yyVAL.expression = SelectClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Select: yyDollar[1].token.Literal, Distinct: yyDollar[2].token, Fields: yyDollar[3].expressions}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:678
		{
			yyVAL.expression = nil
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:682
		{
			yyVAL.expression = FromClause{From: yyDollar[1].token.Literal, Tables: yyDollar[2].expressions}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:688
		{
			yyVAL.expression = nil
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:692
		{
			yyVAL.expression = WhereClause{Where: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:698
		{
			yyVAL.expression = nil
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:702
		{
			yyVAL.expression = GroupByClause{GroupBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 108:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:708
		{
			yyVAL.expression = nil
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:712
		{
			yyVAL.expression = HavingClause{Having: yyDollar[1].token.Literal, Filter: yyDollar[2].expression}
		}
	case 110:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:718
		{
			yyVAL.expression = nil
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:722
		{
			yyVAL.expression = OrderByClause{OrderBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Items: yyDollar[3].expressions}
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:728
		{
			yyVAL.expression = nil
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:732
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, With: yyDollar[3].expression}
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:736
		{
			yyVAL.expression = LimitClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Limit: yyDollar[1].token.Literal, Value: yyDollar[2].expression, Percent: yyDollar[3].token.Literal, With: yyDollar[4].expression}
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:742
		{
			yyVAL.expression = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:746
		{
			yyVAL.expression = LimitWith{With: yyDollar[1].token.Literal, Type: yyDollar[2].token}
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:752
		{
			yyVAL.expression = nil
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:756
		{
			yyVAL.expression = OffsetClause{BaseExpr: NewBaseExpr(yyDollar[1].token), Offset: yyDollar[1].token.Literal, Value: yyDollar[2].expression}
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:762
		{
			yyVAL.expression = nil
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:766
		{
			yyVAL.expression = WithClause{With: yyDollar[1].token.Literal, InlineTables: yyDollar[2].expressions}
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:772
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, As: yyDollar[3].token.Literal, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 122:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:776
		{
			yyVAL.expression = InlineTable{Recursive: yyDollar[1].token, Name: yyDollar[2].identifier, Fields: yyDollar[4].expressions, As: yyDollar[6].token.Literal, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:782
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:786
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:792
		{
			yyVAL.primary = yyDollar[1].text
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:796
		{
			yyVAL.primary = yyDollar[1].integer
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:800
		{
			yyVAL.primary = yyDollar[1].float
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:804
		{
			yyVAL.primary = yyDollar[1].ternary
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:808
		{
			yyVAL.primary = yyDollar[1].datetime
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:812
		{
			yyVAL.primary = yyDollar[1].null
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:818
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Column: yyDollar[1].identifier}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:822
		{
			yyVAL.expression = FieldReference{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), View: yyDollar[1].identifier, Column: yyDollar[3].identifier}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:828
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:832
		{
			yyVAL.expression = yyDollar[1].primary
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:836
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:840
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:844
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:848
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:852
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:856
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:860
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:864
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:868
		{
			yyVAL.expression = yyDollar[1].variable
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:872
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:876
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:880
		{
			yyVAL.expression = Parentheses{Expr: yyDollar[2].expression}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:886
		{
			yyVAL.expression = RowValue{BaseExpr: NewBaseExpr(yyDollar[1].token), Value: ValueList{Values: yyDollar[2].expressions}}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:890
		{
			yyVAL.expression = RowValue{BaseExpr: yyDollar[1].expression.GetBaseExpr(), Value: yyDollar[1].expression}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:896
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:900
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:906
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:910
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 153:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:916
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token}
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:920
		{
			yyVAL.expression = OrderItem{Value: yyDollar[1].expression, Direction: yyDollar[2].token, Nulls: yyDollar[3].token.Literal, Position: yyDollar[4].token}
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:926
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:930
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:936
		{
			yyVAL.token = Token{}
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:940
		{
			yyVAL.token = yyDollar[1].token
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:944
		{
			yyVAL.token = yyDollar[1].token
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:950
		{
			yyVAL.token = yyDollar[1].token
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:954
		{
			yyVAL.token = yyDollar[1].token
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:960
		{
			yyVAL.expression = Subquery{BaseExpr: NewBaseExpr(yyDollar[1].token), Query: yyDollar[2].expression.(SelectQuery)}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:966
		{
			var item1 []Expression
			var item2 []Expression

			c1, ok := yyDollar[1].expression.(Concat)
			if ok {
				item1 = c1.Items
			} else {
				item1 = []Expression{yyDollar[1].expression}
			}

			c2, ok := yyDollar[3].expression.(Concat)
			if ok {
				item2 = c2.Items
			} else {
				item2 = []Expression{yyDollar[3].expression}
			}

			yyVAL.expression = Concat{Items: append(item1, item2...)}
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:989
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:993
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, RHS: yyDollar[3].expression}
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:997
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1001
		{
			yyVAL.expression = Comparison{LHS: yyDollar[1].expression, Operator: "=", RHS: yyDollar[3].expression}
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1005
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].ternary, Negation: yyDollar[3].token}
		}
	case 169:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1009
		{
			yyVAL.expression = Is{Is: yyDollar[2].token.Literal, LHS: yyDollar[1].expression, RHS: yyDollar[4].null, Negation: yyDollar[3].token}
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1013
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 171:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1017
		{
			yyVAL.expression = Between{Between: yyDollar[3].token.Literal, And: yyDollar[5].token.Literal, LHS: yyDollar[1].expression, Low: yyDollar[4].expression, High: yyDollar[6].expression, Negation: yyDollar[2].token}
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1021
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1025
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: RowValueList{RowValues: yyDollar[5].expressions}, Negation: yyDollar[2].token}
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1029
		{
			yyVAL.expression = In{In: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Values: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1033
		{
			yyVAL.expression = Like{Like: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Pattern: yyDollar[4].expression, Negation: yyDollar[2].token}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1037
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1041
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1045
		{
			yyVAL.expression = Any{Any: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 179:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1049
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1053
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: RowValueList{RowValues: yyDollar[5].expressions}}
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1057
		{
			yyVAL.expression = All{All: yyDollar[3].token.Literal, LHS: yyDollar[1].expression, Operator: yyDollar[2].token.Literal, Values: yyDollar[4].expression}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1061
		{
			yyVAL.expression = Exists{Exists: yyDollar[1].token.Literal, Query: yyDollar[2].expression.(Subquery)}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1067
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('+'), RHS: yyDollar[3].expression}
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1071
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('-'), RHS: yyDollar[3].expression}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1075
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('*'), RHS: yyDollar[3].expression}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1079
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('/'), RHS: yyDollar[3].expression}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1083
		{
			yyVAL.expression = Arithmetic{LHS: yyDollar[1].expression, Operator: int('%'), RHS: yyDollar[3].expression}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1087
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1091
		{
			yyVAL.expression = UnaryArithmetic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1097
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1101
		{
			yyVAL.expression = Logic{LHS: yyDollar[1].expression, Operator: yyDollar[2].token, RHS: yyDollar[3].expression}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1105
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 193:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1109
		{
			yyVAL.expression = UnaryLogic{Operand: yyDollar[2].expression, Operator: yyDollar[1].token}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1115
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal}
		}
	case 195:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1119
		{
			yyVAL.expression = Function{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1125
		{
			yyVAL.expression = AggregateFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Option: yyDollar[3].expression.(AggregateOption)}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1129
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1135
		{
			yyVAL.expression = AggregateOption{Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}}}
		}
	case 199:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1139
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{AllColumns{BaseExpr: NewBaseExpr(yyDollar[2].token)}}}
		}
	case 200:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1143
		{
			yyVAL.expression = AggregateOption{Distinct: yyDollar[1].token, Args: []Expression{yyDollar[2].expression}}
		}
	case 201:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1149
		{
			orderBy := OrderByClause{OrderBy: yyDollar[4].token.Literal + " " + yyDollar[5].token.Literal, Items: yyDollar[6].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: orderBy}
		}
	case 202:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1154
		{
			orderBy := OrderByClause{OrderBy: yyDollar[5].token.Literal + " " + yyDollar[6].token.Literal, Items: yyDollar[7].expressions}
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: orderBy}
		}
	case 203:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1159
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Args: []Expression{yyDollar[3].expression}}, OrderBy: yyDollar[4].expression, SeparatorLit: yyDollar[5].token.Literal, Separator: yyDollar[6].token.Literal}
		}
	case 204:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1163
		{
			yyVAL.expression = GroupConcat{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), GroupConcat: yyDollar[1].identifier.Literal, Option: AggregateOption{Distinct: yyDollar[3].token, Args: []Expression{yyDollar[4].expression}}, OrderBy: yyDollar[5].expression, SeparatorLit: yyDollar[6].token.Literal, Separator: yyDollar[7].token.Literal}
		}
	case 205:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1169
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Over: yyDollar[4].token.Literal, AnalyticClause: yyDollar[6].expression.(AnalyticClause)}
		}
	case 206:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1173
		{
			yyVAL.expression = AnalyticFunction{BaseExpr: NewBaseExprFromIdentifier(yyDollar[1].identifier), Name: yyDollar[1].identifier.Literal, Args: yyDollar[3].expressions, Over: yyDollar[5].token.Literal, AnalyticClause: yyDollar[7].expression.(AnalyticClause)}
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1179
		{
			yyVAL.expression = AnalyticClause{Partition: yyDollar[1].expression, OrderByClause: yyDollar[2].expression}
		}
	case 208:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1185
		{
			yyVAL.expression = nil
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1189
		{
			yyVAL.expression = Partition{PartitionBy: yyDollar[1].token.Literal + " " + yyDollar[2].token.Literal, Values: yyDollar[3].expressions}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1195
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier}
		}
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1199
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, Alias: yyDollar[2].identifier}
		}
	case 212:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1203
		{
			yyVAL.expression = Table{Object: yyDollar[1].identifier, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1209
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1213
		{
			yyVAL.expression = Stdin{BaseExpr: NewBaseExpr(yyDollar[1].token), Stdin: yyDollar[1].token.Literal}
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1219
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1223
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1227
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, Alias: yyDollar[2].identifier}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1231
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1235
		{
			yyVAL.expression = Table{Object: yyDollar[1].expression}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1239
		{
			yyVAL.expression = Table{Object: Dual{Dual: yyDollar[1].token.Literal}}
		}
	case 221:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1245
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: yyDollar[5].expression}
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1249
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[3].token, Condition: nil}
		}
	case 223:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1253
		{
			yyVAL.expression = Join{Join: yyDollar[4].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[5].expression.(Table), Natural: Token{}, JoinType: yyDollar[3].token, Direction: yyDollar[2].token, Condition: yyDollar[6].expression}
		}
	case 224:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1257
		{
			yyVAL.expression = Join{Join: yyDollar[5].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[6].expression.(Table), Natural: yyDollar[2].token, JoinType: yyDollar[4].token, Direction: yyDollar[3].token, Condition: nil}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1261
		{
			yyVAL.expression = Join{Join: yyDollar[3].token.Literal, Table: yyDollar[1].expression.(Table), JoinTable: yyDollar[4].expression.(Table), Natural: Token{}, JoinType: yyDollar[2].token, Condition: nil}
		}
	case 226:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1267
		{
			yyVAL.expression = nil
		}
	case 227:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1271
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, On: yyDollar[2].expression}
		}
	case 228:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1275
		{
			yyVAL.expression = JoinCondition{Literal: yyDollar[1].token.Literal, Using: yyDollar[3].expressions}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1281
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1285
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1289
		{
			yyVAL.expression = AllColumns{BaseExpr: NewBaseExpr(yyDollar[1].token)}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1295
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression}
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1299
		{
			yyVAL.expression = Field{Object: yyDollar[1].expression, As: yyDollar[2].token.Literal, Alias: yyDollar[3].identifier}
		}
	case 234:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1305
		{
			yyVAL.expression = Case{Case: yyDollar[1].token.Literal, End: yyDollar[5].token.Literal, Value: yyDollar[2].expression, When: yyDollar[3].expressions, Else: yyDollar[4].expression}
		}
	case 235:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1311
		{
			yyVAL.expression = nil
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1315
		{
			yyVAL.expression = yyDollar[1].expression
		}
	case 237:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1321
		{
			yyVAL.expressions = []Expression{CaseWhen{When: yyDollar[1].token.Literal, Then: yyDollar[3].token.Literal, Condition: yyDollar[2].expression, Result: yyDollar[4].expression}}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1325
		{
			yyVAL.expressions = append(yyDollar[1].expressions, yyDollar[2].expressions...)
		}
	case 239:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1331
		{
			yyVAL.expression = nil
		}
	case 240:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1335
		{
			yyVAL.expression = CaseElse{Else: yyDollar[1].token.Literal, Result: yyDollar[2].expression}
		}
	case 241:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1341
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 242:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1345
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1351
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1355
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1361
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1365
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 247:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1371
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1375
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 249:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1381
		{
			yyVAL.expressions = []Expression{yyDollar[1].identifier}
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1385
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].identifier}, yyDollar[3].expressions...)
		}
	case 251:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1391
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 252:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1395
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1401
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Values: yyDollar[5].token.Literal, ValuesList: yyDollar[6].expressions}
		}
	case 254:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line parser.y:1405
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Values: yyDollar[8].token.Literal, ValuesList: yyDollar[9].expressions}
		}
	case 255:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1409
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Query: yyDollar[5].expression.(SelectQuery)}
		}
	case 256:
		yyDollar = yyS[yypt-8 : yypt+1]
		//line parser.y:1413
		{
			yyVAL.expression = InsertQuery{WithClause: yyDollar[1].expression, Insert: yyDollar[2].token.Literal, Into: yyDollar[3].token.Literal, Table: yyDollar[4].identifier, Fields: yyDollar[6].expressions, Query: yyDollar[8].expression.(SelectQuery)}
		}
	case 257:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line parser.y:1419
		{
			yyVAL.expression = UpdateQuery{WithClause: yyDollar[1].expression, Update: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, Set: yyDollar[4].token.Literal, SetList: yyDollar[5].expressions, FromClause: yyDollar[6].expression, WhereClause: yyDollar[7].expression}
		}
	case 258:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1425
		{
			yyVAL.expression = UpdateSet{Field: yyDollar[1].expression.(FieldReference), Value: yyDollar[3].expression}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1431
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1435
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 261:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line parser.y:1441
		{
			from := FromClause{From: yyDollar[3].token.Literal, Tables: yyDollar[4].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, FromClause: from, WhereClause: yyDollar[5].expression}
		}
	case 262:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line parser.y:1446
		{
			from := FromClause{From: yyDollar[4].token.Literal, Tables: yyDollar[5].expressions}
			yyVAL.expression = DeleteQuery{BaseExpr: NewBaseExpr(yyDollar[2].token), WithClause: yyDollar[1].expression, Delete: yyDollar[2].token.Literal, Tables: yyDollar[3].expressions, FromClause: from, WhereClause: yyDollar[6].expression}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1453
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 264:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1457
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 265:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1463
		{
			yyVAL.procexpr = nil
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1467
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1473
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 268:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1477
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 269:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1483
		{
			yyVAL.procexpr = nil
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1487
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 271:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1493
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1497
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 273:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1503
		{
			yyVAL.procexpr = nil
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1507
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line parser.y:1513
		{
			yyVAL.procexprs = []ProcExpr{ElseIf{Condition: yyDollar[2].expression, Statements: yyDollar[4].program}}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1517
		{
			yyVAL.procexprs = append(yyDollar[1].procexprs, yyDollar[2].procexprs...)
		}
	case 277:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1523
		{
			yyVAL.procexpr = nil
		}
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line parser.y:1527
		{
			yyVAL.procexpr = Else{Statements: yyDollar[2].program}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1533
		{
			yyVAL.identifier = Identifier{BaseExpr: NewBaseExpr(yyDollar[1].token), Literal: yyDollar[1].token.Literal, Quoted: yyDollar[1].token.Quoted}
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1539
		{
			yyVAL.text = NewString(yyDollar[1].token.Literal)
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1545
		{
			yyVAL.integer = NewIntegerFromString(yyDollar[1].token.Literal)
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1551
		{
			yyVAL.float = NewFloatFromString(yyDollar[1].token.Literal)
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1557
		{
			yyVAL.ternary = NewTernaryFromString(yyDollar[1].token.Literal)
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1563
		{
			yyVAL.datetime = NewDatetimeFromString(yyDollar[1].token.Literal)
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1569
		{
			yyVAL.null = NewNullFromString(yyDollar[1].token.Literal)
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1575
		{
			yyVAL.variable = Variable{BaseExpr: NewBaseExpr(yyDollar[1].token), Name: yyDollar[1].token.Literal}
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1581
		{
			yyVAL.variables = []Variable{yyDollar[1].variable}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1585
		{
			yyVAL.variables = append([]Variable{yyDollar[1].variable}, yyDollar[3].variables...)
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1591
		{
			yyVAL.expression = VariableSubstitution{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1597
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1601
		{
			yyVAL.expression = VariableAssignment{Variable: yyDollar[1].variable, Value: yyDollar[3].expression}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1607
		{
			yyVAL.expressions = []Expression{yyDollar[1].expression}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line parser.y:1611
		{
			yyVAL.expressions = append([]Expression{yyDollar[1].expression}, yyDollar[3].expressions...)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1617
		{
			yyVAL.token = Token{}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1621
		{
			yyVAL.token = yyDollar[1].token
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1627
		{
			yyVAL.token = Token{}
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1631
		{
			yyVAL.token = yyDollar[1].token
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1637
		{
			yyVAL.token = Token{}
		}
	case 299:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1641
		{
			yyVAL.token = yyDollar[1].token
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1647
		{
			yyVAL.token = Token{}
		}
	case 301:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1651
		{
			yyVAL.token = yyDollar[1].token
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1657
		{
			yyVAL.token = Token{}
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1661
		{
			yyVAL.token = yyDollar[1].token
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1665
		{
			yyVAL.token = yyDollar[1].token
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1669
		{
			yyVAL.token = yyDollar[1].token
		}
	case 306:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1675
		{
			yyVAL.token = Token{}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1679
		{
			yyVAL.token = yyDollar[1].token
		}
	case 308:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1685
		{
			yyVAL.token = Token{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1689
		{
			yyVAL.token = yyDollar[1].token
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1696
		{
			yyVAL.token = yyDollar[1].token
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1700
		{
			yyDollar[1].token.Token = COMPARISON_OP
			yyVAL.token = yyDollar[1].token
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line parser.y:1707
		{
			yyVAL.token = Token{}
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line parser.y:1711
		{
			yyVAL.token = yyDollar[1].token
		}
	}
	goto yystack /* stack new state and value */
}
